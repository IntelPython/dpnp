Search.setIndex({"docnames": ["dpctl", "dpnp_backend_api", "index", "overview", "quick_start_guide", "reference/binary", "reference/comparison", "reference/creation", "reference/dtype", "reference/dtypes_table", "reference/fft", "reference/generated/dpnp.abs", "reference/generated/dpnp.absolute", "reference/generated/dpnp.add", "reference/generated/dpnp.all", "reference/generated/dpnp.allclose", "reference/generated/dpnp.amax", "reference/generated/dpnp.amin", "reference/generated/dpnp.angle", "reference/generated/dpnp.any", "reference/generated/dpnp.arange", "reference/generated/dpnp.arccos", "reference/generated/dpnp.arccosh", "reference/generated/dpnp.arcsin", "reference/generated/dpnp.arcsinh", "reference/generated/dpnp.arctan", "reference/generated/dpnp.arctan2", "reference/generated/dpnp.arctanh", "reference/generated/dpnp.argmax", "reference/generated/dpnp.argmin", "reference/generated/dpnp.argsort", "reference/generated/dpnp.around", "reference/generated/dpnp.array", "reference/generated/dpnp.array_equal", "reference/generated/dpnp.asanyarray", "reference/generated/dpnp.asarray", "reference/generated/dpnp.ascontiguousarray", "reference/generated/dpnp.asfarray", "reference/generated/dpnp.asfortranarray", "reference/generated/dpnp.asnumpy", "reference/generated/dpnp.astype", "reference/generated/dpnp.atleast_1d", "reference/generated/dpnp.atleast_2d", "reference/generated/dpnp.atleast_3d", "reference/generated/dpnp.average", "reference/generated/dpnp.bincount", "reference/generated/dpnp.bitwise_and", "reference/generated/dpnp.bitwise_not", "reference/generated/dpnp.bitwise_or", "reference/generated/dpnp.bitwise_xor", "reference/generated/dpnp.broadcast_arrays", "reference/generated/dpnp.broadcast_to", "reference/generated/dpnp.can_cast", "reference/generated/dpnp.cbrt", "reference/generated/dpnp.ceil", "reference/generated/dpnp.choose", "reference/generated/dpnp.clip", "reference/generated/dpnp.column_stack", "reference/generated/dpnp.concatenate", "reference/generated/dpnp.conj", "reference/generated/dpnp.conjugate", "reference/generated/dpnp.convolve", "reference/generated/dpnp.copy", "reference/generated/dpnp.copysign", "reference/generated/dpnp.copyto", "reference/generated/dpnp.correlate", "reference/generated/dpnp.cos", "reference/generated/dpnp.cosh", "reference/generated/dpnp.count_nonzero", "reference/generated/dpnp.cov", "reference/generated/dpnp.cross", "reference/generated/dpnp.cumprod", "reference/generated/dpnp.cumsum", "reference/generated/dpnp.deg2rad", "reference/generated/dpnp.degrees", "reference/generated/dpnp.diag", "reference/generated/dpnp.diag_indices", "reference/generated/dpnp.diag_indices_from", "reference/generated/dpnp.diagflat", "reference/generated/dpnp.diagonal", "reference/generated/dpnp.diff", "reference/generated/dpnp.divide", "reference/generated/dpnp.dot", "reference/generated/dpnp.dpnp_array.dpnp_array", "reference/generated/dpnp.dstack", "reference/generated/dpnp.dtype", "reference/generated/dpnp.ediff1d", "reference/generated/dpnp.einsum", "reference/generated/dpnp.einsum_path", "reference/generated/dpnp.empty", "reference/generated/dpnp.empty_like", "reference/generated/dpnp.equal", "reference/generated/dpnp.erf", "reference/generated/dpnp.exp", "reference/generated/dpnp.exp2", "reference/generated/dpnp.expand_dims", "reference/generated/dpnp.expm1", "reference/generated/dpnp.extract", "reference/generated/dpnp.eye", "reference/generated/dpnp.fabs", "reference/generated/dpnp.fft.fft", "reference/generated/dpnp.fft.fft2", "reference/generated/dpnp.fft.fftfreq", "reference/generated/dpnp.fft.fftn", "reference/generated/dpnp.fft.fftshift", "reference/generated/dpnp.fft.hfft", "reference/generated/dpnp.fft.ifft", "reference/generated/dpnp.fft.ifft2", "reference/generated/dpnp.fft.ifftn", "reference/generated/dpnp.fft.ifftshift", "reference/generated/dpnp.fft.ihfft", "reference/generated/dpnp.fft.irfft", "reference/generated/dpnp.fft.irfft2", "reference/generated/dpnp.fft.irfftn", "reference/generated/dpnp.fft.rfft", "reference/generated/dpnp.fft.rfft2", "reference/generated/dpnp.fft.rfftfreq", "reference/generated/dpnp.fft.rfftn", "reference/generated/dpnp.fill_diagonal", "reference/generated/dpnp.finfo", "reference/generated/dpnp.flatiter", "reference/generated/dpnp.flip", "reference/generated/dpnp.fliplr", "reference/generated/dpnp.flipud", "reference/generated/dpnp.floor", "reference/generated/dpnp.floor_divide", "reference/generated/dpnp.fmax", "reference/generated/dpnp.fmin", "reference/generated/dpnp.fmod", "reference/generated/dpnp.from_dlpack", "reference/generated/dpnp.frombuffer", "reference/generated/dpnp.fromfile", "reference/generated/dpnp.fromfunction", "reference/generated/dpnp.fromiter", "reference/generated/dpnp.fromstring", "reference/generated/dpnp.full", "reference/generated/dpnp.full_like", "reference/generated/dpnp.geomspace", "reference/generated/dpnp.get_include", "reference/generated/dpnp.gradient", "reference/generated/dpnp.greater", "reference/generated/dpnp.greater_equal", "reference/generated/dpnp.histogram", "reference/generated/dpnp.hstack", "reference/generated/dpnp.hypot", "reference/generated/dpnp.identity", "reference/generated/dpnp.iinfo", "reference/generated/dpnp.imag", "reference/generated/dpnp.indices", "reference/generated/dpnp.inner", "reference/generated/dpnp.invert", "reference/generated/dpnp.isclose", "reference/generated/dpnp.isfinite", "reference/generated/dpnp.isinf", "reference/generated/dpnp.isnan", "reference/generated/dpnp.isscalar", "reference/generated/dpnp.issubdtype", "reference/generated/dpnp.issubsctype", "reference/generated/dpnp.kron", "reference/generated/dpnp.left_shift", "reference/generated/dpnp.less", "reference/generated/dpnp.less_equal", "reference/generated/dpnp.linalg.cholesky", "reference/generated/dpnp.linalg.cond", "reference/generated/dpnp.linalg.det", "reference/generated/dpnp.linalg.eig", "reference/generated/dpnp.linalg.eigh", "reference/generated/dpnp.linalg.eigvals", "reference/generated/dpnp.linalg.eigvalsh", "reference/generated/dpnp.linalg.inv", "reference/generated/dpnp.linalg.matrix_power", "reference/generated/dpnp.linalg.matrix_rank", "reference/generated/dpnp.linalg.multi_dot", "reference/generated/dpnp.linalg.norm", "reference/generated/dpnp.linalg.pinv", "reference/generated/dpnp.linalg.qr", "reference/generated/dpnp.linalg.slogdet", "reference/generated/dpnp.linalg.solve", "reference/generated/dpnp.linalg.svd", "reference/generated/dpnp.linalg.tensorinv", "reference/generated/dpnp.linalg.tensorsolve", "reference/generated/dpnp.linspace", "reference/generated/dpnp.loadtxt", "reference/generated/dpnp.log", "reference/generated/dpnp.log10", "reference/generated/dpnp.log1p", "reference/generated/dpnp.log2", "reference/generated/dpnp.logaddexp", "reference/generated/dpnp.logical_and", "reference/generated/dpnp.logical_not", "reference/generated/dpnp.logical_or", "reference/generated/dpnp.logical_xor", "reference/generated/dpnp.logspace", "reference/generated/dpnp.logsumexp", "reference/generated/dpnp.matmul", "reference/generated/dpnp.max", "reference/generated/dpnp.maximum", "reference/generated/dpnp.mean", "reference/generated/dpnp.median", "reference/generated/dpnp.meshgrid", "reference/generated/dpnp.mgrid", "reference/generated/dpnp.min", "reference/generated/dpnp.minimum", "reference/generated/dpnp.mod", "reference/generated/dpnp.modf", "reference/generated/dpnp.moveaxis", "reference/generated/dpnp.multiply", "reference/generated/dpnp.nanargmax", "reference/generated/dpnp.nanargmin", "reference/generated/dpnp.nancumprod", "reference/generated/dpnp.nancumsum", "reference/generated/dpnp.nanmax", "reference/generated/dpnp.nanmean", "reference/generated/dpnp.nanmin", "reference/generated/dpnp.nanprod", "reference/generated/dpnp.nanstd", "reference/generated/dpnp.nansum", "reference/generated/dpnp.nanvar", "reference/generated/dpnp.ndarray", "reference/generated/dpnp.ndarray.T", "reference/generated/dpnp.ndarray.__abs__", "reference/generated/dpnp.ndarray.__add__", "reference/generated/dpnp.ndarray.__and__", "reference/generated/dpnp.ndarray.__complex__", "reference/generated/dpnp.ndarray.__copy__", "reference/generated/dpnp.ndarray.__eq__", "reference/generated/dpnp.ndarray.__float__", "reference/generated/dpnp.ndarray.__floordiv__", "reference/generated/dpnp.ndarray.__ge__", "reference/generated/dpnp.ndarray.__getitem__", "reference/generated/dpnp.ndarray.__gt__", "reference/generated/dpnp.ndarray.__iadd__", "reference/generated/dpnp.ndarray.__iand__", "reference/generated/dpnp.ndarray.__ifloordiv__", "reference/generated/dpnp.ndarray.__ilshift__", "reference/generated/dpnp.ndarray.__imod__", "reference/generated/dpnp.ndarray.__imul__", "reference/generated/dpnp.ndarray.__int__", "reference/generated/dpnp.ndarray.__invert__", "reference/generated/dpnp.ndarray.__ior__", "reference/generated/dpnp.ndarray.__ipow__", "reference/generated/dpnp.ndarray.__irshift__", "reference/generated/dpnp.ndarray.__isub__", "reference/generated/dpnp.ndarray.__itruediv__", "reference/generated/dpnp.ndarray.__ixor__", "reference/generated/dpnp.ndarray.__le__", "reference/generated/dpnp.ndarray.__len__", "reference/generated/dpnp.ndarray.__lshift__", "reference/generated/dpnp.ndarray.__lt__", "reference/generated/dpnp.ndarray.__mod__", "reference/generated/dpnp.ndarray.__mul__", "reference/generated/dpnp.ndarray.__ne__", "reference/generated/dpnp.ndarray.__neg__", "reference/generated/dpnp.ndarray.__new__", "reference/generated/dpnp.ndarray.__or__", "reference/generated/dpnp.ndarray.__pos__", "reference/generated/dpnp.ndarray.__pow__", "reference/generated/dpnp.ndarray.__repr__", "reference/generated/dpnp.ndarray.__rshift__", "reference/generated/dpnp.ndarray.__setitem__", "reference/generated/dpnp.ndarray.__str__", "reference/generated/dpnp.ndarray.__sub__", "reference/generated/dpnp.ndarray.__truediv__", "reference/generated/dpnp.ndarray.__xor__", "reference/generated/dpnp.ndarray.all", "reference/generated/dpnp.ndarray.any", "reference/generated/dpnp.ndarray.argmax", "reference/generated/dpnp.ndarray.argmin", "reference/generated/dpnp.ndarray.argsort", "reference/generated/dpnp.ndarray.astype", "reference/generated/dpnp.ndarray.choose", "reference/generated/dpnp.ndarray.clip", "reference/generated/dpnp.ndarray.conj", "reference/generated/dpnp.ndarray.conjugate", "reference/generated/dpnp.ndarray.copy", "reference/generated/dpnp.ndarray.cumsum", "reference/generated/dpnp.ndarray.diagonal", "reference/generated/dpnp.ndarray.dtype", "reference/generated/dpnp.ndarray.fill", "reference/generated/dpnp.ndarray.flags", "reference/generated/dpnp.ndarray.flat", "reference/generated/dpnp.ndarray.flatten", "reference/generated/dpnp.ndarray.imag", "reference/generated/dpnp.ndarray.item", "reference/generated/dpnp.ndarray.itemsize", "reference/generated/dpnp.ndarray.max", "reference/generated/dpnp.ndarray.mean", "reference/generated/dpnp.ndarray.min", "reference/generated/dpnp.ndarray.nbytes", "reference/generated/dpnp.ndarray.ndim", "reference/generated/dpnp.ndarray.nonzero", "reference/generated/dpnp.ndarray.partition", "reference/generated/dpnp.ndarray.prod", "reference/generated/dpnp.ndarray.put", "reference/generated/dpnp.ndarray.ravel", "reference/generated/dpnp.ndarray.real", "reference/generated/dpnp.ndarray.repeat", "reference/generated/dpnp.ndarray.reshape", "reference/generated/dpnp.ndarray.round", "reference/generated/dpnp.ndarray.searchsorted", "reference/generated/dpnp.ndarray.shape", "reference/generated/dpnp.ndarray.size", "reference/generated/dpnp.ndarray.sort", "reference/generated/dpnp.ndarray.squeeze", "reference/generated/dpnp.ndarray.std", "reference/generated/dpnp.ndarray.strides", "reference/generated/dpnp.ndarray.sum", "reference/generated/dpnp.ndarray.swapaxes", "reference/generated/dpnp.ndarray.take", "reference/generated/dpnp.ndarray.transpose", "reference/generated/dpnp.ndarray.var", "reference/generated/dpnp.negative", "reference/generated/dpnp.nonzero", "reference/generated/dpnp.not_equal", "reference/generated/dpnp.ogrid", "reference/generated/dpnp.ones", "reference/generated/dpnp.ones_like", "reference/generated/dpnp.outer", "reference/generated/dpnp.partition", "reference/generated/dpnp.place", "reference/generated/dpnp.positive", "reference/generated/dpnp.power", "reference/generated/dpnp.prod", "reference/generated/dpnp.proj", "reference/generated/dpnp.ptp", "reference/generated/dpnp.put", "reference/generated/dpnp.put_along_axis", "reference/generated/dpnp.putmask", "reference/generated/dpnp.rad2deg", "reference/generated/dpnp.radians", "reference/generated/dpnp.random.RandomState", "reference/generated/dpnp.random.beta", "reference/generated/dpnp.random.binomial", "reference/generated/dpnp.random.bytes", "reference/generated/dpnp.random.chisquare", "reference/generated/dpnp.random.choice", "reference/generated/dpnp.random.dirichlet", "reference/generated/dpnp.random.exponential", "reference/generated/dpnp.random.f", "reference/generated/dpnp.random.gamma", "reference/generated/dpnp.random.geometric", "reference/generated/dpnp.random.gumbel", "reference/generated/dpnp.random.hypergeometric", "reference/generated/dpnp.random.laplace", "reference/generated/dpnp.random.logistic", "reference/generated/dpnp.random.lognormal", "reference/generated/dpnp.random.logseries", "reference/generated/dpnp.random.multinomial", "reference/generated/dpnp.random.multivariate_normal", "reference/generated/dpnp.random.negative_binomial", "reference/generated/dpnp.random.noncentral_chisquare", "reference/generated/dpnp.random.noncentral_f", "reference/generated/dpnp.random.normal", "reference/generated/dpnp.random.pareto", "reference/generated/dpnp.random.permutation", "reference/generated/dpnp.random.poisson", "reference/generated/dpnp.random.power", "reference/generated/dpnp.random.rand", "reference/generated/dpnp.random.randint", "reference/generated/dpnp.random.randn", "reference/generated/dpnp.random.random", "reference/generated/dpnp.random.random_integers", "reference/generated/dpnp.random.random_sample", "reference/generated/dpnp.random.ranf", "reference/generated/dpnp.random.rayleigh", "reference/generated/dpnp.random.sample", "reference/generated/dpnp.random.seed", "reference/generated/dpnp.random.shuffle", "reference/generated/dpnp.random.standard_cauchy", "reference/generated/dpnp.random.standard_exponential", "reference/generated/dpnp.random.standard_gamma", "reference/generated/dpnp.random.standard_normal", "reference/generated/dpnp.random.standard_t", "reference/generated/dpnp.random.triangular", "reference/generated/dpnp.random.uniform", "reference/generated/dpnp.random.vonmises", "reference/generated/dpnp.random.wald", "reference/generated/dpnp.random.weibull", "reference/generated/dpnp.random.zipf", "reference/generated/dpnp.ravel", "reference/generated/dpnp.real", "reference/generated/dpnp.reciprocal", "reference/generated/dpnp.reduce_hypot", "reference/generated/dpnp.remainder", "reference/generated/dpnp.repeat", "reference/generated/dpnp.reshape", "reference/generated/dpnp.result_type", "reference/generated/dpnp.right_shift", "reference/generated/dpnp.rint", "reference/generated/dpnp.roll", "reference/generated/dpnp.rollaxis", "reference/generated/dpnp.round", "reference/generated/dpnp.row_stack", "reference/generated/dpnp.rsqrt", "reference/generated/dpnp.searchsorted", "reference/generated/dpnp.select", "reference/generated/dpnp.shape", "reference/generated/dpnp.sign", "reference/generated/dpnp.signbit", "reference/generated/dpnp.sin", "reference/generated/dpnp.sinh", "reference/generated/dpnp.sort", "reference/generated/dpnp.sqrt", "reference/generated/dpnp.square", "reference/generated/dpnp.squeeze", "reference/generated/dpnp.stack", "reference/generated/dpnp.std", "reference/generated/dpnp.subtract", "reference/generated/dpnp.sum", "reference/generated/dpnp.swapaxes", "reference/generated/dpnp.take", "reference/generated/dpnp.take_along_axis", "reference/generated/dpnp.tan", "reference/generated/dpnp.tanh", "reference/generated/dpnp.tensordot", "reference/generated/dpnp.tile", "reference/generated/dpnp.trace", "reference/generated/dpnp.transpose", "reference/generated/dpnp.trapz", "reference/generated/dpnp.tri", "reference/generated/dpnp.tril", "reference/generated/dpnp.tril_indices", "reference/generated/dpnp.tril_indices_from", "reference/generated/dpnp.triu", "reference/generated/dpnp.triu_indices", "reference/generated/dpnp.triu_indices_from", "reference/generated/dpnp.true_divide", "reference/generated/dpnp.trunc", "reference/generated/dpnp.unique", "reference/generated/dpnp.unwrap", "reference/generated/dpnp.vander", "reference/generated/dpnp.var", "reference/generated/dpnp.vdot", "reference/generated/dpnp.vstack", "reference/generated/dpnp.where", "reference/generated/dpnp.zeros", "reference/generated/dpnp.zeros_like", "reference/index", "reference/indexing", "reference/linalg", "reference/logic", "reference/manipulation", "reference/math", "reference/misc", "reference/ndarray", "reference/pad", "reference/polynomials", "reference/random", "reference/routines", "reference/sorting", "reference/special", "reference/statistics", "reference/ufunc"], "filenames": ["dpctl.rst", "dpnp_backend_api.rst", "index.rst", "overview.rst", "quick_start_guide.rst", "reference/binary.rst", "reference/comparison.rst", "reference/creation.rst", "reference/dtype.rst", "reference/dtypes_table.rst", "reference/fft.rst", "reference/generated/dpnp.abs.rst", "reference/generated/dpnp.absolute.rst", "reference/generated/dpnp.add.rst", "reference/generated/dpnp.all.rst", "reference/generated/dpnp.allclose.rst", "reference/generated/dpnp.amax.rst", "reference/generated/dpnp.amin.rst", "reference/generated/dpnp.angle.rst", "reference/generated/dpnp.any.rst", "reference/generated/dpnp.arange.rst", "reference/generated/dpnp.arccos.rst", "reference/generated/dpnp.arccosh.rst", "reference/generated/dpnp.arcsin.rst", "reference/generated/dpnp.arcsinh.rst", "reference/generated/dpnp.arctan.rst", "reference/generated/dpnp.arctan2.rst", "reference/generated/dpnp.arctanh.rst", "reference/generated/dpnp.argmax.rst", "reference/generated/dpnp.argmin.rst", "reference/generated/dpnp.argsort.rst", "reference/generated/dpnp.around.rst", "reference/generated/dpnp.array.rst", "reference/generated/dpnp.array_equal.rst", "reference/generated/dpnp.asanyarray.rst", "reference/generated/dpnp.asarray.rst", "reference/generated/dpnp.ascontiguousarray.rst", "reference/generated/dpnp.asfarray.rst", "reference/generated/dpnp.asfortranarray.rst", "reference/generated/dpnp.asnumpy.rst", "reference/generated/dpnp.astype.rst", "reference/generated/dpnp.atleast_1d.rst", "reference/generated/dpnp.atleast_2d.rst", "reference/generated/dpnp.atleast_3d.rst", "reference/generated/dpnp.average.rst", "reference/generated/dpnp.bincount.rst", "reference/generated/dpnp.bitwise_and.rst", "reference/generated/dpnp.bitwise_not.rst", "reference/generated/dpnp.bitwise_or.rst", "reference/generated/dpnp.bitwise_xor.rst", "reference/generated/dpnp.broadcast_arrays.rst", "reference/generated/dpnp.broadcast_to.rst", "reference/generated/dpnp.can_cast.rst", "reference/generated/dpnp.cbrt.rst", "reference/generated/dpnp.ceil.rst", "reference/generated/dpnp.choose.rst", "reference/generated/dpnp.clip.rst", "reference/generated/dpnp.column_stack.rst", "reference/generated/dpnp.concatenate.rst", "reference/generated/dpnp.conj.rst", "reference/generated/dpnp.conjugate.rst", "reference/generated/dpnp.convolve.rst", "reference/generated/dpnp.copy.rst", "reference/generated/dpnp.copysign.rst", "reference/generated/dpnp.copyto.rst", "reference/generated/dpnp.correlate.rst", "reference/generated/dpnp.cos.rst", "reference/generated/dpnp.cosh.rst", "reference/generated/dpnp.count_nonzero.rst", "reference/generated/dpnp.cov.rst", "reference/generated/dpnp.cross.rst", "reference/generated/dpnp.cumprod.rst", "reference/generated/dpnp.cumsum.rst", "reference/generated/dpnp.deg2rad.rst", "reference/generated/dpnp.degrees.rst", "reference/generated/dpnp.diag.rst", "reference/generated/dpnp.diag_indices.rst", "reference/generated/dpnp.diag_indices_from.rst", "reference/generated/dpnp.diagflat.rst", "reference/generated/dpnp.diagonal.rst", "reference/generated/dpnp.diff.rst", "reference/generated/dpnp.divide.rst", "reference/generated/dpnp.dot.rst", "reference/generated/dpnp.dpnp_array.dpnp_array.rst", "reference/generated/dpnp.dstack.rst", "reference/generated/dpnp.dtype.rst", "reference/generated/dpnp.ediff1d.rst", "reference/generated/dpnp.einsum.rst", "reference/generated/dpnp.einsum_path.rst", "reference/generated/dpnp.empty.rst", "reference/generated/dpnp.empty_like.rst", "reference/generated/dpnp.equal.rst", "reference/generated/dpnp.erf.rst", "reference/generated/dpnp.exp.rst", "reference/generated/dpnp.exp2.rst", "reference/generated/dpnp.expand_dims.rst", "reference/generated/dpnp.expm1.rst", "reference/generated/dpnp.extract.rst", "reference/generated/dpnp.eye.rst", "reference/generated/dpnp.fabs.rst", "reference/generated/dpnp.fft.fft.rst", "reference/generated/dpnp.fft.fft2.rst", "reference/generated/dpnp.fft.fftfreq.rst", "reference/generated/dpnp.fft.fftn.rst", "reference/generated/dpnp.fft.fftshift.rst", "reference/generated/dpnp.fft.hfft.rst", "reference/generated/dpnp.fft.ifft.rst", "reference/generated/dpnp.fft.ifft2.rst", "reference/generated/dpnp.fft.ifftn.rst", "reference/generated/dpnp.fft.ifftshift.rst", "reference/generated/dpnp.fft.ihfft.rst", "reference/generated/dpnp.fft.irfft.rst", "reference/generated/dpnp.fft.irfft2.rst", "reference/generated/dpnp.fft.irfftn.rst", "reference/generated/dpnp.fft.rfft.rst", "reference/generated/dpnp.fft.rfft2.rst", "reference/generated/dpnp.fft.rfftfreq.rst", "reference/generated/dpnp.fft.rfftn.rst", "reference/generated/dpnp.fill_diagonal.rst", "reference/generated/dpnp.finfo.rst", "reference/generated/dpnp.flatiter.rst", "reference/generated/dpnp.flip.rst", "reference/generated/dpnp.fliplr.rst", "reference/generated/dpnp.flipud.rst", "reference/generated/dpnp.floor.rst", "reference/generated/dpnp.floor_divide.rst", "reference/generated/dpnp.fmax.rst", "reference/generated/dpnp.fmin.rst", "reference/generated/dpnp.fmod.rst", "reference/generated/dpnp.from_dlpack.rst", "reference/generated/dpnp.frombuffer.rst", "reference/generated/dpnp.fromfile.rst", "reference/generated/dpnp.fromfunction.rst", "reference/generated/dpnp.fromiter.rst", "reference/generated/dpnp.fromstring.rst", "reference/generated/dpnp.full.rst", "reference/generated/dpnp.full_like.rst", "reference/generated/dpnp.geomspace.rst", "reference/generated/dpnp.get_include.rst", "reference/generated/dpnp.gradient.rst", "reference/generated/dpnp.greater.rst", "reference/generated/dpnp.greater_equal.rst", "reference/generated/dpnp.histogram.rst", "reference/generated/dpnp.hstack.rst", "reference/generated/dpnp.hypot.rst", "reference/generated/dpnp.identity.rst", "reference/generated/dpnp.iinfo.rst", "reference/generated/dpnp.imag.rst", "reference/generated/dpnp.indices.rst", "reference/generated/dpnp.inner.rst", "reference/generated/dpnp.invert.rst", "reference/generated/dpnp.isclose.rst", "reference/generated/dpnp.isfinite.rst", "reference/generated/dpnp.isinf.rst", "reference/generated/dpnp.isnan.rst", "reference/generated/dpnp.isscalar.rst", "reference/generated/dpnp.issubdtype.rst", "reference/generated/dpnp.issubsctype.rst", "reference/generated/dpnp.kron.rst", "reference/generated/dpnp.left_shift.rst", "reference/generated/dpnp.less.rst", "reference/generated/dpnp.less_equal.rst", "reference/generated/dpnp.linalg.cholesky.rst", "reference/generated/dpnp.linalg.cond.rst", "reference/generated/dpnp.linalg.det.rst", "reference/generated/dpnp.linalg.eig.rst", "reference/generated/dpnp.linalg.eigh.rst", "reference/generated/dpnp.linalg.eigvals.rst", "reference/generated/dpnp.linalg.eigvalsh.rst", "reference/generated/dpnp.linalg.inv.rst", "reference/generated/dpnp.linalg.matrix_power.rst", "reference/generated/dpnp.linalg.matrix_rank.rst", "reference/generated/dpnp.linalg.multi_dot.rst", "reference/generated/dpnp.linalg.norm.rst", "reference/generated/dpnp.linalg.pinv.rst", "reference/generated/dpnp.linalg.qr.rst", "reference/generated/dpnp.linalg.slogdet.rst", "reference/generated/dpnp.linalg.solve.rst", "reference/generated/dpnp.linalg.svd.rst", "reference/generated/dpnp.linalg.tensorinv.rst", "reference/generated/dpnp.linalg.tensorsolve.rst", "reference/generated/dpnp.linspace.rst", "reference/generated/dpnp.loadtxt.rst", "reference/generated/dpnp.log.rst", "reference/generated/dpnp.log10.rst", "reference/generated/dpnp.log1p.rst", "reference/generated/dpnp.log2.rst", "reference/generated/dpnp.logaddexp.rst", "reference/generated/dpnp.logical_and.rst", "reference/generated/dpnp.logical_not.rst", "reference/generated/dpnp.logical_or.rst", "reference/generated/dpnp.logical_xor.rst", "reference/generated/dpnp.logspace.rst", "reference/generated/dpnp.logsumexp.rst", "reference/generated/dpnp.matmul.rst", "reference/generated/dpnp.max.rst", "reference/generated/dpnp.maximum.rst", "reference/generated/dpnp.mean.rst", "reference/generated/dpnp.median.rst", "reference/generated/dpnp.meshgrid.rst", "reference/generated/dpnp.mgrid.rst", "reference/generated/dpnp.min.rst", "reference/generated/dpnp.minimum.rst", "reference/generated/dpnp.mod.rst", "reference/generated/dpnp.modf.rst", "reference/generated/dpnp.moveaxis.rst", "reference/generated/dpnp.multiply.rst", "reference/generated/dpnp.nanargmax.rst", "reference/generated/dpnp.nanargmin.rst", "reference/generated/dpnp.nancumprod.rst", "reference/generated/dpnp.nancumsum.rst", "reference/generated/dpnp.nanmax.rst", "reference/generated/dpnp.nanmean.rst", "reference/generated/dpnp.nanmin.rst", "reference/generated/dpnp.nanprod.rst", "reference/generated/dpnp.nanstd.rst", "reference/generated/dpnp.nansum.rst", "reference/generated/dpnp.nanvar.rst", "reference/generated/dpnp.ndarray.rst", "reference/generated/dpnp.ndarray.T.rst", "reference/generated/dpnp.ndarray.__abs__.rst", "reference/generated/dpnp.ndarray.__add__.rst", "reference/generated/dpnp.ndarray.__and__.rst", "reference/generated/dpnp.ndarray.__complex__.rst", "reference/generated/dpnp.ndarray.__copy__.rst", "reference/generated/dpnp.ndarray.__eq__.rst", "reference/generated/dpnp.ndarray.__float__.rst", "reference/generated/dpnp.ndarray.__floordiv__.rst", "reference/generated/dpnp.ndarray.__ge__.rst", "reference/generated/dpnp.ndarray.__getitem__.rst", "reference/generated/dpnp.ndarray.__gt__.rst", "reference/generated/dpnp.ndarray.__iadd__.rst", "reference/generated/dpnp.ndarray.__iand__.rst", "reference/generated/dpnp.ndarray.__ifloordiv__.rst", "reference/generated/dpnp.ndarray.__ilshift__.rst", "reference/generated/dpnp.ndarray.__imod__.rst", "reference/generated/dpnp.ndarray.__imul__.rst", "reference/generated/dpnp.ndarray.__int__.rst", "reference/generated/dpnp.ndarray.__invert__.rst", "reference/generated/dpnp.ndarray.__ior__.rst", "reference/generated/dpnp.ndarray.__ipow__.rst", "reference/generated/dpnp.ndarray.__irshift__.rst", "reference/generated/dpnp.ndarray.__isub__.rst", "reference/generated/dpnp.ndarray.__itruediv__.rst", "reference/generated/dpnp.ndarray.__ixor__.rst", "reference/generated/dpnp.ndarray.__le__.rst", "reference/generated/dpnp.ndarray.__len__.rst", "reference/generated/dpnp.ndarray.__lshift__.rst", "reference/generated/dpnp.ndarray.__lt__.rst", "reference/generated/dpnp.ndarray.__mod__.rst", "reference/generated/dpnp.ndarray.__mul__.rst", "reference/generated/dpnp.ndarray.__ne__.rst", "reference/generated/dpnp.ndarray.__neg__.rst", "reference/generated/dpnp.ndarray.__new__.rst", "reference/generated/dpnp.ndarray.__or__.rst", "reference/generated/dpnp.ndarray.__pos__.rst", "reference/generated/dpnp.ndarray.__pow__.rst", "reference/generated/dpnp.ndarray.__repr__.rst", "reference/generated/dpnp.ndarray.__rshift__.rst", "reference/generated/dpnp.ndarray.__setitem__.rst", "reference/generated/dpnp.ndarray.__str__.rst", "reference/generated/dpnp.ndarray.__sub__.rst", "reference/generated/dpnp.ndarray.__truediv__.rst", "reference/generated/dpnp.ndarray.__xor__.rst", "reference/generated/dpnp.ndarray.all.rst", "reference/generated/dpnp.ndarray.any.rst", "reference/generated/dpnp.ndarray.argmax.rst", "reference/generated/dpnp.ndarray.argmin.rst", "reference/generated/dpnp.ndarray.argsort.rst", "reference/generated/dpnp.ndarray.astype.rst", "reference/generated/dpnp.ndarray.choose.rst", "reference/generated/dpnp.ndarray.clip.rst", "reference/generated/dpnp.ndarray.conj.rst", "reference/generated/dpnp.ndarray.conjugate.rst", "reference/generated/dpnp.ndarray.copy.rst", "reference/generated/dpnp.ndarray.cumsum.rst", "reference/generated/dpnp.ndarray.diagonal.rst", "reference/generated/dpnp.ndarray.dtype.rst", "reference/generated/dpnp.ndarray.fill.rst", "reference/generated/dpnp.ndarray.flags.rst", "reference/generated/dpnp.ndarray.flat.rst", "reference/generated/dpnp.ndarray.flatten.rst", "reference/generated/dpnp.ndarray.imag.rst", "reference/generated/dpnp.ndarray.item.rst", "reference/generated/dpnp.ndarray.itemsize.rst", "reference/generated/dpnp.ndarray.max.rst", "reference/generated/dpnp.ndarray.mean.rst", "reference/generated/dpnp.ndarray.min.rst", "reference/generated/dpnp.ndarray.nbytes.rst", "reference/generated/dpnp.ndarray.ndim.rst", "reference/generated/dpnp.ndarray.nonzero.rst", "reference/generated/dpnp.ndarray.partition.rst", "reference/generated/dpnp.ndarray.prod.rst", "reference/generated/dpnp.ndarray.put.rst", "reference/generated/dpnp.ndarray.ravel.rst", "reference/generated/dpnp.ndarray.real.rst", "reference/generated/dpnp.ndarray.repeat.rst", "reference/generated/dpnp.ndarray.reshape.rst", "reference/generated/dpnp.ndarray.round.rst", "reference/generated/dpnp.ndarray.searchsorted.rst", "reference/generated/dpnp.ndarray.shape.rst", "reference/generated/dpnp.ndarray.size.rst", "reference/generated/dpnp.ndarray.sort.rst", "reference/generated/dpnp.ndarray.squeeze.rst", "reference/generated/dpnp.ndarray.std.rst", "reference/generated/dpnp.ndarray.strides.rst", "reference/generated/dpnp.ndarray.sum.rst", "reference/generated/dpnp.ndarray.swapaxes.rst", "reference/generated/dpnp.ndarray.take.rst", "reference/generated/dpnp.ndarray.transpose.rst", "reference/generated/dpnp.ndarray.var.rst", "reference/generated/dpnp.negative.rst", "reference/generated/dpnp.nonzero.rst", "reference/generated/dpnp.not_equal.rst", "reference/generated/dpnp.ogrid.rst", "reference/generated/dpnp.ones.rst", "reference/generated/dpnp.ones_like.rst", "reference/generated/dpnp.outer.rst", "reference/generated/dpnp.partition.rst", "reference/generated/dpnp.place.rst", "reference/generated/dpnp.positive.rst", "reference/generated/dpnp.power.rst", "reference/generated/dpnp.prod.rst", "reference/generated/dpnp.proj.rst", "reference/generated/dpnp.ptp.rst", "reference/generated/dpnp.put.rst", "reference/generated/dpnp.put_along_axis.rst", "reference/generated/dpnp.putmask.rst", "reference/generated/dpnp.rad2deg.rst", "reference/generated/dpnp.radians.rst", "reference/generated/dpnp.random.RandomState.rst", "reference/generated/dpnp.random.beta.rst", "reference/generated/dpnp.random.binomial.rst", "reference/generated/dpnp.random.bytes.rst", "reference/generated/dpnp.random.chisquare.rst", "reference/generated/dpnp.random.choice.rst", "reference/generated/dpnp.random.dirichlet.rst", "reference/generated/dpnp.random.exponential.rst", "reference/generated/dpnp.random.f.rst", "reference/generated/dpnp.random.gamma.rst", "reference/generated/dpnp.random.geometric.rst", "reference/generated/dpnp.random.gumbel.rst", "reference/generated/dpnp.random.hypergeometric.rst", "reference/generated/dpnp.random.laplace.rst", "reference/generated/dpnp.random.logistic.rst", "reference/generated/dpnp.random.lognormal.rst", "reference/generated/dpnp.random.logseries.rst", "reference/generated/dpnp.random.multinomial.rst", "reference/generated/dpnp.random.multivariate_normal.rst", "reference/generated/dpnp.random.negative_binomial.rst", "reference/generated/dpnp.random.noncentral_chisquare.rst", "reference/generated/dpnp.random.noncentral_f.rst", "reference/generated/dpnp.random.normal.rst", "reference/generated/dpnp.random.pareto.rst", "reference/generated/dpnp.random.permutation.rst", "reference/generated/dpnp.random.poisson.rst", "reference/generated/dpnp.random.power.rst", "reference/generated/dpnp.random.rand.rst", "reference/generated/dpnp.random.randint.rst", "reference/generated/dpnp.random.randn.rst", "reference/generated/dpnp.random.random.rst", "reference/generated/dpnp.random.random_integers.rst", "reference/generated/dpnp.random.random_sample.rst", "reference/generated/dpnp.random.ranf.rst", "reference/generated/dpnp.random.rayleigh.rst", "reference/generated/dpnp.random.sample.rst", "reference/generated/dpnp.random.seed.rst", "reference/generated/dpnp.random.shuffle.rst", "reference/generated/dpnp.random.standard_cauchy.rst", "reference/generated/dpnp.random.standard_exponential.rst", "reference/generated/dpnp.random.standard_gamma.rst", "reference/generated/dpnp.random.standard_normal.rst", "reference/generated/dpnp.random.standard_t.rst", "reference/generated/dpnp.random.triangular.rst", "reference/generated/dpnp.random.uniform.rst", "reference/generated/dpnp.random.vonmises.rst", "reference/generated/dpnp.random.wald.rst", "reference/generated/dpnp.random.weibull.rst", "reference/generated/dpnp.random.zipf.rst", "reference/generated/dpnp.ravel.rst", "reference/generated/dpnp.real.rst", "reference/generated/dpnp.reciprocal.rst", "reference/generated/dpnp.reduce_hypot.rst", "reference/generated/dpnp.remainder.rst", "reference/generated/dpnp.repeat.rst", "reference/generated/dpnp.reshape.rst", "reference/generated/dpnp.result_type.rst", "reference/generated/dpnp.right_shift.rst", "reference/generated/dpnp.rint.rst", "reference/generated/dpnp.roll.rst", "reference/generated/dpnp.rollaxis.rst", "reference/generated/dpnp.round.rst", "reference/generated/dpnp.row_stack.rst", "reference/generated/dpnp.rsqrt.rst", "reference/generated/dpnp.searchsorted.rst", "reference/generated/dpnp.select.rst", "reference/generated/dpnp.shape.rst", "reference/generated/dpnp.sign.rst", "reference/generated/dpnp.signbit.rst", "reference/generated/dpnp.sin.rst", "reference/generated/dpnp.sinh.rst", "reference/generated/dpnp.sort.rst", "reference/generated/dpnp.sqrt.rst", "reference/generated/dpnp.square.rst", "reference/generated/dpnp.squeeze.rst", "reference/generated/dpnp.stack.rst", "reference/generated/dpnp.std.rst", "reference/generated/dpnp.subtract.rst", "reference/generated/dpnp.sum.rst", "reference/generated/dpnp.swapaxes.rst", "reference/generated/dpnp.take.rst", "reference/generated/dpnp.take_along_axis.rst", "reference/generated/dpnp.tan.rst", "reference/generated/dpnp.tanh.rst", "reference/generated/dpnp.tensordot.rst", "reference/generated/dpnp.tile.rst", "reference/generated/dpnp.trace.rst", "reference/generated/dpnp.transpose.rst", "reference/generated/dpnp.trapz.rst", "reference/generated/dpnp.tri.rst", "reference/generated/dpnp.tril.rst", "reference/generated/dpnp.tril_indices.rst", "reference/generated/dpnp.tril_indices_from.rst", "reference/generated/dpnp.triu.rst", "reference/generated/dpnp.triu_indices.rst", "reference/generated/dpnp.triu_indices_from.rst", "reference/generated/dpnp.true_divide.rst", "reference/generated/dpnp.trunc.rst", "reference/generated/dpnp.unique.rst", "reference/generated/dpnp.unwrap.rst", "reference/generated/dpnp.vander.rst", "reference/generated/dpnp.var.rst", "reference/generated/dpnp.vdot.rst", "reference/generated/dpnp.vstack.rst", "reference/generated/dpnp.where.rst", "reference/generated/dpnp.zeros.rst", "reference/generated/dpnp.zeros_like.rst", "reference/index.rst", "reference/indexing.rst", "reference/linalg.rst", "reference/logic.rst", "reference/manipulation.rst", "reference/math.rst", "reference/misc.rst", "reference/ndarray.rst", "reference/pad.rst", "reference/polynomials.rst", "reference/random.rst", "reference/routines.rst", "reference/sorting.rst", "reference/special.rst", "reference/statistics.rst", "reference/ufunc.rst"], "titles": ["Interplay with the Data Parallel Control Library", "C++ backend API Reference", "Data Parallel Extension for NumPy*", "Overview", "Quick Start Guide", "Binary Operations", "Comparison Table NumPy/ DPNP/ CuPy", "Array creation routines", "Data type routines", "Available array data types", "FFT Functions", "dpnp.abs", "dpnp.absolute", "dpnp.add", "dpnp.all", "dpnp.allclose", "dpnp.amax", "dpnp.amin", "dpnp.angle", "dpnp.any", "dpnp.arange", "dpnp.arccos", "dpnp.arccosh", "dpnp.arcsin", "dpnp.arcsinh", "dpnp.arctan", "dpnp.arctan2", "dpnp.arctanh", "dpnp.argmax", "dpnp.argmin", "dpnp.argsort", "dpnp.around", "dpnp.array", "dpnp.array_equal", "dpnp.asanyarray", "dpnp.asarray", "dpnp.ascontiguousarray", "dpnp.asfarray", "dpnp.asfortranarray", "dpnp.asnumpy", "dpnp.astype", "dpnp.atleast_1d", "dpnp.atleast_2d", "dpnp.atleast_3d", "dpnp.average", "dpnp.bincount", "dpnp.bitwise_and", "dpnp.bitwise_not", "dpnp.bitwise_or", "dpnp.bitwise_xor", "dpnp.broadcast_arrays", "dpnp.broadcast_to", "dpnp.can_cast", "dpnp.cbrt", "dpnp.ceil", "dpnp.choose", "dpnp.clip", "dpnp.column_stack", "dpnp.concatenate", "dpnp.conj", "dpnp.conjugate", "dpnp.convolve", "dpnp.copy", "dpnp.copysign", "dpnp.copyto", "dpnp.correlate", "dpnp.cos", "dpnp.cosh", "dpnp.count_nonzero", "dpnp.cov", "dpnp.cross", "dpnp.cumprod", "dpnp.cumsum", "dpnp.deg2rad", "dpnp.degrees", "dpnp.diag", "dpnp.diag_indices", "dpnp.diag_indices_from", "dpnp.diagflat", "dpnp.diagonal", "dpnp.diff", "dpnp.divide", "dpnp.dot", "dpnp.dpnp_array.dpnp_array", "dpnp.dstack", "dpnp.dtype", "dpnp.ediff1d", "dpnp.einsum", "dpnp.einsum_path", "dpnp.empty", "dpnp.empty_like", "dpnp.equal", "dpnp.erf", "dpnp.exp", "dpnp.exp2", "dpnp.expand_dims", "dpnp.expm1", "dpnp.extract", "dpnp.eye", "dpnp.fabs", "dpnp.fft.fft", "dpnp.fft.fft2", "dpnp.fft.fftfreq", "dpnp.fft.fftn", "dpnp.fft.fftshift", "dpnp.fft.hfft", "dpnp.fft.ifft", "dpnp.fft.ifft2", "dpnp.fft.ifftn", "dpnp.fft.ifftshift", "dpnp.fft.ihfft", "dpnp.fft.irfft", "dpnp.fft.irfft2", "dpnp.fft.irfftn", "dpnp.fft.rfft", "dpnp.fft.rfft2", "dpnp.fft.rfftfreq", "dpnp.fft.rfftn", "dpnp.fill_diagonal", "dpnp.finfo", "dpnp.flatiter", "dpnp.flip", "dpnp.fliplr", "dpnp.flipud", "dpnp.floor", "dpnp.floor_divide", "dpnp.fmax", "dpnp.fmin", "dpnp.fmod", "dpnp.from_dlpack", "dpnp.frombuffer", "dpnp.fromfile", "dpnp.fromfunction", "dpnp.fromiter", "dpnp.fromstring", "dpnp.full", "dpnp.full_like", "dpnp.geomspace", "dpnp.get_include", "dpnp.gradient", "dpnp.greater", "dpnp.greater_equal", "dpnp.histogram", "dpnp.hstack", "dpnp.hypot", "dpnp.identity", "dpnp.iinfo", "dpnp.imag", "dpnp.indices", "dpnp.inner", "dpnp.invert", "dpnp.isclose", "dpnp.isfinite", "dpnp.isinf", "dpnp.isnan", "dpnp.isscalar", "dpnp.issubdtype", "dpnp.issubsctype", "dpnp.kron", "dpnp.left_shift", "dpnp.less", "dpnp.less_equal", "dpnp.linalg.cholesky", "dpnp.linalg.cond", "dpnp.linalg.det", "dpnp.linalg.eig", "dpnp.linalg.eigh", "dpnp.linalg.eigvals", "dpnp.linalg.eigvalsh", "dpnp.linalg.inv", "dpnp.linalg.matrix_power", "dpnp.linalg.matrix_rank", "dpnp.linalg.multi_dot", "dpnp.linalg.norm", "dpnp.linalg.pinv", "dpnp.linalg.qr", "dpnp.linalg.slogdet", "dpnp.linalg.solve", "dpnp.linalg.svd", "dpnp.linalg.tensorinv", "dpnp.linalg.tensorsolve", "dpnp.linspace", "dpnp.loadtxt", "dpnp.log", "dpnp.log10", "dpnp.log1p", "dpnp.log2", "dpnp.logaddexp", "dpnp.logical_and", "dpnp.logical_not", "dpnp.logical_or", "dpnp.logical_xor", "dpnp.logspace", "dpnp.logsumexp", "dpnp.matmul", "dpnp.max", "dpnp.maximum", "dpnp.mean", "dpnp.median", "dpnp.meshgrid", "dpnp.mgrid", "dpnp.min", "dpnp.minimum", "dpnp.mod", "dpnp.modf", "dpnp.moveaxis", "dpnp.multiply", "dpnp.nanargmax", "dpnp.nanargmin", "dpnp.nancumprod", "dpnp.nancumsum", "dpnp.nanmax", "dpnp.nanmean", "dpnp.nanmin", "dpnp.nanprod", "dpnp.nanstd", "dpnp.nansum", "dpnp.nanvar", "dpnp.ndarray", "dpnp.ndarray.T", "dpnp.ndarray.__abs__", "dpnp.ndarray.__add__", "dpnp.ndarray.__and__", "dpnp.ndarray.__complex__", "dpnp.ndarray.__copy__", "dpnp.ndarray.__eq__", "dpnp.ndarray.__float__", "dpnp.ndarray.__floordiv__", "dpnp.ndarray.__ge__", "dpnp.ndarray.__getitem__", "dpnp.ndarray.__gt__", "dpnp.ndarray.__iadd__", "dpnp.ndarray.__iand__", "dpnp.ndarray.__ifloordiv__", "dpnp.ndarray.__ilshift__", "dpnp.ndarray.__imod__", "dpnp.ndarray.__imul__", "dpnp.ndarray.__int__", "dpnp.ndarray.__invert__", "dpnp.ndarray.__ior__", "dpnp.ndarray.__ipow__", "dpnp.ndarray.__irshift__", "dpnp.ndarray.__isub__", "dpnp.ndarray.__itruediv__", "dpnp.ndarray.__ixor__", "dpnp.ndarray.__le__", "dpnp.ndarray.__len__", "dpnp.ndarray.__lshift__", "dpnp.ndarray.__lt__", "dpnp.ndarray.__mod__", "dpnp.ndarray.__mul__", "dpnp.ndarray.__ne__", "dpnp.ndarray.__neg__", "dpnp.ndarray.__new__", "dpnp.ndarray.__or__", "dpnp.ndarray.__pos__", "dpnp.ndarray.__pow__", "dpnp.ndarray.__repr__", "dpnp.ndarray.__rshift__", "dpnp.ndarray.__setitem__", "dpnp.ndarray.__str__", "dpnp.ndarray.__sub__", "dpnp.ndarray.__truediv__", "dpnp.ndarray.__xor__", "dpnp.ndarray.all", "dpnp.ndarray.any", "dpnp.ndarray.argmax", "dpnp.ndarray.argmin", "dpnp.ndarray.argsort", "dpnp.ndarray.astype", "dpnp.ndarray.choose", "dpnp.ndarray.clip", "dpnp.ndarray.conj", "dpnp.ndarray.conjugate", "dpnp.ndarray.copy", "dpnp.ndarray.cumsum", "dpnp.ndarray.diagonal", "dpnp.ndarray.dtype", "dpnp.ndarray.fill", "dpnp.ndarray.flags", "dpnp.ndarray.flat", "dpnp.ndarray.flatten", "dpnp.ndarray.imag", "dpnp.ndarray.item", "dpnp.ndarray.itemsize", "dpnp.ndarray.max", "dpnp.ndarray.mean", "dpnp.ndarray.min", "dpnp.ndarray.nbytes", "dpnp.ndarray.ndim", "dpnp.ndarray.nonzero", "dpnp.ndarray.partition", "dpnp.ndarray.prod", "dpnp.ndarray.put", "dpnp.ndarray.ravel", "dpnp.ndarray.real", "dpnp.ndarray.repeat", "dpnp.ndarray.reshape", "dpnp.ndarray.round", "dpnp.ndarray.searchsorted", "dpnp.ndarray.shape", "dpnp.ndarray.size", "dpnp.ndarray.sort", "dpnp.ndarray.squeeze", "dpnp.ndarray.std", "dpnp.ndarray.strides", "dpnp.ndarray.sum", "dpnp.ndarray.swapaxes", "dpnp.ndarray.take", "dpnp.ndarray.transpose", "dpnp.ndarray.var", "dpnp.negative", "dpnp.nonzero", "dpnp.not_equal", "dpnp.ogrid", "dpnp.ones", "dpnp.ones_like", "dpnp.outer", "dpnp.partition", "dpnp.place", "dpnp.positive", "dpnp.power", "dpnp.prod", "dpnp.proj", "dpnp.ptp", "dpnp.put", "dpnp.put_along_axis", "dpnp.putmask", "dpnp.rad2deg", "dpnp.radians", "dpnp.random.RandomState", "dpnp.random.beta", "dpnp.random.binomial", "dpnp.random.bytes", "dpnp.random.chisquare", "dpnp.random.choice", "dpnp.random.dirichlet", "dpnp.random.exponential", "dpnp.random.f", "dpnp.random.gamma", "dpnp.random.geometric", "dpnp.random.gumbel", "dpnp.random.hypergeometric", "dpnp.random.laplace", "dpnp.random.logistic", "dpnp.random.lognormal", "dpnp.random.logseries", "dpnp.random.multinomial", "dpnp.random.multivariate_normal", "dpnp.random.negative_binomial", "dpnp.random.noncentral_chisquare", "dpnp.random.noncentral_f", "dpnp.random.normal", "dpnp.random.pareto", "dpnp.random.permutation", "dpnp.random.poisson", "dpnp.random.power", "dpnp.random.rand", "dpnp.random.randint", "dpnp.random.randn", "dpnp.random.random", "dpnp.random.random_integers", "dpnp.random.random_sample", "dpnp.random.ranf", "dpnp.random.rayleigh", "dpnp.random.sample", "dpnp.random.seed", "dpnp.random.shuffle", "dpnp.random.standard_cauchy", "dpnp.random.standard_exponential", "dpnp.random.standard_gamma", "dpnp.random.standard_normal", "dpnp.random.standard_t", "dpnp.random.triangular", "dpnp.random.uniform", "dpnp.random.vonmises", "dpnp.random.wald", "dpnp.random.weibull", "dpnp.random.zipf", "dpnp.ravel", "dpnp.real", "dpnp.reciprocal", "dpnp.reduce_hypot", "dpnp.remainder", "dpnp.repeat", "dpnp.reshape", "dpnp.result_type", "dpnp.right_shift", "dpnp.rint", "dpnp.roll", "dpnp.rollaxis", "dpnp.round", "dpnp.row_stack", "dpnp.rsqrt", "dpnp.searchsorted", "dpnp.select", "dpnp.shape", "dpnp.sign", "dpnp.signbit", "dpnp.sin", "dpnp.sinh", "dpnp.sort", "dpnp.sqrt", "dpnp.square", "dpnp.squeeze", "dpnp.stack", "dpnp.std", "dpnp.subtract", "dpnp.sum", "dpnp.swapaxes", "dpnp.take", "dpnp.take_along_axis", "dpnp.tan", "dpnp.tanh", "dpnp.tensordot", "dpnp.tile", "dpnp.trace", "dpnp.transpose", "dpnp.trapz", "dpnp.tri", "dpnp.tril", "dpnp.tril_indices", "dpnp.tril_indices_from", "dpnp.triu", "dpnp.triu_indices", "dpnp.triu_indices_from", "dpnp.true_divide", "dpnp.trunc", "dpnp.unique", "dpnp.unwrap", "dpnp.vander", "dpnp.var", "dpnp.vdot", "dpnp.vstack", "dpnp.where", "dpnp.zeros", "dpnp.zeros_like", "API Reference", "Array Indexing Routines", "Linear Algebra", "Logic Functions", "Array Manipulation Routines", "Mathematical Functions", "Miscellaneous routines", "Multi-Dimensional Array (ndarray)", "Padding", "Polynomials", "Random Sampling (<code class=\"docutils literal notranslate\"><span class=\"pre\">dpnp.random</span></code>)", "Routines", "Sorting, Searching, and Counting", "Special Functions", "Statistical Functions", "Universal Functions (ufunc)"], "terms": {"provid": [0, 6, 28, 29, 58, 64, 83, 95, 133, 143, 193, 195, 201, 207, 208, 211, 213, 330, 358, 361, 382, 392, 405, 410, 433, 434, 452], "api": [0, 2, 3, 6, 20, 32, 34, 35, 36, 37, 38, 62, 75, 78, 85, 89, 90, 98, 130, 131, 132, 133, 134, 135, 136, 137, 145, 148, 181, 182, 192, 200, 314, 315, 316, 330, 352, 357, 358, 359, 360, 361, 362, 363, 365, 366, 371, 374, 419, 430, 435, 436], "manag": 0, "specif": [0, 4, 85, 132], "sycl": [0, 3, 20, 32, 34, 35, 36, 37, 38, 62, 75, 78, 89, 90, 98, 130, 131, 132, 133, 134, 135, 136, 137, 145, 148, 181, 182, 192, 200, 314, 315, 316, 330, 352, 357, 358, 359, 360, 361, 362, 363, 365, 366, 371, 374, 419, 430, 435, 436], "resourc": 0, "base": [0, 4, 85, 94, 137, 178, 183, 184, 185, 186, 192, 194, 319, 321, 325, 327], "python": [0, 2, 3, 37, 83, 85, 129, 283, 383, 444], "packag": [0, 3], "an": [0, 3, 4, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 66, 67, 72, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 118, 119, 121, 122, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 159, 160, 161, 164, 167, 171, 172, 173, 175, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 200, 201, 202, 204, 205, 206, 207, 208, 210, 211, 212, 213, 215, 216, 217, 224, 268, 270, 271, 274, 283, 285, 291, 293, 296, 297, 300, 302, 303, 305, 307, 308, 309, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 323, 324, 325, 326, 327, 330, 332, 337, 338, 340, 349, 352, 357, 358, 359, 360, 361, 362, 363, 365, 366, 371, 374, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 419, 420, 421, 423, 424, 426, 427, 428, 430, 431, 433, 434, 435, 436, 444], "below": [0, 4, 9, 75, 78, 85, 171, 419, 420, 423, 444], "demonstr": [0, 4, 85], "how": [0, 4, 85, 410], "extens": [0, 1, 3, 4, 9, 138, 182, 437], "numpi": [0, 1, 3, 4, 9, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 277, 282, 283, 295, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 423, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 444, 448], "can": [0, 3, 4, 13, 15, 20, 30, 32, 34, 35, 36, 37, 38, 39, 40, 44, 46, 47, 48, 49, 52, 62, 70, 75, 76, 78, 81, 82, 83, 85, 89, 90, 91, 98, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 140, 141, 143, 145, 148, 149, 150, 158, 159, 160, 161, 162, 169, 170, 180, 181, 182, 188, 190, 192, 194, 200, 203, 206, 269, 302, 311, 312, 313, 314, 315, 316, 317, 320, 321, 326, 330, 352, 357, 358, 359, 360, 361, 362, 363, 365, 366, 371, 374, 383, 385, 387, 401, 407, 410, 411, 414, 419, 424, 426, 430, 432, 434, 435, 436, 444], "easili": 0, "combin": [0, 85, 95], "devic": [0, 2, 3, 20, 32, 34, 35, 36, 37, 38, 44, 62, 75, 78, 83, 89, 90, 98, 129, 130, 131, 132, 133, 134, 135, 136, 137, 145, 148, 181, 182, 192, 194, 197, 200, 212, 215, 217, 314, 315, 316, 330, 352, 357, 358, 359, 360, 361, 362, 363, 365, 366, 371, 374, 404, 406, 419, 430, 431, 435, 436], "interfac": [0, 130], "dpctl": [0, 4, 14, 15, 19, 20, 32, 34, 35, 36, 37, 38, 62, 68, 75, 78, 83, 89, 90, 97, 98, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 145, 148, 181, 182, 192, 200, 203, 207, 208, 211, 213, 214, 314, 315, 316, 317, 319, 322, 324, 325, 330, 352, 357, 358, 359, 360, 361, 362, 363, 365, 366, 371, 374, 410, 419, 430, 435, 436], "import": [0, 3, 4, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 78, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 269, 274, 282, 291, 295, 302, 309, 311, 312, 313, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 326, 329, 355, 364, 368, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 423, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436], "dpnp": [0, 2, 3, 4, 437, 444, 448, 449, 452], "d": [0, 20, 44, 57, 58, 72, 75, 76, 78, 82, 84, 85, 98, 101, 102, 103, 107, 108, 112, 113, 115, 116, 117, 122, 123, 134, 143, 145, 149, 164, 166, 167, 172, 173, 176, 194, 199, 210, 312, 321, 325, 335, 379, 385, 392, 394, 396, 405, 410, 414, 415, 430, 433, 444], "select_cpu_devic": 0, "x": [0, 3, 4, 11, 12, 14, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 38, 41, 42, 43, 47, 50, 51, 53, 54, 59, 60, 62, 63, 65, 66, 67, 69, 70, 71, 75, 78, 80, 83, 85, 86, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 120, 124, 130, 131, 132, 133, 135, 136, 137, 139, 145, 147, 148, 150, 152, 153, 154, 163, 167, 173, 175, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 199, 200, 204, 205, 209, 269, 274, 282, 283, 295, 311, 312, 314, 315, 316, 317, 319, 320, 322, 323, 324, 325, 348, 354, 379, 380, 381, 382, 384, 388, 389, 390, 391, 393, 397, 398, 399, 400, 402, 403, 404, 409, 410, 412, 413, 418, 419, 427, 428, 430, 434, 435, 436], "arrai": [0, 2, 3, 4, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 103, 107, 108, 112, 113, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 224, 260, 266, 267, 268, 269, 270, 271, 274, 277, 278, 279, 281, 282, 283, 284, 286, 288, 289, 291, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 349, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 448], "1": [0, 3, 4, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 32, 34, 35, 36, 38, 41, 42, 43, 44, 45, 50, 51, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 136, 137, 139, 141, 142, 143, 145, 147, 148, 149, 151, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 179, 181, 182, 183, 185, 186, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 268, 269, 274, 276, 278, 282, 283, 291, 295, 302, 309, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 329, 330, 332, 334, 335, 337, 339, 341, 343, 344, 345, 347, 348, 349, 352, 354, 355, 356, 357, 358, 360, 362, 363, 364, 365, 369, 371, 374, 379, 381, 383, 384, 385, 387, 388, 389, 390, 391, 392, 393, 394, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 423, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 444], "2": [0, 3, 4, 11, 12, 13, 20, 21, 22, 23, 24, 25, 28, 29, 30, 32, 34, 35, 36, 37, 38, 41, 42, 44, 46, 48, 50, 51, 53, 54, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 78, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 101, 107, 112, 115, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 134, 135, 137, 139, 140, 141, 142, 143, 145, 147, 148, 149, 158, 159, 160, 161, 162, 163, 164, 165, 166, 169, 170, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 269, 274, 278, 283, 291, 309, 312, 313, 314, 315, 316, 317, 321, 322, 323, 324, 325, 329, 330, 334, 338, 342, 348, 354, 357, 359, 370, 372, 373, 376, 378, 379, 381, 383, 384, 385, 387, 388, 389, 390, 391, 392, 394, 396, 398, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 417, 418, 419, 420, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436], "3": [0, 3, 4, 13, 20, 21, 26, 28, 29, 30, 32, 34, 35, 36, 37, 38, 41, 42, 43, 44, 46, 49, 50, 51, 53, 56, 57, 58, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 75, 76, 78, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 96, 98, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 135, 137, 139, 142, 143, 144, 145, 147, 148, 149, 158, 159, 163, 164, 165, 169, 170, 171, 173, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 187, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 274, 283, 291, 302, 309, 312, 313, 314, 315, 316, 317, 321, 322, 323, 325, 330, 334, 338, 345, 348, 354, 357, 358, 359, 369, 373, 376, 379, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 394, 396, 398, 401, 402, 404, 405, 406, 407, 409, 410, 414, 415, 417, 418, 419, 420, 423, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436], "": [0, 3, 4, 70, 72, 83, 85, 101, 103, 107, 108, 112, 113, 115, 117, 130, 131, 171, 173, 178, 277, 309, 330, 331, 332, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 352, 353, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 415, 444], "sum": [0, 3, 4, 6, 13, 44, 72, 75, 78, 80, 82, 83, 142, 144, 149, 163, 179, 187, 193, 194, 210, 216, 275, 332, 347, 349, 382, 414, 416, 444, 448], "y": [0, 4, 20, 32, 34, 35, 36, 38, 41, 50, 62, 69, 70, 75, 78, 83, 85, 89, 90, 95, 98, 130, 131, 132, 133, 135, 136, 137, 139, 145, 181, 182, 192, 199, 200, 204, 274, 297, 314, 315, 316, 418, 419, 430, 434, 435, 436], "linspac": [0, 6, 20, 92, 137, 192, 199, 429], "0": [0, 4, 6, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 38, 41, 42, 43, 44, 45, 52, 54, 56, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 72, 74, 75, 76, 78, 79, 80, 81, 82, 83, 85, 86, 89, 90, 91, 92, 93, 95, 96, 98, 99, 102, 116, 119, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 135, 136, 137, 139, 142, 145, 148, 149, 152, 153, 154, 158, 159, 162, 163, 165, 166, 167, 168, 169, 170, 171, 173, 176, 181, 182, 183, 184, 185, 186, 189, 191, 192, 194, 195, 196, 197, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 274, 276, 278, 282, 283, 295, 298, 302, 304, 305, 306, 309, 310, 312, 314, 315, 316, 321, 322, 323, 324, 325, 326, 329, 330, 332, 337, 339, 340, 341, 343, 344, 345, 347, 348, 349, 352, 354, 355, 356, 357, 360, 362, 363, 364, 365, 368, 371, 373, 374, 375, 381, 383, 384, 387, 388, 389, 390, 391, 393, 394, 395, 396, 397, 399, 400, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 434, 435, 436], "pi": [0, 9, 21, 23, 25, 26, 66, 67, 74, 399, 400, 412, 413, 429], "num": [0, 85, 92, 137, 181, 192, 429], "10": [0, 4, 13, 22, 24, 28, 29, 44, 56, 62, 72, 76, 80, 83, 85, 96, 135, 137, 142, 147, 158, 159, 183, 184, 185, 186, 192, 193, 198, 206, 297, 324, 326, 330, 332, 342, 354, 382, 386, 387, 389, 391, 394, 405, 411, 420, 423, 434], "6": [0, 4, 6, 13, 20, 28, 29, 41, 44, 48, 49, 56, 58, 64, 70, 71, 72, 74, 75, 76, 80, 81, 82, 83, 85, 86, 91, 96, 99, 121, 136, 143, 147, 148, 149, 158, 173, 174, 175, 178, 179, 181, 192, 209, 210, 214, 274, 283, 312, 316, 321, 324, 329, 330, 347, 349, 354, 359, 379, 385, 389, 390, 391, 392, 405, 407, 408, 409, 410, 414, 418, 420, 423, 426, 429, 432, 433, 434, 436], "gpu": [0, 3, 4, 20, 32, 34, 35, 36, 38, 62, 75, 78, 89, 90, 98, 130, 131, 132, 133, 135, 136, 137, 145, 181, 182, 192, 200, 314, 315, 316, 419, 430, 435, 436], "f": [0, 6, 11, 12, 13, 18, 21, 22, 23, 24, 25, 26, 27, 32, 34, 35, 36, 38, 39, 40, 46, 47, 48, 49, 53, 54, 56, 59, 60, 62, 63, 66, 67, 81, 83, 85, 89, 90, 91, 93, 94, 96, 98, 124, 125, 135, 136, 140, 141, 144, 147, 150, 152, 153, 154, 159, 160, 161, 170, 183, 184, 185, 186, 187, 188, 189, 190, 191, 194, 196, 202, 206, 269, 274, 281, 311, 313, 315, 316, 320, 321, 323, 351, 379, 381, 383, 385, 387, 388, 393, 397, 398, 399, 400, 402, 403, 407, 412, 413, 426, 427, 435, 436], "sin": [0, 6, 23, 66, 167, 199, 400, 412], "locat": [0, 4, 138, 341, 343, 394], "argument": [0, 11, 12, 13, 15, 18, 20, 21, 22, 23, 24, 25, 26, 27, 46, 47, 48, 49, 52, 53, 54, 56, 58, 63, 66, 67, 71, 81, 82, 83, 85, 86, 92, 93, 94, 96, 99, 124, 125, 126, 127, 128, 139, 144, 147, 150, 156, 157, 159, 172, 173, 184, 185, 186, 187, 194, 196, 202, 203, 204, 206, 209, 297, 309, 311, 320, 321, 323, 381, 383, 386, 387, 388, 393, 397, 398, 399, 400, 405, 407, 412, 413, 414, 418, 426, 427, 444], "where": [0, 6, 11, 12, 13, 14, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 32, 34, 35, 36, 37, 38, 42, 43, 44, 46, 47, 48, 49, 53, 54, 56, 59, 60, 62, 63, 64, 66, 67, 75, 78, 80, 81, 83, 89, 90, 91, 93, 94, 95, 96, 97, 98, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 140, 141, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 159, 160, 161, 162, 175, 178, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 196, 197, 200, 201, 202, 203, 206, 211, 212, 213, 214, 215, 216, 217, 264, 265, 285, 286, 287, 292, 299, 304, 306, 310, 311, 312, 313, 314, 315, 316, 320, 321, 322, 323, 330, 352, 357, 358, 359, 360, 361, 362, 363, 365, 366, 371, 374, 381, 383, 387, 388, 390, 393, 394, 397, 398, 399, 400, 402, 403, 406, 407, 408, 412, 413, 417, 419, 426, 427, 430, 431, 435, 436], "function": [0, 2, 3, 11, 12, 14, 15, 16, 17, 19, 20, 28, 29, 31, 32, 34, 35, 36, 38, 39, 62, 65, 69, 71, 73, 79, 81, 83, 86, 87, 88, 89, 90, 92, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 138, 139, 145, 151, 165, 167, 172, 182, 187, 193, 198, 199, 203, 204, 207, 208, 209, 214, 264, 265, 274, 297, 309, 315, 316, 317, 319, 325, 328, 329, 330, 333, 335, 336, 346, 351, 367, 382, 383, 391, 392, 397, 406, 410, 411, 415, 418, 426, 431, 433, 434, 435, 436, 437, 444, 448], "attain": 0, "global": 0, "maximum": [0, 6, 16, 28, 29, 56, 83, 126, 127, 195, 201, 202, 207, 208, 211, 213, 266, 285, 321, 324, 326], "max_arg": 0, "argmax": [0, 6, 29, 83, 207, 326, 411, 444], "max_val": 0, "max": [0, 6, 16, 28, 83, 119, 126, 146, 171, 196, 201, 202, 211, 271, 347, 411, 415, 444], "For": [0, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 282, 283, 295, 297, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 423, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 444], "more": [0, 3, 4, 30, 32, 41, 42, 43, 84, 85, 96, 122, 123, 129, 131, 143, 148, 170, 171, 172, 174, 178, 187, 405, 414, 444], "inform": [0, 36, 38, 83, 85, 119, 279, 444, 448], "pleas": [0, 3, 444], "refer": [0, 2, 3, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 282, 283, 285, 286, 287, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 423, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 444], "document": [0, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 282, 283, 285, 286, 287, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 423, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 444], "time": [0, 15, 80, 82, 126, 127, 128, 149, 154, 158, 203, 317, 332, 347, 384, 411, 414, 415, 432], "def": 0, "run": [0, 4], "executor": 0, "size": [0, 6, 20, 32, 44, 58, 65, 69, 72, 83, 85, 131, 137, 143, 173, 175, 178, 181, 192, 197, 210, 212, 283, 284, 300, 315, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 358, 360, 361, 362, 363, 364, 365, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 389, 392, 404, 405, 414, 424, 433, 435], "test_typ": 0, "repetit": [0, 384, 415], "reshap": [0, 6, 13, 28, 29, 41, 43, 44, 75, 76, 81, 82, 83, 84, 95, 121, 128, 148, 149, 158, 173, 194, 195, 201, 206, 300, 309, 354, 379, 389, 407, 414, 426, 444], "arang": [0, 6, 13, 28, 29, 41, 42, 43, 44, 45, 56, 63, 74, 75, 76, 81, 82, 91, 93, 94, 96, 121, 128, 136, 137, 142, 148, 149, 158, 173, 181, 184, 185, 188, 189, 190, 191, 192, 194, 195, 199, 201, 206, 313, 316, 321, 325, 329, 354, 383, 386, 389, 407, 414, 426, 434, 436], "dtype": [0, 9, 11, 12, 13, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 34, 35, 36, 37, 38, 40, 44, 46, 47, 48, 49, 52, 53, 54, 58, 59, 60, 63, 66, 67, 69, 72, 76, 81, 83, 89, 90, 91, 93, 94, 96, 98, 119, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 143, 144, 145, 146, 147, 148, 150, 152, 153, 154, 159, 160, 161, 172, 178, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 201, 202, 203, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 269, 275, 286, 292, 304, 306, 310, 311, 313, 315, 316, 320, 321, 322, 323, 330, 352, 358, 374, 381, 382, 383, 386, 387, 388, 391, 392, 393, 397, 398, 399, 400, 402, 403, 405, 406, 407, 408, 412, 413, 416, 419, 420, 423, 426, 431, 433, 435, 436, 444], "_": [0, 405], "rang": [0, 133, 142, 324, 325, 349, 354, 405, 414, 417, 429, 448], "start_tim": 0, "perf_count": 0, "result": [0, 4, 13, 14, 19, 26, 28, 29, 44, 46, 47, 48, 49, 52, 56, 58, 63, 71, 72, 81, 82, 85, 86, 90, 91, 96, 99, 125, 130, 131, 132, 133, 134, 136, 137, 139, 140, 141, 148, 150, 152, 153, 154, 159, 160, 161, 162, 165, 173, 175, 181, 182, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 201, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 312, 313, 316, 317, 321, 322, 330, 332, 362, 382, 385, 386, 387, 390, 394, 397, 398, 402, 403, 405, 406, 407, 408, 411, 414, 415, 426, 431, 436, 444], "end_tim": 0, "append": [0, 6, 80, 95, 159], "return": [0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 273, 274, 275, 276, 277, 279, 280, 281, 283, 285, 286, 287, 290, 291, 292, 294, 297, 298, 304, 305, 306, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 330, 333, 352, 354, 357, 358, 359, 360, 361, 362, 363, 365, 366, 371, 374, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 430, 431, 432, 433, 434, 435, 436, 444], "median": [0, 6], "get_dtyp": 0, "_dtypes_list": 0, "int32": [0, 9, 37, 52, 85, 89, 90, 98, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 130, 133, 135, 136, 145, 182, 315, 316, 330, 332, 340, 342, 347, 349, 355, 358, 374, 386, 408, 419, 435, 436], "int64": [0, 9, 52, 85, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 386], "float32": [0, 37, 40, 52, 83, 85, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 269, 330, 352, 357, 359, 360, 362, 363, 365, 371, 374, 386], "select_default_devic": 0, "has_aspect_fp64": 0, "float64": [0, 37, 40, 44, 52, 72, 83, 85, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 269, 330, 331, 337, 338, 339, 341, 343, 344, 345, 352, 353, 356, 357, 359, 360, 362, 363, 364, 365, 370, 371, 372, 373, 374, 375, 376, 377, 378, 386, 419], "test_repetit": 0, "5": [0, 6, 13, 14, 20, 27, 28, 41, 44, 45, 46, 48, 49, 50, 54, 56, 58, 61, 64, 65, 68, 70, 71, 72, 75, 76, 80, 81, 82, 83, 86, 92, 121, 122, 123, 124, 125, 126, 127, 128, 133, 137, 139, 142, 143, 144, 147, 148, 149, 158, 159, 162, 166, 168, 169, 172, 173, 177, 181, 188, 189, 190, 191, 192, 195, 196, 197, 198, 199, 200, 201, 202, 205, 206, 212, 215, 269, 274, 312, 314, 315, 316, 321, 324, 325, 330, 331, 332, 334, 337, 349, 353, 354, 355, 356, 359, 362, 377, 379, 381, 383, 385, 387, 388, 389, 390, 391, 392, 394, 397, 405, 406, 408, 409, 410, 414, 415, 417, 419, 420, 423, 426, 427, 429, 430, 432, 433, 434, 435, 436], "type_nam": 0, "name": [0, 6, 85], "print": [0, 4, 44, 45, 61, 85, 142, 260, 330, 349, 354, 428], "test": [0, 2, 14, 15, 19, 152, 153, 154, 214, 312, 332, 448], "type": [0, 2, 3, 4, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 78, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 269, 274, 277, 281, 297, 309, 311, 312, 313, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 329, 330, 331, 332, 334, 337, 338, 339, 340, 341, 342, 343, 344, 345, 349, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 423, 424, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 448], "i": [0, 3, 4, 6, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 44, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 224, 269, 274, 281, 291, 297, 302, 309, 311, 312, 313, 314, 315, 316, 318, 320, 321, 322, 323, 324, 325, 326, 329, 330, 331, 332, 334, 337, 338, 339, 340, 341, 342, 343, 344, 345, 349, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 444], "each": [0, 13, 18, 21, 22, 23, 24, 25, 26, 27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 59, 60, 63, 66, 67, 72, 81, 83, 85, 91, 93, 94, 96, 122, 123, 124, 125, 132, 140, 141, 147, 150, 152, 153, 154, 159, 160, 161, 165, 166, 167, 168, 184, 186, 187, 188, 189, 190, 191, 194, 205, 206, 298, 300, 311, 312, 313, 320, 321, 323, 326, 332, 349, 380, 381, 383, 384, 387, 389, 391, 393, 397, 398, 399, 400, 402, 403, 405, 407, 411, 412, 413, 415, 421, 424, 426, 427, 444], "64": [0, 4, 137, 321, 391], "128": [0, 137], "256": [0, 137], "512": 0, "1024": 0, "2048": 0, "4096": 0, "time_numpi": 0, "result_numpi": 0, "time_dpnp": 0, "result_dpnp": 0, "verif": 0, "true": [0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 36, 38, 40, 41, 44, 46, 47, 48, 49, 52, 53, 54, 59, 60, 62, 63, 64, 66, 67, 68, 69, 72, 81, 83, 85, 91, 93, 94, 95, 96, 97, 121, 122, 123, 124, 125, 126, 127, 128, 132, 137, 140, 141, 142, 144, 147, 148, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 169, 171, 173, 174, 175, 177, 178, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 201, 202, 203, 206, 207, 208, 211, 212, 213, 214, 215, 216, 217, 264, 265, 269, 274, 285, 286, 287, 292, 304, 306, 310, 311, 312, 313, 320, 321, 322, 323, 326, 335, 381, 382, 383, 385, 387, 388, 393, 397, 398, 399, 400, 402, 403, 406, 407, 408, 411, 412, 413, 414, 426, 430, 431, 434], "els": [0, 176], "msg": 0, "n": [0, 4, 72, 76, 77, 80, 83, 84, 85, 86, 95, 98, 100, 102, 103, 105, 106, 108, 110, 111, 113, 114, 116, 117, 118, 132, 139, 145, 170, 171, 174, 175, 178, 179, 180, 194, 199, 215, 217, 309, 325, 332, 347, 349, 359, 369, 394, 396, 403, 406, 409, 410, 414, 417, 419, 420, 421, 423, 424, 430, 431, 444], "4": [0, 13, 14, 20, 28, 29, 32, 41, 43, 44, 46, 48, 50, 56, 57, 58, 61, 64, 66, 68, 70, 71, 72, 75, 76, 78, 80, 81, 82, 83, 84, 85, 86, 89, 91, 94, 121, 125, 126, 127, 131, 132, 133, 135, 137, 139, 140, 141, 142, 143, 144, 147, 148, 149, 158, 161, 164, 169, 170, 171, 173, 176, 179, 180, 181, 186, 188, 192, 194, 195, 196, 197, 198, 200, 201, 202, 205, 206, 207, 208, 209, 210, 212, 215, 217, 274, 291, 302, 309, 312, 314, 316, 321, 322, 324, 325, 330, 331, 334, 354, 359, 375, 379, 383, 384, 385, 389, 390, 391, 392, 397, 401, 402, 405, 406, 407, 409, 410, 414, 415, 417, 418, 420, 423, 426, 430, 431, 432, 433, 434, 436], "3e": [0, 72], "ratio": [0, 81, 125, 426], "2f": 0, "__name__": 0, "__main__": 0, "print_device_info": 0, "data": [1, 3, 4, 11, 12, 13, 14, 15, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 44, 46, 47, 48, 49, 51, 52, 53, 54, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 71, 74, 75, 78, 81, 82, 83, 85, 86, 89, 90, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 119, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 159, 160, 161, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 269, 297, 309, 311, 313, 315, 316, 317, 320, 321, 322, 323, 325, 326, 329, 330, 331, 332, 334, 337, 338, 339, 340, 341, 342, 343, 344, 345, 349, 352, 353, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 387, 388, 389, 390, 391, 392, 393, 394, 397, 398, 399, 400, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 418, 419, 426, 427, 429, 431, 433, 435, 436, 437, 448], "parallel": [1, 3, 4, 9, 437], "overview": 2, "quick": [2, 3], "start": [2, 3, 20, 36, 38, 130, 137, 181, 192, 390], "guid": [2, 3], "driver": 2, "interpret": [2, 34, 35, 39, 51, 62, 85, 130, 312, 444], "instal": 2, "exampl": [2, 3, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 78, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 260, 269, 274, 278, 282, 283, 291, 295, 297, 302, 309, 311, 312, 313, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 326, 329, 330, 331, 332, 334, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 423, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436], "multi": [2, 83, 101, 103, 107, 108, 112, 113, 115, 117, 200, 305, 314, 437], "dimension": [2, 4, 28, 29, 30, 61, 65, 68, 76, 77, 78, 80, 83, 100, 101, 102, 103, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 130, 131, 133, 175, 179, 180, 193, 195, 199, 200, 201, 207, 208, 211, 213, 215, 216, 217, 303, 314, 382, 401, 406, 408, 415, 431, 432, 437], "ndarrai": [2, 3, 6, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 352, 357, 358, 359, 360, 361, 362, 363, 365, 371, 374, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 423, 424, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437], "univers": [2, 437, 444], "ufunc": [2, 437, 444], "routin": [2, 437, 444], "special": [2, 85, 92, 437, 448], "avail": [2, 3, 4, 85, 437, 444], "comparison": [2, 91, 140, 141, 160, 161, 313, 437, 448], "tabl": [2, 9, 437], "cupi": [2, 437], "miscellan": [2, 437, 448], "c": [2, 4, 11, 12, 13, 18, 21, 22, 23, 24, 25, 26, 27, 32, 34, 35, 36, 38, 39, 40, 46, 47, 48, 49, 53, 54, 56, 59, 60, 62, 63, 66, 67, 70, 81, 82, 83, 85, 89, 90, 91, 93, 94, 96, 98, 124, 125, 135, 136, 138, 140, 141, 144, 147, 149, 150, 152, 153, 154, 158, 159, 160, 161, 164, 172, 173, 176, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 194, 196, 202, 206, 269, 274, 281, 294, 311, 312, 313, 315, 316, 320, 321, 323, 379, 381, 383, 385, 387, 388, 393, 397, 398, 399, 400, 402, 403, 407, 412, 413, 414, 415, 426, 427, 435, 436], "backend": [2, 138, 333, 335, 336, 346, 351, 367], "The": [3, 4, 13, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 44, 46, 47, 48, 49, 51, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 66, 67, 69, 70, 72, 75, 78, 80, 81, 83, 84, 85, 86, 89, 90, 91, 93, 94, 95, 96, 98, 100, 106, 114, 121, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 140, 141, 143, 144, 145, 148, 150, 152, 153, 154, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 192, 193, 194, 195, 196, 200, 201, 202, 203, 205, 206, 207, 208, 210, 211, 213, 215, 216, 217, 274, 281, 282, 291, 295, 311, 312, 313, 314, 315, 316, 320, 321, 323, 324, 326, 330, 333, 335, 336, 346, 351, 352, 357, 358, 359, 360, 361, 362, 363, 365, 366, 371, 374, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 396, 397, 398, 399, 400, 401, 405, 406, 407, 408, 411, 412, 413, 414, 415, 417, 419, 421, 422, 424, 425, 426, 427, 430, 431, 433, 434, 435, 436, 444, 448], "librari": [3, 4, 444], "implement": [3, 6, 37, 129], "subset": [3, 404, 448], "execut": [3, 4, 14, 15, 19, 34, 35, 65, 69, 71, 79, 86, 87, 88, 92, 97, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 126, 127, 128, 132, 139, 151, 198, 203, 204, 209, 214, 317, 319, 325, 333, 335, 336, 346, 351, 367, 410, 418], "ani": [3, 6, 14, 15, 30, 32, 34, 35, 36, 37, 38, 40, 50, 51, 62, 75, 78, 80, 83, 85, 118, 135, 136, 137, 143, 170, 180, 181, 192, 211, 213, 269, 330, 374, 401, 430, 444], "drop": [3, 85], "replac": [3, 37, 56, 210, 326, 335, 444], "core": [3, 85, 444], "numer": [3, 4, 11, 12, 13, 21, 22, 23, 24, 25, 27, 31, 59, 60, 63, 66, 67, 81, 85, 91, 93, 96, 125, 140, 141, 147, 152, 153, 154, 160, 161, 183, 184, 185, 186, 196, 202, 206, 311, 313, 320, 321, 323, 380, 388, 391, 397, 398, 399, 400, 407, 412, 413, 426, 448], "being": [3, 85], "develop": [3, 4], "part": [3, 83, 147, 165, 166, 168, 204, 282, 295, 380, 427, 444], "intel": [3, 4], "ai": [3, 326, 411], "analyt": 3, "toolkit": 3, "distribut": [3, 4, 192, 330, 331, 332, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 362, 364, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 448], "also": [3, 13, 18, 20, 26, 46, 48, 49, 63, 81, 85, 91, 95, 125, 132, 134, 140, 141, 144, 159, 160, 161, 162, 187, 196, 202, 205, 206, 312, 313, 321, 368, 383, 387, 407, 426, 444], "anaconda": 3, "cloud": 3, "page": [3, 448], "learn": [3, 4], "Being": 3, "mean": [3, 6, 40, 44, 83, 130, 131, 133, 163, 173, 198, 212, 215, 217, 269, 281, 309, 330, 343, 345, 348, 352, 371, 375, 376, 379, 385, 406, 408, 431, 444], "usag": [3, 4], "veri": [3, 199], "similar": [3, 34, 35, 83, 85, 137, 181, 192, 274, 330, 358], "np": [3, 4, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 78, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 158, 159, 160, 161, 162, 163, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 269, 274, 278, 282, 283, 291, 295, 302, 309, 311, 312, 313, 314, 315, 316, 317, 320, 322, 323, 324, 325, 326, 329, 355, 364, 377, 378, 379, 381, 382, 383, 384, 387, 388, 389, 390, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 423, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436], "class": [3, 83, 85, 86, 120, 130, 131, 132, 134, 148, 182, 330, 358, 419, 448], "compat": [3, 28, 29, 40, 44, 83, 193, 195, 197, 201, 207, 208, 211, 212, 213, 215, 216, 217, 269, 382, 385, 406, 408, 431, 448], "altern": [3, 4, 72, 82, 83, 194, 197, 210, 212, 215, 216, 217, 309, 406, 408, 431], "abov": [3, 75, 78, 148, 175, 193, 216, 382, 408, 419, 420, 423], "instanc": [3, 20, 32, 34, 35, 36, 37, 38, 62, 75, 78, 83, 89, 90, 98, 130, 131, 132, 133, 134, 135, 136, 137, 145, 148, 181, 182, 192, 194, 200, 314, 315, 316, 330, 352, 357, 358, 359, 360, 361, 362, 363, 365, 366, 371, 374, 419, 430, 435, 436], "creat": [3, 4, 20, 32, 34, 35, 36, 37, 38, 62, 75, 76, 78, 83, 85, 89, 90, 98, 129, 130, 131, 132, 133, 134, 135, 136, 137, 145, 148, 181, 182, 192, 200, 274, 314, 315, 316, 326, 330, 352, 357, 358, 359, 360, 361, 362, 363, 365, 366, 371, 374, 419, 430, 435, 436, 444, 448], "ident": [3, 6, 85, 177, 369], "one": [3, 4, 30, 32, 37, 41, 42, 43, 44, 56, 61, 64, 65, 83, 85, 89, 91, 95, 98, 100, 102, 105, 106, 110, 111, 114, 116, 122, 123, 131, 135, 143, 145, 148, 167, 170, 173, 183, 184, 186, 199, 200, 209, 274, 281, 284, 312, 314, 316, 349, 390, 401, 404, 405, 414, 421, 424, 435, 444], "kei": [3, 30, 83, 85, 120, 229, 259, 401], "differ": [3, 20, 32, 34, 35, 36, 38, 44, 62, 72, 75, 78, 80, 83, 85, 86, 89, 90, 98, 119, 122, 123, 130, 131, 132, 133, 135, 136, 137, 139, 145, 168, 181, 182, 192, 193, 194, 200, 216, 274, 314, 315, 316, 321, 382, 407, 408, 419, 430, 435, 436, 448], "from": [3, 28, 29, 30, 34, 35, 50, 52, 55, 58, 64, 73, 74, 83, 84, 85, 94, 97, 121, 129, 130, 131, 132, 133, 134, 143, 145, 165, 167, 168, 171, 172, 182, 193, 199, 216, 260, 270, 274, 303, 308, 326, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 362, 364, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 382, 385, 386, 392, 394, 395, 403, 404, 405, 408, 410, 411, 429, 430, 433, 434, 448], "memori": [3, 11, 12, 13, 18, 21, 22, 23, 24, 25, 26, 27, 32, 34, 35, 36, 38, 39, 46, 47, 48, 49, 53, 54, 56, 59, 60, 62, 63, 66, 67, 81, 83, 85, 89, 90, 91, 93, 94, 96, 98, 124, 125, 135, 136, 140, 141, 144, 147, 150, 152, 153, 154, 159, 160, 161, 183, 184, 185, 186, 187, 188, 189, 190, 191, 194, 196, 199, 202, 206, 279, 281, 305, 311, 313, 315, 316, 320, 323, 381, 383, 385, 387, 388, 393, 397, 398, 399, 400, 402, 403, 407, 412, 413, 426, 427, 435, 436, 437], "alloc": [3, 4, 20, 32, 34, 35, 36, 37, 38, 40, 44, 62, 75, 78, 83, 89, 90, 98, 130, 131, 132, 133, 134, 135, 136, 137, 145, 148, 181, 182, 192, 197, 200, 212, 215, 217, 269, 314, 315, 316, 330, 352, 357, 358, 359, 360, 361, 362, 363, 365, 371, 374, 404, 406, 419, 430, 431, 435, 436], "default": [3, 11, 12, 13, 14, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 40, 44, 46, 47, 48, 49, 50, 51, 53, 54, 56, 58, 59, 60, 62, 63, 65, 66, 67, 69, 70, 72, 75, 78, 79, 80, 81, 83, 85, 86, 89, 90, 91, 93, 94, 96, 98, 100, 106, 118, 121, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 140, 141, 143, 144, 145, 147, 148, 150, 152, 153, 154, 159, 160, 161, 162, 163, 166, 168, 171, 173, 174, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 269, 274, 281, 311, 313, 314, 315, 316, 318, 320, 321, 322, 323, 325, 330, 334, 352, 357, 358, 359, 360, 361, 362, 363, 365, 366, 368, 369, 371, 374, 379, 381, 382, 383, 384, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 405, 406, 407, 408, 410, 412, 413, 414, 416, 417, 419, 420, 421, 423, 424, 426, 427, 430, 431, 433, 435, 436, 444], "which": [3, 4, 28, 29, 30, 34, 35, 40, 44, 50, 58, 64, 72, 78, 80, 82, 83, 85, 95, 119, 121, 132, 133, 137, 143, 152, 153, 154, 162, 165, 171, 173, 180, 192, 193, 194, 195, 197, 201, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 269, 312, 322, 325, 382, 384, 389, 401, 404, 405, 406, 408, 417, 419, 420, 421, 423, 424, 427, 431, 434, 444], "system": [3, 4, 177], "integr": [3, 4, 44, 83, 197, 204, 212, 215, 217, 302, 321, 406, 408, 418, 431], "discret": [3, 61, 65, 72, 80, 86, 100, 101, 102, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117, 139, 330, 437], "otherwis": [3, 11, 12, 13, 14, 15, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 59, 60, 62, 63, 65, 66, 67, 68, 69, 71, 79, 80, 81, 83, 85, 86, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 144, 145, 149, 150, 151, 152, 153, 154, 159, 160, 161, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 269, 281, 297, 311, 313, 315, 316, 317, 319, 320, 321, 322, 323, 325, 330, 331, 332, 334, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 370, 371, 372, 373, 374, 375, 376, 377, 378, 381, 382, 383, 385, 387, 388, 393, 394, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 410, 412, 413, 418, 426, 427, 431, 434, 435, 436], "host": [3, 4, 20, 32, 34, 35, 36, 37, 38, 62, 75, 78, 89, 90, 98, 130, 131, 132, 133, 134, 135, 136, 137, 145, 148, 181, 182, 192, 200, 314, 315, 316, 330, 352, 357, 358, 359, 360, 361, 362, 363, 365, 371, 374, 419, 430, 435, 436], "do": [3, 4, 85, 332, 390], "have": [3, 4, 11, 12, 13, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 41, 42, 43, 44, 46, 47, 48, 49, 51, 53, 54, 57, 58, 59, 60, 63, 66, 67, 70, 72, 81, 82, 84, 85, 91, 93, 94, 96, 119, 124, 125, 140, 141, 143, 144, 147, 150, 152, 153, 154, 159, 160, 161, 172, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 201, 202, 206, 207, 208, 210, 211, 212, 213, 215, 216, 217, 311, 313, 320, 321, 323, 349, 380, 381, 382, 383, 387, 388, 391, 392, 393, 397, 398, 399, 400, 402, 403, 405, 406, 407, 408, 412, 413, 415, 426, 427, 431, 433, 444], "most": [3, 4, 80, 85, 404], "manipul": [3, 76, 437, 448], "ar": [3, 4, 11, 12, 13, 14, 15, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 53, 54, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 71, 72, 74, 79, 80, 81, 82, 83, 85, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 121, 122, 123, 124, 125, 126, 127, 128, 132, 137, 139, 140, 141, 144, 149, 150, 151, 152, 153, 154, 159, 160, 161, 162, 165, 166, 167, 168, 170, 171, 172, 173, 174, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 269, 290, 291, 311, 312, 313, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 329, 330, 331, 332, 334, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 352, 353, 355, 356, 358, 361, 362, 364, 370, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 387, 389, 392, 393, 394, 395, 397, 398, 399, 401, 402, 403, 405, 406, 407, 408, 410, 412, 413, 414, 416, 418, 422, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 444], "done": [3, 40, 83, 180, 269], "wai": [3, 4, 83, 131, 291, 414], "see": [3, 31, 85, 129, 347, 391, 421, 422, 424, 425, 444], "complet": [3, 4, 131, 132, 175, 390, 444], "list": [3, 6, 9, 32, 34, 35, 36, 38, 41, 42, 43, 50, 58, 62, 75, 78, 83, 84, 85, 135, 136, 137, 143, 181, 182, 192, 194, 309, 386, 392, 395, 405, 414, 417, 430, 433, 434], "support": [3, 9, 11, 12, 13, 14, 15, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 32, 34, 35, 36, 37, 38, 46, 47, 48, 49, 50, 51, 53, 54, 59, 60, 62, 63, 65, 66, 67, 68, 69, 71, 74, 79, 81, 83, 85, 86, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 144, 145, 150, 151, 152, 153, 154, 159, 160, 161, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 194, 195, 196, 197, 198, 201, 202, 203, 204, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 269, 311, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 329, 330, 331, 332, 334, 337, 338, 339, 340, 341, 342, 343, 344, 345, 348, 349, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 370, 371, 372, 373, 374, 375, 376, 377, 378, 381, 383, 385, 387, 393, 395, 397, 398, 399, 401, 402, 403, 406, 407, 408, 410, 412, 413, 416, 418, 426, 427, 429, 431, 435, 436, 452], "along": [3, 4, 14, 16, 17, 19, 28, 29, 30, 44, 57, 58, 68, 71, 72, 75, 78, 80, 83, 84, 86, 121, 122, 123, 126, 127, 132, 137, 139, 143, 148, 173, 175, 179, 180, 181, 192, 193, 195, 196, 197, 198, 199, 201, 202, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 266, 267, 268, 275, 285, 287, 292, 293, 304, 306, 308, 310, 324, 325, 326, 382, 384, 389, 390, 392, 401, 405, 406, 408, 410, 411, 414, 415, 416, 418, 421, 424, 431, 433, 444], "limit": [3, 11, 12, 13, 14, 15, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 32, 34, 35, 36, 38, 46, 47, 48, 49, 50, 51, 53, 54, 56, 59, 60, 62, 63, 65, 66, 67, 68, 69, 71, 74, 79, 81, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 144, 145, 146, 150, 151, 152, 153, 154, 159, 160, 161, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 194, 195, 196, 197, 198, 201, 202, 203, 204, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 269, 271, 311, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 329, 330, 331, 332, 334, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 352, 353, 355, 356, 358, 361, 364, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 381, 383, 385, 387, 388, 393, 395, 397, 398, 399, 400, 401, 402, 403, 406, 407, 408, 410, 412, 413, 416, 418, 426, 427, 429, 431, 435, 436], "To": 4, "program": [4, 124], "beyond": [4, 389], "cpu": [4, 14, 15, 19, 20, 32, 34, 35, 36, 38, 62, 65, 69, 71, 75, 78, 79, 86, 87, 88, 89, 90, 92, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 126, 127, 128, 130, 131, 132, 133, 135, 136, 137, 139, 145, 151, 181, 182, 192, 198, 200, 203, 204, 209, 214, 314, 315, 316, 317, 319, 325, 410, 418, 419, 430, 435, 436], "you": [4, 411, 444], "need": [4, 138, 411, 434], "appropri": [4, 28, 29, 138, 180, 193, 195, 201, 207, 208, 211, 213, 330, 358, 361, 382, 444], "hardwar": 4, "work": [4, 31, 39, 73, 203, 328, 411, 444], "fine": 4, "laptop": 4, "graphic": 4, "In": [4, 28, 29, 72, 162, 167, 172, 175, 192, 193, 210, 212, 216, 325, 330, 374, 382, 385, 408, 410, 427], "major": [4, 34, 35, 36, 38, 39, 40, 83, 269, 281, 312, 379], "case": [4, 20, 28, 29, 32, 34, 35, 36, 38, 44, 62, 72, 75, 78, 80, 89, 90, 98, 130, 131, 132, 133, 135, 136, 137, 145, 165, 175, 178, 181, 182, 192, 193, 200, 210, 214, 216, 314, 315, 316, 322, 382, 385, 408, 414, 419, 430, 435, 436], "your": 4, "window": 4, "alreadi": [4, 35, 41, 42, 43], "ha": [4, 11, 12, 18, 30, 44, 53, 54, 59, 60, 72, 85, 95, 105, 110, 124, 132, 143, 147, 167, 176, 178, 193, 197, 210, 212, 215, 216, 217, 323, 325, 380, 381, 382, 384, 390, 404, 405, 406, 408, 409, 415, 431, 444], "all": [4, 6, 9, 15, 19, 33, 40, 44, 57, 68, 80, 83, 84, 85, 93, 94, 96, 98, 121, 122, 123, 130, 131, 133, 137, 143, 145, 162, 171, 174, 181, 192, 207, 208, 211, 213, 216, 269, 272, 278, 291, 332, 389, 392, 404, 433, 444], "necessari": [4, 20, 32, 34, 35, 36, 38, 41, 64, 72, 137, 181, 192, 194, 197, 210, 212, 215, 216, 217, 385, 406, 408, 431], "But": [4, 85], "want": [4, 411], "up": [4, 85, 123], "date": 4, "alwai": [4, 30, 34, 40, 83, 166, 168, 215, 217, 269, 312, 385, 406, 431], "updat": 4, "latest": [4, 129], "follow": [4, 44, 85, 95, 119, 146, 166, 168, 174, 414, 444, 448], "instruct": 4, "step": [4, 20, 137, 181, 192], "8": [4, 13, 15, 41, 53, 56, 64, 70, 75, 76, 80, 83, 85, 121, 137, 147, 151, 164, 173, 176, 178, 179, 181, 192, 209, 312, 321, 322, 324, 330, 354, 373, 389, 393, 399, 410, 414, 418, 420, 423, 430, 434], "9": [4, 13, 41, 56, 64, 70, 72, 75, 76, 81, 83, 89, 99, 125, 133, 137, 165, 173, 174, 175, 178, 192, 206, 283, 312, 324, 330, 332, 334, 354, 389, 402, 407, 414, 420, 423, 426, 430, 434], "If": [4, 11, 12, 15, 20, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 40, 44, 56, 58, 70, 72, 75, 80, 82, 83, 85, 95, 98, 119, 121, 134, 137, 143, 147, 148, 149, 162, 170, 171, 172, 173, 174, 175, 178, 180, 181, 182, 192, 193, 195, 197, 199, 201, 207, 208, 210, 211, 212, 213, 215, 216, 217, 269, 300, 302, 326, 330, 352, 374, 380, 382, 385, 389, 391, 392, 394, 401, 404, 405, 406, 408, 409, 411, 414, 415, 417, 430, 431, 432, 433, 444], "yet": [4, 6], "easiest": 4, "It": [4, 28, 29, 56, 72, 82, 166, 168, 193, 194, 195, 197, 201, 207, 208, 210, 211, 212, 213, 215, 216, 217, 382, 406, 408, 431], "essenti": 4, "machin": [4, 119, 146], "optim": [4, 88], "includ": [4, 20, 28, 29, 32, 34, 35, 36, 37, 38, 44, 62, 75, 78, 135, 136, 137, 138, 174, 181, 192, 193, 195, 197, 201, 207, 208, 211, 212, 213, 215, 216, 217, 330, 374, 382, 406, 408, 430, 431], "anoth": [4, 64, 83, 129, 274, 293, 325, 390], "vendor": 4, "too": [4, 434], "manual": [4, 85, 415], "shown": 4, "next": [4, 119], "section": [4, 85, 444], "recommend": [4, 312, 415], "us": [4, 13, 20, 32, 34, 35, 36, 37, 38, 39, 40, 46, 47, 48, 49, 52, 56, 58, 62, 70, 72, 75, 76, 78, 81, 83, 85, 89, 90, 91, 95, 98, 124, 125, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 145, 148, 149, 150, 159, 160, 161, 162, 163, 166, 167, 168, 171, 172, 173, 174, 181, 182, 188, 190, 192, 193, 194, 197, 199, 200, 206, 210, 212, 215, 216, 217, 224, 269, 274, 311, 312, 313, 314, 315, 316, 320, 321, 326, 330, 333, 335, 336, 346, 351, 352, 357, 358, 359, 360, 361, 362, 363, 365, 366, 367, 371, 374, 379, 382, 383, 384, 385, 387, 389, 394, 397, 406, 407, 408, 410, 411, 414, 415, 418, 419, 424, 426, 430, 431, 434, 435, 436, 444], "org": 4, "channel": 4, "command": 4, "forg": 4, "pip": 4, "http": [4, 129], "pypi": 4, "simpl": [4, 191, 448], "These": [4, 85, 95, 205, 444, 448], "its": [4, 6, 11, 12, 15, 30, 44, 75, 83, 100, 106, 119, 145, 165, 166, 167, 168, 172, 174, 180, 197, 212, 215, 217, 309, 367, 379, 382, 385, 401, 406, 417, 419, 431, 444], "depend": [4, 166, 175, 177, 178, 181, 395, 434], "control": [4, 40, 52, 58, 64, 83, 143, 194, 269, 392, 405, 433], "requir": [4, 6, 32, 36, 38, 40, 83, 85, 148, 269], "compil": [4, 85, 138], "runtim": 4, "onemkl": [4, 165, 167], "befor": [4, 30, 58, 83, 122, 123, 180, 193, 215, 216, 217, 291, 302, 382, 389, 390, 401, 406, 408, 415, 431, 432], "strongli": [4, 415], "advis": 4, "version": [4, 83, 85, 280, 312], "activ": 4, "local": 4, "environ": 4, "env": 4, "And": [4, 39, 40, 76, 83, 269], "sourc": [4, 6, 14, 15, 16, 17, 19, 20, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 50, 51, 52, 55, 56, 57, 58, 61, 62, 64, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 92, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 142, 143, 145, 146, 148, 149, 151, 155, 156, 157, 158, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 192, 193, 194, 195, 197, 198, 199, 201, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 312, 315, 316, 317, 318, 319, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 382, 384, 385, 386, 389, 390, 394, 395, 396, 401, 404, 405, 406, 408, 409, 410, 411, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 428, 429, 430, 431, 432, 433, 434, 435, 436], "recip": 4, "finanli": 4, "setuptool": 4, "o": [4, 85], "On": 4, "linux": 4, "cython": 4, "dpcpp_linux": 4, "mkl": 4, "devel": 4, "dpcpp": 4, "tbb": 4, "onedpl": 4, "cmake": 4, "ninja": 4, "pytest": 4, "dpcpp_win": 4, "setup": 4, "py": 4, "g": [4, 83, 85, 89, 90, 98, 135, 136, 145, 305, 315, 316, 330, 419, 435, 436], "dcmake_c_compil": 4, "path": [4, 131, 182], "icx": 4, "dcmake_cxx_compil": 4, "icpx": 4, "script": 4, "build_loc": 4, "scope": 4, "suit": 4, "element": [4, 11, 12, 13, 14, 15, 18, 19, 21, 22, 23, 24, 25, 26, 27, 30, 31, 33, 44, 45, 46, 47, 48, 49, 53, 54, 56, 59, 60, 63, 64, 66, 67, 71, 72, 80, 81, 83, 85, 86, 91, 93, 94, 96, 97, 98, 99, 121, 122, 123, 124, 125, 126, 127, 128, 134, 140, 141, 144, 145, 147, 148, 150, 151, 152, 153, 154, 159, 160, 161, 162, 167, 170, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 199, 201, 202, 203, 204, 206, 209, 210, 211, 213, 214, 215, 216, 217, 264, 265, 272, 273, 275, 277, 278, 281, 283, 284, 286, 288, 290, 291, 296, 297, 298, 299, 301, 304, 305, 308, 310, 311, 312, 313, 319, 320, 321, 322, 323, 325, 327, 379, 380, 381, 382, 383, 384, 385, 387, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 406, 407, 408, 410, 412, 413, 414, 415, 420, 423, 426, 427, 428, 431, 434, 444, 448], "asarrai": [4, 6, 34, 36, 38, 39], "same": [4, 11, 12, 15, 30, 31, 33, 36, 38, 39, 40, 44, 47, 51, 53, 54, 57, 58, 59, 60, 72, 73, 80, 82, 83, 84, 90, 95, 97, 124, 126, 127, 128, 129, 136, 143, 147, 149, 150, 158, 167, 170, 175, 195, 197, 201, 203, 210, 211, 212, 213, 215, 216, 217, 269, 297, 309, 316, 317, 323, 325, 326, 328, 330, 352, 358, 374, 379, 380, 384, 389, 390, 392, 394, 401, 404, 405, 406, 408, 411, 414, 420, 422, 423, 425, 431, 432, 433, 436], "shape": [4, 6, 11, 12, 13, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 36, 40, 43, 44, 46, 47, 48, 49, 50, 51, 53, 54, 56, 58, 59, 60, 63, 65, 66, 67, 69, 72, 76, 80, 81, 82, 83, 84, 85, 89, 90, 91, 93, 94, 95, 96, 97, 121, 124, 125, 132, 135, 136, 140, 141, 143, 144, 147, 148, 149, 150, 152, 153, 154, 158, 159, 160, 161, 164, 169, 170, 171, 172, 175, 176, 177, 178, 179, 180, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 199, 200, 201, 202, 205, 206, 207, 208, 210, 211, 212, 213, 215, 216, 217, 269, 297, 303, 309, 311, 313, 314, 315, 316, 320, 321, 323, 325, 326, 330, 339, 342, 347, 348, 353, 357, 358, 359, 360, 361, 362, 363, 365, 370, 371, 377, 379, 381, 382, 383, 384, 385, 387, 388, 389, 390, 391, 392, 393, 394, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 412, 413, 414, 415, 417, 419, 420, 423, 424, 426, 427, 431, 433, 434, 435, 436, 437, 448], "expect": [4, 11, 12, 13, 18, 21, 22, 23, 24, 25, 26, 27, 31, 46, 47, 48, 49, 53, 54, 59, 60, 63, 66, 67, 72, 81, 82, 85, 91, 93, 94, 96, 124, 125, 140, 141, 144, 147, 150, 152, 153, 154, 159, 160, 161, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 196, 197, 202, 206, 210, 212, 215, 216, 217, 311, 313, 320, 321, 323, 380, 381, 382, 383, 387, 388, 391, 393, 397, 398, 399, 400, 402, 403, 406, 407, 408, 412, 413, 426, 427, 431], "comput": [4, 18, 21, 22, 23, 24, 25, 26, 27, 31, 44, 46, 47, 48, 49, 59, 60, 66, 67, 72, 80, 93, 94, 95, 96, 99, 100, 101, 102, 103, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117, 124, 142, 147, 148, 150, 163, 164, 165, 166, 167, 168, 169, 172, 173, 174, 175, 176, 178, 179, 180, 183, 184, 185, 186, 188, 189, 190, 191, 193, 194, 195, 197, 198, 201, 203, 210, 211, 212, 213, 215, 216, 217, 311, 320, 323, 380, 381, 382, 383, 388, 391, 393, 397, 398, 399, 400, 402, 403, 406, 408, 412, 413, 414, 431], "empti": [4, 6, 32, 83, 90, 131, 135, 136, 216, 278, 315, 316, 435, 436], "try": 4, "except": [4, 11, 12, 13, 15, 20, 21, 22, 23, 24, 25, 26, 27, 30, 32, 34, 35, 36, 38, 46, 47, 48, 49, 50, 51, 53, 54, 56, 58, 59, 60, 62, 63, 66, 67, 68, 80, 81, 82, 83, 89, 90, 91, 93, 94, 96, 98, 100, 106, 114, 124, 125, 130, 131, 132, 133, 134, 135, 136, 140, 141, 143, 144, 145, 150, 152, 153, 154, 159, 160, 161, 172, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 194, 195, 196, 197, 201, 202, 206, 211, 212, 213, 215, 216, 217, 269, 300, 311, 313, 315, 316, 320, 321, 322, 323, 381, 383, 384, 385, 387, 388, 393, 397, 398, 399, 400, 401, 402, 403, 406, 407, 408, 412, 413, 426, 427, 431, 435, 436], "found": [4, 394, 444], "here": [6, 30, 85, 401], "correspond": [6, 20, 28, 29, 32, 34, 35, 36, 37, 38, 56, 58, 62, 75, 78, 83, 89, 90, 98, 130, 131, 132, 133, 134, 135, 136, 137, 145, 148, 165, 166, 181, 182, 192, 194, 200, 277, 314, 315, 316, 330, 352, 357, 358, 359, 360, 361, 362, 363, 365, 366, 371, 374, 389, 396, 406, 414, 417, 419, 430, 431, 435, 436, 444], "column": [6, 34, 35, 36, 38, 39, 40, 57, 58, 72, 83, 84, 98, 122, 123, 143, 145, 165, 166, 172, 175, 178, 269, 281, 379, 392, 405, 419, 421, 424, 430, 433], "v1": 6, "23": [6, 330], "v0": 6, "15": [6, 28, 29, 72, 76, 174, 184, 354, 394], "0dev1": 6, "21": [6, 72, 85], "gceff0c7b51": 6, "v9": 6, "397": 6, "233": 6, "299": 6, "56": 6, "37": [6, 391], "47": 6, "20": [6, 148, 158, 159, 173, 326, 332, 347, 394, 411], "19": [6, 68, 85], "16": [6, 46, 76, 85, 133, 137, 139, 206, 321, 412], "18": [6, 85, 86, 173, 192], "51": 6, "48": [6, 70, 209], "49": 6, "total": [6, 68, 83, 288, 406, 431], "542": 6, "355": 6, "429": 6, "ab": [6, 12], "absolut": [6, 11, 18, 99, 176, 215, 217, 323, 406, 431], "add": [6, 85], "add_docstr": 6, "add_newdoc": 6, "add_newdoc_ufunc": 6, "allclos": [6, 33, 151, 169, 174, 175, 177, 178, 180], "alltru": 6, "amax": [6, 195], "amin": [6, 201], "angl": [6, 25, 26, 73, 74, 328, 329, 429], "apply_along_axi": 6, "apply_over_ax": 6, "arcco": [6, 22, 23, 25, 26, 66], "arccosh": [6, 21, 24, 27, 67], "arcsin": [6, 21, 24, 25, 26, 399], "arcsinh": [6, 22, 23, 27, 400], "arctan": [6, 18, 21, 23, 26, 27, 412], "arctan2": [6, 18, 25], "arctanh": [6, 22, 24, 25, 26, 413], "argmin": [6, 28, 83, 208, 411, 444], "argpartit": [6, 30, 444], "argsort": [6, 83, 394, 401, 411, 417, 444], "argwher": 6, "around": [6, 83, 137, 325, 391], "array2str": 6, "array_equ": 6, "array_equiv": [6, 33], "array_repr": 6, "array_split": [6, 58], "array_str": 6, "asanyarrai": [6, 35, 38], "asarray_chkfinit": [6, 34, 35], "ascontiguousarrai": [6, 34, 35, 38], "asfarrai": [6, 34, 35], "asfortranarrai": [6, 34, 35, 36], "asmatrix": 6, "atleast_1d": [6, 42, 43, 95], "atleast_2d": [6, 41, 43, 95], "atleast_3d": [6, 41, 42, 95], "averag": [6, 83, 197, 212, 286, 408, 448], "bartlett": 6, "base_repr": 6, "binary_repr": 6, "bincount": 6, "bitwise_and": [6, 47, 48, 49, 150, 188], "bitwise_not": 6, "bitwise_or": [6, 46, 47, 49, 150, 190], "bitwise_xor": [6, 46, 47, 48, 150, 191], "blackman": 6, "block": [6, 58, 84, 143, 392, 405, 433], "bmat": 6, "broadcast_arrai": [6, 51], "broadcast_shap": 6, "broadcast_to": [6, 50, 415], "busday_count": 6, "busday_offset": 6, "byte_bound": 6, "can_cast": [6, 448], "cbrt": [6, 402], "ceil": [6, 31, 124, 125, 388, 391, 427], "choos": [6, 18, 25, 83, 434, 444], "clip": [6, 83, 325, 410, 444], "column_stack": [6, 58, 84, 143, 392, 405, 433], "common_typ": 6, "compare_chararrai": 6, "compress": [6, 410, 444], "concaten": [6, 57, 84, 143, 392, 405, 411, 433], "conj": [6, 60, 83, 147, 162, 165, 323], "conjug": [6, 59, 82, 83, 147, 162, 165, 166, 167, 168, 194, 272, 323, 432], "convolv": [6, 65], "copi": [6, 20, 30, 32, 34, 35, 36, 37, 38, 40, 41, 42, 43, 64, 75, 78, 83, 85, 89, 90, 98, 130, 131, 132, 133, 134, 135, 136, 137, 145, 148, 181, 182, 192, 199, 200, 224, 269, 281, 283, 291, 297, 300, 314, 315, 316, 318, 320, 330, 352, 357, 358, 359, 360, 361, 362, 363, 365, 371, 374, 385, 394, 401, 404, 419, 420, 423, 430, 435, 436, 444], "copysign": [6, 311, 320], "copyto": [6, 83, 274], "corrcoef": [6, 69], "correl": [6, 448], "co": [6, 21, 67, 167, 399, 412], "cosh": [6, 22, 66, 400, 413], "count_nonzero": [6, 312], "cov": [6, 348], "cross": [6, 65], "cumprod": [6, 209, 444], "cumproduct": 6, "cumsum": [6, 80, 83, 210, 408, 444], "datetime_as_str": 6, "datetime_data": 6, "deg2rad": [6, 328, 329, 429], "degre": [6, 18, 73, 215, 217, 328, 329, 372, 406, 429, 431], "delet": 6, "deprec": 6, "deprecate_with_doc": 6, "diag": [6, 78, 122, 123, 145, 165, 167, 178], "diag_indic": [6, 77, 118], "diag_indices_from": [6, 76, 118], "diagflat": [6, 75], "diagon": [6, 75, 76, 77, 78, 83, 98, 118, 145, 162, 166, 167, 168, 416, 419, 420, 421, 422, 423, 424, 425, 444], "diff": [6, 72, 86, 139, 142], "digit": [6, 119], "disp": 6, "divid": [6, 84, 125, 128, 203, 383, 426], "divmod": [6, 444], "dot": [6, 83, 87, 88, 149, 162, 167, 169, 172, 174, 175, 177, 178, 179, 180, 194, 414, 432], "dsplit": [6, 58, 84], "dstack": [6, 57, 58, 143, 392, 405, 433], "ediff1d": [6, 80], "einsum": [6, 82, 88, 149, 180, 194, 317, 414], "einsum_path": [6, 87], "empty_lik": [6, 32, 89, 136, 316, 436], "equal": [6, 14, 15, 19, 33, 44, 58, 65, 69, 72, 83, 98, 137, 140, 141, 143, 151, 156, 159, 160, 161, 170, 174, 175, 180, 181, 192, 291, 313, 330, 340, 374, 383, 387, 392, 397, 404, 405, 419, 421, 424, 433], "exp": [6, 94, 96, 176, 185, 187, 193], "exp2": [6, 93, 96], "expand_dim": [6, 28, 29], "expm1": [6, 93, 94, 185], "extract": [6, 75, 78, 148], "ey": [6, 59, 60, 68, 83, 126, 127, 145, 149, 158, 169, 170, 171, 179, 180, 191, 196, 202, 396], "fab": [6, 11, 12], "fastcopyandtranspos": 6, "fill_diagon": 6, "find_common_typ": 6, "fix": [6, 85, 325], "flatnonzero": [6, 312], "flip": [6, 47, 122, 123, 150, 332], "fliplr": [6, 121, 123], "flipud": [6, 121, 122], "float_pow": 6, "floor": [6, 31, 54, 125, 383, 388, 391, 427], "floor_divid": [6, 128, 203, 383], "fmax": [6, 127, 195, 196, 202, 211, 321], "fmin": [6, 126, 196, 201, 202, 213, 321], "fmod": [6, 126, 127, 203, 321, 383], "format_float_posit": 6, "format_float_scientif": 6, "frexp": 6, "from_dlpack": 6, "frombuff": [6, 131, 133, 134, 182], "fromfil": [6, 130, 133, 134], "fromfunct": [6, 34, 35], "fromit": [6, 34, 35, 130, 131, 134], "frompyfunc": 6, "fromregex": [6, 182], "fromstr": [6, 130, 131, 133, 182], "full": [6, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 282, 283, 285, 286, 287, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436], "full_lik": [6, 32, 90, 135, 316, 436], "gcd": 6, "genfromtxt": [6, 182], "geomspac": [6, 181, 192], "get_array_wrap": 6, "get_includ": 6, "get_printopt": 6, "getbufs": 6, "geterr": 6, "geterrcal": 6, "geterrobj": 6, "gradient": [6, 80], "greater": [6, 83, 91, 125, 141, 159, 160, 161, 171, 175, 291, 313, 387, 397, 404], "greater_equ": [6, 91, 140, 160, 161, 313], "ham": 6, "han": 6, "heavisid": 6, "histogram": [6, 394, 448], "histogram2d": 6, "histogram_bin_edg": 6, "histogramdd": 6, "hsplit": [6, 58], "hstack": [6, 57, 58, 84, 392, 405, 433], "hypot": [6, 382], "i0": 6, "imag": [6, 83, 444], "in1d": 6, "indic": [6, 28, 29, 30, 76, 77, 83, 85, 118, 132, 179, 180, 194, 200, 207, 208, 266, 267, 268, 290, 293, 299, 308, 312, 325, 326, 385, 394, 397, 398, 401, 410, 411, 417, 421, 422, 424, 425, 434], "info": 6, "inner": [6, 70, 87, 88, 172, 194, 317], "insert": [6, 28, 29, 83, 95, 137, 181, 192, 193, 195, 201, 207, 208, 211, 213, 299, 326, 382, 394, 448], "interp": 6, "intersect1d": 6, "invert": [6, 47, 169, 174, 179], "is_busdai": 6, "isclos": [6, 15], "iscomplex": 6, "iscomplexobj": 6, "isfinit": [6, 153, 154, 211, 213, 216], "isfortran": 6, "isin": 6, "isinf": [6, 152, 154], "isnan": [6, 152, 153, 210, 211, 213, 214, 216], "isnat": [6, 154], "isneginf": [6, 152, 153, 154], "isposinf": [6, 152, 153, 154], "isreal": 6, "isrealobj": 6, "isscalar": 6, "issctyp": 6, "issubclass_": 6, "issubdtyp": 6, "issubsctyp": 6, "iter": [6, 34, 35, 83, 120, 130, 131, 133, 134, 280, 448], "ix_": 6, "kaiser": 6, "kron": 6, "lcm": 6, "ldexp": 6, "left_shift": [6, 387], "less": [6, 72, 91, 140, 141, 161, 174, 193, 210, 216, 313, 382, 397, 408], "less_equ": [6, 91, 140, 141, 160, 313], "lexsort": [6, 30, 401], "load": [6, 131, 182], "loadtxt": [6, 131], "log": [6, 96, 137, 176, 181, 184, 185, 186, 187, 192, 193, 345], "log10": [6, 183, 185, 186], "log1p": [6, 94, 96, 183, 184, 186], "log2": [6, 183, 184, 185], "logaddexp": [6, 193], "logaddexp2": 6, "logical_and": [6, 46, 189, 190, 191], "logical_not": [6, 47, 150, 188, 190, 191], "logical_or": [6, 48, 188, 189, 191], "logical_xor": [6, 49, 188, 189, 190], "logspac": [6, 137, 181], "lookfor": 6, "mask_indic": 6, "mat": 6, "matmul": [6, 82, 175, 178, 432], "maximum_sctyp": 6, "may_share_memori": 6, "meshgrid": [6, 132, 200, 314], "min": [6, 17, 29, 56, 83, 119, 127, 146, 163, 175, 178, 195, 196, 202, 213, 271, 411, 444], "min_scalar_typ": 6, "minimum": [6, 17, 28, 29, 56, 83, 126, 127, 195, 196, 201, 207, 208, 211, 213, 267, 287, 321, 324], "mintypecod": 6, "mod": [6, 383], "modf": 6, "moveaxi": [6, 389, 390, 417], "msort": 6, "multipli": [6, 167], "nan_to_num": 6, "nanargmax": [6, 28, 208], "nanargmin": [6, 29, 207], "nancumprod": 6, "nancumsum": 6, "nanmax": [6, 126, 195, 196, 202, 213], "nanmean": [6, 197, 215, 217, 406, 431], "nanmedian": 6, "nanmin": [6, 127, 196, 201, 202, 211], "nanpercentil": 6, "nanprod": [6, 322], "nanquantil": 6, "nanstd": [6, 197, 212, 217, 406, 431], "nansum": 6, "nanvar": [6, 197, 212, 215, 406, 431], "ndim": [6, 32, 36, 38, 41, 42, 43, 69, 76, 83, 85, 158, 178, 315, 415, 417, 435], "neg": [6, 14, 19, 31, 45, 63, 78, 95, 98, 121, 134, 152, 153, 154, 170, 211, 213, 216, 320, 321, 349, 391, 402, 410], "nested_it": 6, "nextaft": 6, "nonzero": [6, 68, 83, 434, 444], "not_equ": [6, 91, 140, 141, 160, 161], "obj2sctyp": 6, "ones": [6, 32, 36, 38, 44, 81, 83, 89, 90, 91, 95, 98, 135, 136, 144, 145, 158, 171, 193, 214, 316, 322, 382, 386, 390, 417, 419, 426, 435, 436], "ones_lik": [6, 32, 90, 136, 315, 436], "outer": [6, 70, 87, 88, 158], "packbit": 6, "pad": [6, 85], "partit": [6, 20, 32, 34, 35, 36, 37, 38, 62, 75, 78, 83, 89, 90, 98, 130, 131, 132, 133, 134, 135, 136, 137, 145, 148, 181, 182, 192, 200, 314, 315, 316, 330, 352, 357, 358, 359, 360, 361, 362, 363, 365, 366, 371, 374, 401, 419, 430, 435, 436, 444], "percentil": [6, 198], "piecewis": 6, "place": [6, 31, 56, 58, 72, 82, 83, 95, 148, 194, 197, 210, 212, 215, 216, 217, 302, 309, 314, 325, 367, 385, 389, 391, 401, 405, 406, 408, 431, 444], "poli": 6, "polyadd": 6, "polyd": 6, "polydiv": 6, "polyfit": 6, "polyint": 6, "polymul": 6, "polysub": 6, "polyv": 6, "posit": [6, 14, 19, 20, 31, 34, 35, 53, 63, 78, 83, 95, 98, 119, 131, 152, 153, 154, 162, 170, 179, 205, 211, 213, 216, 291, 311, 332, 356, 389, 390, 391, 393, 403, 417], "power": [6, 94, 170, 403, 430], "printopt": 6, "prod": [6, 83, 179, 180, 214, 444], "product": [6, 70, 71, 82, 83, 87, 88, 149, 158, 172, 177, 179, 180, 194, 206, 209, 214, 317, 322, 414, 432, 448], "promote_typ": 6, "ptp": [6, 444], "put": [6, 83, 326, 411, 444], "put_along_axi": [6, 325, 411], "putmask": [6, 325], "quantil": 6, "rad2deg": [6, 73, 74, 429], "radian": [6, 18, 21, 23, 25, 26, 73, 74, 328, 429], "ravel": [6, 83, 173, 281, 444], "ravel_multi_index": 6, "real": [6, 11, 12, 20, 26, 53, 54, 63, 83, 111, 112, 113, 114, 115, 117, 119, 124, 126, 127, 144, 147, 162, 165, 166, 167, 168, 171, 174, 175, 176, 178, 187, 193, 215, 217, 332, 349, 381, 382, 383, 393, 406, 427, 431, 444, 448], "real_if_clos": 6, "recfromcsv": 6, "recfromtxt": 6, "reciproc": [6, 393, 402], "remaind": [6, 125, 126, 127, 128, 203, 321], "repeat": [6, 83, 165, 166, 167, 168, 199, 415, 444], "resiz": [6, 95, 444], "result_typ": [6, 52, 85, 448], "right_shift": [6, 159], "rint": [6, 31, 391], "roll": [6, 390], "rollaxi": [6, 389], "root": [6, 53, 144, 163, 381, 382, 393, 402, 403], "rot90": 6, "round": [6, 20, 31, 83, 125, 165, 383, 388, 427, 444, 448], "round_": 6, "row_stack": [6, 433], "safe_ev": 6, "save": [6, 131], "savetxt": 6, "savez": 6, "savez_compress": 6, "sctype2char": 6, "searchsort": [6, 83, 401, 444], "select": [6, 64, 404, 437], "set_numeric_op": 6, "set_printopt": 6, "set_string_funct": 6, "setbufs": 6, "setdiff1d": 6, "seterr": 6, "seterrcal": 6, "seterrobj": 6, "setxor1d": 6, "shares_memori": 6, "show_config": 6, "sign": [6, 63, 85, 164, 176, 311, 320, 398, 427], "signbit": [6, 397], "sinc": [6, 83, 165, 167, 302, 312], "sinh": [6, 24, 67, 399, 413], "sometru": 6, "sort": [6, 30, 83, 178, 268, 291, 394, 411, 417, 437, 444, 448], "sort_complex": 6, "space": [6, 20, 131, 137, 181, 192], "split": [6, 58, 84, 143, 392, 405, 433, 448], "sqrt": [6, 53, 83, 282, 295, 382, 393, 403], "squar": [6, 53, 144, 145, 162, 163, 165, 166, 167, 169, 170, 176, 179, 180, 215, 217, 334, 350, 381, 382, 393, 402, 406, 422, 425, 430, 431], "squeez": [6, 83, 95, 444], "stack": [6, 57, 58, 84, 143, 164, 171, 174, 175, 176, 194, 312, 392, 411, 433], "std": [6, 83, 197, 212, 215, 217, 431, 444], "subtract": 6, "swapax": [6, 83, 205, 444], "take": [6, 57, 83, 326, 385, 394, 411, 444], "take_along_axi": [6, 28, 29, 30, 55, 326, 410], "tan": [6, 25, 26, 66, 399, 413], "tanh": [6, 27, 67, 400, 412], "tensordot": [6, 82, 149, 179, 180, 194], "tile": [6, 384, 448], "trace": [6, 75, 78, 444], "transpos": [6, 83, 162, 167, 205, 219, 444, 448], "trapz": [6, 408], "tri": 6, "tril": [6, 75, 419, 421, 422, 425], "tril_indic": [6, 422, 425], "tril_indices_from": 6, "trim_zero": 6, "triu": [6, 75, 419, 424], "triu_indic": 6, "triu_indices_from": 6, "true_divid": [6, 81], "trunc": [6, 31, 54, 124, 388, 391], "typenam": 6, "union1d": 6, "uniqu": [6, 44, 45, 85, 193, 197, 205, 212, 215, 216, 217, 382, 406, 408, 431], "unpackbit": 6, "unravel_index": [6, 28, 29], "unwrap": [6, 73, 328], "vander": 6, "var": [6, 83, 197, 212, 215, 217, 406, 444], "vdot": [6, 82, 194], "vsplit": [6, 58], "vstack": [6, 57, 58, 84, 143, 392, 405], "who": 6, "zero": [6, 14, 19, 28, 29, 30, 32, 68, 76, 80, 83, 89, 90, 98, 104, 109, 124, 131, 135, 136, 145, 159, 165, 166, 168, 170, 171, 174, 178, 193, 195, 197, 201, 205, 207, 208, 210, 211, 212, 213, 215, 216, 217, 290, 312, 315, 316, 330, 332, 360, 362, 363, 365, 382, 397, 401, 406, 408, 414, 419, 420, 423, 427, 431, 434, 436], "zeros_lik": [6, 32, 90, 136, 316, 435], "astyp": [6, 83, 137, 312], "byteswap": 6, "dump": 6, "fill": [6, 32, 83, 89, 90, 118, 135, 136, 199, 274, 315, 316, 410, 419, 435, 436], "flatten": [6, 28, 29, 30, 58, 72, 75, 78, 83, 207, 208, 210, 280, 294, 302, 312, 326, 379, 384, 389, 401, 411, 432], "getfield": [6, 85], "item": [6, 83, 130, 131, 133, 437], "itemset": 6, "newbyteord": [6, 85], "setfield": [6, 85], "setflag": 6, "tobyt": 6, "tofil": [6, 131], "tolist": 6, "tostr": 6, "view": [6, 41, 42, 43, 50, 83, 95, 121, 122, 123, 199, 205, 219, 297, 309, 326, 385, 404, 409, 417], "linalg": [6, 82, 403], "choleski": 6, "cond": [6, 169], "det": [6, 176], "eig": [6, 166, 167, 168], "eigh": [6, 165, 167, 168], "eigval": [6, 165, 166, 168], "eigvalsh": [6, 165, 166, 167], "inv": [6, 163, 174], "lstsq": 6, "matrix_pow": [6, 403], "matrix_rank": 6, "multi_dot": [6, 82], "norm": [6, 100, 101, 103, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 117, 163, 167, 448], "pinv": 6, "qr": 6, "slogdet": [6, 164], "solv": [6, 179, 180, 448], "svd": [6, 163, 169, 171, 174], "tensorinv": [6, 180], "tensorsolv": [6, 179], "fft": [6, 437, 448], "fft2": 6, "fftfreq": 6, "fftn": 6, "fftshift": 6, "hfft": 6, "ifft": 6, "ifft2": 6, "ifftn": 6, "ifftshift": 6, "ihfft": 6, "irfft": 6, "irfft2": 6, "irfftn": 6, "rfft": 6, "rfft2": 6, "rfftfreq": 6, "rfftn": 6, "beta": [6, 341], "binomi": [6, 349], "byte": [6, 40, 83, 85, 130, 131, 182, 269, 284, 288], "chisquar": 6, "choic": [6, 55, 83, 166, 168, 270], "default_rng": 6, "dirichlet": 6, "exponenti": [6, 93, 94, 96, 187, 193, 343, 369], "gamma": [6, 370], "geometr": [6, 137, 181], "get_stat": [6, 330], "gumbel": 6, "hypergeometr": 6, "laplac": 6, "logist": 6, "lognorm": 6, "logseri": 6, "multinomi": 6, "multivariate_norm": 6, "negative_binomi": 6, "noncentral_chisquar": 6, "noncentral_f": 6, "normal": [6, 69, 165, 166, 175, 330, 345, 348, 359, 371], "pareto": 6, "permut": [6, 83, 205, 309, 417, 448], "poisson": 6, "rand": [6, 330, 360, 362, 363, 365], "randint": [6, 83, 283, 330, 361], "randn": [6, 121, 122, 123, 174, 175, 178, 180, 330, 405], "random_integ": [6, 330, 358], "random_sampl": [6, 330, 357, 360, 363, 365], "ranf": 6, "rayleigh": 6, "seed": [6, 83, 283, 330], "set_stat": 6, "shuffl": 6, "standard_cauchi": 6, "standard_exponenti": 6, "standard_gamma": 6, "standard_norm": [6, 330, 359], "standard_t": 6, "triangular": [6, 162, 166, 168, 175], "uniform": [6, 85, 192, 330, 357, 360, 362, 363, 365], "vonmis": 6, "wald": 6, "weibul": [6, 378], "zipf": 6, "show": [9, 85, 144, 191, 199, 210, 211, 213, 216, 368], "constant": [9, 85], "alias": 9, "bool": [9, 14, 19, 28, 29, 32, 37, 40, 44, 52, 64, 83, 85, 100, 106, 114, 137, 152, 153, 154, 162, 171, 173, 174, 178, 181, 192, 193, 195, 197, 199, 201, 207, 208, 211, 212, 213, 215, 216, 217, 269, 312, 382, 385, 398, 406, 408, 430, 431], "complex64": [9, 44, 100, 106], "complex128": [9, 44, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 386], "bool_": 9, "cdoubl": 9, "complex": [9, 11, 12, 18, 25, 26, 52, 82, 83, 85, 92, 119, 147, 165, 166, 167, 168, 175, 176, 178, 194, 215, 217, 272, 273, 323, 380, 406, 431, 432, 444, 448], "cfloat": 9, "csingl": 9, "doubl": [9, 343, 414], "float": [9, 11, 12, 15, 18, 20, 26, 34, 35, 37, 44, 52, 63, 72, 85, 89, 90, 94, 98, 119, 130, 131, 132, 133, 134, 135, 136, 139, 145, 147, 170, 171, 173, 174, 181, 182, 187, 192, 195, 197, 201, 212, 215, 217, 315, 316, 330, 334, 359, 360, 362, 363, 365, 368, 369, 371, 374, 380, 381, 393, 406, 419, 431, 435, 436, 444, 448], "float_": 9, "float16": 9, "int": [9, 20, 28, 29, 30, 31, 37, 44, 45, 51, 58, 70, 72, 75, 76, 78, 80, 83, 85, 89, 90, 91, 95, 98, 119, 121, 130, 131, 132, 133, 134, 135, 136, 137, 139, 145, 146, 148, 170, 173, 179, 180, 181, 192, 193, 195, 197, 201, 205, 207, 208, 210, 211, 212, 213, 215, 216, 217, 269, 309, 315, 316, 318, 322, 326, 330, 358, 361, 382, 384, 385, 389, 390, 391, 396, 401, 404, 405, 406, 408, 409, 411, 414, 415, 417, 419, 420, 421, 422, 423, 424, 425, 430, 431, 435, 436, 444], "int_": 9, "intc": 9, "singl": [9, 30, 51, 57, 83, 172, 303, 330, 349, 358, 359, 360, 361, 362, 363, 365, 371, 444], "singlecomplex": 9, "e": [9, 22, 24, 83, 85, 89, 90, 95, 98, 131, 135, 136, 145, 159, 165, 176, 179, 183, 305, 315, 316, 330, 409, 419, 435, 436], "euler_gamma": 9, "inf": [9, 15, 26, 34, 35, 63, 81, 152, 153, 154, 163, 173, 183, 184, 186, 196, 202, 207, 208, 211, 213, 216, 323, 402, 426], "infin": [9, 14, 19, 125, 152, 153, 154, 211, 213, 216, 383, 427, 448], "infti": 9, "nan": [9, 14, 15, 19, 28, 29, 34, 35, 81, 126, 127, 152, 153, 154, 184, 195, 196, 197, 201, 202, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 321, 322, 402, 406, 426, 431, 448], "ninf": [9, 211, 213, 216], "nzero": 9, "pinf": 9, "pzero": 9, "out": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 66, 67, 68, 69, 70, 72, 74, 75, 78, 80, 81, 82, 83, 84, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 158, 159, 160, 161, 163, 169, 172, 173, 174, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 264, 265, 266, 267, 270, 271, 274, 275, 281, 285, 286, 287, 292, 298, 304, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 320, 321, 322, 323, 324, 329, 330, 352, 357, 358, 359, 360, 361, 362, 363, 365, 371, 374, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 423, 426, 427, 429, 430, 431, 432, 433, 435, 436], "none": [11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 44, 45, 46, 47, 48, 49, 53, 54, 55, 56, 58, 59, 60, 62, 63, 66, 67, 68, 69, 70, 72, 75, 78, 80, 81, 82, 83, 85, 86, 89, 90, 91, 93, 94, 95, 96, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 121, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 140, 141, 142, 143, 144, 145, 147, 148, 150, 152, 153, 154, 159, 160, 161, 163, 171, 172, 173, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 264, 265, 266, 267, 268, 270, 271, 275, 283, 285, 286, 287, 291, 292, 293, 296, 298, 299, 302, 303, 304, 306, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 381, 382, 383, 384, 385, 387, 388, 389, 391, 392, 393, 394, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 416, 417, 418, 419, 421, 424, 426, 427, 430, 431, 433, 434, 435, 436, 444], "order": [11, 12, 13, 18, 21, 22, 23, 24, 25, 26, 27, 30, 32, 34, 35, 36, 38, 39, 40, 46, 47, 48, 49, 53, 54, 56, 59, 60, 62, 63, 66, 67, 81, 83, 85, 87, 88, 89, 90, 91, 93, 94, 96, 98, 121, 122, 123, 124, 125, 131, 135, 136, 140, 141, 144, 147, 150, 152, 153, 154, 159, 160, 161, 163, 165, 166, 167, 168, 178, 183, 184, 185, 186, 187, 188, 189, 190, 191, 194, 196, 199, 202, 203, 205, 206, 224, 268, 269, 274, 281, 291, 294, 299, 302, 309, 311, 312, 313, 315, 316, 318, 320, 321, 323, 379, 381, 383, 385, 387, 388, 393, 394, 397, 398, 399, 400, 401, 402, 403, 407, 412, 413, 414, 417, 426, 427, 430, 435, 436, 448], "k": [11, 12, 13, 18, 21, 22, 23, 24, 25, 26, 27, 32, 34, 35, 39, 40, 46, 47, 48, 49, 53, 54, 56, 59, 60, 62, 63, 66, 67, 75, 78, 81, 83, 91, 93, 94, 96, 98, 124, 125, 140, 141, 144, 147, 150, 152, 153, 154, 158, 159, 160, 161, 175, 177, 178, 183, 184, 185, 186, 187, 188, 189, 190, 191, 194, 196, 202, 203, 206, 224, 269, 274, 281, 311, 313, 320, 321, 323, 381, 383, 387, 388, 393, 397, 398, 399, 400, 402, 403, 407, 412, 413, 414, 419, 420, 421, 422, 423, 424, 425, 426, 427, 452], "subok": [11, 12, 13, 21, 22, 23, 24, 25, 26, 27, 32, 40, 46, 47, 48, 49, 50, 51, 53, 54, 59, 60, 62, 63, 66, 67, 81, 83, 90, 91, 93, 94, 96, 124, 125, 126, 127, 128, 136, 140, 141, 144, 147, 150, 152, 153, 154, 159, 160, 161, 183, 184, 185, 186, 187, 188, 189, 190, 191, 194, 196, 202, 203, 206, 269, 311, 313, 316, 320, 321, 323, 381, 383, 387, 388, 393, 397, 398, 399, 400, 402, 403, 407, 412, 413, 426, 427, 436], "kwarg": [11, 12, 13, 15, 21, 22, 23, 24, 25, 26, 27, 46, 47, 48, 49, 53, 54, 56, 59, 60, 63, 66, 67, 71, 74, 81, 83, 87, 91, 93, 94, 96, 99, 124, 125, 126, 127, 128, 132, 139, 140, 141, 144, 147, 150, 152, 153, 154, 159, 160, 161, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 196, 202, 203, 204, 206, 209, 253, 271, 297, 311, 313, 320, 321, 323, 329, 381, 383, 387, 388, 393, 397, 398, 399, 400, 402, 403, 407, 412, 413, 418, 426, 427, 428, 429], "calcul": [11, 12, 13, 18, 26, 44, 72, 80, 81, 86, 91, 93, 94, 96, 99, 124, 125, 126, 127, 139, 140, 141, 144, 160, 161, 165, 166, 167, 168, 174, 187, 193, 194, 197, 203, 206, 212, 215, 216, 217, 313, 321, 382, 383, 406, 407, 426, 431, 432, 437], "valu": [11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 38, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 72, 79, 80, 81, 83, 85, 86, 89, 90, 91, 93, 94, 96, 97, 98, 99, 100, 106, 118, 119, 120, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 140, 141, 144, 145, 147, 148, 150, 152, 153, 154, 159, 160, 161, 162, 165, 166, 167, 168, 169, 170, 171, 174, 176, 177, 178, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 206, 207, 208, 211, 212, 213, 214, 215, 216, 217, 221, 222, 225, 227, 228, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 254, 256, 258, 259, 260, 261, 262, 263, 266, 267, 269, 271, 274, 278, 280, 291, 293, 311, 312, 313, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 330, 340, 357, 358, 374, 380, 381, 382, 383, 384, 385, 387, 388, 389, 391, 393, 394, 395, 397, 398, 399, 401, 402, 403, 406, 407, 408, 410, 411, 412, 413, 416, 426, 427, 429, 431, 434, 435, 436, 444, 448], "wise": [11, 12, 13, 15, 18, 21, 22, 23, 24, 25, 26, 27, 31, 33, 46, 47, 48, 49, 53, 54, 57, 58, 59, 60, 63, 66, 67, 81, 83, 84, 91, 93, 94, 96, 99, 124, 125, 126, 127, 128, 140, 141, 143, 144, 147, 150, 151, 152, 153, 154, 159, 160, 161, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 195, 196, 201, 202, 203, 204, 206, 211, 213, 214, 273, 311, 313, 320, 321, 323, 380, 381, 383, 387, 388, 391, 392, 393, 397, 398, 399, 400, 402, 403, 405, 407, 412, 413, 426, 433, 444], "paramet": [11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 269, 278, 281, 297, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 330, 331, 332, 334, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 430, 431, 432, 433, 434, 435, 436], "usm_ndarrai": [11, 12, 13, 14, 15, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 37, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 63, 64, 66, 67, 68, 70, 72, 80, 81, 82, 83, 84, 90, 91, 93, 94, 95, 96, 97, 121, 122, 123, 124, 125, 126, 127, 128, 136, 140, 141, 143, 144, 147, 149, 150, 152, 153, 154, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 199, 201, 202, 203, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 269, 311, 312, 313, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 420, 423, 426, 427, 431, 432, 433, 434, 436], "input": [11, 12, 13, 14, 15, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 53, 54, 56, 59, 60, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 78, 79, 80, 81, 82, 83, 86, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 111, 112, 113, 114, 115, 117, 121, 122, 123, 124, 125, 126, 127, 128, 130, 134, 135, 136, 139, 140, 141, 143, 144, 145, 147, 149, 150, 151, 152, 153, 154, 158, 159, 160, 161, 162, 164, 166, 171, 173, 175, 176, 178, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 269, 281, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 352, 358, 374, 379, 380, 381, 382, 383, 384, 385, 387, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 423, 426, 427, 429, 430, 431, 432, 435, 436], "option": [11, 12, 13, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 40, 44, 46, 47, 48, 49, 52, 53, 54, 56, 58, 59, 60, 62, 63, 64, 66, 67, 70, 72, 75, 78, 80, 81, 82, 83, 85, 89, 90, 91, 93, 94, 96, 98, 121, 124, 125, 130, 131, 132, 133, 134, 135, 136, 137, 140, 141, 143, 144, 145, 147, 148, 150, 152, 153, 154, 159, 160, 161, 162, 163, 166, 168, 171, 172, 173, 174, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 206, 207, 208, 210, 211, 212, 213, 215, 216, 217, 269, 281, 309, 311, 313, 314, 315, 316, 320, 321, 323, 330, 352, 357, 358, 359, 360, 361, 362, 363, 365, 366, 371, 374, 379, 381, 382, 383, 384, 385, 387, 388, 389, 390, 391, 392, 393, 394, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 412, 413, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 430, 431, 433, 434, 435, 436], "output": [11, 12, 13, 18, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 34, 35, 36, 37, 38, 46, 47, 48, 49, 53, 54, 56, 59, 60, 62, 63, 66, 67, 72, 75, 78, 80, 81, 82, 85, 89, 90, 91, 93, 94, 96, 98, 124, 125, 130, 131, 132, 133, 134, 135, 136, 137, 140, 141, 144, 145, 147, 148, 150, 152, 153, 154, 159, 160, 161, 172, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 197, 199, 200, 202, 206, 208, 210, 212, 215, 216, 217, 260, 311, 313, 314, 315, 316, 320, 321, 323, 330, 331, 332, 334, 337, 338, 339, 340, 341, 342, 343, 344, 345, 349, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 381, 383, 384, 387, 388, 391, 393, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 412, 413, 415, 419, 426, 427, 430, 431, 435, 436, 448], "popul": [11, 12, 13, 18, 21, 22, 23, 24, 25, 26, 27, 31, 46, 47, 48, 49, 53, 54, 59, 60, 63, 66, 67, 81, 83, 91, 93, 94, 96, 124, 125, 140, 141, 144, 147, 150, 152, 153, 154, 159, 160, 161, 183, 184, 185, 186, 187, 188, 189, 190, 191, 196, 202, 206, 311, 313, 320, 321, 323, 330, 357, 381, 383, 387, 388, 391, 393, 397, 398, 399, 400, 402, 403, 407, 412, 413, 426, 427], "must": [11, 12, 13, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 44, 46, 47, 48, 49, 51, 53, 54, 56, 57, 58, 59, 60, 63, 66, 67, 72, 80, 81, 82, 84, 93, 94, 95, 96, 97, 122, 124, 125, 131, 134, 140, 141, 143, 144, 147, 150, 152, 153, 154, 159, 160, 161, 162, 172, 173, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 201, 202, 205, 206, 207, 208, 210, 211, 212, 213, 215, 216, 217, 311, 313, 320, 321, 323, 325, 326, 381, 382, 383, 387, 388, 389, 391, 392, 393, 394, 397, 398, 399, 400, 402, 403, 405, 406, 407, 408, 409, 411, 412, 413, 414, 417, 426, 427, 431, 433], "correct": [11, 12, 13, 18, 21, 22, 23, 24, 25, 26, 27, 31, 46, 47, 48, 49, 53, 54, 58, 59, 60, 63, 66, 67, 81, 91, 93, 94, 96, 124, 125, 140, 141, 144, 147, 150, 152, 153, 154, 159, 160, 161, 177, 183, 184, 185, 186, 187, 188, 189, 190, 191, 196, 202, 206, 311, 313, 320, 321, 323, 381, 383, 387, 388, 391, 393, 397, 398, 399, 400, 402, 403, 405, 407, 412, 413, 426, 427], "A": [11, 12, 13, 15, 18, 20, 21, 22, 23, 24, 25, 26, 27, 32, 34, 35, 36, 37, 38, 39, 40, 46, 47, 48, 49, 50, 51, 53, 54, 56, 57, 59, 60, 62, 63, 64, 66, 67, 72, 75, 78, 81, 83, 85, 89, 90, 91, 93, 94, 95, 96, 98, 121, 122, 123, 124, 125, 129, 130, 131, 132, 133, 134, 135, 136, 137, 140, 141, 144, 145, 147, 148, 150, 152, 153, 154, 159, 160, 161, 162, 166, 167, 168, 171, 172, 175, 176, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 200, 202, 206, 210, 214, 216, 269, 274, 281, 300, 311, 312, 313, 314, 315, 316, 320, 321, 322, 323, 330, 332, 349, 352, 357, 358, 359, 360, 361, 362, 363, 365, 366, 371, 374, 379, 381, 383, 384, 387, 388, 393, 397, 398, 399, 400, 402, 403, 407, 409, 412, 413, 414, 415, 417, 419, 426, 427, 430, 435, 436], "layout": [11, 12, 13, 18, 21, 22, 23, 24, 25, 26, 27, 32, 34, 35, 36, 38, 39, 46, 47, 48, 49, 53, 54, 56, 59, 60, 62, 63, 66, 67, 81, 83, 89, 90, 91, 93, 94, 96, 98, 124, 125, 135, 136, 140, 141, 144, 147, 150, 152, 153, 154, 159, 160, 161, 183, 184, 185, 186, 187, 188, 189, 190, 191, 194, 196, 202, 206, 279, 311, 313, 315, 316, 320, 323, 381, 383, 385, 387, 388, 393, 397, 398, 399, 400, 402, 403, 407, 412, 413, 426, 427, 435, 436, 437], "newli": [11, 12, 13, 18, 21, 22, 23, 24, 25, 26, 27, 32, 34, 35, 40, 46, 47, 48, 49, 53, 54, 56, 59, 60, 62, 63, 66, 67, 81, 83, 89, 90, 91, 93, 94, 96, 98, 124, 125, 135, 136, 140, 141, 144, 147, 150, 152, 153, 154, 159, 160, 161, 183, 184, 185, 186, 187, 188, 189, 190, 191, 194, 196, 202, 206, 269, 311, 313, 315, 316, 320, 323, 381, 383, 387, 388, 393, 397, 398, 399, 400, 402, 403, 407, 412, 413, 426, 427, 435, 436], "contain": [11, 12, 13, 14, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 46, 47, 48, 49, 53, 54, 56, 59, 60, 63, 64, 66, 67, 70, 81, 83, 85, 91, 93, 94, 96, 124, 125, 129, 134, 138, 140, 141, 144, 147, 148, 150, 159, 160, 161, 166, 175, 178, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 195, 196, 197, 201, 202, 206, 207, 208, 211, 212, 213, 215, 216, 217, 297, 311, 312, 313, 320, 321, 323, 330, 380, 381, 382, 383, 387, 388, 391, 397, 398, 399, 400, 402, 403, 406, 407, 408, 412, 413, 417, 421, 424, 426, 427, 431, 444], "magnitud": [11, 12, 63, 323], "point": [11, 12, 18, 20, 26, 31, 34, 35, 44, 63, 85, 89, 90, 94, 98, 119, 130, 131, 132, 134, 135, 136, 145, 147, 170, 181, 182, 187, 197, 212, 215, 217, 315, 316, 330, 359, 371, 380, 381, 391, 393, 394, 406, 419, 431, 435, 436, 448], "whose": [11, 12, 85, 98, 163, 166, 167, 168, 179, 205, 389, 422, 425], "precis": [11, 12, 44, 72, 85, 119, 147, 193, 210, 216, 380, 382, 408], "match": [11, 12, 35, 58, 64, 80, 85, 131, 149, 194, 325, 326, 405, 410, 411, 414], "keyword": [11, 12, 13, 15, 21, 22, 23, 24, 25, 26, 27, 46, 47, 48, 49, 53, 54, 56, 63, 66, 67, 70, 71, 81, 86, 93, 94, 96, 99, 124, 125, 126, 127, 128, 132, 139, 144, 150, 159, 184, 185, 186, 187, 194, 196, 202, 203, 204, 206, 209, 311, 320, 321, 323, 381, 383, 387, 388, 393, 397, 398, 399, 400, 407, 412, 413, 418, 426, 427, 444], "current": [11, 12, 13, 15, 21, 22, 23, 24, 25, 26, 27, 46, 47, 48, 49, 53, 54, 56, 63, 66, 67, 71, 81, 85, 86, 93, 94, 96, 99, 124, 125, 126, 127, 128, 131, 139, 144, 145, 150, 159, 184, 185, 186, 187, 196, 202, 203, 204, 206, 209, 311, 320, 321, 323, 381, 383, 387, 388, 393, 397, 398, 399, 400, 407, 412, 413, 418, 426, 427], "unsupport": [11, 12, 13, 15, 21, 22, 23, 24, 25, 26, 27, 46, 47, 48, 49, 53, 54, 56, 63, 66, 67, 71, 81, 93, 94, 96, 99, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 124, 125, 126, 127, 128, 139, 144, 150, 159, 184, 185, 186, 187, 196, 202, 203, 204, 206, 209, 311, 320, 321, 323, 381, 383, 387, 388, 393, 397, 398, 399, 400, 407, 412, 413, 418, 426, 427], "notimplementederror": [11, 12, 13, 20, 21, 22, 23, 24, 25, 26, 27, 30, 32, 34, 35, 36, 38, 46, 47, 48, 49, 50, 51, 53, 54, 56, 59, 60, 62, 63, 66, 67, 81, 83, 89, 90, 91, 93, 94, 96, 98, 124, 125, 130, 131, 132, 133, 134, 135, 136, 140, 141, 144, 145, 150, 152, 153, 154, 159, 160, 161, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 194, 195, 196, 197, 201, 202, 206, 211, 212, 213, 215, 216, 217, 269, 311, 313, 315, 316, 320, 321, 322, 323, 381, 383, 387, 388, 393, 397, 398, 399, 400, 401, 402, 403, 406, 407, 408, 412, 413, 426, 427, 431, 435, 436], "rais": [11, 12, 13, 15, 20, 21, 22, 23, 24, 25, 26, 27, 30, 32, 34, 35, 36, 38, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 59, 60, 62, 63, 64, 66, 67, 68, 81, 82, 83, 89, 90, 91, 93, 94, 96, 98, 100, 106, 114, 124, 125, 130, 131, 132, 133, 134, 135, 136, 140, 141, 144, 145, 150, 152, 153, 154, 159, 160, 161, 170, 172, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 194, 195, 196, 197, 201, 202, 206, 207, 208, 211, 212, 213, 215, 216, 217, 269, 270, 300, 311, 313, 315, 316, 320, 321, 322, 323, 381, 383, 385, 387, 388, 393, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 412, 413, 426, 427, 431, 435, 436], "exclud": [11, 12, 181, 330, 374], "note": [11, 12, 13, 14, 18, 19, 28, 29, 30, 31, 39, 62, 70, 73, 81, 83, 85, 95, 124, 130, 131, 132, 133, 134, 148, 152, 165, 182, 192, 203, 206, 215, 216, 217, 274, 297, 312, 325, 328, 333, 335, 336, 346, 351, 385, 401, 406, 407, 409, 410, 414, 415, 426, 431, 432], "shorthand": [11, 12, 13, 46, 47, 48, 49, 81, 91, 125, 140, 141, 150, 159, 160, 161, 188, 190, 194, 206, 311, 313, 320, 321, 383, 387, 407, 426, 434], "thi": [11, 12, 16, 17, 20, 28, 29, 31, 32, 34, 35, 36, 37, 38, 39, 40, 56, 58, 62, 73, 75, 76, 78, 80, 83, 84, 85, 96, 119, 122, 123, 130, 131, 132, 133, 134, 135, 136, 137, 138, 143, 166, 168, 172, 173, 176, 181, 182, 187, 192, 193, 194, 195, 201, 203, 205, 207, 208, 211, 213, 269, 274, 278, 291, 297, 300, 309, 312, 326, 328, 363, 365, 379, 382, 383, 385, 390, 392, 405, 410, 411, 415, 430, 433, 434], "1j": [11, 12, 18, 59, 60, 83, 147, 165, 178, 282, 295, 403], "5620499351813308": [11, 12], "x1": [13, 15, 18, 25, 26, 40, 45, 46, 48, 49, 55, 63, 65, 71, 73, 74, 77, 79, 81, 83, 86, 91, 99, 118, 125, 126, 127, 128, 139, 140, 141, 144, 151, 159, 160, 161, 187, 188, 189, 190, 191, 194, 196, 198, 199, 202, 203, 204, 206, 209, 269, 311, 313, 317, 318, 320, 321, 327, 328, 329, 367, 383, 387, 389, 407, 416, 418, 422, 425, 426, 429], "x2": [13, 14, 15, 18, 19, 25, 26, 32, 46, 48, 49, 63, 65, 81, 91, 125, 126, 127, 128, 140, 141, 144, 151, 159, 160, 161, 187, 188, 189, 190, 191, 194, 196, 199, 202, 203, 206, 311, 313, 317, 320, 321, 383, 387, 389, 402, 407, 426], "x1_i": [13, 26, 46, 48, 49, 63, 81, 91, 125, 140, 141, 144, 159, 160, 161, 187, 188, 190, 191, 206, 313, 321, 383, 387, 407, 426], "respect": [13, 26, 46, 48, 49, 81, 83, 91, 125, 140, 141, 159, 160, 161, 187, 188, 190, 191, 206, 305, 313, 321, 383, 387, 407, 426], "x2_i": [13, 26, 46, 48, 49, 63, 81, 91, 125, 140, 141, 144, 159, 160, 161, 187, 188, 190, 191, 206, 313, 321, 383, 387, 407, 426], "first": [13, 26, 28, 29, 30, 44, 46, 48, 49, 57, 58, 63, 70, 81, 82, 85, 91, 94, 121, 125, 140, 141, 144, 149, 156, 157, 158, 159, 160, 161, 172, 179, 182, 187, 188, 190, 191, 194, 195, 196, 199, 201, 202, 206, 207, 208, 313, 321, 379, 383, 385, 387, 389, 392, 394, 401, 403, 407, 409, 411, 414, 426, 432, 433], "second": [13, 26, 44, 46, 48, 49, 63, 70, 81, 82, 85, 91, 94, 125, 140, 141, 143, 144, 149, 157, 158, 159, 160, 161, 187, 188, 190, 191, 194, 195, 196, 199, 201, 202, 206, 313, 321, 383, 387, 403, 407, 409, 414, 426, 432], "addit": [13, 162, 212], "determin": [13, 18, 21, 22, 23, 24, 25, 26, 27, 46, 48, 49, 63, 66, 67, 81, 91, 93, 94, 96, 125, 131, 132, 134, 140, 141, 144, 157, 159, 160, 161, 164, 175, 176, 183, 184, 185, 186, 187, 194, 196, 202, 206, 313, 321, 381, 383, 387, 388, 391, 397, 399, 400, 407, 412, 413, 426, 427], "promot": [13, 18, 20, 21, 22, 23, 24, 25, 26, 27, 32, 34, 35, 36, 38, 46, 48, 49, 52, 63, 66, 67, 81, 91, 93, 94, 96, 125, 137, 140, 141, 144, 159, 160, 161, 181, 183, 184, 185, 186, 187, 192, 194, 196, 202, 206, 313, 321, 381, 383, 386, 387, 388, 391, 397, 399, 400, 407, 412, 413, 415, 426, 427], "rule": [13, 18, 20, 21, 22, 23, 24, 25, 26, 27, 32, 34, 35, 36, 38, 44, 46, 48, 49, 52, 63, 64, 66, 67, 70, 81, 91, 93, 94, 96, 125, 137, 140, 141, 144, 159, 160, 161, 181, 183, 184, 185, 186, 187, 192, 193, 194, 196, 197, 202, 206, 212, 215, 216, 217, 313, 321, 381, 382, 383, 386, 387, 388, 391, 397, 399, 400, 406, 407, 408, 412, 413, 418, 426, 427, 431], "equival": [13, 14, 16, 17, 19, 28, 29, 30, 31, 44, 62, 70, 81, 82, 83, 84, 95, 179, 193, 206, 224, 264, 265, 297, 309, 312, 320, 329, 330, 358, 382, 383, 385, 391, 396, 401, 407, 408, 414, 417, 426, 444], "term": [13, 81, 206, 407, 426], "broadcast": [13, 44, 50, 51, 56, 64, 81, 126, 127, 144, 173, 174, 191, 193, 194, 196, 197, 202, 206, 212, 215, 216, 217, 321, 325, 326, 382, 384, 406, 407, 408, 411, 415, 426, 431, 434], "b": [13, 15, 28, 29, 46, 49, 57, 58, 64, 70, 71, 72, 82, 83, 84, 85, 86, 91, 128, 130, 131, 140, 141, 143, 149, 158, 160, 161, 164, 172, 173, 174, 176, 177, 178, 179, 180, 188, 190, 194, 195, 201, 209, 313, 317, 321, 331, 386, 392, 405, 414, 415, 418, 432, 433], "7": [13, 15, 20, 41, 54, 56, 64, 68, 70, 72, 75, 76, 80, 81, 83, 86, 93, 121, 124, 137, 139, 149, 151, 158, 173, 178, 198, 206, 283, 312, 323, 324, 330, 354, 383, 386, 388, 389, 407, 408, 409, 410, 414, 420, 423, 426, 427, 432, 434], "oper": [13, 46, 47, 48, 49, 81, 85, 91, 95, 125, 140, 141, 150, 159, 160, 161, 162, 188, 190, 194, 206, 311, 313, 320, 321, 325, 383, 387, 407, 415, 426, 437, 448], "axi": [14, 16, 17, 19, 28, 29, 30, 44, 57, 58, 68, 70, 71, 72, 80, 83, 84, 86, 95, 100, 105, 106, 110, 111, 114, 121, 122, 123, 126, 127, 132, 137, 139, 143, 148, 173, 181, 192, 193, 194, 195, 196, 197, 198, 201, 202, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 264, 265, 266, 267, 268, 275, 285, 286, 287, 291, 292, 293, 296, 302, 303, 304, 306, 308, 309, 310, 318, 322, 324, 325, 326, 379, 382, 384, 385, 389, 390, 392, 401, 404, 405, 406, 408, 409, 410, 411, 414, 415, 417, 418, 431, 433, 444], "keepdim": [14, 16, 17, 19, 28, 29, 44, 68, 83, 173, 193, 195, 197, 198, 201, 207, 208, 211, 212, 213, 214, 215, 216, 217, 264, 265, 266, 267, 285, 286, 287, 292, 304, 306, 310, 322, 324, 326, 382, 406, 408, 411, 431], "fals": [14, 15, 16, 17, 18, 19, 28, 29, 32, 33, 36, 38, 40, 44, 46, 47, 49, 50, 51, 52, 62, 68, 69, 72, 83, 85, 90, 91, 118, 132, 136, 137, 140, 141, 148, 150, 151, 152, 153, 154, 160, 161, 162, 163, 171, 173, 174, 178, 181, 188, 189, 190, 191, 192, 193, 195, 197, 198, 199, 201, 207, 208, 211, 212, 213, 214, 215, 216, 217, 264, 265, 266, 267, 269, 285, 286, 287, 292, 304, 306, 310, 312, 313, 316, 322, 324, 382, 385, 398, 406, 408, 430, 431, 434, 436], "whether": [14, 15, 19, 85, 162, 175, 181, 385, 398], "given": [14, 19, 20, 28, 29, 31, 32, 34, 35, 36, 38, 40, 44, 57, 62, 68, 69, 71, 72, 80, 82, 83, 84, 85, 86, 89, 90, 118, 121, 126, 127, 135, 136, 137, 139, 169, 181, 192, 195, 196, 199, 201, 202, 209, 210, 211, 213, 214, 215, 216, 217, 266, 267, 269, 275, 287, 292, 293, 298, 304, 306, 310, 312, 315, 316, 322, 324, 325, 330, 335, 357, 374, 382, 384, 388, 389, 390, 392, 394, 406, 408, 414, 415, 418, 419, 431, 433, 435, 436, 444], "evalu": [14, 15, 19, 83, 87, 88, 91, 180, 199, 264, 265, 317, 414], "logic": [14, 19, 188, 189, 190, 191, 437, 448], "AND": [14, 46, 47, 48, 49, 150, 188, 189, 190, 191], "reduct": [14, 19], "either": [14, 15, 19, 38, 44, 68, 85, 97, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 126, 127, 128, 149, 151, 166, 168, 173, 175, 193, 203, 207, 208, 211, 213, 214, 216, 317, 319, 322, 325, 366, 382, 394, 408, 410, 411], "tensor": [14, 15, 19, 37, 68, 83, 97, 126, 127, 128, 179, 180, 203, 207, 208, 211, 213, 214, 317, 319, 322, 324, 325, 410, 414], "sequenti": [14, 15, 19, 65, 69, 71, 79, 86, 87, 88, 92, 97, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 126, 127, 128, 139, 151, 198, 203, 204, 209, 214, 317, 319, 325, 410, 418], "method": [14, 16, 17, 19, 30, 40, 62, 82, 83, 85, 120, 129, 131, 171, 174, 178, 269, 274, 297, 312, 330, 385, 396, 408, 417, 437], "Not": [14, 19, 152, 209, 210, 211, 213, 214, 216, 322], "number": [14, 18, 19, 20, 31, 44, 45, 50, 51, 68, 78, 80, 83, 85, 95, 98, 119, 125, 130, 131, 133, 134, 137, 145, 146, 152, 163, 169, 171, 175, 176, 178, 179, 180, 181, 192, 209, 210, 211, 213, 214, 215, 216, 217, 289, 298, 300, 301, 312, 322, 323, 330, 332, 342, 366, 383, 384, 388, 389, 390, 391, 398, 406, 409, 415, 417, 419, 427, 430, 431, 448], "becaus": [14, 19], "x3": [14, 19], "rtol": [15, 151], "1e": [15, 96, 151, 165, 174, 184, 185, 187, 348], "05": [15, 151], "atol": [15, 151], "08": [15, 66, 151, 348, 399], "two": [15, 33, 41, 42, 46, 47, 48, 49, 61, 65, 70, 78, 80, 82, 83, 85, 87, 88, 95, 149, 150, 151, 158, 166, 172, 177, 188, 190, 191, 194, 195, 196, 201, 202, 205, 211, 213, 291, 307, 317, 330, 359, 409, 414, 421, 424, 432], "within": [15, 20, 33, 40, 83, 151, 269, 325, 330, 374], "toler": [15, 33, 151], "boolean": [15, 46, 47, 48, 49, 64, 85, 148, 150, 151, 152, 153, 154, 188, 190, 197, 212, 214, 215, 217, 312, 385, 406, 410, 431], "dim": 15, "scalar": [15, 32, 34, 35, 36, 37, 38, 52, 53, 54, 62, 64, 70, 75, 78, 80, 82, 83, 85, 124, 126, 127, 128, 135, 136, 137, 144, 149, 155, 158, 177, 181, 192, 194, 199, 203, 278, 283, 317, 326, 330, 331, 332, 334, 337, 338, 339, 340, 341, 342, 343, 344, 345, 349, 352, 353, 355, 356, 358, 361, 364, 366, 370, 372, 373, 374, 375, 376, 377, 378, 394, 414, 427, 430, 432, 434, 444], "both": [15, 44, 56, 70, 82, 126, 127, 128, 149, 158, 173, 194, 203, 216, 317, 414, 432, 434], "typeerror": [15, 44, 64, 68, 100, 106, 114], "integ": [15, 20, 31, 44, 46, 47, 48, 49, 51, 53, 54, 72, 83, 85, 124, 125, 146, 150, 151, 159, 170, 173, 179, 193, 195, 197, 201, 210, 211, 212, 213, 215, 216, 217, 302, 325, 330, 358, 361, 366, 382, 383, 385, 387, 388, 391, 394, 403, 406, 408, 410, 414, 427, 431, 444], "1e10": [15, 151], "00001e10": [15, 151], "initi": [16, 17, 83, 89, 134, 195, 201, 211, 213, 214, 216, 285, 287, 292, 306, 322, 330, 408], "alia": [16, 17, 81, 119, 218, 330, 360, 363, 365, 392, 426, 433], "deg": [18, 329], "phase": [18, 429], "call": [18, 28, 29, 30, 36, 38, 85, 132, 165, 167, 172, 224, 312, 404, 415], "x_i": [18, 21, 22, 23, 24, 25, 27, 47, 53, 54, 59, 60, 66, 67, 93, 94, 96, 124, 147, 150, 184, 186, 189, 311, 320, 323, 380, 381, 391, 393, 397, 398, 399, 400, 402, 403, 412, 413, 427], "although": [18, 85, 415], "undefin": [18, 83, 291], "arc": [18, 25], "tangent": [18, 21, 22, 23, 24, 25, 26, 27, 66, 67, 399, 400, 412, 413], "quadrant": [18, 25], "correctli": [18, 25, 173, 312], "trigonometr": [18, 21, 22, 23, 24, 25, 26, 27, 66, 67, 399, 400, 412, 413, 448], "invers": [18, 21, 22, 23, 24, 25, 26, 27, 66, 67, 94, 95, 96, 106, 107, 108, 109, 110, 111, 112, 113, 169, 174, 179, 180, 185, 376, 399, 400, 412, 413], "0j": [18, 82, 83, 194, 282, 295, 397], "57079633": [18, 26, 329, 429], "78539816": [18, 25, 26, 429], "mai": [18, 40, 52, 56, 58, 64, 72, 83, 85, 95, 143, 163, 165, 166, 173, 175, 192, 194, 212, 215, 217, 269, 326, 392, 405, 415, 433, 444], "vari": [18, 132, 148, 163, 165, 166, 173, 212, 215, 217], "90": [18, 74, 434], "45": [18, 26], "OR": [19, 46, 47, 48, 49, 150, 188, 189, 190, 191], "stop": [20, 137, 181, 192], "like": [20, 32, 34, 35, 36, 38, 40, 41, 42, 43, 57, 83, 84, 89, 98, 130, 131, 132, 133, 134, 135, 137, 145, 181, 182, 192, 269, 315, 330, 374, 385, 435, 448], "usm_typ": [20, 32, 34, 35, 36, 37, 38, 62, 75, 78, 83, 89, 90, 98, 130, 131, 132, 133, 134, 135, 136, 137, 145, 148, 181, 182, 192, 200, 314, 315, 316, 330, 352, 357, 358, 359, 360, 361, 362, 363, 365, 371, 374, 419, 430, 435, 436], "sycl_queu": [20, 32, 34, 35, 36, 37, 38, 62, 75, 78, 83, 89, 90, 98, 130, 131, 132, 133, 134, 135, 136, 137, 145, 148, 181, 182, 192, 200, 314, 315, 316, 330, 352, 357, 358, 359, 360, 361, 362, 363, 365, 366, 371, 374, 419, 430, 435, 436], "evenli": [20, 137, 181, 192, 388], "interv": [20, 21, 23, 25, 95, 137, 181, 192, 330, 358, 360, 362, 363, 365, 373, 374, 409], "end": [20, 85, 137, 181, 192], "doe": [20, 52, 175, 210], "some": [20, 85, 95, 97, 124, 149, 434, 444], "off": [20, 165], "affect": 20, "length": [20, 44, 72, 80, 83, 91, 134, 137, 143, 165, 178, 192, 199, 210, 300, 333, 385, 386, 392, 394, 396, 404, 414, 415, 433], "between": [20, 52, 80, 86, 119, 131, 134, 149, 181, 192, 347, 361, 407, 429], "specifi": [20, 30, 31, 32, 34, 35, 36, 38, 44, 51, 52, 58, 62, 72, 75, 78, 79, 83, 89, 90, 98, 121, 130, 131, 132, 133, 135, 136, 137, 145, 166, 168, 173, 179, 180, 181, 182, 192, 193, 197, 198, 200, 210, 212, 214, 215, 216, 217, 268, 276, 314, 315, 316, 321, 322, 330, 343, 353, 371, 379, 382, 389, 390, 391, 405, 406, 408, 414, 417, 419, 430, 431, 435, 436], "desir": [20, 32, 34, 35, 36, 38, 39, 51, 89, 90, 98, 135, 136, 137, 145, 181, 192, 315, 316, 390, 415, 419, 435, 436], "repres": [20, 32, 34, 35, 36, 37, 38, 44, 83, 85, 129, 132, 137, 148, 176, 181, 192, 199, 217, 300, 330, 444], "consid": [20, 32, 34, 35, 36, 38, 88, 137, 152, 166, 168, 171, 181, 192, 194, 330, 358], "capabl": [20, 32, 34, 35, 36, 38, 44, 137, 181, 192, 194], "when": [20, 32, 34, 35, 36, 38, 39, 40, 44, 62, 64, 83, 85, 137, 165, 173, 175, 181, 192, 194, 210, 211, 213, 269, 390, 410, 414, 434], "string": [20, 32, 34, 35, 36, 37, 38, 62, 75, 78, 85, 89, 90, 98, 130, 131, 132, 133, 134, 135, 136, 137, 145, 148, 181, 182, 192, 200, 314, 315, 316, 330, 352, 357, 358, 359, 360, 361, 362, 363, 365, 366, 371, 374, 419, 430, 435, 436, 444], "sycldevic": [20, 32, 34, 35, 36, 37, 38, 62, 75, 78, 89, 90, 98, 130, 131, 132, 133, 134, 135, 136, 137, 145, 148, 181, 182, 192, 200, 314, 315, 316, 330, 352, 357, 358, 359, 360, 361, 362, 363, 365, 366, 371, 374, 419, 430, 435, 436], "syclqueu": [20, 32, 34, 35, 36, 37, 38, 62, 75, 78, 89, 90, 98, 130, 131, 132, 133, 134, 135, 136, 137, 145, 148, 181, 182, 192, 200, 314, 315, 316, 330, 352, 357, 358, 359, 360, 361, 362, 363, 365, 366, 371, 374, 419, 430, 435, 436], "concept": [20, 32, 34, 35, 36, 37, 38, 62, 75, 78, 89, 90, 98, 130, 131, 132, 133, 134, 135, 136, 137, 145, 148, 181, 182, 192, 200, 314, 315, 316, 330, 352, 357, 358, 359, 360, 361, 362, 363, 365, 366, 371, 374, 419, 430, 435, 436, 444], "oneapi": [20, 32, 34, 35, 36, 37, 38, 62, 75, 78, 89, 90, 98, 130, 131, 132, 133, 134, 135, 136, 137, 145, 148, 181, 182, 192, 200, 314, 315, 316, 330, 352, 357, 358, 359, 360, 361, 362, 363, 365, 366, 371, 374, 419, 430, 435, 436], "filter": [20, 32, 34, 35, 36, 37, 38, 62, 75, 78, 89, 90, 98, 130, 131, 132, 133, 134, 135, 136, 137, 145, 148, 181, 182, 192, 200, 314, 315, 316, 330, 352, 357, 358, 359, 360, 361, 362, 363, 365, 366, 371, 374, 419, 430, 435, 436], "selector": [20, 32, 34, 35, 36, 37, 38, 62, 75, 78, 89, 90, 98, 130, 131, 132, 133, 134, 135, 136, 137, 145, 148, 181, 182, 192, 200, 314, 315, 316, 330, 352, 357, 358, 359, 360, 361, 362, 363, 365, 366, 371, 374, 419, 430, 435, 436], "non": [20, 28, 29, 32, 34, 35, 36, 37, 38, 44, 45, 62, 68, 75, 78, 83, 89, 90, 98, 130, 131, 132, 133, 134, 135, 136, 137, 145, 148, 152, 181, 182, 192, 195, 200, 201, 207, 208, 211, 213, 215, 217, 290, 312, 314, 315, 316, 321, 330, 352, 357, 358, 359, 360, 361, 362, 363, 365, 366, 371, 374, 402, 414, 419, 430, 434, 435, 436], "object": [20, 32, 34, 35, 36, 37, 38, 39, 62, 75, 78, 83, 85, 89, 90, 95, 98, 119, 120, 129, 130, 131, 132, 133, 134, 135, 136, 137, 145, 146, 148, 163, 166, 173, 181, 182, 192, 200, 297, 314, 315, 316, 330, 352, 357, 358, 359, 360, 361, 362, 363, 365, 366, 371, 374, 385, 419, 430, 435, 436, 444], "dpnp_arrai": [20, 32, 34, 35, 36, 38, 62, 75, 78, 89, 90, 98, 119, 129, 130, 131, 132, 133, 134, 135, 136, 137, 145, 146, 148, 181, 182, 192, 200, 218, 314, 315, 316, 330, 352, 357, 358, 359, 360, 361, 362, 363, 365, 366, 371, 374, 419, 420, 423, 430, 435, 436, 437], "properti": [20, 32, 34, 35, 36, 37, 38, 62, 75, 78, 83, 89, 90, 98, 130, 131, 132, 133, 134, 135, 136, 137, 145, 148, 166, 168, 175, 181, 182, 192, 200, 219, 277, 279, 280, 282, 284, 288, 289, 295, 300, 301, 305, 309, 314, 315, 316, 330, 352, 357, 358, 359, 360, 361, 362, 363, 365, 366, 371, 374, 419, 430, 435, 436, 444], "share": [20, 32, 34, 35, 36, 37, 38, 62, 75, 78, 89, 90, 98, 130, 131, 132, 133, 134, 135, 136, 137, 145, 148, 181, 182, 192, 200, 314, 315, 316, 330, 352, 357, 358, 359, 360, 361, 362, 363, 365, 371, 374, 419, 430, 435, 436], "usm": [20, 32, 34, 35, 36, 37, 38, 62, 75, 78, 89, 90, 98, 130, 131, 132, 133, 134, 135, 136, 137, 145, 148, 181, 182, 192, 200, 314, 315, 316, 330, 352, 357, 358, 359, 360, 361, 362, 363, 365, 371, 374, 404, 419, 430, 435, 436], "queue": [20, 32, 34, 35, 36, 37, 38, 62, 75, 78, 89, 90, 98, 130, 131, 132, 133, 134, 135, 136, 137, 145, 148, 181, 182, 192, 200, 314, 315, 316, 330, 352, 357, 358, 359, 360, 361, 362, 363, 365, 366, 371, 374, 419, 430, 435, 436], "onli": [20, 28, 29, 30, 32, 34, 35, 36, 38, 40, 41, 44, 56, 62, 65, 69, 79, 83, 85, 86, 89, 90, 98, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 130, 131, 132, 133, 134, 135, 136, 137, 148, 162, 166, 168, 175, 178, 181, 182, 192, 194, 195, 197, 198, 201, 207, 208, 211, 212, 213, 214, 215, 217, 269, 302, 315, 316, 318, 320, 322, 325, 330, 352, 358, 374, 385, 395, 401, 406, 408, 410, 411, 416, 431, 434, 435, 436, 444], "care": [20, 165], "handl": [20, 85, 182, 312, 410, 448], "endpoint": [20, 137, 181, 192], "level_zero": [20, 32, 34, 35, 36, 38, 62, 75, 78, 89, 90, 98, 130, 131, 132, 133, 135, 136, 137, 145, 181, 182, 192, 200, 314, 315, 316, 419, 430, 435, 436], "opencl": [20, 32, 34, 35, 36, 38, 62, 75, 78, 89, 90, 98, 130, 131, 132, 133, 135, 136, 137, 145, 181, 182, 192, 200, 314, 315, 316, 419, 430, 435, 436], "z": [20, 32, 34, 35, 36, 38, 62, 75, 78, 89, 90, 98, 130, 131, 132, 133, 135, 136, 137, 145, 181, 182, 192, 199, 200, 314, 315, 316, 340, 419, 430, 435, 436], "cosin": [21, 22, 23, 24, 25, 26, 27, 66, 67, 399, 400, 412, 413], "close": [21, 23, 25, 39, 40, 83, 95, 181, 269, 330, 358], "sine": [21, 22, 23, 24, 25, 26, 27, 66, 67, 399, 400, 412, 413], "hyperbol": [21, 22, 23, 24, 25, 26, 27, 66, 67, 399, 400, 412, 413, 448], "14159265": [21, 26], "65745445": 22, "99322285": 22, "5707963267948966": 23, "72538256": 24, "99822295": 24, "quotient": [26, 203], "express": [26, 87, 88, 182], "180": 26, "135": 26, "54930614": 27, "search": [28, 29, 207, 208, 437, 448], "index": [28, 29, 30, 55, 83, 85, 98, 148, 199, 207, 208, 270, 305, 312, 325, 326, 379, 385, 394, 410, 411, 434, 437, 448], "should": [28, 29, 40, 82, 83, 131, 138, 151, 170, 193, 194, 195, 201, 205, 207, 208, 211, 213, 269, 299, 347, 382, 385, 394, 414, 444], "reduc": [28, 29, 44, 175, 178, 193, 195, 197, 199, 201, 207, 208, 211, 212, 213, 215, 216, 217, 382, 406, 408, 431], "ax": [28, 29, 44, 80, 82, 83, 95, 101, 103, 104, 107, 108, 109, 112, 113, 115, 117, 121, 149, 173, 177, 179, 180, 193, 194, 195, 197, 201, 205, 207, 208, 211, 212, 213, 215, 216, 217, 300, 307, 309, 382, 389, 390, 404, 406, 408, 409, 414, 415, 417, 431], "dimens": [28, 29, 32, 41, 42, 43, 44, 57, 58, 64, 69, 70, 76, 80, 83, 85, 95, 122, 123, 143, 148, 149, 171, 173, 175, 193, 195, 197, 199, 200, 201, 205, 207, 208, 211, 212, 213, 215, 216, 217, 281, 289, 300, 312, 314, 326, 330, 360, 362, 363, 365, 382, 385, 396, 404, 405, 406, 408, 409, 411, 415, 421, 422, 424, 425, 431, 444, 448], "singleton": [28, 29, 44, 95, 193, 195, 197, 201, 207, 208, 211, 212, 213, 215, 216, 217, 382, 404, 406, 408, 431], "accordingli": [28, 29, 195, 201, 207, 208, 211, 213], "occurr": [28, 29, 45, 207, 208], "igonr": [28, 29, 207, 208], "convert": [28, 29, 32, 34, 35, 36, 37, 38, 39, 41, 42, 43, 62, 73, 74, 75, 78, 85, 95, 135, 136, 137, 181, 192, 328, 329, 429, 430], "flat": [28, 29, 83, 120, 281, 384], "tupl": [28, 29, 32, 34, 35, 36, 38, 44, 51, 62, 75, 76, 78, 83, 85, 95, 121, 132, 135, 136, 137, 148, 158, 173, 175, 180, 181, 192, 193, 194, 195, 197, 199, 200, 201, 211, 212, 213, 215, 216, 217, 300, 309, 312, 314, 382, 385, 389, 396, 404, 406, 408, 415, 417, 421, 424, 430, 431, 444], "appli": [28, 29, 30, 44, 52, 386, 414], "index_arrai": [28, 29, 30], "multipl": [28, 29, 30, 44, 58, 70, 85, 143, 165, 166, 167, 168, 169, 172, 193, 195, 197, 201, 206, 211, 212, 213, 215, 216, 217, 382, 392, 401, 405, 406, 408, 431, 433, 437], "11": [28, 29, 44, 67, 76, 83, 139, 173, 297, 349, 358, 391, 394, 400, 420, 423, 434], "12": [28, 29, 43, 70, 76, 85, 147, 192, 322, 324, 354, 394, 420, 423, 434], "13": [28, 29, 47, 76, 82, 85, 150, 194, 394], "14": [28, 29, 46, 47, 76, 82, 149, 150, 394, 414], "24": [28, 29, 70, 71, 86, 149, 158, 179, 322, 414], "re": [28, 29, 45, 142, 389, 428], "set": [28, 29, 32, 40, 55, 76, 78, 83, 85, 89, 135, 145, 148, 171, 173, 174, 181, 259, 269, 270, 280, 315, 316, 397, 398, 435, 436, 444], "kind": [30, 40, 52, 58, 64, 83, 85, 119, 143, 172, 194, 268, 269, 291, 302, 318, 392, 401, 405, 433, 448], "would": [30, 58, 83, 85, 132, 148, 172, 194, 291, 330, 401, 405, 411, 417], "last": [30, 70, 80, 121, 137, 149, 172, 181, 192, 194, 379, 385, 389, 394, 401, 404, 414], "stabl": [30, 401], "unlik": [30, 83, 297, 401], "other": [30, 40, 50, 51, 80, 83, 85, 124, 132, 145, 165, 167, 172, 205, 221, 222, 225, 227, 228, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 254, 256, 258, 261, 262, 263, 269, 330, 374, 390, 401, 437, 448], "accept": [30, 330, 401], "yield": [30, 312, 330, 434, 444], "gener": [30, 44, 85, 137, 165, 166, 167, 168, 174, 175, 182, 192, 330, 332, 335, 366, 430, 444, 448], "irrespect": 30, "axiserror": [30, 401], "indirect": [30, 401], "partial": [30, 401], "ind": [30, 179, 421, 424], "decim": [31, 83, 119, 298, 388, 391], "left": [31, 83, 122, 123, 159, 167, 173, 299, 373, 387, 391, 394, 430], "detail": [31, 129, 391, 421, 422, 424, 425, 444], "nearest": [31, 125, 383, 388, 391, 427], "truncat": [31, 54, 124, 368, 388, 391, 427], "ndmin": 32, "array_lik": [32, 34, 35, 36, 37, 38, 39, 44, 62, 64, 75, 78, 135, 136, 137, 181, 192, 326, 330, 396, 414, 422, 425, 430], "form": [32, 34, 35, 36, 37, 38, 57, 62, 75, 78, 83, 84, 135, 136, 137, 181, 192, 309, 392, 430, 433], "satisfi": [32, 36, 38, 40, 83, 97, 169, 269], "new": [32, 40, 50, 51, 57, 58, 72, 83, 84, 85, 89, 90, 95, 129, 133, 134, 135, 136, 137, 143, 145, 181, 192, 196, 202, 205, 210, 214, 269, 297, 309, 315, 316, 322, 385, 389, 390, 392, 405, 415, 417, 433, 435, 436, 444], "uniniti": [32, 89, 90, 135, 315, 435], "than": [32, 72, 83, 119, 122, 123, 125, 132, 140, 141, 143, 159, 160, 161, 171, 174, 175, 193, 210, 216, 291, 382, 387, 397, 404, 405, 408, 414, 427], "a1": 33, "a2": 33, "equal_nan": [33, 151], "consist": [33, 131, 180, 181, 411, 414], "contigu": [34, 35, 36, 38, 82, 83, 172, 281, 294, 379, 385], "check": [34, 35, 52, 152, 153, 154, 162, 174, 177], "construct": [34, 35, 55, 75, 78, 83, 85, 130, 131, 132, 133, 134, 182, 200, 270, 314, 384, 415, 434, 437], "grid": [34, 35, 132, 148, 199, 200, 314], "No": [35, 162], "perform": [35, 56, 80, 121, 162], "pass": [35, 83, 85, 132, 297], "through": [35, 85, 165, 167, 444], "subclass": [35, 157], "content": [36, 83, 367], "flag": [36, 38, 83, 85, 274], "about": [36, 38, 83, 119, 165, 279, 444], "f_contigu": [36, 38], "make": [36, 38, 57, 85, 199], "now": [36, 38, 76, 167], "c_contigu": [36, 38, 83, 274], "Then": [36, 38], "x0": [36, 38, 62, 75, 78, 316, 430, 436], "__sycl_usm_array_interface__": 37, "protocol": [37, 85, 129], "buffer": [37, 72, 83, 130, 131, 133, 134, 182, 210, 385], "possibli": 37, "nest": [37, 84, 143, 392, 405, 433], "sequenc": [37, 41, 42, 43, 57, 58, 61, 65, 84, 89, 90, 135, 136, 137, 143, 148, 172, 181, 192, 205, 315, 316, 354, 367, 386, 392, 405, 414, 433, 435, 436], "str": [37, 58, 85, 131, 134, 143, 182, 392, 405, 433], "code": [37, 85], "coerc": [37, 130, 131, 132, 133, 134, 182], "laid": 38, "fortran": [38, 40, 83, 269, 281, 379, 385], "row": [38, 40, 57, 58, 72, 83, 84, 98, 122, 123, 143, 145, 148, 172, 178, 269, 281, 312, 379, 392, 405, 419, 421, 433], "arbitrari": [39, 82, 85, 149, 194, 386], "keep": [39, 40, 83, 269], "stride": [39, 40, 83, 269], "possibl": [39, 40, 42, 43, 83, 95, 269, 297, 385, 404, 409, 417], "exactli": [39, 73, 134, 328, 330, 358], "cast": [40, 52, 58, 64, 72, 83, 143, 165, 193, 194, 197, 210, 212, 215, 216, 217, 269, 382, 392, 405, 406, 408, 431, 433], "unsaf": [40, 52, 58, 64, 83, 143, 194, 269, 392, 405, 433], "target": [40, 52, 83, 269], "style": [40, 83, 269, 281, 312, 379], "happen": [40, 44, 83, 269, 332], "itself": [40, 83, 85, 269, 444], "equiv": [40, 52, 58, 64, 83, 143, 170, 194, 269, 392, 405, 433], "safe": [40, 52, 58, 64, 83, 143, 194, 269, 392, 405, 433], "same_kind": [40, 52, 58, 64, 83, 143, 194, 269, 392, 405, 433], "what": [40, 52, 58, 64, 83, 85, 91, 143, 194, 269, 332, 349, 392, 405, 433], "occur": [40, 52, 58, 64, 83, 143, 165, 194, 269, 281, 392, 405, 433], "backward": [40, 83, 269, 389, 390], "chang": [40, 62, 70, 83, 85, 210, 269, 305, 309, 311, 319, 320, 325, 326, 327, 379, 385, 390, 429, 448], "allow": [40, 83, 269, 297, 444], "preserv": [40, 41, 42, 43, 56, 83, 85, 121, 122, 123, 166, 167, 168, 269], "convers": [40, 83, 269, 437], "By": [40, 70, 83, 137, 181, 192, 194, 195, 197, 201, 211, 212, 213, 215, 217, 269, 379, 384, 389, 406, 419, 421, 424, 431], "instead": [40, 82, 83, 95, 124, 137, 148, 172, 181, 192, 269, 312], "arr_t": [40, 83, 269], "unless": [40, 72, 83, 165, 171, 173, 192, 193, 210, 214, 216, 269, 322, 382, 408], "condit": [40, 82, 83, 97, 163, 169, 172, 269, 312, 319, 325, 327, 395, 434], "ari": [41, 42, 43], "least": [41, 42, 43, 44, 84, 85, 95, 122, 131, 151, 175, 392, 433], "One": [41, 42, 43, 70, 84, 85, 385], "made": [41, 85], "three": [41, 42, 43, 95, 170, 330, 366, 414], "avoid": [42, 43], "weight": [44, 45, 69, 142, 197, 212, 408], "over": [44, 72, 82, 120, 121, 132, 137, 149, 173, 181, 192, 193, 194, 195, 197, 199, 201, 209, 210, 211, 212, 213, 214, 215, 216, 217, 322, 330, 357, 362, 373, 374, 382, 406, 408, 414, 431, 448], "entir": [44, 193, 195, 197, 201, 211, 212, 213, 215, 216, 217, 382, 406, 408, 431], "associ": [44, 444], "contribut": 44, "accord": [44, 52, 85, 119, 165, 166, 167, 168, 193, 197, 212, 215, 216, 217, 382, 387, 406, 408, 431], "assum": [44, 171, 174, 178], "avg": 44, "constraint": 44, "sum_of_weight": 44, "taken": [44, 80, 194, 215, 217, 406, 419, 421, 424, 431, 432], "so": [44, 85, 91, 181, 193, 197, 199, 212, 215, 216, 217, 368, 382, 406, 408, 414, 415, 431], "remain": [44, 193, 197, 205, 212, 215, 216, 217, 382, 385, 406, 408, 431], "pattern": 44, "lowest": [44, 87, 88, 330, 358], "previou": 44, "still": 44, "arithmet": [44, 137, 197, 198, 212, 215, 217, 320, 406, 408, 431, 437, 448], "75": [44, 92, 139, 169, 181], "With": [44, 173], "w": [44, 165, 166, 167, 168, 170], "minlength": 45, "count": [45, 68, 85, 121, 130, 131, 133, 134, 312, 332, 437, 448], "find": [45, 83, 171, 174, 178, 299, 312, 394, 401, 428, 448], "bitwis": [46, 48, 49], "underli": [46, 48, 49, 385], "binari": [46, 48, 49, 130, 131, 133, 134, 437, 448], "represent": [46, 48, 49, 119, 146, 148, 444], "truth": [46, 47, 48, 49, 91, 140, 141, 150, 160, 161, 188, 189, 190, 191, 313, 448], "bit": [46, 47, 48, 49, 85, 119, 146, 150, 159, 188, 190, 191, 387, 398, 448], "xor": [46, 47, 48, 49, 150, 188, 189, 190, 191], "255": [46, 48], "NOT": [47, 150, 188, 189, 190, 191], "31": [49, 137], "26": 49, "arg": [50, 87, 330], "against": [50, 51, 56, 138, 173, 174, 326, 411], "origin": [50, 83, 173, 199, 205, 385, 389], "from_": 52, "basic": [52, 444, 448], "i8": [52, 85], "f8": [52, 85], "f4": 52, "1000": [52, 137, 172, 192, 331, 332, 337, 339, 341, 342, 343, 344, 345, 352, 353, 356, 358, 360, 363, 365, 371, 375, 376, 377, 378], "i4": [52, 85], "u4": 52, "cbrting": 53, "smallest": [53, 54, 119, 146], "27": [53, 192, 321, 393, 430], "mode": [55, 61, 65, 83, 175, 270, 293, 308, 325, 368, 373, 394, 410], "prefer": [55, 62, 83, 274, 312], "a_min": 56, "a_max": 56, "edg": 56, "right": [56, 70, 122, 123, 144, 159, 165, 166, 167, 168, 172, 180, 373, 382, 387, 394, 430], "hold": [56, 72, 173, 210, 214, 322], "Its": [56, 179, 326], "those": [56, 170, 326], "tup": [57, 84, 143, 392, 433], "them": [57, 444], "just": [57, 85], "turn": 57, "join": [57, 58, 84, 143, 392, 405, 433, 448], "depth": [57, 58, 84, 143, 392, 405, 433], "third": [57, 58, 84, 143, 392, 405, 433], "horizont": [57, 58, 84, 121, 143, 392, 405, 433], "vertic": [57, 58, 84, 121, 122, 143, 392, 405, 433], "exist": [57, 58, 84, 85, 95, 143, 385, 392, 405, 433, 448], "destin": [58, 143, 205, 325, 326, 392, 405, 411, 433], "were": [58, 132, 330, 359, 405], "cannot": [58, 83, 207, 208, 300, 404, 405], "togeth": [58, 85, 405, 434], "sub": [58, 85, 143, 180, 392, 405, 419, 433], "3rd": 58, "assembl": [58, 84, 143, 392, 405, 433], "t": [58, 69, 83, 85, 162, 165, 167, 309, 312, 372], "2j": [59, 60, 82, 147, 166, 168, 194, 397, 432], "j": [59, 60, 83, 132, 147, 148, 158, 162, 165, 166, 186, 194, 309, 323, 326, 403, 411, 414], "v": [61, 75, 78, 83, 85, 165, 166, 299, 394], "linear": [61, 65, 177, 192, 437, 448], "convolut": [61, 65], "ca": 61, "we": [62, 76, 326, 411], "modifi": [62, 367], "compos": 63, "dst": 64, "src": 64, "violat": 64, "wherev": 64, "valid": [65, 95, 409, 421, 422, 424, 425], "000000e": [66, 399], "00": [66, 399], "371139e": 66, "5091786": 67, "591953": 67, "coordin": [68, 132, 199], "m": [69, 84, 85, 98, 121, 122, 123, 162, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 194, 326, 411, 419, 420, 421, 423, 424], "rowvar": 69, "bia": 69, "ddof": [69, 83, 215, 217, 304, 310, 406, 431], "fweight": 69, "aweight": 69, "estim": [69, 332, 349], "covari": 69, "matrix": [69, 82, 149, 162, 163, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 194, 199, 403, 423, 430, 432, 437, 448], "variabl": [69, 177], "axisa": 70, "axisb": 70, "axisc": 70, "vector": [70, 132, 149, 163, 171, 172, 173, 178, 194, 199, 432, 448], "defin": [70, 85, 90, 136, 316, 320, 436, 444], "ignor": [70, 85, 126, 127, 134, 195, 196, 197, 201, 202, 207, 208, 211, 212, 213, 215, 217, 406, 431], "overrid": [70, 90, 136, 316, 436], "direct": [70, 80, 122, 123], "hand": [70, 180], "orient": 70, "definit": [70, 124, 162], "30": [70, 74, 326, 329, 411, 432], "60": [70, 74, 326, 411, 414, 434], "36": 70, "72": 70, "cumul": [71, 72, 80, 83, 209, 210, 275, 408], "120": [71, 74], "720": 71, "accumul": [72, 210], "platform": [72, 85, 193, 210, 216, 382, 408], "th": [72, 75, 78, 80, 83, 86, 98, 139, 198, 309, 417, 420, 423], "2e": 72, "10000": [72, 172, 340, 355, 364, 374], "remov": [73, 83, 95, 303, 328, 404, 448], "larg": [73, 85, 174, 328], "jump": [73, 328], "wrap": [73, 83, 118, 293, 308, 325, 328, 394, 410], "rad": 74, "150": 74, "question": 75, "main": [75, 76, 77, 78, 98, 118, 145, 168, 419, 420, 423], "upper": [75, 98, 162, 166, 168, 175, 419, 423, 424], "triangl": [75, 144, 382, 419, 420, 421, 422, 423, 424, 425], "lower": [75, 98, 156, 162, 166, 168, 419, 420, 421, 422, 425], "access": [76, 77, 118, 444], "usual": [76, 85, 194], "di": 76, "100": [76, 137, 158, 172, 192, 342, 368], "d3": 76, "give": [78, 83, 309, 385, 396], "offset": [79, 83, 85, 130, 131, 276, 416, 421, 422, 424, 425], "axis1": [79, 83, 276, 307, 409, 416], "axis2": [79, 83, 276, 307, 409, 416], "prepend": [80, 95, 415], "differenc": 80, "prior": 80, "expand": [80, 95], "smaller": [80, 83, 119, 291, 383], "consecut": [80, 86], "divis": [81, 125, 126, 127, 128, 203, 321, 383, 426], "dp": [81, 164, 166, 176, 177, 321, 385, 386, 396, 407, 426], "met": [82, 172], "attempt": [82, 172], "flexibl": [82, 85, 131, 172], "einstein": [82, 87, 88, 149, 180, 194, 317, 414], "summat": [82, 87, 88, 149, 180, 194, 317, 414], "convent": [82, 87, 88, 149, 180, 194, 317, 414], "chain": [82, 83], "neither": [82, 178, 194, 211, 213], "3j": [82, 194], "499128": 82, "wrapper": 83, "compliant": 83, "__getitem__": [83, 85, 120], "self": [83, 85, 120, 220, 221, 222, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 261, 262, 263, 280, 330], "__setitem__": [83, 120], "val": [83, 118, 120, 259, 293, 319, 325], "__len__": [83, 85], "len": [83, 85, 148, 199, 200, 246, 396, 430], "asnumpi": 83, "behavior": [83, 274, 415], "conveni": [83, 309, 330], "assign": [83, 278], "collaps": [83, 281], "get_arrai": 83, "get": [83, 137, 181, 192, 305, 411, 444], "id": [83, 283], "standard": [83, 119, 125, 128, 197, 203, 212, 215, 217, 260, 283, 304, 330, 345, 352, 359, 368, 369, 370, 371, 372, 383, 406, 431, 444, 448], "random": [83, 121, 122, 123, 167, 172, 174, 175, 178, 180, 283, 405, 437, 448], "123": [83, 283], "kth": [83, 291, 318], "introselect": [83, 291, 318], "rearrang": [83, 291, 448], "move": [83, 205, 291, 389, 390, 417], "behind": [83, 291], "sh": [83, 297], "free": [83, 297], "separ": [83, 85, 131, 134, 297], "side": [83, 167, 299, 394], "sorter": [83, 299, 394], "maintain": [83, 85, 299, 394, 411], "could": [83, 302], "howev": [83, 302], "entri": [83, 85, 89, 121, 122, 123, 303, 404], "deviat": [83, 197, 212, 215, 217, 304, 330, 345, 352, 406, 431], "interchang": [83, 205, 307, 409], "to_devic": 83, "target_devic": 83, "transfer": 83, "revers": [83, 121, 122, 123, 309, 417, 430], "becom": [83, 309], "intend": [83, 309], "simpli": [83, 131, 309], "suitabl": [83, 309, 394], "without": [83, 89, 300, 309, 379, 385, 444], "varianc": [83, 197, 212, 215, 217, 310, 406, 431, 448], "__eq__": [83, 85, 120, 330], "__ne__": [83, 85, 120, 330], "__lt__": [83, 85, 120, 330], "__le__": [83, 85, 120, 330], "__gt__": [83, 85, 120, 330], "__ge__": [83, 85, 120, 330], "attribut": [83, 85, 90, 119, 136, 146, 175, 316, 436, 437], "imaginari": [83, 147, 165, 166, 168, 170, 282], "70710677": [83, 282, 295], "items": [83, 85], "nbyte": 83, "consum": [83, 288], "setter": [83, 300], "involv": [83, 179, 300], "displac": [83, 305], "upon": [83, 305], "unit": [83, 165, 170, 176, 305], "s1": [83, 85, 158, 305], "s2": [83, 85, 305], "s3": [83, 305], "i1": [83, 85, 305], "i2": [83, 85, 305], "i3": [83, 305], "sycl_context": 83, "sycl_devic": 83, "after": [84, 349, 389], "been": [84, 326, 390, 411], "rebuild": 84, "nd": [84, 143, 392, 398, 405, 433], "align": 85, "homogen": 85, "describ": [85, 193, 216, 382, 408, 448], "fundament": 85, "field": [85, 199], "struct": 85, "obj": [85, 129, 155], "dictionari": 85, "comma": 85, "sticki": 85, "isalignedstruct": 85, "built": 85, "int16": 85, "structur": [85, 182], "f1": 85, "unsign": 85, "uint64": 85, "f2": 85, "u8": 85, "s10": 85, "format": [85, 131, 134, 448], "f0": 85, "void": 85, "hello": 85, "world": [85, 332, 349], "v10": 85, "subdivid": 85, "int8": [85, 322], "gender": 85, "ag": 85, "uint8": [85, 130, 131], "u1": [85, 130, 131], "25": [85, 92, 139, 142, 169, 181, 206, 217, 359, 368, 430, 431], "surnam": 85, "s25": 85, "new_ord": 85, "forc": 85, "swap": [85, 409], "opposit": 85, "endian": 85, "littl": 85, "big": 85, "nativ": 85, "new_dtyp": 85, "sy": 85, "sys_is_l": 85, "byteord": 85, "native_cod": 85, "swapped_cod": 85, "native_dt": 85, "swapped_dt": 85, "l": [85, 162, 166, 168], "subarrai": [85, 148], "regardless": [85, 166, 168], "subdtyp": 85, "8f": 85, "charact": [85, 131], "applic": 85, "dt": 85, "relev": [85, 137, 181, 192], "ascii": 85, "even": [85, 391], "char": 85, "descr": 85, "__array_interface__": 85, "descript": [85, 193, 216, 382, 408, 444], "warn": [85, 207, 208, 348], "directli": [85, 132, 148, 192, 312, 411], "accur": [85, 96, 187], "reconstruct": [85, 178], "str_": 85, "grade": 85, "u16": 85, "fulli": 85, "titl": 85, "32": [85, 137, 414], "present": [85, 211, 213, 216], "unicod": 85, "meta": 85, "notic": 85, "s16": 85, "mask": [85, 312, 319, 327, 410], "multiarrai": 85, "item_hasobject": 85, "list_pickl": 85, "item_is_point": 85, "needs_init": 85, "needs_pyapi": 85, "use_getitem": 85, "use_setitem": 85, "explan": 85, "thei": [85, 167, 392, 394, 414, 430, 433, 444], "user": 85, "particular": [85, 172], "hasobject": 85, "recal": 85, "actual": [85, 162, 172], "address": 85, "pointer": 85, "distinguish": 85, "won": 85, "produc": [85, 182, 394], "isbuiltin": 85, "relat": 85, "read": [85, 130, 131, 133, 134, 182, 379, 385], "etc": [85, 349], "machineri": 85, "extend": [85, 158, 444], "field1": 85, "isn": 85, "anyth": 85, "arr": [85, 327, 354, 422, 425], "80": [85, 434], "biufcmmosuv": 85, "identifi": 85, "u": [85, 162, 166, 168, 178], "timedelta": 85, "datetim": 85, "metadata": 85, "readonli": 85, "mappingproxi": 85, "creation": [85, 88, 437, 444, 448], "approach": 85, "propag": [85, 126, 127, 195, 196, 201, 202, 210, 211, 213, 214, 216], "guarante": [85, 385], "certain": 85, "project": [85, 323], "featur": 85, "wa": [85, 172, 193, 195, 201, 211, 213, 215, 217, 330, 371, 382, 406, 431], "long": [85, 170], "undocu": 85, "well": [85, 131, 332, 349, 368], "aspect": 85, "futur": 85, "ad": [85, 164, 176, 448], "datatyp": [85, 171], "dt2": 85, "key2": 85, "value2": 85, "arr2": 85, "clear": 85, "width": 85, "un": 85, "void640": 85, "increas": [85, 95, 430], "walk": 85, "roughli": 85, "typestr": 85, "item_dtyp": 85, "retriev": 85, "extra": [85, 134], "impli": 85, "tack": 85, "to_end": 86, "to_begin": 86, "operand": [87, 88, 180, 317, 414], "cost": [87, 88], "contract": [87, 88, 414], "subscript": 88, "greedi": 88, "intermedi": 88, "03088525e": 89, "312": 89, "prototyp": 90, "compar": [91, 196, 202], "in_array1": 92, "error": [92, 165, 404, 437], "scipi": 92, "math": 92, "99532227": 92, "99853728": 92, "99959305": 92, "99989938": 92, "99997791": 92, "718281828": [93, 96], "389056099": [93, 96], "appear": [95, 122, 123], "whenev": [95, 409, 417], "rank": [95, 97, 132, 171, 409], "resid": 95, "henc": 95, "resolv": [95, 193, 216, 382, 408], "newaxi": 95, "minu": [96, 125, 383, 427], "small": [96, 174, 187], "callcul": 96, "00000000005e": 96, "000000082740371e": 96, "elsewher": [98, 145, 419, 434], "fourier": [100, 101, 102, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117, 437], "transform": [100, 101, 102, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117, 437], "batch": [101, 103, 107, 108, 112, 113, 115, 117], "sampl": [102, 116, 137, 181, 192, 326, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 364, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 411, 437, 448], "frequenc": [102, 104, 109, 116], "shift": [104, 109, 159, 387, 389], "compon": [104, 109, 119, 147, 380], "center": [104, 109], "spectrum": [104, 109], "signal": [105, 110], "hermitian": [105, 110, 162, 165, 166, 167, 168, 171, 174, 178, 448], "symmetri": [105, 110], "occupi": [119, 146], "ep": [119, 171], "larger": 119, "ieee": 119, "754": 119, "epsneg": 119, "largest": [119, 124, 146, 383], "approxim": [119, 185], "resolut": 119, "tini": 119, "smallest_norm": 119, "finfo_object": 119, "__next__": 120, "__iter__": 120, "reorder": [121, 180, 205], "down": 123, "spreadsheet": 124, "toward": [124, 125, 383, 427], "word": [124, 167, 330, 374], "greatest": 125, "complementari": [125, 128, 203], "__dlpack__": 129, "dmlc": 129, "github": 129, "io": [129, 182], "dlpack": 129, "__dlpack_device__": 129, "buffer_lik": 130, "expos": [130, 444], "text": [130, 131, 133, 134, 182], "file": [130, 131, 133, 134, 138, 182], "x01": [130, 131], "x02": [130, 131], "x03": [130, 131], "x04": [130, 131], "67305985": 130, "x05": 130, "sep": [131, 134], "highli": 131, "effici": [131, 171, 174, 178], "known": [131, 368], "pars": [131, 182], "written": 131, "open": [131, 181, 314, 330, 360, 362, 363, 365, 374, 409], "filenam": [131, 182], "treat": [131, 166, 168, 172, 182, 209, 210, 214, 216, 322, 326, 394, 411, 415, 444], "whitespac": [131, 134], "permit": 131, "pickl": [131, 182], "write": [131, 385], "temporari": 131, "tempfil": 131, "fh": 131, "temporaryfil": 131, "x00": 131, "flush": 131, "seek": 131, "therefor": [132, 166, 168], "fn": 132, "callabl": 132, "back": [132, 379, 385, 390], "matric": [132, 164, 165, 167, 169, 171, 173, 174, 175, 176, 178, 194, 199, 448], "lambda": 132, "fill_valu": [135, 136], "50": [137, 158, 187, 192, 326, 411, 414, 434], "scale": [137, 175, 181, 192, 330, 337, 339, 341, 342, 343, 344, 352, 364, 369, 376], "progress": [137, 181], "final": [137, 192], "store": [137, 181, 192, 194], "begin": [137, 181, 192], "62341325": 137, "6227766": 137, "177": [137, 192], "827941": [137, 192], "63": 137, "127": 137, "directori": 138, "h": [138, 162, 175, 199], "header": 138, "modul": [138, 437], "vararg": 139, "y1": [139, 418], "bin": [142, 368], "densiti": 142, "dataset": 142, "hist": [142, 368], "bin_edg": 142, "4999999999999996": 142, "hypotenus": [144, 382], "leg": [144, 382], "reduce_hypot": 144, "iinfo_object": 146, "4j": [147, 432], "6j": [147, 432], "spars": [148, 199], "dens": [148, 200], "ith": [148, 314], "col": 148, "straightforward": 148, "whichev": 149, "generalis": 149, "ordinari": [149, 162], "multidimension": [149, 434], "38": [149, 332], "62": 149, "86": 149, "110": 149, "134": 149, "finit": [152, 153, 154], "nat": 154, "arg1": [156, 157], "arg2": [156, 157], "typecod": 156, "hierarchi": 156, "kroneck": 158, "500": 158, "600": 158, "700": 158, "70": [158, 432, 434], "j1": 158, "40": [159, 326, 411], "decomposit": [162, 169, 171, 174, 178, 448], "symmetr": [162, 165, 166, 167, 168, 171, 174, 178], "verifi": 162, "factor": [162, 175], "obtain": [162, 312], "p": [163, 170, 332, 335, 340, 346, 349], "sought": 163, "fro": [163, 173], "frobeniu": 163, "infinit": 163, "41421356": [163, 173], "16227766": [163, 382], "70710678": [163, 165], "compute_uv": [163, 178], "logarithm": [164, 176, 181, 183, 184, 185, 186, 187, 193, 346, 448], "bc": [164, 176], "eigenvalu": [165, 166, 167, 168, 448], "eigenvector": [165, 166, 167, 168], "necessarili": [165, 167], "pair": 165, "proper": [165, 167], "lapack": [165, 167], "fallback": [165, 167, 333, 335, 336, 346, 351, 367], "la": [165, 167, 168], "almost": 165, "trivial": [165, 411], "possess": 165, "70710678j": 165, "Be": 165, "theor": 165, "uplo": [166, 168], "hermit": [166, 168], "ascend": [166, 168, 394], "17157288": [166, 168], "82842712": [166, 168], "92387953": 166, "38268343": 166, "38268343j": 166, "92387953j": 166, "nor": [167, 211, 213], "illustr": 167, "fact": 167, "orthogon": [167, 175], "q": [167, 170, 175, 180, 198], "middl": 167, "ainv": [169, 179], "singular": [169, 171, 174, 178], "sever": 169, "onc": 169, "expon": [170, 321, 356, 448], "somewhat": 170, "sophist": 170, "quaternion": 170, "tol": [171, 348], "threshold": 171, "epsilon": 171, "enabl": [171, 174, 178], "defici": 171, "exact": 172, "suppli": [172, 330, 359], "333": 172, "ord": 173, "nuc": 173, "74596669": 173, "34846923": 173, "35106603e": 173, "84803548": 173, "23606798": 173, "74165739": 173, "24264069": 173, "22497216": 173, "rcond": 174, "moor": 174, "penros": 174, "pseudo": [174, 330], "cutoff": 174, "largest_singular_valu": 174, "orthonorm": 175, "r": 175, "raw": 175, "tau": 175, "namedtupl": 175, "unitari": [175, 178], "household": 175, "reflector": 175, "r2": 175, "natur": [176, 183, 184, 185, 186, 187, 193], "circl": 176, "logabsdet": 176, "69314718": [176, 185], "09861229": [176, 185], "07944154": 176, "equat": [177, 179, 180, 448], "coeffici": [177, 180], "ordin": 177, "solut": 177, "full_matric": 178, "vh": 178, "descend": 178, "2d": [178, 194], "smat": 178, "4d": 178, "rightmost": 180, "sens": 180, "said": 180, "retstep": 181, "There": 181, "half": [181, 330, 360, 362, 363, 365, 374, 409], "fname": 182, "pathlib": 182, "gz": 182, "bz2": 182, "decompress": 182, "line": 182, "regular": 182, "miss": 182, "stringio": 182, "behav": 182, "n2": [182, 199], "plu": [183, 184, 186], "30102999566": 184, "99": [185, 326], "xi": [186, 199], "26618007j": 186, "logsumdexp": 187, "prob1": 187, "prob2": 187, "5e": 187, "prob12": 187, "113": 187, "87649168": 187, "ln": 192, "log_bas": 192, "uniformli": [192, 330, 374], "215": 192, "443469": 192, "464": 192, "15888336": 192, "316": 192, "22776602": 192, "562": 192, "34132519": 192, "0396842": 192, "34960421": 192, "98024613": 192, "72075441": 192, "30258509": 193, "signatur": 194, "extobj": 194, "mix": 194, "98": 194, "maxima": [195, 196], "while": [197, 212, 215, 217, 312, 389, 406, 419, 431], "overwrite_input": 198, "xy": 199, "xn": 199, "ij": 199, "cartesian": 199, "n1": 199, "ni": [199, 326, 411], "nn": 199, "conserv": 199, "n3": 199, "nx": 199, "ny": 199, "xv": 199, "yv": 199, "matplotlib": [199, 368], "pyplot": [199, 368], "plt": [199, 368], "xx": 199, "yy": 199, "contourf": 199, "dpnp_iface_arraycr": [200, 314], "mgridclass": 200, "5j": [200, 314], "minima": [201, 202], "fraction": [204, 427], "slice": [207, 208, 211, 212, 213, 215, 216, 217, 325, 326, 411, 424, 444], "valueerror": [207, 208, 385, 404], "trust": [207, 208], "encount": [210, 211, 213], "lead": 210, "across": [210, 214, 216], "runtimewarn": [211, 213], "6666666666666665": 212, "delta": [215, 217, 406, 429, 431], "freedom": [215, 217, 372, 406, 431], "divisor": [215, 217, 406, 431], "nonneg": [215, 217, 406, 431], "247219128924647": 215, "5555555555555554": 217, "repr": 257, "136": 260, "272": 260, "408": 260, "common": [312, 414], "spell": 312, "inequ": 313, "ogridclass": 314, "125": [321, 430], "effect": 321, "7j": 323, "1d": [325, 326, 411], "contrast": 325, "cyclic": 325, "clamp": [325, 410], "boundari": 325, "44": 325, "55": 325, "22": 325, "nk": [326, 411], "nj": [326, 411], "had": [326, 411], "everi": [326, 411], "52359878": 329, "04719755": 329, "0943951": 329, "61799388": 329, "mersenn": 330, "twister": 330, "maximumum": [330, 366], "intern": 330, "state": 330, "get_sycl_devic": 330, "get_sycl_queu": 330, "loc": [330, 341, 343, 344, 352, 376], "draw": [330, 331, 332, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 358, 364, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377], "gaussian": [330, 352, 376], "drawn": [330, 331, 332, 334, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 352, 353, 355, 356, 358, 361, 364, 370, 371, 372, 373, 374, 375, 376, 377, 378, 395], "parameter": [330, 352, 374], "58997253": 330, "84288406": 330, "33836967": 330, "16394577": 330, "40882036": 330, "39295758": 330, "48927254": 330, "74921661": 330, "13436424": 330, "56920387": 330, "84743374": 330, "80226506": 330, "76377462": 330, "06310682": 330, "25506903": 330, "1179187": 330, "49543509": 330, "76096244": 330, "low": [330, 358, 361, 374, 444], "high": [330, 358, 361, 374], "inclus": [330, 358, 361], "exclus": [330, 358], "omit": [330, 358], "d0": [330, 357, 359], "d1": [330, 359], "dn": [330, 357, 359], "84401099": 330, "four": [330, 359], "88997253": 330, "54288406": 330, "63836967": 330, "46394577": 330, "70882036": 330, "69295758": 330, "78927254": 330, "04921661": 330, "continu": [330, 362], "stdev": [330, 371], "81715362": 330, "54465213": 330, "18557831": 330, "28352814": 330, "67718303": 330, "11570901": 330, "21968665": 330, "18236388": 330, "08156915": 330, "21941987": 330, "24544512": 330, "63522211": 330, "673174": 330, "54": 330, "48093112": 330, "52928804": 330, "1196081": 330, "6990877": 330, "34074171": 330, "alpha": [331, 336, 337, 353, 356], "trial": 332, "probabl": [332, 340, 349], "coin": 332, "compani": [332, 349], "drill": [332, 349], "wild": [332, 349], "cat": [332, 349], "oil": [332, 349], "explor": [332, 349], "success": [332, 340, 349], "nine": 332, "fail": 332, "let": 332, "000": 332, "model": 332, "20000": 332, "answer": 332, "38885": 332, "df": [334, 350, 372, 373], "chi": [334, 350], "89920014": 334, "00867716": 334, "13710533": 334, "62318272": 334, "dfnum": [338, 351], "dfden": [338, 351], "ten": 340, "thousand": 340, "individu": 340, "35": 340, "mu": [341, 345, 352, 375], "ngood": 342, "nbad": 342, "nsampl": 342, "nsamp": 342, "good": 342, "bad": 342, "decai": 343, "sigma": [345, 352], "seri": 346, "pval": 347, "iinfo": 347, "throw": 347, "dice": 347, "check_valid": 348, "multivari": 348, "100000": 349, "nonc": [350, 351], "noncentr": [350, 351], "todo": 350, "ii": 353, "lomax": 353, "randomli": 354, "lam": 355, "randomst": 358, "1923875335537315": 359, "rese": 366, "legaci": 366, "mt19937": 366, "engin": 366, "cauchi": 368, "lorentz": 368, "plot": 368, "1000000": [368, 370, 372, 373], "3x8000": 369, "8000": 369, "student": 372, "kappa": 375, "von": 375, "mise": 375, "dispers": 375, "pack": [379, 448], "fastest": [379, 385], "slowest": [379, 385], "subtyp": 379, "rsqrt": [381, 402], "33": 381, "3003003": 381, "modulu": 383, "fit": 384, "rep": [384, 415], "newshap": 385, "infer": 385, "account": 385, "never": 385, "reus": 385, "unspecifi": 385, "arrays_and_dtyp": 386, "introduc": 389, "restor": 389, "rel": [389, 390], "until": [389, 390], "li": [389, 390], "reposit": 390, "35355338": 393, "19245009": 393, "typic": [394, 444], "bound": [394, 410], "condlist": 395, "choicelist": 395, "signum": 397, "742278e": 399, "3012989": 400, "548739": 400, "cube": 402, "traceback": 404, "recent": 404, "118033988749895": 406, "composit": [408, 418], "trapezoid": [408, 418], "fanci": 410, "ai_min": 411, "ai_max": 411, "22460635e": 412, "63317787e": 412, "996272": 413, "917152": 413, "integer_lik": 414, "otim": 414, "cdot": 414, "nth": 414, "0th": 414, "1th": 414, "forth": 414, "4400": 414, "4730": 414, "4532": 414, "4874": 414, "4664": 414, "5018": 414, "4796": 414, "5162": 414, "4928": 414, "5306": 414, "slower": 414, "replic": 415, "thu": 415, "dx": 418, "closer": 427, "short": [427, 444], "discard": 427, "complement": 429, "49778714": 429, "28318531": 429, "vandermond": 430, "8j": 432, "higher": 432, "chosen": 434, "ogrid": 434, "algebra": [437, 448], "mathemat": [437, 448], "statist": [437, 448], "summari": 437, "level": [437, 444], "util": 437, "counterpart": 444, "constructor": 444, "syntax": 444, "reflect": 444, "intrins": 444, "sometim": 444, "reset": 444, "meaningfulli": 444, "mani": 444, "fashion": 444, "briefli": 444, "explain": 444, "docstr": 444, "proce": 444, "pow": 444, "unari": 444, "custom": 444, "cover": 448, "build": 448, "elementwis": [448, 452], "helper": 448, "ration": 448, "extrema": 448, "dparrai": 449, "variou": 452}, "objects": {"": [[3, 0, 0, "-", "dpnp"]], "dpnp": [[11, 1, 1, "", "abs"], [12, 1, 1, "", "absolute"], [13, 1, 1, "", "add"], [14, 1, 1, "", "all"], [15, 1, 1, "", "allclose"], [16, 1, 1, "", "amax"], [17, 1, 1, "", "amin"], [18, 1, 1, "", "angle"], [19, 1, 1, "", "any"], [20, 1, 1, "", "arange"], [21, 1, 1, "", "arccos"], [22, 1, 1, "", "arccosh"], [23, 1, 1, "", "arcsin"], [24, 1, 1, "", "arcsinh"], [25, 1, 1, "", "arctan"], [26, 1, 1, "", "arctan2"], [27, 1, 1, "", "arctanh"], [28, 1, 1, "", "argmax"], [29, 1, 1, "", "argmin"], [30, 1, 1, "", "argsort"], [31, 1, 1, "", "around"], [32, 1, 1, "", "array"], [33, 1, 1, "", "array_equal"], [34, 1, 1, "", "asanyarray"], [35, 1, 1, "", "asarray"], [36, 1, 1, "", "ascontiguousarray"], [37, 1, 1, "", "asfarray"], [38, 1, 1, "", "asfortranarray"], [39, 1, 1, "", "asnumpy"], [40, 1, 1, "", "astype"], [41, 1, 1, "", "atleast_1d"], [42, 1, 1, "", "atleast_2d"], [43, 1, 1, "", "atleast_3d"], [44, 1, 1, "", "average"], [45, 1, 1, "", "bincount"], [46, 1, 1, "", "bitwise_and"], [47, 1, 1, "", "bitwise_not"], [48, 1, 1, "", "bitwise_or"], [49, 1, 1, "", "bitwise_xor"], [50, 1, 1, "", "broadcast_arrays"], [51, 1, 1, "", "broadcast_to"], [52, 1, 1, "", "can_cast"], [53, 1, 1, "", "cbrt"], [54, 1, 1, "", "ceil"], [55, 1, 1, "", "choose"], [56, 1, 1, "", "clip"], [57, 1, 1, "", "column_stack"], [58, 1, 1, "", "concatenate"], [59, 1, 1, "", "conj"], [60, 1, 1, "", "conjugate"], [61, 1, 1, "", "convolve"], [62, 1, 1, "", "copy"], [63, 1, 1, "", "copysign"], [64, 1, 1, "", "copyto"], [65, 1, 1, "", "correlate"], [66, 1, 1, "", "cos"], [67, 1, 1, "", "cosh"], [68, 1, 1, "", "count_nonzero"], [69, 1, 1, "", "cov"], [70, 1, 1, "", "cross"], [71, 1, 1, "", "cumprod"], [72, 1, 1, "", "cumsum"], [73, 1, 1, "", "deg2rad"], [74, 1, 1, "", "degrees"], [75, 1, 1, "", "diag"], [76, 1, 1, "", "diag_indices"], [77, 1, 1, "", "diag_indices_from"], [78, 1, 1, "", "diagflat"], [79, 1, 1, "", "diagonal"], [80, 1, 1, "", "diff"], [81, 1, 1, "", "divide"], [82, 1, 1, "", "dot"], [84, 1, 1, "", "dstack"], [85, 2, 1, "", "dtype"], [86, 1, 1, "", "ediff1d"], [87, 1, 1, "", "einsum"], [88, 1, 1, "", "einsum_path"], [89, 1, 1, "", "empty"], [90, 1, 1, "", "empty_like"], [91, 1, 1, "", "equal"], [92, 1, 1, "", "erf"], [93, 1, 1, "", "exp"], [94, 1, 1, "", "exp2"], [95, 1, 1, "", "expand_dims"], [96, 1, 1, "", "expm1"], [97, 1, 1, "", "extract"], [98, 1, 1, "", "eye"], [99, 1, 1, "", "fabs"], [10, 0, 0, "-", "fft"], [118, 1, 1, "", "fill_diagonal"], [119, 1, 1, "", "finfo"], [120, 2, 1, "", "flatiter"], [121, 1, 1, "", "flip"], [122, 1, 1, "", "fliplr"], [123, 1, 1, "", "flipud"], [124, 1, 1, "", "floor"], [125, 1, 1, "", "floor_divide"], [126, 1, 1, "", "fmax"], [127, 1, 1, "", "fmin"], [128, 1, 1, "", "fmod"], [129, 1, 1, "", "from_dlpack"], [130, 1, 1, "", "frombuffer"], [131, 1, 1, "", "fromfile"], [132, 1, 1, "", "fromfunction"], [133, 1, 1, "", "fromiter"], [134, 1, 1, "", "fromstring"], [135, 1, 1, "", "full"], [136, 1, 1, "", "full_like"], [137, 1, 1, "", "geomspace"], [138, 1, 1, "", "get_include"], [139, 1, 1, "", "gradient"], [140, 1, 1, "", "greater"], [141, 1, 1, "", "greater_equal"], [142, 1, 1, "", "histogram"], [143, 1, 1, "", "hstack"], [144, 1, 1, "", "hypot"], [145, 1, 1, "", "identity"], [146, 1, 1, "", "iinfo"], [147, 1, 1, "", "imag"], [148, 1, 1, "", "indices"], [149, 1, 1, "", "inner"], [150, 1, 1, "", "invert"], [151, 1, 1, "", "isclose"], [152, 1, 1, "", "isfinite"], [153, 1, 1, "", "isinf"], [154, 1, 1, "", "isnan"], [155, 1, 1, "", "isscalar"], [156, 1, 1, "", "issubdtype"], [157, 1, 1, "", "issubsctype"], [158, 1, 1, "", "kron"], [159, 1, 1, "", "left_shift"], [160, 1, 1, "", "less"], [161, 1, 1, "", "less_equal"], [181, 1, 1, "", "linspace"], [182, 1, 1, "", "loadtxt"], [183, 1, 1, "", "log"], [184, 1, 1, "", "log10"], [185, 1, 1, "", "log1p"], [186, 1, 1, "", "log2"], [187, 1, 1, "", "logaddexp"], [188, 1, 1, "", "logical_and"], [189, 1, 1, "", "logical_not"], [190, 1, 1, "", "logical_or"], [191, 1, 1, "", "logical_xor"], [192, 1, 1, "", "logspace"], [193, 1, 1, "", "logsumexp"], [194, 1, 1, "", "matmul"], [195, 1, 1, "", "max"], [196, 1, 1, "", "maximum"], [197, 1, 1, "", "mean"], [198, 1, 1, "", "median"], [199, 1, 1, "", "meshgrid"], [200, 5, 1, "", "mgrid"], [201, 1, 1, "", "min"], [202, 1, 1, "", "minimum"], [203, 1, 1, "", "mod"], [204, 1, 1, "", "modf"], [205, 1, 1, "", "moveaxis"], [206, 1, 1, "", "multiply"], [207, 1, 1, "", "nanargmax"], [208, 1, 1, "", "nanargmin"], [209, 1, 1, "", "nancumprod"], [210, 1, 1, "", "nancumsum"], [211, 1, 1, "", "nanmax"], [212, 1, 1, "", "nanmean"], [213, 1, 1, "", "nanmin"], [214, 1, 1, "", "nanprod"], [215, 1, 1, "", "nanstd"], [216, 1, 1, "", "nansum"], [217, 1, 1, "", "nanvar"], [218, 3, 1, "", "ndarray"], [311, 1, 1, "", "negative"], [312, 1, 1, "", "nonzero"], [313, 1, 1, "", "not_equal"], [314, 5, 1, "", "ogrid"], [315, 1, 1, "", "ones"], [316, 1, 1, "", "ones_like"], [317, 1, 1, "", "outer"], [318, 1, 1, "", "partition"], [319, 1, 1, "", "place"], [320, 1, 1, "", "positive"], [321, 1, 1, "", "power"], [322, 1, 1, "", "prod"], [323, 1, 1, "", "proj"], [324, 1, 1, "", "ptp"], [325, 1, 1, "", "put"], [326, 1, 1, "", "put_along_axis"], [327, 1, 1, "", "putmask"], [328, 1, 1, "", "rad2deg"], [329, 1, 1, "", "radians"], [447, 0, 0, "-", "random"], [379, 1, 1, "", "ravel"], [380, 1, 1, "", "real"], [381, 1, 1, "", "reciprocal"], [382, 1, 1, "", "reduce_hypot"], [383, 1, 1, "", "remainder"], [384, 1, 1, "", "repeat"], [385, 1, 1, "", "reshape"], [386, 1, 1, "", "result_type"], [387, 1, 1, "", "right_shift"], [388, 1, 1, "", "rint"], [389, 1, 1, "", "roll"], [390, 1, 1, "", "rollaxis"], [391, 1, 1, "", "round"], [392, 1, 1, "", "row_stack"], [393, 1, 1, "", "rsqrt"], [394, 1, 1, "", "searchsorted"], [395, 1, 1, "", "select"], [396, 1, 1, "", "shape"], [397, 1, 1, "", "sign"], [398, 1, 1, "", "signbit"], [399, 1, 1, "", "sin"], [400, 1, 1, "", "sinh"], [401, 1, 1, "", "sort"], [402, 1, 1, "", "sqrt"], [403, 1, 1, "", "square"], [404, 1, 1, "", "squeeze"], [405, 1, 1, "", "stack"], [406, 1, 1, "", "std"], [407, 1, 1, "", "subtract"], [408, 1, 1, "", "sum"], [409, 1, 1, "", "swapaxes"], [410, 1, 1, "", "take"], [411, 1, 1, "", "take_along_axis"], [412, 1, 1, "", "tan"], [413, 1, 1, "", "tanh"], [414, 1, 1, "", "tensordot"], [415, 1, 1, "", "tile"], [416, 1, 1, "", "trace"], [417, 1, 1, "", "transpose"], [418, 1, 1, "", "trapz"], [419, 1, 1, "", "tri"], [420, 1, 1, "", "tril"], [421, 1, 1, "", "tril_indices"], [422, 1, 1, "", "tril_indices_from"], [423, 1, 1, "", "triu"], [424, 1, 1, "", "triu_indices"], [425, 1, 1, "", "triu_indices_from"], [426, 1, 1, "", "true_divide"], [427, 1, 1, "", "trunc"], [428, 1, 1, "", "unique"], [429, 1, 1, "", "unwrap"], [430, 1, 1, "", "vander"], [431, 1, 1, "", "var"], [432, 1, 1, "", "vdot"], [433, 1, 1, "", "vstack"], [434, 1, 1, "", "where"], [435, 1, 1, "", "zeros"], [436, 1, 1, "", "zeros_like"]], "dpnp.dpnp_array": [[83, 2, 1, "", "dpnp_array"]], "dpnp.dpnp_array.dpnp_array": [[83, 3, 1, "", "T"], [83, 4, 1, "", "__eq__"], [83, 4, 1, "", "__ge__"], [83, 4, 1, "", "__getitem__"], [83, 4, 1, "", "__gt__"], [83, 4, 1, "", "__le__"], [83, 4, 1, "", "__len__"], [83, 4, 1, "", "__lt__"], [83, 4, 1, "", "__ne__"], [83, 4, 1, "", "__setitem__"], [83, 4, 1, "", "all"], [83, 4, 1, "", "any"], [83, 4, 1, "", "argmax"], [83, 4, 1, "", "argmin"], [83, 4, 1, "", "argsort"], [83, 4, 1, "", "asnumpy"], [83, 4, 1, "", "astype"], [83, 4, 1, "", "choose"], [83, 4, 1, "", "clip"], [83, 4, 1, "", "conj"], [83, 4, 1, "", "conjugate"], [83, 4, 1, "", "copy"], [83, 4, 1, "", "cumsum"], [83, 3, 1, "", "device"], [83, 4, 1, "", "diagonal"], [83, 4, 1, "", "dot"], [83, 3, 1, "", "dtype"], [83, 4, 1, "", "fill"], [83, 3, 1, "", "flags"], [83, 3, 1, "", "flat"], [83, 4, 1, "", "flatten"], [83, 4, 1, "", "get_array"], [83, 3, 1, "", "imag"], [83, 4, 1, "", "item"], [83, 3, 1, "", "itemsize"], [83, 4, 1, "", "max"], [83, 4, 1, "", "mean"], [83, 4, 1, "", "min"], [83, 3, 1, "", "nbytes"], [83, 3, 1, "", "ndim"], [83, 4, 1, "", "nonzero"], [83, 4, 1, "", "partition"], [83, 4, 1, "", "prod"], [83, 4, 1, "", "put"], [83, 4, 1, "", "ravel"], [83, 3, 1, "", "real"], [83, 4, 1, "", "repeat"], [83, 4, 1, "", "reshape"], [83, 4, 1, "", "round"], [83, 4, 1, "", "searchsorted"], [83, 3, 1, "", "shape"], [83, 3, 1, "", "size"], [83, 4, 1, "", "sort"], [83, 4, 1, "", "squeeze"], [83, 4, 1, "", "std"], [83, 3, 1, "", "strides"], [83, 4, 1, "", "sum"], [83, 4, 1, "", "swapaxes"], [83, 3, 1, "", "sycl_context"], [83, 3, 1, "", "sycl_device"], [83, 3, 1, "", "sycl_queue"], [83, 4, 1, "", "take"], [83, 4, 1, "", "to_device"], [83, 4, 1, "", "transpose"], [83, 3, 1, "", "usm_type"], [83, 4, 1, "", "var"]], "dpnp.dtype": [[85, 4, 1, "", "__eq__"], [85, 4, 1, "", "__ge__"], [85, 4, 1, "", "__getitem__"], [85, 4, 1, "", "__gt__"], [85, 4, 1, "", "__le__"], [85, 4, 1, "", "__len__"], [85, 4, 1, "", "__lt__"], [85, 4, 1, "", "__ne__"], [85, 3, 1, "", "alignment"], [85, 3, 1, "", "base"], [85, 3, 1, "", "byteorder"], [85, 3, 1, "", "char"], [85, 3, 1, "", "descr"], [85, 3, 1, "", "fields"], [85, 3, 1, "", "flags"], [85, 3, 1, "", "hasobject"], [85, 3, 1, "", "isalignedstruct"], [85, 3, 1, "", "isbuiltin"], [85, 3, 1, "", "isnative"], [85, 3, 1, "", "itemsize"], [85, 3, 1, "", "kind"], [85, 3, 1, "", "metadata"], [85, 3, 1, "", "name"], [85, 3, 1, "", "names"], [85, 3, 1, "", "ndim"], [85, 4, 1, "", "newbyteorder"], [85, 3, 1, "", "num"], [85, 3, 1, "", "shape"], [85, 3, 1, "", "str"], [85, 3, 1, "", "subdtype"], [85, 3, 1, "", "type"]], "dpnp.fft": [[100, 1, 1, "", "fft"], [101, 1, 1, "", "fft2"], [102, 1, 1, "", "fftfreq"], [103, 1, 1, "", "fftn"], [104, 1, 1, "", "fftshift"], [105, 1, 1, "", "hfft"], [106, 1, 1, "", "ifft"], [107, 1, 1, "", "ifft2"], [108, 1, 1, "", "ifftn"], [109, 1, 1, "", "ifftshift"], [110, 1, 1, "", "ihfft"], [111, 1, 1, "", "irfft"], [112, 1, 1, "", "irfft2"], [113, 1, 1, "", "irfftn"], [114, 1, 1, "", "rfft"], [115, 1, 1, "", "rfft2"], [116, 1, 1, "", "rfftfreq"], [117, 1, 1, "", "rfftn"]], "dpnp.flatiter": [[120, 4, 1, "", "__eq__"], [120, 4, 1, "", "__ge__"], [120, 4, 1, "", "__getitem__"], [120, 4, 1, "", "__gt__"], [120, 4, 1, "", "__iter__"], [120, 4, 1, "", "__le__"], [120, 4, 1, "", "__lt__"], [120, 4, 1, "", "__ne__"], [120, 4, 1, "", "__next__"], [120, 4, 1, "", "__setitem__"]], "dpnp.linalg": [[162, 1, 1, "", "cholesky"], [163, 1, 1, "", "cond"], [164, 1, 1, "", "det"], [165, 1, 1, "", "eig"], [166, 1, 1, "", "eigh"], [167, 1, 1, "", "eigvals"], [168, 1, 1, "", "eigvalsh"], [169, 1, 1, "", "inv"], [170, 1, 1, "", "matrix_power"], [171, 1, 1, "", "matrix_rank"], [172, 1, 1, "", "multi_dot"], [173, 1, 1, "", "norm"], [174, 1, 1, "", "pinv"], [175, 1, 1, "", "qr"], [176, 1, 1, "", "slogdet"], [177, 1, 1, "", "solve"], [178, 1, 1, "", "svd"], [179, 1, 1, "", "tensorinv"], [180, 1, 1, "", "tensorsolve"]], "dpnp.ndarray": [[219, 6, 1, "", "T"], [220, 4, 1, "", "__abs__"], [221, 4, 1, "", "__add__"], [222, 4, 1, "", "__and__"], [223, 4, 1, "", "__complex__"], [224, 4, 1, "", "__copy__"], [225, 4, 1, "", "__eq__"], [226, 4, 1, "", "__float__"], [227, 4, 1, "", "__floordiv__"], [228, 4, 1, "", "__ge__"], [229, 4, 1, "", "__getitem__"], [230, 4, 1, "", "__gt__"], [231, 4, 1, "", "__iadd__"], [232, 4, 1, "", "__iand__"], [233, 4, 1, "", "__ifloordiv__"], [234, 4, 1, "", "__ilshift__"], [235, 4, 1, "", "__imod__"], [236, 4, 1, "", "__imul__"], [237, 4, 1, "", "__int__"], [238, 4, 1, "", "__invert__"], [239, 4, 1, "", "__ior__"], [240, 4, 1, "", "__ipow__"], [241, 4, 1, "", "__irshift__"], [242, 4, 1, "", "__isub__"], [243, 4, 1, "", "__itruediv__"], [244, 4, 1, "", "__ixor__"], [245, 4, 1, "", "__le__"], [246, 4, 1, "", "__len__"], [247, 4, 1, "", "__lshift__"], [248, 4, 1, "", "__lt__"], [249, 4, 1, "", "__mod__"], [250, 4, 1, "", "__mul__"], [251, 4, 1, "", "__ne__"], [252, 4, 1, "", "__neg__"], [253, 4, 1, "", "__new__"], [254, 4, 1, "", "__or__"], [255, 4, 1, "", "__pos__"], [256, 4, 1, "", "__pow__"], [257, 4, 1, "", "__repr__"], [258, 4, 1, "", "__rshift__"], [259, 4, 1, "", "__setitem__"], [260, 4, 1, "", "__str__"], [261, 4, 1, "", "__sub__"], [262, 4, 1, "", "__truediv__"], [263, 4, 1, "", "__xor__"], [264, 4, 1, "", "all"], [265, 4, 1, "", "any"], [266, 4, 1, "", "argmax"], [267, 4, 1, "", "argmin"], [268, 4, 1, "", "argsort"], [269, 4, 1, "", "astype"], [270, 4, 1, "", "choose"], [271, 4, 1, "", "clip"], [272, 4, 1, "", "conj"], [273, 4, 1, "", "conjugate"], [274, 4, 1, "", "copy"], [275, 4, 1, "", "cumsum"], [276, 4, 1, "", "diagonal"], [277, 6, 1, "", "dtype"], [278, 4, 1, "", "fill"], [279, 6, 1, "", "flags"], [280, 6, 1, "", "flat"], [281, 4, 1, "", "flatten"], [282, 6, 1, "", "imag"], [283, 4, 1, "", "item"], [284, 6, 1, "", "itemsize"], [285, 4, 1, "", "max"], [286, 4, 1, "", "mean"], [287, 4, 1, "", "min"], [288, 6, 1, "", "nbytes"], [289, 6, 1, "", "ndim"], [290, 4, 1, "", "nonzero"], [291, 4, 1, "", "partition"], [292, 4, 1, "", "prod"], [293, 4, 1, "", "put"], [294, 4, 1, "", "ravel"], [295, 6, 1, "", "real"], [296, 4, 1, "", "repeat"], [297, 4, 1, "", "reshape"], [298, 4, 1, "", "round"], [299, 4, 1, "", "searchsorted"], [300, 6, 1, "", "shape"], [301, 6, 1, "", "size"], [302, 4, 1, "", "sort"], [303, 4, 1, "", "squeeze"], [304, 4, 1, "", "std"], [305, 6, 1, "", "strides"], [306, 4, 1, "", "sum"], [307, 4, 1, "", "swapaxes"], [308, 4, 1, "", "take"], [309, 4, 1, "", "transpose"], [310, 4, 1, "", "var"]], "dpnp.random": [[330, 2, 1, "", "RandomState"], [331, 1, 1, "", "beta"], [332, 1, 1, "", "binomial"], [333, 1, 1, "", "bytes"], [334, 1, 1, "", "chisquare"], [335, 1, 1, "", "choice"], [336, 1, 1, "", "dirichlet"], [337, 1, 1, "", "exponential"], [338, 1, 1, "", "f"], [339, 1, 1, "", "gamma"], [340, 1, 1, "", "geometric"], [341, 1, 1, "", "gumbel"], [342, 1, 1, "", "hypergeometric"], [343, 1, 1, "", "laplace"], [344, 1, 1, "", "logistic"], [345, 1, 1, "", "lognormal"], [346, 1, 1, "", "logseries"], [347, 1, 1, "", "multinomial"], [348, 1, 1, "", "multivariate_normal"], [349, 1, 1, "", "negative_binomial"], [350, 1, 1, "", "noncentral_chisquare"], [351, 1, 1, "", "noncentral_f"], [352, 1, 1, "", "normal"], [353, 1, 1, "", "pareto"], [354, 1, 1, "", "permutation"], [355, 1, 1, "", "poisson"], [356, 1, 1, "", "power"], [357, 1, 1, "", "rand"], [358, 1, 1, "", "randint"], [359, 1, 1, "", "randn"], [360, 1, 1, "", "random"], [361, 1, 1, "", "random_integers"], [362, 1, 1, "", "random_sample"], [363, 1, 1, "", "ranf"], [364, 1, 1, "", "rayleigh"], [365, 1, 1, "", "sample"], [366, 1, 1, "", "seed"], [367, 1, 1, "", "shuffle"], [368, 1, 1, "", "standard_cauchy"], [369, 1, 1, "", "standard_exponential"], [370, 1, 1, "", "standard_gamma"], [371, 1, 1, "", "standard_normal"], [372, 1, 1, "", "standard_t"], [373, 1, 1, "", "triangular"], [374, 1, 1, "", "uniform"], [375, 1, 1, "", "vonmises"], [376, 1, 1, "", "wald"], [377, 1, 1, "", "weibull"], [378, 1, 1, "", "zipf"]], "dpnp.random.RandomState": [[330, 4, 1, "", "__eq__"], [330, 4, 1, "", "__ge__"], [330, 4, 1, "", "__gt__"], [330, 4, 1, "", "__le__"], [330, 4, 1, "", "__lt__"], [330, 4, 1, "", "__ne__"], [330, 4, 1, "", "get_state"], [330, 4, 1, "", "get_sycl_device"], [330, 4, 1, "", "get_sycl_queue"], [330, 4, 1, "", "normal"], [330, 4, 1, "", "rand"], [330, 4, 1, "", "randint"], [330, 4, 1, "", "randn"], [330, 4, 1, "", "random_sample"], [330, 4, 1, "", "standard_normal"], [330, 4, 1, "", "uniform"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:attribute", "4": "py:method", "5": "py:data", "6": "py:property"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "method", "Python method"], "5": ["py", "data", "Python data"], "6": ["py", "property", "Python property"]}, "titleterms": {"interplai": 0, "data": [0, 2, 7, 8, 9, 438, 444, 447], "parallel": [0, 2], "control": 0, "librari": 0, "exampl": [0, 4], "c": 1, "backend": 1, "api": [1, 437], "refer": [1, 437], "extens": 2, "numpi": [2, 6], "develop": 2, "inform": [2, 8], "overview": 3, "quick": 4, "start": 4, "guid": 4, "devic": 4, "driver": 4, "python": 4, "interpret": 4, "instal": 4, "packag": [4, 446], "from": [4, 7], "anaconda": 4, "build": [4, 7], "conda": 4, "scikit": 4, "test": [4, 8, 440], "binari": 5, "oper": [5, 438, 440, 441, 442, 444, 452], "elementwis": 5, "bit": [5, 452], "pack": 5, "output": 5, "format": 5, "comparison": [6, 440, 444, 452], "tabl": 6, "dpnp": [6, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 447], "cupi": 6, "summari": 6, "modul": [6, 446], "level": 6, "multi": [6, 444], "dimension": [6, 444], "arrai": [6, 7, 9, 32, 438, 440, 441, 444], "linear": [6, 439], "algebra": [6, 439], "discret": 6, "fourier": 6, "transform": 6, "random": [6, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 447], "sampl": [6, 365, 447], "creation": 7, "routin": [7, 8, 10, 438, 441, 442, 443, 448], "shape": [7, 300, 396, 441, 444], "valu": [7, 440], "exist": 7, "numer": 7, "rang": 7, "matric": 7, "The": 7, "matrix": [7, 439, 444], "class": 7, "type": [8, 9, 440, 444], "creat": 8, "miscellan": [8, 442, 443], "avail": [9, 452], "fft": [10, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117], "function": [10, 440, 442, 450, 451, 452], "standard": 10, "real": [10, 295, 380], "hermitian": 10, "helper": 10, "ab": 11, "absolut": 12, "add": 13, "all": [14, 264], "allclos": 15, "amax": 16, "amin": 17, "angl": 18, "ani": [19, 265], "arang": 20, "arcco": 21, "arccosh": 22, "arcsin": 23, "arcsinh": 24, "arctan": 25, "arctan2": 26, "arctanh": 27, "argmax": [28, 266], "argmin": [29, 267], "argsort": [30, 268], "around": 31, "array_equ": 33, "asanyarrai": 34, "asarrai": 35, "ascontiguousarrai": 36, "asfarrai": 37, "asfortranarrai": 38, "asnumpi": 39, "astyp": [40, 269], "atleast_1d": 41, "atleast_2d": 42, "atleast_3d": 43, "averag": [44, 451], "bincount": 45, "bitwise_and": 46, "bitwise_not": 47, "bitwise_or": 48, "bitwise_xor": 49, "broadcast_arrai": 50, "broadcast_to": 51, "can_cast": 52, "cbrt": 53, "ceil": 54, "choos": [55, 270], "clip": [56, 271], "column_stack": 57, "concaten": 58, "conj": [59, 272], "conjug": [60, 273], "convolv": 61, "copi": [62, 274], "copysign": 63, "copyto": 64, "correl": [65, 451], "co": 66, "cosh": 67, "count_nonzero": 68, "cov": 69, "cross": 70, "cumprod": 71, "cumsum": [72, 275], "deg2rad": 73, "degre": 74, "diag": 75, "diag_indic": 76, "diag_indices_from": 77, "diagflat": 78, "diagon": [79, 276], "diff": 80, "divid": 81, "dot": 82, "dpnp_arrai": 83, "dstack": 84, "dtype": [85, 277], "ediff1d": 86, "einsum": 87, "einsum_path": 88, "empti": 89, "empty_lik": 90, "equal": 91, "erf": 92, "exp": 93, "exp2": 94, "expand_dim": 95, "expm1": 96, "extract": 97, "ey": 98, "fab": 99, "fft2": 101, "fftfreq": 102, "fftn": 103, "fftshift": 104, "hfft": 105, "ifft": 106, "ifft2": 107, "ifftn": 108, "ifftshift": 109, "ihfft": 110, "irfft": 111, "irfft2": 112, "irfftn": 113, "rfft": 114, "rfft2": 115, "rfftfreq": 116, "rfftn": 117, "fill_diagon": 118, "finfo": 119, "flatit": 120, "flip": 121, "fliplr": 122, "flipud": 123, "floor": 124, "floor_divid": 125, "fmax": 126, "fmin": 127, "fmod": 128, "from_dlpack": 129, "frombuff": 130, "fromfil": 131, "fromfunct": 132, "fromit": 133, "fromstr": 134, "full": 135, "full_lik": 136, "geomspac": 137, "get_includ": 138, "gradient": 139, "greater": 140, "greater_equ": 141, "histogram": [142, 451], "hstack": 143, "hypot": 144, "ident": 145, "iinfo": 146, "imag": [147, 282], "indic": 148, "inner": 149, "invert": 150, "isclos": 151, "isfinit": 152, "isinf": 153, "isnan": 154, "isscalar": 155, "issubdtyp": 156, "issubsctyp": 157, "kron": 158, "left_shift": 159, "less": 160, "less_equ": 161, "linalg": [162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180], "choleski": 162, "cond": 163, "det": 164, "eig": 165, "eigh": 166, "eigval": 167, "eigvalsh": 168, "inv": 169, "matrix_pow": 170, "matrix_rank": 171, "multi_dot": 172, "norm": [173, 439], "pinv": 174, "qr": 175, "slogdet": 176, "solv": [177, 439], "svd": 178, "tensorinv": 179, "tensorsolv": 180, "linspac": 181, "loadtxt": 182, "log": 183, "log10": 184, "log1p": 185, "log2": 186, "logaddexp": 187, "logical_and": 188, "logical_not": 189, "logical_or": 190, "logical_xor": 191, "logspac": 192, "logsumexp": 193, "matmul": 194, "max": [195, 285], "maximum": 196, "mean": [197, 286], "median": 198, "meshgrid": 199, "mgrid": 200, "min": [201, 287], "minimum": 202, "mod": 203, "modf": 204, "moveaxi": 205, "multipli": 206, "nanargmax": 207, "nanargmin": 208, "nancumprod": 209, "nancumsum": 210, "nanmax": 211, "nanmean": 212, "nanmin": 213, "nanprod": 214, "nanstd": 215, "nansum": 216, "nanvar": 217, "ndarrai": [218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 444], "t": 219, "__abs__": 220, "__add__": 221, "__and__": 222, "__complex__": 223, "__copy__": 224, "__eq__": 225, "__float__": 226, "__floordiv__": 227, "__ge__": 228, "__getitem__": 229, "__gt__": 230, "__iadd__": 231, "__iand__": 232, "__ifloordiv__": 233, "__ilshift__": 234, "__imod__": 235, "__imul__": 236, "__int__": 237, "__invert__": 238, "__ior__": 239, "__ipow__": 240, "__irshift__": 241, "__isub__": 242, "__itruediv__": 243, "__ixor__": 244, "__le__": 245, "__len__": 246, "__lshift__": 247, "__lt__": 248, "__mod__": 249, "__mul__": 250, "__ne__": 251, "__neg__": 252, "__new__": 253, "__or__": 254, "__pos__": 255, "__pow__": 256, "__repr__": 257, "__rshift__": 258, "__setitem__": 259, "__str__": 260, "__sub__": 261, "__truediv__": 262, "__xor__": 263, "fill": 278, "flag": 279, "flat": 280, "flatten": 281, "item": [283, 444], "items": 284, "nbyte": 288, "ndim": 289, "nonzero": [290, 312], "partit": [291, 318], "prod": [292, 322], "put": [293, 325], "ravel": [294, 379], "repeat": [296, 384], "reshap": [297, 385], "round": [298, 391, 442], "searchsort": [299, 394], "size": 301, "sort": [302, 401, 449], "squeez": [303, 404], "std": [304, 406], "stride": 305, "sum": [306, 408, 442], "swapax": [307, 409], "take": [308, 410], "transpos": [309, 417, 441], "var": [310, 431], "neg": 311, "not_equ": 313, "ogrid": 314, "ones": 315, "ones_lik": 316, "outer": 317, "place": 319, "posit": 320, "power": [321, 356], "proj": 323, "ptp": 324, "put_along_axi": 326, "putmask": 327, "rad2deg": 328, "radian": 329, "randomst": 330, "beta": 331, "binomi": 332, "byte": 333, "chisquar": 334, "choic": 335, "dirichlet": 336, "exponenti": 337, "f": 338, "gamma": 339, "geometr": 340, "gumbel": 341, "hypergeometr": 342, "laplac": 343, "logist": 344, "lognorm": 345, "logseri": 346, "multinomi": 347, "multivariate_norm": 348, "negative_binomi": 349, "noncentral_chisquar": 350, "noncentral_f": 351, "normal": 352, "pareto": 353, "permut": [354, 447], "poisson": 355, "rand": 357, "randint": 358, "randn": 359, "random_integ": 361, "random_sampl": 362, "ranf": 363, "rayleigh": 364, "seed": 366, "shuffl": 367, "standard_cauchi": 368, "standard_exponenti": 369, "standard_gamma": 370, "standard_norm": 371, "standard_t": 372, "triangular": 373, "uniform": 374, "vonmis": 375, "wald": 376, "weibul": 377, "zipf": 378, "reciproc": 381, "reduce_hypot": 382, "remaind": 383, "result_typ": 386, "right_shift": 387, "rint": 388, "roll": 389, "rollaxi": 390, "row_stack": 392, "rsqrt": 393, "select": [395, 444], "sign": 397, "signbit": 398, "sin": 399, "sinh": 400, "sqrt": 402, "squar": 403, "stack": 405, "subtract": 407, "take_along_axi": 411, "tan": 412, "tanh": 413, "tensordot": 414, "tile": [415, 441], "trace": 416, "trapz": 418, "tri": 419, "tril": 420, "tril_indic": 421, "tril_indices_from": 422, "triu": 423, "triu_indic": 424, "triu_indices_from": 425, "true_divid": 426, "trunc": 427, "uniqu": 428, "unwrap": 429, "vander": 430, "vdot": 432, "vstack": 433, "where": 434, "zero": 435, "zeros_lik": 436, "index": [438, 444], "gener": [438, 447], "like": [438, 441], "insert": 438, "iter": 438, "over": 438, "vector": 439, "product": [439, 442], "decomposit": 439, "eigenvalu": 439, "other": [439, 442, 444], "number": [439, 441, 442], "equat": 439, "logic": 440, "truth": 440, "infin": 440, "nan": 440, "manipul": [441, 444], "basic": [441, 446], "chang": 441, "dimens": 441, "kind": 441, "join": 441, "split": 441, "ad": 441, "remov": 441, "element": 441, "rearrang": 441, "mathemat": 442, "trigonometr": [442, 452], "hyperbol": 442, "differ": 442, "expon": 442, "logarithm": 442, "special": [442, 444, 450], "float": [442, 452], "point": 442, "ration": 442, "arithmet": [442, 444, 446], "handl": 442, "complex": 442, "extrema": 442, "find": 442, "util": 443, "construct": 444, "attribut": 444, "memori": 444, "layout": 444, "method": 444, "convers": 444, "calcul": 444, "multipl": 444, "pad": 445, "polynomi": 446, "polyutil": 446, "poly1d": 446, "simpl": 447, "distribut": 447, "search": 449, "count": 449, "error": 450, "statist": 451, "order": 451, "varianc": 451, "univers": 452, "ufunc": 452, "math": 452, "twiddl": 452}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1, "sphinx.ext.intersphinx": 1, "sphinx": 60}, "alltitles": {"Interplay with the Data Parallel Control Library": [[0, "interplay-with-the-data-parallel-control-library"]], "Example": [[0, "example"]], "C++ backend API Reference": [[1, "c-backend-api-reference"]], "Data Parallel Extension for NumPy*": [[2, "module-dpnp"]], "Development information": [[2, null]], "Overview": [[3, "id1"]], "Quick Start Guide": [[4, "id1"]], "Device Drivers": [[4, "device-drivers"]], "Python Interpreter": [[4, "python-interpreter"]], "Installation": [[4, "installation"]], "Install Package from Anaconda": [[4, "install-package-from-anaconda"]], "Build and Install Conda Package": [[4, "build-and-install-conda-package"]], "Build and Install with scikit-build": [[4, "build-and-install-with-scikit-build"]], "Testing": [[4, "testing"]], "Examples": [[4, "examples"]], "Binary Operations": [[5, "binary-operations"]], "Elementwise bit operations": [[5, "elementwise-bit-operations"]], "Bit packing": [[5, "bit-packing"]], "Output formatting": [[5, "output-formatting"]], "Comparison Table NumPy/ DPNP/ CuPy": [[6, "comparison-table-numpy-dpnp-cupy"]], "Summary": [[6, "summary"]], "Module-Level": [[6, "module-level"]], "Multi-Dimensional Array": [[6, "multi-dimensional-array"]], "Linear Algebra": [[6, "linear-algebra"], [439, "linear-algebra"]], "Discrete Fourier Transform": [[6, "discrete-fourier-transform"]], "Random Sampling": [[6, "random-sampling"]], "Array creation routines": [[7, "array-creation-routines"]], "From shape or value": [[7, "from-shape-or-value"]], "From existing data": [[7, "from-existing-data"]], "Numerical ranges": [[7, "numerical-ranges"]], "Building matrices": [[7, "building-matrices"]], "The Matrix class": [[7, "the-matrix-class"]], "Data type routines": [[8, "data-type-routines"]], "Creating data types": [[8, "creating-data-types"]], "Data type information": [[8, "data-type-information"]], "Data type testing": [[8, "data-type-testing"]], "Miscellaneous": [[8, "miscellaneous"], [442, "miscellaneous"]], "Available array data types": [[9, "available-array-data-types"]], "FFT Functions": [[10, "fft-functions"]], "Standard FFTs": [[10, "standard-ffts"]], "Real FFTs": [[10, "real-ffts"]], "Hermitian FFTs": [[10, "hermitian-ffts"]], "Helper routines": [[10, "helper-routines"]], "dpnp.abs": [[11, "dpnp-abs"]], "dpnp.absolute": [[12, "dpnp-absolute"]], "dpnp.add": [[13, "dpnp-add"]], "dpnp.all": [[14, "dpnp-all"]], "dpnp.allclose": [[15, "dpnp-allclose"]], "dpnp.amax": [[16, "dpnp-amax"]], "dpnp.amin": [[17, "dpnp-amin"]], "dpnp.angle": [[18, "dpnp-angle"]], "dpnp.any": [[19, "dpnp-any"]], "dpnp.arange": [[20, "dpnp-arange"]], "dpnp.arccos": [[21, "dpnp-arccos"]], "dpnp.arccosh": [[22, "dpnp-arccosh"]], "dpnp.arcsin": [[23, "dpnp-arcsin"]], "dpnp.arcsinh": [[24, "dpnp-arcsinh"]], "dpnp.arctan": [[25, "dpnp-arctan"]], "dpnp.arctan2": [[26, "dpnp-arctan2"]], "dpnp.arctanh": [[27, "dpnp-arctanh"]], "dpnp.argmax": [[28, "dpnp-argmax"]], "dpnp.argmin": [[29, "dpnp-argmin"]], "dpnp.argsort": [[30, "dpnp-argsort"]], "dpnp.around": [[31, "dpnp-around"]], "dpnp.array": [[32, "dpnp-array"]], "dpnp.array_equal": [[33, "dpnp-array-equal"]], "dpnp.asanyarray": [[34, "dpnp-asanyarray"]], "dpnp.asarray": [[35, "dpnp-asarray"]], "dpnp.ascontiguousarray": [[36, "dpnp-ascontiguousarray"]], "dpnp.asfarray": [[37, "dpnp-asfarray"]], "dpnp.asfortranarray": [[38, "dpnp-asfortranarray"]], "dpnp.asnumpy": [[39, "dpnp-asnumpy"]], "dpnp.astype": [[40, "dpnp-astype"]], "dpnp.atleast_1d": [[41, "dpnp-atleast-1d"]], "dpnp.atleast_2d": [[42, "dpnp-atleast-2d"]], "dpnp.atleast_3d": [[43, "dpnp-atleast-3d"]], "dpnp.average": [[44, "dpnp-average"]], "dpnp.bincount": [[45, "dpnp-bincount"]], "dpnp.bitwise_and": [[46, "dpnp-bitwise-and"]], "dpnp.bitwise_not": [[47, "dpnp-bitwise-not"]], "dpnp.bitwise_or": [[48, "dpnp-bitwise-or"]], "dpnp.bitwise_xor": [[49, "dpnp-bitwise-xor"]], "dpnp.broadcast_arrays": [[50, "dpnp-broadcast-arrays"]], "dpnp.broadcast_to": [[51, "dpnp-broadcast-to"]], "dpnp.can_cast": [[52, "dpnp-can-cast"]], "dpnp.cbrt": [[53, "dpnp-cbrt"]], "dpnp.ceil": [[54, "dpnp-ceil"]], "dpnp.choose": [[55, "dpnp-choose"]], "dpnp.clip": [[56, "dpnp-clip"]], "dpnp.column_stack": [[57, "dpnp-column-stack"]], "dpnp.concatenate": [[58, "dpnp-concatenate"]], "dpnp.conj": [[59, "dpnp-conj"]], "dpnp.conjugate": [[60, "dpnp-conjugate"]], "dpnp.convolve": [[61, "dpnp-convolve"]], "dpnp.copy": [[62, "dpnp-copy"]], "dpnp.copysign": [[63, "dpnp-copysign"]], "dpnp.copyto": [[64, "dpnp-copyto"]], "dpnp.correlate": [[65, "dpnp-correlate"]], "dpnp.cos": [[66, "dpnp-cos"]], "dpnp.cosh": [[67, "dpnp-cosh"]], "dpnp.count_nonzero": [[68, "dpnp-count-nonzero"]], "dpnp.cov": [[69, "dpnp-cov"]], "dpnp.cross": [[70, "dpnp-cross"]], "dpnp.cumprod": [[71, "dpnp-cumprod"]], "dpnp.cumsum": [[72, "dpnp-cumsum"]], "dpnp.deg2rad": [[73, "dpnp-deg2rad"]], "dpnp.degrees": [[74, "dpnp-degrees"]], "dpnp.diag": [[75, "dpnp-diag"]], "dpnp.diag_indices": [[76, "dpnp-diag-indices"]], "dpnp.diag_indices_from": [[77, "dpnp-diag-indices-from"]], "dpnp.diagflat": [[78, "dpnp-diagflat"]], "dpnp.diagonal": [[79, "dpnp-diagonal"]], "dpnp.diff": [[80, "dpnp-diff"]], "dpnp.divide": [[81, "dpnp-divide"]], "dpnp.dot": [[82, "dpnp-dot"]], "dpnp.dpnp_array.dpnp_array": [[83, "dpnp-dpnp-array-dpnp-array"]], "dpnp.dstack": [[84, "dpnp-dstack"]], "dpnp.dtype": [[85, "dpnp-dtype"]], "dpnp.ediff1d": [[86, "dpnp-ediff1d"]], "dpnp.einsum": [[87, "dpnp-einsum"]], "dpnp.einsum_path": [[88, "dpnp-einsum-path"]], "dpnp.empty": [[89, "dpnp-empty"]], "dpnp.empty_like": [[90, "dpnp-empty-like"]], "dpnp.equal": [[91, "dpnp-equal"]], "dpnp.erf": [[92, "dpnp-erf"]], "dpnp.exp": [[93, "dpnp-exp"]], "dpnp.exp2": [[94, "dpnp-exp2"]], "dpnp.expand_dims": [[95, "dpnp-expand-dims"]], "dpnp.expm1": [[96, "dpnp-expm1"]], "dpnp.extract": [[97, "dpnp-extract"]], "dpnp.eye": [[98, "dpnp-eye"]], "dpnp.fabs": [[99, "dpnp-fabs"]], "dpnp.fft.fft": [[100, "dpnp-fft-fft"]], "dpnp.fft.fft2": [[101, "dpnp-fft-fft2"]], "dpnp.fft.fftfreq": [[102, "dpnp-fft-fftfreq"]], "dpnp.fft.fftn": [[103, "dpnp-fft-fftn"]], "dpnp.fft.fftshift": [[104, "dpnp-fft-fftshift"]], "dpnp.fft.hfft": [[105, "dpnp-fft-hfft"]], "dpnp.fft.ifft": [[106, "dpnp-fft-ifft"]], "dpnp.fft.ifft2": [[107, "dpnp-fft-ifft2"]], "dpnp.fft.ifftn": [[108, "dpnp-fft-ifftn"]], "dpnp.fft.ifftshift": [[109, "dpnp-fft-ifftshift"]], "dpnp.fft.ihfft": [[110, "dpnp-fft-ihfft"]], "dpnp.fft.irfft": [[111, "dpnp-fft-irfft"]], "dpnp.fft.irfft2": [[112, "dpnp-fft-irfft2"]], "dpnp.fft.irfftn": [[113, "dpnp-fft-irfftn"]], "dpnp.fft.rfft": [[114, "dpnp-fft-rfft"]], "dpnp.fft.rfft2": [[115, "dpnp-fft-rfft2"]], "dpnp.fft.rfftfreq": [[116, "dpnp-fft-rfftfreq"]], "dpnp.fft.rfftn": [[117, "dpnp-fft-rfftn"]], "dpnp.fill_diagonal": [[118, "dpnp-fill-diagonal"]], "dpnp.finfo": [[119, "dpnp-finfo"]], "dpnp.flatiter": [[120, "dpnp-flatiter"]], "dpnp.flip": [[121, "dpnp-flip"]], "dpnp.fliplr": [[122, "dpnp-fliplr"]], "dpnp.flipud": [[123, "dpnp-flipud"]], "dpnp.floor": [[124, "dpnp-floor"]], "dpnp.floor_divide": [[125, "dpnp-floor-divide"]], "dpnp.fmax": [[126, "dpnp-fmax"]], "dpnp.fmin": [[127, "dpnp-fmin"]], "dpnp.fmod": [[128, "dpnp-fmod"]], "dpnp.from_dlpack": [[129, "dpnp-from-dlpack"]], "dpnp.frombuffer": [[130, "dpnp-frombuffer"]], "dpnp.fromfile": [[131, "dpnp-fromfile"]], "dpnp.fromfunction": [[132, "dpnp-fromfunction"]], "dpnp.fromiter": [[133, "dpnp-fromiter"]], "dpnp.fromstring": [[134, "dpnp-fromstring"]], "dpnp.full": [[135, "dpnp-full"]], "dpnp.full_like": [[136, "dpnp-full-like"]], "dpnp.geomspace": [[137, "dpnp-geomspace"]], "dpnp.get_include": [[138, "dpnp-get-include"]], "dpnp.gradient": [[139, "dpnp-gradient"]], "dpnp.greater": [[140, "dpnp-greater"]], "dpnp.greater_equal": [[141, "dpnp-greater-equal"]], "dpnp.histogram": [[142, "dpnp-histogram"]], "dpnp.hstack": [[143, "dpnp-hstack"]], "dpnp.hypot": [[144, "dpnp-hypot"]], "dpnp.identity": [[145, "dpnp-identity"]], "dpnp.iinfo": [[146, "dpnp-iinfo"]], "dpnp.imag": [[147, "dpnp-imag"]], "dpnp.indices": [[148, "dpnp-indices"]], "dpnp.inner": [[149, "dpnp-inner"]], "dpnp.invert": [[150, "dpnp-invert"]], "dpnp.isclose": [[151, "dpnp-isclose"]], "dpnp.isfinite": [[152, "dpnp-isfinite"]], "dpnp.isinf": [[153, "dpnp-isinf"]], "dpnp.isnan": [[154, "dpnp-isnan"]], "dpnp.isscalar": [[155, "dpnp-isscalar"]], "dpnp.issubdtype": [[156, "dpnp-issubdtype"]], "dpnp.issubsctype": [[157, "dpnp-issubsctype"]], "dpnp.kron": [[158, "dpnp-kron"]], "dpnp.left_shift": [[159, "dpnp-left-shift"]], "dpnp.less": [[160, "dpnp-less"]], "dpnp.less_equal": [[161, "dpnp-less-equal"]], "dpnp.linalg.cholesky": [[162, "dpnp-linalg-cholesky"]], "dpnp.linalg.cond": [[163, "dpnp-linalg-cond"]], "dpnp.linalg.det": [[164, "dpnp-linalg-det"]], "dpnp.linalg.eig": [[165, "dpnp-linalg-eig"]], "dpnp.linalg.eigh": [[166, "dpnp-linalg-eigh"]], "dpnp.linalg.eigvals": [[167, "dpnp-linalg-eigvals"]], "dpnp.linalg.eigvalsh": [[168, "dpnp-linalg-eigvalsh"]], "dpnp.linalg.inv": [[169, "dpnp-linalg-inv"]], "dpnp.linalg.matrix_power": [[170, "dpnp-linalg-matrix-power"]], "dpnp.linalg.matrix_rank": [[171, "dpnp-linalg-matrix-rank"]], "dpnp.linalg.multi_dot": [[172, "dpnp-linalg-multi-dot"]], "dpnp.linalg.norm": [[173, "dpnp-linalg-norm"]], "dpnp.linalg.pinv": [[174, "dpnp-linalg-pinv"]], "dpnp.linalg.qr": [[175, "dpnp-linalg-qr"]], "dpnp.linalg.slogdet": [[176, "dpnp-linalg-slogdet"]], "dpnp.linalg.solve": [[177, "dpnp-linalg-solve"]], "dpnp.linalg.svd": [[178, "dpnp-linalg-svd"]], "dpnp.linalg.tensorinv": [[179, "dpnp-linalg-tensorinv"]], "dpnp.linalg.tensorsolve": [[180, "dpnp-linalg-tensorsolve"]], "dpnp.linspace": [[181, "dpnp-linspace"]], "dpnp.loadtxt": [[182, "dpnp-loadtxt"]], "dpnp.log": [[183, "dpnp-log"]], "dpnp.log10": [[184, "dpnp-log10"]], "dpnp.log1p": [[185, "dpnp-log1p"]], "dpnp.log2": [[186, "dpnp-log2"]], "dpnp.logaddexp": [[187, "dpnp-logaddexp"]], "dpnp.logical_and": [[188, "dpnp-logical-and"]], "dpnp.logical_not": [[189, "dpnp-logical-not"]], "dpnp.logical_or": [[190, "dpnp-logical-or"]], "dpnp.logical_xor": [[191, "dpnp-logical-xor"]], "dpnp.logspace": [[192, "dpnp-logspace"]], "dpnp.logsumexp": [[193, "dpnp-logsumexp"]], "dpnp.matmul": [[194, "dpnp-matmul"]], "dpnp.max": [[195, "dpnp-max"]], "dpnp.maximum": [[196, "dpnp-maximum"]], "dpnp.mean": [[197, "dpnp-mean"]], "dpnp.median": [[198, "dpnp-median"]], "dpnp.meshgrid": [[199, "dpnp-meshgrid"]], "dpnp.mgrid": [[200, "dpnp-mgrid"]], "dpnp.min": [[201, "dpnp-min"]], "dpnp.minimum": [[202, "dpnp-minimum"]], "dpnp.mod": [[203, "dpnp-mod"]], "dpnp.modf": [[204, "dpnp-modf"]], "dpnp.moveaxis": [[205, "dpnp-moveaxis"]], "dpnp.multiply": [[206, "dpnp-multiply"]], "dpnp.nanargmax": [[207, "dpnp-nanargmax"]], "dpnp.nanargmin": [[208, "dpnp-nanargmin"]], "dpnp.nancumprod": [[209, "dpnp-nancumprod"]], "dpnp.nancumsum": [[210, "dpnp-nancumsum"]], "dpnp.nanmax": [[211, "dpnp-nanmax"]], "dpnp.nanmean": [[212, "dpnp-nanmean"]], "dpnp.nanmin": [[213, "dpnp-nanmin"]], "dpnp.nanprod": [[214, "dpnp-nanprod"]], "dpnp.nanstd": [[215, "dpnp-nanstd"]], "dpnp.nansum": [[216, "dpnp-nansum"]], "dpnp.nanvar": [[217, "dpnp-nanvar"]], "dpnp.ndarray": [[218, "dpnp-ndarray"]], "dpnp.ndarray.T": [[219, "dpnp-ndarray-t"]], "dpnp.ndarray.__abs__": [[220, "dpnp-ndarray-abs"]], "dpnp.ndarray.__add__": [[221, "dpnp-ndarray-add"]], "dpnp.ndarray.__and__": [[222, "dpnp-ndarray-and"]], "dpnp.ndarray.__complex__": [[223, "dpnp-ndarray-complex"]], "dpnp.ndarray.__copy__": [[224, "dpnp-ndarray-copy"]], "dpnp.ndarray.__eq__": [[225, "dpnp-ndarray-eq"]], "dpnp.ndarray.__float__": [[226, "dpnp-ndarray-float"]], "dpnp.ndarray.__floordiv__": [[227, "dpnp-ndarray-floordiv"]], "dpnp.ndarray.__ge__": [[228, "dpnp-ndarray-ge"]], "dpnp.ndarray.__getitem__": [[229, "dpnp-ndarray-getitem"]], "dpnp.ndarray.__gt__": [[230, "dpnp-ndarray-gt"]], "dpnp.ndarray.__iadd__": [[231, "dpnp-ndarray-iadd"]], "dpnp.ndarray.__iand__": [[232, "dpnp-ndarray-iand"]], "dpnp.ndarray.__ifloordiv__": [[233, "dpnp-ndarray-ifloordiv"]], "dpnp.ndarray.__ilshift__": [[234, "dpnp-ndarray-ilshift"]], "dpnp.ndarray.__imod__": [[235, "dpnp-ndarray-imod"]], "dpnp.ndarray.__imul__": [[236, "dpnp-ndarray-imul"]], "dpnp.ndarray.__int__": [[237, "dpnp-ndarray-int"]], "dpnp.ndarray.__invert__": [[238, "dpnp-ndarray-invert"]], "dpnp.ndarray.__ior__": [[239, "dpnp-ndarray-ior"]], "dpnp.ndarray.__ipow__": [[240, "dpnp-ndarray-ipow"]], "dpnp.ndarray.__irshift__": [[241, "dpnp-ndarray-irshift"]], "dpnp.ndarray.__isub__": [[242, "dpnp-ndarray-isub"]], "dpnp.ndarray.__itruediv__": [[243, "dpnp-ndarray-itruediv"]], "dpnp.ndarray.__ixor__": [[244, "dpnp-ndarray-ixor"]], "dpnp.ndarray.__le__": [[245, "dpnp-ndarray-le"]], "dpnp.ndarray.__len__": [[246, "dpnp-ndarray-len"]], "dpnp.ndarray.__lshift__": [[247, "dpnp-ndarray-lshift"]], "dpnp.ndarray.__lt__": [[248, "dpnp-ndarray-lt"]], "dpnp.ndarray.__mod__": [[249, "dpnp-ndarray-mod"]], "dpnp.ndarray.__mul__": [[250, "dpnp-ndarray-mul"]], "dpnp.ndarray.__ne__": [[251, "dpnp-ndarray-ne"]], "dpnp.ndarray.__neg__": [[252, "dpnp-ndarray-neg"]], "dpnp.ndarray.__new__": [[253, "dpnp-ndarray-new"]], "dpnp.ndarray.__or__": [[254, "dpnp-ndarray-or"]], "dpnp.ndarray.__pos__": [[255, "dpnp-ndarray-pos"]], "dpnp.ndarray.__pow__": [[256, "dpnp-ndarray-pow"]], "dpnp.ndarray.__repr__": [[257, "dpnp-ndarray-repr"]], "dpnp.ndarray.__rshift__": [[258, "dpnp-ndarray-rshift"]], "dpnp.ndarray.__setitem__": [[259, "dpnp-ndarray-setitem"]], "dpnp.ndarray.__str__": [[260, "dpnp-ndarray-str"]], "dpnp.ndarray.__sub__": [[261, "dpnp-ndarray-sub"]], "dpnp.ndarray.__truediv__": [[262, "dpnp-ndarray-truediv"]], "dpnp.ndarray.__xor__": [[263, "dpnp-ndarray-xor"]], "dpnp.ndarray.all": [[264, "dpnp-ndarray-all"]], "dpnp.ndarray.any": [[265, "dpnp-ndarray-any"]], "dpnp.ndarray.argmax": [[266, "dpnp-ndarray-argmax"]], "dpnp.ndarray.argmin": [[267, "dpnp-ndarray-argmin"]], "dpnp.ndarray.argsort": [[268, "dpnp-ndarray-argsort"]], "dpnp.ndarray.astype": [[269, "dpnp-ndarray-astype"]], "dpnp.ndarray.choose": [[270, "dpnp-ndarray-choose"]], "dpnp.ndarray.clip": [[271, "dpnp-ndarray-clip"]], "dpnp.ndarray.conj": [[272, "dpnp-ndarray-conj"]], "dpnp.ndarray.conjugate": [[273, "dpnp-ndarray-conjugate"]], "dpnp.ndarray.copy": [[274, "dpnp-ndarray-copy"]], "dpnp.ndarray.cumsum": [[275, "dpnp-ndarray-cumsum"]], "dpnp.ndarray.diagonal": [[276, "dpnp-ndarray-diagonal"]], "dpnp.ndarray.dtype": [[277, "dpnp-ndarray-dtype"]], "dpnp.ndarray.fill": [[278, "dpnp-ndarray-fill"]], "dpnp.ndarray.flags": [[279, "dpnp-ndarray-flags"]], "dpnp.ndarray.flat": [[280, "dpnp-ndarray-flat"]], "dpnp.ndarray.flatten": [[281, "dpnp-ndarray-flatten"]], "dpnp.ndarray.imag": [[282, "dpnp-ndarray-imag"]], "dpnp.ndarray.item": [[283, "dpnp-ndarray-item"]], "dpnp.ndarray.itemsize": [[284, "dpnp-ndarray-itemsize"]], "dpnp.ndarray.max": [[285, "dpnp-ndarray-max"]], "dpnp.ndarray.mean": [[286, "dpnp-ndarray-mean"]], "dpnp.ndarray.min": [[287, "dpnp-ndarray-min"]], "dpnp.ndarray.nbytes": [[288, "dpnp-ndarray-nbytes"]], "dpnp.ndarray.ndim": [[289, "dpnp-ndarray-ndim"]], "dpnp.ndarray.nonzero": [[290, "dpnp-ndarray-nonzero"]], "dpnp.ndarray.partition": [[291, "dpnp-ndarray-partition"]], "dpnp.ndarray.prod": [[292, "dpnp-ndarray-prod"]], "dpnp.ndarray.put": [[293, "dpnp-ndarray-put"]], "dpnp.ndarray.ravel": [[294, "dpnp-ndarray-ravel"]], "dpnp.ndarray.real": [[295, "dpnp-ndarray-real"]], "dpnp.ndarray.repeat": [[296, "dpnp-ndarray-repeat"]], "dpnp.ndarray.reshape": [[297, "dpnp-ndarray-reshape"]], "dpnp.ndarray.round": [[298, "dpnp-ndarray-round"]], "dpnp.ndarray.searchsorted": [[299, "dpnp-ndarray-searchsorted"]], "dpnp.ndarray.shape": [[300, "dpnp-ndarray-shape"]], "dpnp.ndarray.size": [[301, "dpnp-ndarray-size"]], "dpnp.ndarray.sort": [[302, "dpnp-ndarray-sort"]], "dpnp.ndarray.squeeze": [[303, "dpnp-ndarray-squeeze"]], "dpnp.ndarray.std": [[304, "dpnp-ndarray-std"]], "dpnp.ndarray.strides": [[305, "dpnp-ndarray-strides"]], "dpnp.ndarray.sum": [[306, "dpnp-ndarray-sum"]], "dpnp.ndarray.swapaxes": [[307, "dpnp-ndarray-swapaxes"]], "dpnp.ndarray.take": [[308, "dpnp-ndarray-take"]], "dpnp.ndarray.transpose": [[309, "dpnp-ndarray-transpose"]], "dpnp.ndarray.var": [[310, "dpnp-ndarray-var"]], "dpnp.negative": [[311, "dpnp-negative"]], "dpnp.nonzero": [[312, "dpnp-nonzero"]], "dpnp.not_equal": [[313, "dpnp-not-equal"]], "dpnp.ogrid": [[314, "dpnp-ogrid"]], "dpnp.ones": [[315, "dpnp-ones"]], "dpnp.ones_like": [[316, "dpnp-ones-like"]], "dpnp.outer": [[317, "dpnp-outer"]], "dpnp.partition": [[318, "dpnp-partition"]], "dpnp.place": [[319, "dpnp-place"]], "dpnp.positive": [[320, "dpnp-positive"]], "dpnp.power": [[321, "dpnp-power"]], "dpnp.prod": [[322, "dpnp-prod"]], "dpnp.proj": [[323, "dpnp-proj"]], "dpnp.ptp": [[324, "dpnp-ptp"]], "dpnp.put": [[325, "dpnp-put"]], "dpnp.put_along_axis": [[326, "dpnp-put-along-axis"]], "dpnp.putmask": [[327, "dpnp-putmask"]], "dpnp.rad2deg": [[328, "dpnp-rad2deg"]], "dpnp.radians": [[329, "dpnp-radians"]], "dpnp.random.RandomState": [[330, "dpnp-random-randomstate"]], "dpnp.random.beta": [[331, "dpnp-random-beta"]], "dpnp.random.binomial": [[332, "dpnp-random-binomial"]], "dpnp.random.bytes": [[333, "dpnp-random-bytes"]], "dpnp.random.chisquare": [[334, "dpnp-random-chisquare"]], "dpnp.random.choice": [[335, "dpnp-random-choice"]], "dpnp.random.dirichlet": [[336, "dpnp-random-dirichlet"]], "dpnp.random.exponential": [[337, "dpnp-random-exponential"]], "dpnp.random.f": [[338, "dpnp-random-f"]], "dpnp.random.gamma": [[339, "dpnp-random-gamma"]], "dpnp.random.geometric": [[340, "dpnp-random-geometric"]], "dpnp.random.gumbel": [[341, "dpnp-random-gumbel"]], "dpnp.random.hypergeometric": [[342, "dpnp-random-hypergeometric"]], "dpnp.random.laplace": [[343, "dpnp-random-laplace"]], "dpnp.random.logistic": [[344, "dpnp-random-logistic"]], "dpnp.random.lognormal": [[345, "dpnp-random-lognormal"]], "dpnp.random.logseries": [[346, "dpnp-random-logseries"]], "dpnp.random.multinomial": [[347, "dpnp-random-multinomial"]], "dpnp.random.multivariate_normal": [[348, "dpnp-random-multivariate-normal"]], "dpnp.random.negative_binomial": [[349, "dpnp-random-negative-binomial"]], "dpnp.random.noncentral_chisquare": [[350, "dpnp-random-noncentral-chisquare"]], "dpnp.random.noncentral_f": [[351, "dpnp-random-noncentral-f"]], "dpnp.random.normal": [[352, "dpnp-random-normal"]], "dpnp.random.pareto": [[353, "dpnp-random-pareto"]], "dpnp.random.permutation": [[354, "dpnp-random-permutation"]], "dpnp.random.poisson": [[355, "dpnp-random-poisson"]], "dpnp.random.power": [[356, "dpnp-random-power"]], "dpnp.random.rand": [[357, "dpnp-random-rand"]], "dpnp.random.randint": [[358, "dpnp-random-randint"]], "dpnp.random.randn": [[359, "dpnp-random-randn"]], "dpnp.random.random": [[360, "dpnp-random-random"]], "dpnp.random.random_integers": [[361, "dpnp-random-random-integers"]], "dpnp.random.random_sample": [[362, "dpnp-random-random-sample"]], "dpnp.random.ranf": [[363, "dpnp-random-ranf"]], "dpnp.random.rayleigh": [[364, "dpnp-random-rayleigh"]], "dpnp.random.sample": [[365, "dpnp-random-sample"]], "dpnp.random.seed": [[366, "dpnp-random-seed"]], "dpnp.random.shuffle": [[367, "dpnp-random-shuffle"]], "dpnp.random.standard_cauchy": [[368, "dpnp-random-standard-cauchy"]], "dpnp.random.standard_exponential": [[369, "dpnp-random-standard-exponential"]], "dpnp.random.standard_gamma": [[370, "dpnp-random-standard-gamma"]], "dpnp.random.standard_normal": [[371, "dpnp-random-standard-normal"]], "dpnp.random.standard_t": [[372, "dpnp-random-standard-t"]], "dpnp.random.triangular": [[373, "dpnp-random-triangular"]], "dpnp.random.uniform": [[374, "dpnp-random-uniform"]], "dpnp.random.vonmises": [[375, "dpnp-random-vonmises"]], "dpnp.random.wald": [[376, "dpnp-random-wald"]], "dpnp.random.weibull": [[377, "dpnp-random-weibull"]], "dpnp.random.zipf": [[378, "dpnp-random-zipf"]], "dpnp.ravel": [[379, "dpnp-ravel"]], "dpnp.real": [[380, "dpnp-real"]], "dpnp.reciprocal": [[381, "dpnp-reciprocal"]], "dpnp.reduce_hypot": [[382, "dpnp-reduce-hypot"]], "dpnp.remainder": [[383, "dpnp-remainder"]], "dpnp.repeat": [[384, "dpnp-repeat"]], "dpnp.reshape": [[385, "dpnp-reshape"]], "dpnp.result_type": [[386, "dpnp-result-type"]], "dpnp.right_shift": [[387, "dpnp-right-shift"]], "dpnp.rint": [[388, "dpnp-rint"]], "dpnp.roll": [[389, "dpnp-roll"]], "dpnp.rollaxis": [[390, "dpnp-rollaxis"]], "dpnp.round": [[391, "dpnp-round"]], "dpnp.row_stack": [[392, "dpnp-row-stack"]], "dpnp.rsqrt": [[393, "dpnp-rsqrt"]], "dpnp.searchsorted": [[394, "dpnp-searchsorted"]], "dpnp.select": [[395, "dpnp-select"]], "dpnp.shape": [[396, "dpnp-shape"]], "dpnp.sign": [[397, "dpnp-sign"]], "dpnp.signbit": [[398, "dpnp-signbit"]], "dpnp.sin": [[399, "dpnp-sin"]], "dpnp.sinh": [[400, "dpnp-sinh"]], "dpnp.sort": [[401, "dpnp-sort"]], "dpnp.sqrt": [[402, "dpnp-sqrt"]], "dpnp.square": [[403, "dpnp-square"]], "dpnp.squeeze": [[404, "dpnp-squeeze"]], "dpnp.stack": [[405, "dpnp-stack"]], "dpnp.std": [[406, "dpnp-std"]], "dpnp.subtract": [[407, "dpnp-subtract"]], "dpnp.sum": [[408, "dpnp-sum"]], "dpnp.swapaxes": [[409, "dpnp-swapaxes"]], "dpnp.take": [[410, "dpnp-take"]], "dpnp.take_along_axis": [[411, "dpnp-take-along-axis"]], "dpnp.tan": [[412, "dpnp-tan"]], "dpnp.tanh": [[413, "dpnp-tanh"]], "dpnp.tensordot": [[414, "dpnp-tensordot"]], "dpnp.tile": [[415, "dpnp-tile"]], "dpnp.trace": [[416, "dpnp-trace"]], "dpnp.transpose": [[417, "dpnp-transpose"]], "dpnp.trapz": [[418, "dpnp-trapz"]], "dpnp.tri": [[419, "dpnp-tri"]], "dpnp.tril": [[420, "dpnp-tril"]], "dpnp.tril_indices": [[421, "dpnp-tril-indices"]], "dpnp.tril_indices_from": [[422, "dpnp-tril-indices-from"]], "dpnp.triu": [[423, "dpnp-triu"]], "dpnp.triu_indices": [[424, "dpnp-triu-indices"]], "dpnp.triu_indices_from": [[425, "dpnp-triu-indices-from"]], "dpnp.true_divide": [[426, "dpnp-true-divide"]], "dpnp.trunc": [[427, "dpnp-trunc"]], "dpnp.unique": [[428, "dpnp-unique"]], "dpnp.unwrap": [[429, "dpnp-unwrap"]], "dpnp.vander": [[430, "dpnp-vander"]], "dpnp.var": [[431, "dpnp-var"]], "dpnp.vdot": [[432, "dpnp-vdot"]], "dpnp.vstack": [[433, "dpnp-vstack"]], "dpnp.where": [[434, "dpnp-where"]], "dpnp.zeros": [[435, "dpnp-zeros"]], "dpnp.zeros_like": [[436, "dpnp-zeros-like"]], "API Reference": [[437, "api-reference"]], "Array Indexing Routines": [[438, "array-indexing-routines"]], "Generating index arrays": [[438, "generating-index-arrays"]], "Indexing-like operations": [[438, "indexing-like-operations"]], "Inserting data into arrays": [[438, "inserting-data-into-arrays"]], "Iterating over arrays": [[438, "iterating-over-arrays"]], "Matrix and vector products": [[439, "matrix-and-vector-products"]], "Decompositions": [[439, "decompositions"]], "Matrix eigenvalues": [[439, "matrix-eigenvalues"]], "Norms and other numbers": [[439, "norms-and-other-numbers"]], "Solving linear equations": [[439, "solving-linear-equations"]], "Logic Functions": [[440, "logic-functions"]], "Truth value testing": [[440, "truth-value-testing"]], "Infinities and NaNs": [[440, "infinities-and-nans"]], "Array type testing": [[440, "array-type-testing"]], "Logic operations": [[440, "logic-operations"]], "Comparison": [[440, "comparison"]], "Array Manipulation Routines": [[441, "array-manipulation-routines"]], "Basic operations": [[441, "basic-operations"]], "Changing array shape": [[441, "changing-array-shape"]], "Transpose-like operations": [[441, "transpose-like-operations"]], "Changing number of dimensions": [[441, "changing-number-of-dimensions"]], "Changing kind of array": [[441, "changing-kind-of-array"]], "Joining arrays": [[441, "joining-arrays"]], "Splitting arrays": [[441, "splitting-arrays"]], "Tiling arrays": [[441, "tiling-arrays"]], "Adding and removing elements": [[441, "adding-and-removing-elements"]], "Rearranging elements": [[441, "rearranging-elements"]], "Mathematical Functions": [[442, "mathematical-functions"]], "Trigonometric functions": [[442, "trigonometric-functions"], [452, "trigonometric-functions"]], "Hyperbolic functions": [[442, "hyperbolic-functions"]], "Rounding": [[442, "rounding"]], "Sums, products, differences": [[442, "sums-products-differences"]], "Exponents and logarithms": [[442, "exponents-and-logarithms"]], "Other special functions": [[442, "other-special-functions"]], "Floating point routines": [[442, "floating-point-routines"]], "Rational routines": [[442, "rational-routines"]], "Arithmetic operations": [[442, "arithmetic-operations"]], "Handling complex numbers": [[442, "handling-complex-numbers"]], "Extrema Finding": [[442, "extrema-finding"]], "Miscellaneous routines": [[443, "miscellaneous-routines"]], "Utility": [[443, "utility"]], "Multi-Dimensional Array (ndarray)": [[444, "multi-dimensional-array-ndarray"]], "Constructing arrays": [[444, "constructing-arrays"]], "Indexing arrays": [[444, "indexing-arrays"]], "Array attributes": [[444, "array-attributes"]], "Memory layout": [[444, "memory-layout"]], "Data type": [[444, "data-type"]], "Other attributes": [[444, "other-attributes"]], "Array methods": [[444, "array-methods"]], "Array conversion": [[444, "array-conversion"]], "Shape manipulation": [[444, "shape-manipulation"]], "Item selection and manipulation": [[444, "item-selection-and-manipulation"]], "Calculation": [[444, "calculation"]], "Arithmetic, matrix multiplication, and comparison operations": [[444, "arithmetic-matrix-multiplication-and-comparison-operations"]], "Special methods": [[444, "special-methods"]], "Padding": [[445, "padding"]], "Polynomials": [[446, "polynomials"]], "Polynomial Package": [[446, "polynomial-package"]], "Polynomial Module": [[446, "polynomial-module"]], "Polyutils": [[446, "polyutils"]], "Poly1d": [[446, "poly1d"]], "Basics": [[446, "basics"]], "Arithmetic": [[446, "arithmetic"]], "Random Sampling (dpnp.random)": [[447, "random-sampling-dpnp-random"]], "Simple random data": [[447, "simple-random-data"]], "Permutations": [[447, "permutations"]], "Distributions": [[447, "distributions"]], "Random generator": [[447, "random-generator"]], "Routines": [[448, "routines"]], "Sorting, Searching, and Counting": [[449, "sorting-searching-and-counting"]], "Sorting": [[449, "sorting"]], "Searching": [[449, "searching"]], "Counting": [[449, "counting"]], "Special Functions": [[450, "special-functions"]], "Error Function": [[450, "error-function"]], "Statistical Functions": [[451, "statistical-functions"]], "Order statistics": [[451, "order-statistics"]], "Averages and variances": [[451, "averages-and-variances"]], "Histograms": [[451, "histograms"]], "Correlations": [[451, "correlations"]], "Universal Functions (ufunc)": [[452, "universal-functions-ufunc"]], "Available ufuncs": [[452, "available-ufuncs"]], "Math operations": [[452, "math-operations"]], "Bit-twiddling functions": [[452, "bit-twiddling-functions"]], "Comparison functions": [[452, "comparison-functions"]], "Floating functions": [[452, "floating-functions"]]}, "indexentries": {"dpnp": [[2, "module-dpnp"], [3, "module-dpnp"]], "module": [[2, "module-dpnp"], [3, "module-dpnp"], [10, "module-dpnp.fft"], [447, "module-dpnp.random"]], "dpnp.fft": [[10, "module-dpnp.fft"]], "abs() (in module dpnp)": [[11, "dpnp.abs"]], "absolute() (in module dpnp)": [[12, "dpnp.absolute"]], "add() (in module dpnp)": [[13, "dpnp.add"]], "all() (in module dpnp)": [[14, "dpnp.all"]], "allclose() (in module dpnp)": [[15, "dpnp.allclose"]], "amax() (in module dpnp)": [[16, "dpnp.amax"]], "amin() (in module dpnp)": [[17, "dpnp.amin"]], "angle() (in module dpnp)": [[18, "dpnp.angle"]], "any() (in module dpnp)": [[19, "dpnp.any"]], "arange() (in module dpnp)": [[20, "dpnp.arange"]], "arccos() (in module dpnp)": [[21, "dpnp.arccos"]], "arccosh() (in module dpnp)": [[22, "dpnp.arccosh"]], "arcsin() (in module dpnp)": [[23, "dpnp.arcsin"]], "arcsinh() (in module dpnp)": [[24, "dpnp.arcsinh"]], "arctan() (in module dpnp)": [[25, "dpnp.arctan"]], "arctan2() (in module dpnp)": [[26, "dpnp.arctan2"]], "arctanh() (in module dpnp)": [[27, "dpnp.arctanh"]], "argmax() (in module dpnp)": [[28, "dpnp.argmax"]], "argmin() (in module dpnp)": [[29, "dpnp.argmin"]], "argsort() (in module dpnp)": [[30, "dpnp.argsort"]], "around() (in module dpnp)": [[31, "dpnp.around"]], "array() (in module dpnp)": [[32, "dpnp.array"]], "array_equal() (in module dpnp)": [[33, "dpnp.array_equal"]], "asanyarray() (in module dpnp)": [[34, "dpnp.asanyarray"]], "asarray() (in module dpnp)": [[35, "dpnp.asarray"]], "ascontiguousarray() (in module dpnp)": [[36, "dpnp.ascontiguousarray"]], "asfarray() (in module dpnp)": [[37, "dpnp.asfarray"]], "asfortranarray() (in module dpnp)": [[38, "dpnp.asfortranarray"]], "asnumpy() (in module dpnp)": [[39, "dpnp.asnumpy"]], "astype() (in module dpnp)": [[40, "dpnp.astype"]], "atleast_1d() (in module dpnp)": [[41, "dpnp.atleast_1d"]], "atleast_2d() (in module dpnp)": [[42, "dpnp.atleast_2d"]], "atleast_3d() (in module dpnp)": [[43, "dpnp.atleast_3d"]], "average() (in module dpnp)": [[44, "dpnp.average"]], "bincount() (in module dpnp)": [[45, "dpnp.bincount"]], "bitwise_and() (in module dpnp)": [[46, "dpnp.bitwise_and"]], "bitwise_not() (in module dpnp)": [[47, "dpnp.bitwise_not"]], "bitwise_or() (in module dpnp)": [[48, "dpnp.bitwise_or"]], "bitwise_xor() (in module dpnp)": [[49, "dpnp.bitwise_xor"]], "broadcast_arrays() (in module dpnp)": [[50, "dpnp.broadcast_arrays"]], "broadcast_to() (in module dpnp)": [[51, "dpnp.broadcast_to"]], "can_cast() (in module dpnp)": [[52, "dpnp.can_cast"]], "cbrt() (in module dpnp)": [[53, "dpnp.cbrt"]], "ceil() (in module dpnp)": [[54, "dpnp.ceil"]], "choose() (in module dpnp)": [[55, "dpnp.choose"]], "clip() (in module dpnp)": [[56, "dpnp.clip"]], "column_stack() (in module dpnp)": [[57, "dpnp.column_stack"]], "concatenate() (in module dpnp)": [[58, "dpnp.concatenate"]], "conj() (in module dpnp)": [[59, "dpnp.conj"]], "conjugate() (in module dpnp)": [[60, "dpnp.conjugate"]], "convolve() (in module dpnp)": [[61, "dpnp.convolve"]], "copy() (in module dpnp)": [[62, "dpnp.copy"]], "copysign() (in module dpnp)": [[63, "dpnp.copysign"]], "copyto() (in module dpnp)": [[64, "dpnp.copyto"]], "correlate() (in module dpnp)": [[65, "dpnp.correlate"]], "cos() (in module dpnp)": [[66, "dpnp.cos"]], "cosh() (in module dpnp)": [[67, "dpnp.cosh"]], "count_nonzero() (in module dpnp)": [[68, "dpnp.count_nonzero"]], "cov() (in module dpnp)": [[69, "dpnp.cov"]], "cross() (in module dpnp)": [[70, "dpnp.cross"]], "cumprod() (in module dpnp)": [[71, "dpnp.cumprod"]], "cumsum() (in module dpnp)": [[72, "dpnp.cumsum"]], "deg2rad() (in module dpnp)": [[73, "dpnp.deg2rad"]], "degrees() (in module dpnp)": [[74, "dpnp.degrees"]], "diag() (in module dpnp)": [[75, "dpnp.diag"]], "diag_indices() (in module dpnp)": [[76, "dpnp.diag_indices"]], "diag_indices_from() (in module dpnp)": [[77, "dpnp.diag_indices_from"]], "diagflat() (in module dpnp)": [[78, "dpnp.diagflat"]], "diagonal() (in module dpnp)": [[79, "dpnp.diagonal"]], "diff() (in module dpnp)": [[80, "dpnp.diff"]], "divide() (in module dpnp)": [[81, "dpnp.divide"]], "dot() (in module dpnp)": [[82, "dpnp.dot"]], "t (dpnp.dpnp_array.dpnp_array attribute)": [[83, "dpnp.dpnp_array.dpnp_array.T"]], "__eq__() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.__eq__"]], "__ge__() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.__ge__"]], "__getitem__() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.__getitem__"]], "__gt__() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.__gt__"]], "__le__() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.__le__"]], "__len__() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.__len__"]], "__lt__() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.__lt__"]], "__ne__() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.__ne__"]], "__setitem__() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.__setitem__"]], "all() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.all"]], "any() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.any"]], "argmax() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.argmax"]], "argmin() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.argmin"]], "argsort() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.argsort"]], "asnumpy() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.asnumpy"]], "astype() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.astype"]], "choose() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.choose"]], "clip() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.clip"]], "conj() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.conj"]], "conjugate() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.conjugate"]], "copy() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.copy"]], "cumsum() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.cumsum"]], "device (dpnp.dpnp_array.dpnp_array attribute)": [[83, "dpnp.dpnp_array.dpnp_array.device"]], "diagonal() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.diagonal"]], "dot() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.dot"]], "dpnp_array (class in dpnp.dpnp_array)": [[83, "dpnp.dpnp_array.dpnp_array"]], "dtype (dpnp.dpnp_array.dpnp_array attribute)": [[83, "dpnp.dpnp_array.dpnp_array.dtype"]], "fill() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.fill"]], "flags (dpnp.dpnp_array.dpnp_array attribute)": [[83, "dpnp.dpnp_array.dpnp_array.flags"]], "flat (dpnp.dpnp_array.dpnp_array attribute)": [[83, "dpnp.dpnp_array.dpnp_array.flat"]], "flatten() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.flatten"]], "get_array() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.get_array"]], "imag (dpnp.dpnp_array.dpnp_array attribute)": [[83, "dpnp.dpnp_array.dpnp_array.imag"]], "item() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.item"]], "itemsize (dpnp.dpnp_array.dpnp_array attribute)": [[83, "dpnp.dpnp_array.dpnp_array.itemsize"]], "max() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.max"]], "mean() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.mean"]], "min() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.min"]], "nbytes (dpnp.dpnp_array.dpnp_array attribute)": [[83, "dpnp.dpnp_array.dpnp_array.nbytes"]], "ndim (dpnp.dpnp_array.dpnp_array attribute)": [[83, "dpnp.dpnp_array.dpnp_array.ndim"]], "nonzero() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.nonzero"]], "partition() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.partition"]], "prod() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.prod"]], "put() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.put"]], "ravel() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.ravel"]], "real (dpnp.dpnp_array.dpnp_array attribute)": [[83, "dpnp.dpnp_array.dpnp_array.real"]], "repeat() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.repeat"]], "reshape() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.reshape"]], "round() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.round"]], "searchsorted() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.searchsorted"]], "shape (dpnp.dpnp_array.dpnp_array attribute)": [[83, "dpnp.dpnp_array.dpnp_array.shape"]], "size (dpnp.dpnp_array.dpnp_array attribute)": [[83, "dpnp.dpnp_array.dpnp_array.size"]], "sort() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.sort"]], "squeeze() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.squeeze"]], "std() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.std"]], "strides (dpnp.dpnp_array.dpnp_array attribute)": [[83, "dpnp.dpnp_array.dpnp_array.strides"]], "sum() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.sum"]], "swapaxes() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.swapaxes"]], "sycl_context (dpnp.dpnp_array.dpnp_array attribute)": [[83, "dpnp.dpnp_array.dpnp_array.sycl_context"]], "sycl_device (dpnp.dpnp_array.dpnp_array attribute)": [[83, "dpnp.dpnp_array.dpnp_array.sycl_device"]], "sycl_queue (dpnp.dpnp_array.dpnp_array attribute)": [[83, "dpnp.dpnp_array.dpnp_array.sycl_queue"]], "take() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.take"]], "to_device() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.to_device"]], "transpose() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.transpose"]], "usm_type (dpnp.dpnp_array.dpnp_array attribute)": [[83, "dpnp.dpnp_array.dpnp_array.usm_type"]], "var() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.var"]], "dstack() (in module dpnp)": [[84, "dpnp.dstack"]], "__eq__() (dpnp.dtype method)": [[85, "dpnp.dtype.__eq__"]], "__ge__() (dpnp.dtype method)": [[85, "dpnp.dtype.__ge__"]], "__getitem__() (dpnp.dtype method)": [[85, "dpnp.dtype.__getitem__"]], "__gt__() (dpnp.dtype method)": [[85, "dpnp.dtype.__gt__"]], "__le__() (dpnp.dtype method)": [[85, "dpnp.dtype.__le__"]], "__len__() (dpnp.dtype method)": [[85, "dpnp.dtype.__len__"]], "__lt__() (dpnp.dtype method)": [[85, "dpnp.dtype.__lt__"]], "__ne__() (dpnp.dtype method)": [[85, "dpnp.dtype.__ne__"]], "alignment (dpnp.dtype attribute)": [[85, "dpnp.dtype.alignment"]], "base (dpnp.dtype attribute)": [[85, "dpnp.dtype.base"]], "byteorder (dpnp.dtype attribute)": [[85, "dpnp.dtype.byteorder"]], "char (dpnp.dtype attribute)": [[85, "dpnp.dtype.char"]], "descr (dpnp.dtype attribute)": [[85, "dpnp.dtype.descr"]], "dtype (class in dpnp)": [[85, "dpnp.dtype"]], "fields (dpnp.dtype attribute)": [[85, "dpnp.dtype.fields"]], "flags (dpnp.dtype attribute)": [[85, "dpnp.dtype.flags"]], "hasobject (dpnp.dtype attribute)": [[85, "dpnp.dtype.hasobject"]], "isalignedstruct (dpnp.dtype attribute)": [[85, "dpnp.dtype.isalignedstruct"]], "isbuiltin (dpnp.dtype attribute)": [[85, "dpnp.dtype.isbuiltin"]], "isnative (dpnp.dtype attribute)": [[85, "dpnp.dtype.isnative"]], "itemsize (dpnp.dtype attribute)": [[85, "dpnp.dtype.itemsize"]], "kind (dpnp.dtype attribute)": [[85, "dpnp.dtype.kind"]], "metadata (dpnp.dtype attribute)": [[85, "dpnp.dtype.metadata"]], "name (dpnp.dtype attribute)": [[85, "dpnp.dtype.name"]], "names (dpnp.dtype attribute)": [[85, "dpnp.dtype.names"]], "ndim (dpnp.dtype attribute)": [[85, "dpnp.dtype.ndim"]], "newbyteorder() (dpnp.dtype method)": [[85, "dpnp.dtype.newbyteorder"]], "num (dpnp.dtype attribute)": [[85, "dpnp.dtype.num"]], "shape (dpnp.dtype attribute)": [[85, "dpnp.dtype.shape"]], "str (dpnp.dtype attribute)": [[85, "dpnp.dtype.str"]], "subdtype (dpnp.dtype attribute)": [[85, "dpnp.dtype.subdtype"]], "type (dpnp.dtype attribute)": [[85, "dpnp.dtype.type"]], "ediff1d() (in module dpnp)": [[86, "dpnp.ediff1d"]], "einsum() (in module dpnp)": [[87, "dpnp.einsum"]], "einsum_path() (in module dpnp)": [[88, "dpnp.einsum_path"]], "empty() (in module dpnp)": [[89, "dpnp.empty"]], "empty_like() (in module dpnp)": [[90, "dpnp.empty_like"]], "equal() (in module dpnp)": [[91, "dpnp.equal"]], "erf() (in module dpnp)": [[92, "dpnp.erf"]], "exp() (in module dpnp)": [[93, "dpnp.exp"]], "exp2() (in module dpnp)": [[94, "dpnp.exp2"]], "expand_dims() (in module dpnp)": [[95, "dpnp.expand_dims"]], "expm1() (in module dpnp)": [[96, "dpnp.expm1"]], "extract() (in module dpnp)": [[97, "dpnp.extract"]], "eye() (in module dpnp)": [[98, "dpnp.eye"]], "fabs() (in module dpnp)": [[99, "dpnp.fabs"]], "fft() (in module dpnp.fft)": [[100, "dpnp.fft.fft"]], "fft2() (in module dpnp.fft)": [[101, "dpnp.fft.fft2"]], "fftfreq() (in module dpnp.fft)": [[102, "dpnp.fft.fftfreq"]], "fftn() (in module dpnp.fft)": [[103, "dpnp.fft.fftn"]], "fftshift() (in module dpnp.fft)": [[104, "dpnp.fft.fftshift"]], "hfft() (in module dpnp.fft)": [[105, "dpnp.fft.hfft"]], "ifft() (in module dpnp.fft)": [[106, "dpnp.fft.ifft"]], "ifft2() (in module dpnp.fft)": [[107, "dpnp.fft.ifft2"]], "ifftn() (in module dpnp.fft)": [[108, "dpnp.fft.ifftn"]], "ifftshift() (in module dpnp.fft)": [[109, "dpnp.fft.ifftshift"]], "ihfft() (in module dpnp.fft)": [[110, "dpnp.fft.ihfft"]], "irfft() (in module dpnp.fft)": [[111, "dpnp.fft.irfft"]], "irfft2() (in module dpnp.fft)": [[112, "dpnp.fft.irfft2"]], "irfftn() (in module dpnp.fft)": [[113, "dpnp.fft.irfftn"]], "rfft() (in module dpnp.fft)": [[114, "dpnp.fft.rfft"]], "rfft2() (in module dpnp.fft)": [[115, "dpnp.fft.rfft2"]], "rfftfreq() (in module dpnp.fft)": [[116, "dpnp.fft.rfftfreq"]], "rfftn() (in module dpnp.fft)": [[117, "dpnp.fft.rfftn"]], "fill_diagonal() (in module dpnp)": [[118, "dpnp.fill_diagonal"]], "finfo() (in module dpnp)": [[119, "dpnp.finfo"]], "__eq__() (dpnp.flatiter method)": [[120, "dpnp.flatiter.__eq__"]], "__ge__() (dpnp.flatiter method)": [[120, "dpnp.flatiter.__ge__"]], "__getitem__() (dpnp.flatiter method)": [[120, "dpnp.flatiter.__getitem__"]], "__gt__() (dpnp.flatiter method)": [[120, "dpnp.flatiter.__gt__"]], "__iter__() (dpnp.flatiter method)": [[120, "dpnp.flatiter.__iter__"]], "__le__() (dpnp.flatiter method)": [[120, "dpnp.flatiter.__le__"]], "__lt__() (dpnp.flatiter method)": [[120, "dpnp.flatiter.__lt__"]], "__ne__() (dpnp.flatiter method)": [[120, "dpnp.flatiter.__ne__"]], "__next__() (dpnp.flatiter method)": [[120, "dpnp.flatiter.__next__"]], "__setitem__() (dpnp.flatiter method)": [[120, "dpnp.flatiter.__setitem__"]], "flatiter (class in dpnp)": [[120, "dpnp.flatiter"]], "flip() (in module dpnp)": [[121, "dpnp.flip"]], "fliplr() (in module dpnp)": [[122, "dpnp.fliplr"]], "flipud() (in module dpnp)": [[123, "dpnp.flipud"]], "floor() (in module dpnp)": [[124, "dpnp.floor"]], "floor_divide() (in module dpnp)": [[125, "dpnp.floor_divide"]], "fmax() (in module dpnp)": [[126, "dpnp.fmax"]], "fmin() (in module dpnp)": [[127, "dpnp.fmin"]], "fmod() (in module dpnp)": [[128, "dpnp.fmod"]], "from_dlpack() (in module dpnp)": [[129, "dpnp.from_dlpack"]], "frombuffer() (in module dpnp)": [[130, "dpnp.frombuffer"]], "fromfile() (in module dpnp)": [[131, "dpnp.fromfile"]], "fromfunction() (in module dpnp)": [[132, "dpnp.fromfunction"]], "fromiter() (in module dpnp)": [[133, "dpnp.fromiter"]], "fromstring() (in module dpnp)": [[134, "dpnp.fromstring"]], "full() (in module dpnp)": [[135, "dpnp.full"]], "full_like() (in module dpnp)": [[136, "dpnp.full_like"]], "geomspace() (in module dpnp)": [[137, "dpnp.geomspace"]], "get_include() (in module dpnp)": [[138, "dpnp.get_include"]], "gradient() (in module dpnp)": [[139, "dpnp.gradient"]], "greater() (in module dpnp)": [[140, "dpnp.greater"]], "greater_equal() (in module dpnp)": [[141, "dpnp.greater_equal"]], "histogram() (in module dpnp)": [[142, "dpnp.histogram"]], "hstack() (in module dpnp)": [[143, "dpnp.hstack"]], "hypot() (in module dpnp)": [[144, "dpnp.hypot"]], "identity() (in module dpnp)": [[145, "dpnp.identity"]], "iinfo() (in module dpnp)": [[146, "dpnp.iinfo"]], "imag() (in module dpnp)": [[147, "dpnp.imag"]], "indices() (in module dpnp)": [[148, "dpnp.indices"]], "inner() (in module dpnp)": [[149, "dpnp.inner"]], "invert() (in module dpnp)": [[150, "dpnp.invert"]], "isclose() (in module dpnp)": [[151, "dpnp.isclose"]], "isfinite() (in module dpnp)": [[152, "dpnp.isfinite"]], "isinf() (in module dpnp)": [[153, "dpnp.isinf"]], "isnan() (in module dpnp)": [[154, "dpnp.isnan"]], "isscalar() (in module dpnp)": [[155, "dpnp.isscalar"]], "issubdtype() (in module dpnp)": [[156, "dpnp.issubdtype"]], "issubsctype() (in module dpnp)": [[157, "dpnp.issubsctype"]], "kron() (in module dpnp)": [[158, "dpnp.kron"]], "left_shift() (in module dpnp)": [[159, "dpnp.left_shift"]], "less() (in module dpnp)": [[160, "dpnp.less"]], "less_equal() (in module dpnp)": [[161, "dpnp.less_equal"]], "cholesky() (in module dpnp.linalg)": [[162, "dpnp.linalg.cholesky"]], "cond() (in module dpnp.linalg)": [[163, "dpnp.linalg.cond"]], "det() (in module dpnp.linalg)": [[164, "dpnp.linalg.det"]], "eig() (in module dpnp.linalg)": [[165, "dpnp.linalg.eig"]], "eigh() (in module dpnp.linalg)": [[166, "dpnp.linalg.eigh"]], "eigvals() (in module dpnp.linalg)": [[167, "dpnp.linalg.eigvals"]], "eigvalsh() (in module dpnp.linalg)": [[168, "dpnp.linalg.eigvalsh"]], "inv() (in module dpnp.linalg)": [[169, "dpnp.linalg.inv"]], "matrix_power() (in module dpnp.linalg)": [[170, "dpnp.linalg.matrix_power"]], "matrix_rank() (in module dpnp.linalg)": [[171, "dpnp.linalg.matrix_rank"]], "multi_dot() (in module dpnp.linalg)": [[172, "dpnp.linalg.multi_dot"]], "norm() (in module dpnp.linalg)": [[173, "dpnp.linalg.norm"]], "pinv() (in module dpnp.linalg)": [[174, "dpnp.linalg.pinv"]], "qr() (in module dpnp.linalg)": [[175, "dpnp.linalg.qr"]], "slogdet() (in module dpnp.linalg)": [[176, "dpnp.linalg.slogdet"]], "solve() (in module dpnp.linalg)": [[177, "dpnp.linalg.solve"]], "svd() (in module dpnp.linalg)": [[178, "dpnp.linalg.svd"]], "tensorinv() (in module dpnp.linalg)": [[179, "dpnp.linalg.tensorinv"]], "tensorsolve() (in module dpnp.linalg)": [[180, "dpnp.linalg.tensorsolve"]], "linspace() (in module dpnp)": [[181, "dpnp.linspace"]], "loadtxt() (in module dpnp)": [[182, "dpnp.loadtxt"]], "log() (in module dpnp)": [[183, "dpnp.log"]], "log10() (in module dpnp)": [[184, "dpnp.log10"]], "log1p() (in module dpnp)": [[185, "dpnp.log1p"]], "log2() (in module dpnp)": [[186, "dpnp.log2"]], "logaddexp() (in module dpnp)": [[187, "dpnp.logaddexp"]], "logical_and() (in module dpnp)": [[188, "dpnp.logical_and"]], "logical_not() (in module dpnp)": [[189, "dpnp.logical_not"]], "logical_or() (in module dpnp)": [[190, "dpnp.logical_or"]], "logical_xor() (in module dpnp)": [[191, "dpnp.logical_xor"]], "logspace() (in module dpnp)": [[192, "dpnp.logspace"]], "logsumexp() (in module dpnp)": [[193, "dpnp.logsumexp"]], "matmul() (in module dpnp)": [[194, "dpnp.matmul"]], "max() (in module dpnp)": [[195, "dpnp.max"]], "maximum() (in module dpnp)": [[196, "dpnp.maximum"]], "mean() (in module dpnp)": [[197, "dpnp.mean"]], "median() (in module dpnp)": [[198, "dpnp.median"]], "meshgrid() (in module dpnp)": [[199, "dpnp.meshgrid"]], "mgrid (in module dpnp)": [[200, "dpnp.mgrid"]], "min() (in module dpnp)": [[201, "dpnp.min"]], "minimum() (in module dpnp)": [[202, "dpnp.minimum"]], "mod() (in module dpnp)": [[203, "dpnp.mod"]], "modf() (in module dpnp)": [[204, "dpnp.modf"]], "moveaxis() (in module dpnp)": [[205, "dpnp.moveaxis"]], "multiply() (in module dpnp)": [[206, "dpnp.multiply"]], "nanargmax() (in module dpnp)": [[207, "dpnp.nanargmax"]], "nanargmin() (in module dpnp)": [[208, "dpnp.nanargmin"]], "nancumprod() (in module dpnp)": [[209, "dpnp.nancumprod"]], "nancumsum() (in module dpnp)": [[210, "dpnp.nancumsum"]], "nanmax() (in module dpnp)": [[211, "dpnp.nanmax"]], "nanmean() (in module dpnp)": [[212, "dpnp.nanmean"]], "nanmin() (in module dpnp)": [[213, "dpnp.nanmin"]], "nanprod() (in module dpnp)": [[214, "dpnp.nanprod"]], "nanstd() (in module dpnp)": [[215, "dpnp.nanstd"]], "nansum() (in module dpnp)": [[216, "dpnp.nansum"]], "nanvar() (in module dpnp)": [[217, "dpnp.nanvar"]], "ndarray (in module dpnp)": [[218, "dpnp.ndarray"]], "t (dpnp.ndarray property)": [[219, "dpnp.ndarray.T"]], "__abs__() (dpnp.ndarray method)": [[220, "dpnp.ndarray.__abs__"]], "__add__() (dpnp.ndarray method)": [[221, "dpnp.ndarray.__add__"]], "__and__() (dpnp.ndarray method)": [[222, "dpnp.ndarray.__and__"]], "__complex__() (dpnp.ndarray method)": [[223, "dpnp.ndarray.__complex__"]], "__copy__() (dpnp.ndarray method)": [[224, "dpnp.ndarray.__copy__"]], "__eq__() (dpnp.ndarray method)": [[225, "dpnp.ndarray.__eq__"]], "__float__() (dpnp.ndarray method)": [[226, "dpnp.ndarray.__float__"]], "__floordiv__() (dpnp.ndarray method)": [[227, "dpnp.ndarray.__floordiv__"]], "__ge__() (dpnp.ndarray method)": [[228, "dpnp.ndarray.__ge__"]], "__getitem__() (dpnp.ndarray method)": [[229, "dpnp.ndarray.__getitem__"]], "__gt__() (dpnp.ndarray method)": [[230, "dpnp.ndarray.__gt__"]], "__iadd__() (dpnp.ndarray method)": [[231, "dpnp.ndarray.__iadd__"]], "__iand__() (dpnp.ndarray method)": [[232, "dpnp.ndarray.__iand__"]], "__ifloordiv__() (dpnp.ndarray method)": [[233, "dpnp.ndarray.__ifloordiv__"]], "__ilshift__() (dpnp.ndarray method)": [[234, "dpnp.ndarray.__ilshift__"]], "__imod__() (dpnp.ndarray method)": [[235, "dpnp.ndarray.__imod__"]], "__imul__() (dpnp.ndarray method)": [[236, "dpnp.ndarray.__imul__"]], "__int__() (dpnp.ndarray method)": [[237, "dpnp.ndarray.__int__"]], "__invert__() (dpnp.ndarray method)": [[238, "dpnp.ndarray.__invert__"]], "__ior__() (dpnp.ndarray method)": [[239, "dpnp.ndarray.__ior__"]], "__ipow__() (dpnp.ndarray method)": [[240, "dpnp.ndarray.__ipow__"]], "__irshift__() (dpnp.ndarray method)": [[241, "dpnp.ndarray.__irshift__"]], "__isub__() (dpnp.ndarray method)": [[242, "dpnp.ndarray.__isub__"]], "__itruediv__() (dpnp.ndarray method)": [[243, "dpnp.ndarray.__itruediv__"]], "__ixor__() (dpnp.ndarray method)": [[244, "dpnp.ndarray.__ixor__"]], "__le__() (dpnp.ndarray method)": [[245, "dpnp.ndarray.__le__"]], "__len__() (dpnp.ndarray method)": [[246, "dpnp.ndarray.__len__"]], "__lshift__() (dpnp.ndarray method)": [[247, "dpnp.ndarray.__lshift__"]], "__lt__() (dpnp.ndarray method)": [[248, "dpnp.ndarray.__lt__"]], "__mod__() (dpnp.ndarray method)": [[249, "dpnp.ndarray.__mod__"]], "__mul__() (dpnp.ndarray method)": [[250, "dpnp.ndarray.__mul__"]], "__ne__() (dpnp.ndarray method)": [[251, "dpnp.ndarray.__ne__"]], "__neg__() (dpnp.ndarray method)": [[252, "dpnp.ndarray.__neg__"]], "__new__() (dpnp.ndarray method)": [[253, "dpnp.ndarray.__new__"]], "__or__() (dpnp.ndarray method)": [[254, "dpnp.ndarray.__or__"]], "__pos__() (dpnp.ndarray method)": [[255, "dpnp.ndarray.__pos__"]], "__pow__() (dpnp.ndarray method)": [[256, "dpnp.ndarray.__pow__"]], "__repr__() (dpnp.ndarray method)": [[257, "dpnp.ndarray.__repr__"]], "__rshift__() (dpnp.ndarray method)": [[258, "dpnp.ndarray.__rshift__"]], "__setitem__() (dpnp.ndarray method)": [[259, "dpnp.ndarray.__setitem__"]], "__str__() (dpnp.ndarray method)": [[260, "dpnp.ndarray.__str__"]], "__sub__() (dpnp.ndarray method)": [[261, "dpnp.ndarray.__sub__"]], "__truediv__() (dpnp.ndarray method)": [[262, "dpnp.ndarray.__truediv__"]], "__xor__() (dpnp.ndarray method)": [[263, "dpnp.ndarray.__xor__"]], "all() (dpnp.ndarray method)": [[264, "dpnp.ndarray.all"]], "any() (dpnp.ndarray method)": [[265, "dpnp.ndarray.any"]], "argmax() (dpnp.ndarray method)": [[266, "dpnp.ndarray.argmax"]], "argmin() (dpnp.ndarray method)": [[267, "dpnp.ndarray.argmin"]], "argsort() (dpnp.ndarray method)": [[268, "dpnp.ndarray.argsort"]], "astype() (dpnp.ndarray method)": [[269, "dpnp.ndarray.astype"]], "choose() (dpnp.ndarray method)": [[270, "dpnp.ndarray.choose"]], "clip() (dpnp.ndarray method)": [[271, "dpnp.ndarray.clip"]], "conj() (dpnp.ndarray method)": [[272, "dpnp.ndarray.conj"]], "conjugate() (dpnp.ndarray method)": [[273, "dpnp.ndarray.conjugate"]], "copy() (dpnp.ndarray method)": [[274, "dpnp.ndarray.copy"]], "cumsum() (dpnp.ndarray method)": [[275, "dpnp.ndarray.cumsum"]], "diagonal() (dpnp.ndarray method)": [[276, "dpnp.ndarray.diagonal"]], "dtype (dpnp.ndarray property)": [[277, "dpnp.ndarray.dtype"]], "fill() (dpnp.ndarray method)": [[278, "dpnp.ndarray.fill"]], "flags (dpnp.ndarray property)": [[279, "dpnp.ndarray.flags"]], "flat (dpnp.ndarray property)": [[280, "dpnp.ndarray.flat"]], "flatten() (dpnp.ndarray method)": [[281, "dpnp.ndarray.flatten"]], "imag (dpnp.ndarray property)": [[282, "dpnp.ndarray.imag"]], "item() (dpnp.ndarray method)": [[283, "dpnp.ndarray.item"]], "itemsize (dpnp.ndarray property)": [[284, "dpnp.ndarray.itemsize"]], "max() (dpnp.ndarray method)": [[285, "dpnp.ndarray.max"]], "mean() (dpnp.ndarray method)": [[286, "dpnp.ndarray.mean"]], "min() (dpnp.ndarray method)": [[287, "dpnp.ndarray.min"]], "nbytes (dpnp.ndarray property)": [[288, "dpnp.ndarray.nbytes"]], "ndim (dpnp.ndarray property)": [[289, "dpnp.ndarray.ndim"]], "nonzero() (dpnp.ndarray method)": [[290, "dpnp.ndarray.nonzero"]], "partition() (dpnp.ndarray method)": [[291, "dpnp.ndarray.partition"]], "prod() (dpnp.ndarray method)": [[292, "dpnp.ndarray.prod"]], "put() (dpnp.ndarray method)": [[293, "dpnp.ndarray.put"]], "ravel() (dpnp.ndarray method)": [[294, "dpnp.ndarray.ravel"]], "real (dpnp.ndarray property)": [[295, "dpnp.ndarray.real"]], "repeat() (dpnp.ndarray method)": [[296, "dpnp.ndarray.repeat"]], "reshape() (dpnp.ndarray method)": [[297, "dpnp.ndarray.reshape"]], "round() (dpnp.ndarray method)": [[298, "dpnp.ndarray.round"]], "searchsorted() (dpnp.ndarray method)": [[299, "dpnp.ndarray.searchsorted"]], "shape (dpnp.ndarray property)": [[300, "dpnp.ndarray.shape"]], "size (dpnp.ndarray property)": [[301, "dpnp.ndarray.size"]], "sort() (dpnp.ndarray method)": [[302, "dpnp.ndarray.sort"]], "squeeze() (dpnp.ndarray method)": [[303, "dpnp.ndarray.squeeze"]], "std() (dpnp.ndarray method)": [[304, "dpnp.ndarray.std"]], "strides (dpnp.ndarray property)": [[305, "dpnp.ndarray.strides"]], "sum() (dpnp.ndarray method)": [[306, "dpnp.ndarray.sum"]], "swapaxes() (dpnp.ndarray method)": [[307, "dpnp.ndarray.swapaxes"]], "take() (dpnp.ndarray method)": [[308, "dpnp.ndarray.take"]], "transpose() (dpnp.ndarray method)": [[309, "dpnp.ndarray.transpose"]], "var() (dpnp.ndarray method)": [[310, "dpnp.ndarray.var"]], "negative() (in module dpnp)": [[311, "dpnp.negative"]], "nonzero() (in module dpnp)": [[312, "dpnp.nonzero"]], "not_equal() (in module dpnp)": [[313, "dpnp.not_equal"]], "ogrid (in module dpnp)": [[314, "dpnp.ogrid"]], "ones() (in module dpnp)": [[315, "dpnp.ones"]], "ones_like() (in module dpnp)": [[316, "dpnp.ones_like"]], "outer() (in module dpnp)": [[317, "dpnp.outer"]], "partition() (in module dpnp)": [[318, "dpnp.partition"]], "place() (in module dpnp)": [[319, "dpnp.place"]], "positive() (in module dpnp)": [[320, "dpnp.positive"]], "power() (in module dpnp)": [[321, "dpnp.power"]], "prod() (in module dpnp)": [[322, "dpnp.prod"]], "proj() (in module dpnp)": [[323, "dpnp.proj"]], "ptp() (in module dpnp)": [[324, "dpnp.ptp"]], "put() (in module dpnp)": [[325, "dpnp.put"]], "put_along_axis() (in module dpnp)": [[326, "dpnp.put_along_axis"]], "putmask() (in module dpnp)": [[327, "dpnp.putmask"]], "rad2deg() (in module dpnp)": [[328, "dpnp.rad2deg"]], "radians() (in module dpnp)": [[329, "dpnp.radians"]], "randomstate (class in dpnp.random)": [[330, "dpnp.random.RandomState"]], "__eq__() (dpnp.random.randomstate method)": [[330, "dpnp.random.RandomState.__eq__"]], "__ge__() (dpnp.random.randomstate method)": [[330, "dpnp.random.RandomState.__ge__"]], "__gt__() (dpnp.random.randomstate method)": [[330, "dpnp.random.RandomState.__gt__"]], "__le__() (dpnp.random.randomstate method)": [[330, "dpnp.random.RandomState.__le__"]], "__lt__() (dpnp.random.randomstate method)": [[330, "dpnp.random.RandomState.__lt__"]], "__ne__() (dpnp.random.randomstate method)": [[330, "dpnp.random.RandomState.__ne__"]], "get_state() (dpnp.random.randomstate method)": [[330, "dpnp.random.RandomState.get_state"]], "get_sycl_device() (dpnp.random.randomstate method)": [[330, "dpnp.random.RandomState.get_sycl_device"]], "get_sycl_queue() (dpnp.random.randomstate method)": [[330, "dpnp.random.RandomState.get_sycl_queue"]], "normal() (dpnp.random.randomstate method)": [[330, "dpnp.random.RandomState.normal"]], "rand() (dpnp.random.randomstate method)": [[330, "dpnp.random.RandomState.rand"]], "randint() (dpnp.random.randomstate method)": [[330, "dpnp.random.RandomState.randint"]], "randn() (dpnp.random.randomstate method)": [[330, "dpnp.random.RandomState.randn"]], "random_sample() (dpnp.random.randomstate method)": [[330, "dpnp.random.RandomState.random_sample"]], "standard_normal() (dpnp.random.randomstate method)": [[330, "dpnp.random.RandomState.standard_normal"]], "uniform() (dpnp.random.randomstate method)": [[330, "dpnp.random.RandomState.uniform"]], "beta() (in module dpnp.random)": [[331, "dpnp.random.beta"]], "binomial() (in module dpnp.random)": [[332, "dpnp.random.binomial"]], "bytes() (in module dpnp.random)": [[333, "dpnp.random.bytes"]], "chisquare() (in module dpnp.random)": [[334, "dpnp.random.chisquare"]], "choice() (in module dpnp.random)": [[335, "dpnp.random.choice"]], "dirichlet() (in module dpnp.random)": [[336, "dpnp.random.dirichlet"]], "exponential() (in module dpnp.random)": [[337, "dpnp.random.exponential"]], "f() (in module dpnp.random)": [[338, "dpnp.random.f"]], "gamma() (in module dpnp.random)": [[339, "dpnp.random.gamma"]], "geometric() (in module dpnp.random)": [[340, "dpnp.random.geometric"]], "gumbel() (in module dpnp.random)": [[341, "dpnp.random.gumbel"]], "hypergeometric() (in module dpnp.random)": [[342, "dpnp.random.hypergeometric"]], "laplace() (in module dpnp.random)": [[343, "dpnp.random.laplace"]], "logistic() (in module dpnp.random)": [[344, "dpnp.random.logistic"]], "lognormal() (in module dpnp.random)": [[345, "dpnp.random.lognormal"]], "logseries() (in module dpnp.random)": [[346, "dpnp.random.logseries"]], "multinomial() (in module dpnp.random)": [[347, "dpnp.random.multinomial"]], "multivariate_normal() (in module dpnp.random)": [[348, "dpnp.random.multivariate_normal"]], "negative_binomial() (in module dpnp.random)": [[349, "dpnp.random.negative_binomial"]], "noncentral_chisquare() (in module dpnp.random)": [[350, "dpnp.random.noncentral_chisquare"]], "noncentral_f() (in module dpnp.random)": [[351, "dpnp.random.noncentral_f"]], "normal() (in module dpnp.random)": [[352, "dpnp.random.normal"]], "pareto() (in module dpnp.random)": [[353, "dpnp.random.pareto"]], "permutation() (in module dpnp.random)": [[354, "dpnp.random.permutation"]], "poisson() (in module dpnp.random)": [[355, "dpnp.random.poisson"]], "power() (in module dpnp.random)": [[356, "dpnp.random.power"]], "rand() (in module dpnp.random)": [[357, "dpnp.random.rand"]], "randint() (in module dpnp.random)": [[358, "dpnp.random.randint"]], "randn() (in module dpnp.random)": [[359, "dpnp.random.randn"]], "random() (in module dpnp.random)": [[360, "dpnp.random.random"]], "random_integers() (in module dpnp.random)": [[361, "dpnp.random.random_integers"]], "random_sample() (in module dpnp.random)": [[362, "dpnp.random.random_sample"]], "ranf() (in module dpnp.random)": [[363, "dpnp.random.ranf"]], "rayleigh() (in module dpnp.random)": [[364, "dpnp.random.rayleigh"]], "sample() (in module dpnp.random)": [[365, "dpnp.random.sample"]], "seed() (in module dpnp.random)": [[366, "dpnp.random.seed"]], "shuffle() (in module dpnp.random)": [[367, "dpnp.random.shuffle"]], "standard_cauchy() (in module dpnp.random)": [[368, "dpnp.random.standard_cauchy"]], "standard_exponential() (in module dpnp.random)": [[369, "dpnp.random.standard_exponential"]], "standard_gamma() (in module dpnp.random)": [[370, "dpnp.random.standard_gamma"]], "standard_normal() (in module dpnp.random)": [[371, "dpnp.random.standard_normal"]], "standard_t() (in module dpnp.random)": [[372, "dpnp.random.standard_t"]], "triangular() (in module dpnp.random)": [[373, "dpnp.random.triangular"]], "uniform() (in module dpnp.random)": [[374, "dpnp.random.uniform"]], "vonmises() (in module dpnp.random)": [[375, "dpnp.random.vonmises"]], "wald() (in module dpnp.random)": [[376, "dpnp.random.wald"]], "weibull() (in module dpnp.random)": [[377, "dpnp.random.weibull"]], "zipf() (in module dpnp.random)": [[378, "dpnp.random.zipf"]], "ravel() (in module dpnp)": [[379, "dpnp.ravel"]], "real() (in module dpnp)": [[380, "dpnp.real"]], "reciprocal() (in module dpnp)": [[381, "dpnp.reciprocal"]], "reduce_hypot() (in module dpnp)": [[382, "dpnp.reduce_hypot"]], "remainder() (in module dpnp)": [[383, "dpnp.remainder"]], "repeat() (in module dpnp)": [[384, "dpnp.repeat"]], "reshape() (in module dpnp)": [[385, "dpnp.reshape"]], "result_type() (in module dpnp)": [[386, "dpnp.result_type"]], "right_shift() (in module dpnp)": [[387, "dpnp.right_shift"]], "rint() (in module dpnp)": [[388, "dpnp.rint"]], "roll() (in module dpnp)": [[389, "dpnp.roll"]], "rollaxis() (in module dpnp)": [[390, "dpnp.rollaxis"]], "round() (in module dpnp)": [[391, "dpnp.round"]], "row_stack() (in module dpnp)": [[392, "dpnp.row_stack"]], "rsqrt() (in module dpnp)": [[393, "dpnp.rsqrt"]], "searchsorted() (in module dpnp)": [[394, "dpnp.searchsorted"]], "select() (in module dpnp)": [[395, "dpnp.select"]], "shape() (in module dpnp)": [[396, "dpnp.shape"]], "sign() (in module dpnp)": [[397, "dpnp.sign"]], "signbit() (in module dpnp)": [[398, "dpnp.signbit"]], "sin() (in module dpnp)": [[399, "dpnp.sin"]], "sinh() (in module dpnp)": [[400, "dpnp.sinh"]], "sort() (in module dpnp)": [[401, "dpnp.sort"]], "sqrt() (in module dpnp)": [[402, "dpnp.sqrt"]], "square() (in module dpnp)": [[403, "dpnp.square"]], "squeeze() (in module dpnp)": [[404, "dpnp.squeeze"]], "stack() (in module dpnp)": [[405, "dpnp.stack"]], "std() (in module dpnp)": [[406, "dpnp.std"]], "subtract() (in module dpnp)": [[407, "dpnp.subtract"]], "sum() (in module dpnp)": [[408, "dpnp.sum"]], "swapaxes() (in module dpnp)": [[409, "dpnp.swapaxes"]], "take() (in module dpnp)": [[410, "dpnp.take"]], "take_along_axis() (in module dpnp)": [[411, "dpnp.take_along_axis"]], "tan() (in module dpnp)": [[412, "dpnp.tan"]], "tanh() (in module dpnp)": [[413, "dpnp.tanh"]], "tensordot() (in module dpnp)": [[414, "dpnp.tensordot"]], "tile() (in module dpnp)": [[415, "dpnp.tile"]], "trace() (in module dpnp)": [[416, "dpnp.trace"]], "transpose() (in module dpnp)": [[417, "dpnp.transpose"]], "trapz() (in module dpnp)": [[418, "dpnp.trapz"]], "tri() (in module dpnp)": [[419, "dpnp.tri"]], "tril() (in module dpnp)": [[420, "dpnp.tril"]], "tril_indices() (in module dpnp)": [[421, "dpnp.tril_indices"]], "tril_indices_from() (in module dpnp)": [[422, "dpnp.tril_indices_from"]], "triu() (in module dpnp)": [[423, "dpnp.triu"]], "triu_indices() (in module dpnp)": [[424, "dpnp.triu_indices"]], "triu_indices_from() (in module dpnp)": [[425, "dpnp.triu_indices_from"]], "true_divide() (in module dpnp)": [[426, "dpnp.true_divide"]], "trunc() (in module dpnp)": [[427, "dpnp.trunc"]], "unique() (in module dpnp)": [[428, "dpnp.unique"]], "unwrap() (in module dpnp)": [[429, "dpnp.unwrap"]], "vander() (in module dpnp)": [[430, "dpnp.vander"]], "var() (in module dpnp)": [[431, "dpnp.var"]], "vdot() (in module dpnp)": [[432, "dpnp.vdot"]], "vstack() (in module dpnp)": [[433, "dpnp.vstack"]], "where() (in module dpnp)": [[434, "dpnp.where"]], "zeros() (in module dpnp)": [[435, "dpnp.zeros"]], "zeros_like() (in module dpnp)": [[436, "dpnp.zeros_like"]], "dpnp.random": [[447, "module-dpnp.random"]]}})