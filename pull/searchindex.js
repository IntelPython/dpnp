Search.setIndex({"docnames": ["dpctl", "dpnp_backend_api", "index", "overview", "quick_start_guide", "reference/binary", "reference/comparison", "reference/creation", "reference/dtype", "reference/dtypes_table", "reference/fft", "reference/generated/dpnp.abs", "reference/generated/dpnp.absolute", "reference/generated/dpnp.add", "reference/generated/dpnp.all", "reference/generated/dpnp.allclose", "reference/generated/dpnp.amax", "reference/generated/dpnp.amin", "reference/generated/dpnp.angle", "reference/generated/dpnp.any", "reference/generated/dpnp.arange", "reference/generated/dpnp.arccos", "reference/generated/dpnp.arccosh", "reference/generated/dpnp.arcsin", "reference/generated/dpnp.arcsinh", "reference/generated/dpnp.arctan", "reference/generated/dpnp.arctan2", "reference/generated/dpnp.arctanh", "reference/generated/dpnp.argmax", "reference/generated/dpnp.argmin", "reference/generated/dpnp.argsort", "reference/generated/dpnp.around", "reference/generated/dpnp.array", "reference/generated/dpnp.array_equal", "reference/generated/dpnp.asanyarray", "reference/generated/dpnp.asarray", "reference/generated/dpnp.ascontiguousarray", "reference/generated/dpnp.asfarray", "reference/generated/dpnp.asfortranarray", "reference/generated/dpnp.asnumpy", "reference/generated/dpnp.astype", "reference/generated/dpnp.atleast_1d", "reference/generated/dpnp.atleast_2d", "reference/generated/dpnp.atleast_3d", "reference/generated/dpnp.average", "reference/generated/dpnp.bincount", "reference/generated/dpnp.bitwise_and", "reference/generated/dpnp.bitwise_not", "reference/generated/dpnp.bitwise_or", "reference/generated/dpnp.bitwise_xor", "reference/generated/dpnp.broadcast_arrays", "reference/generated/dpnp.broadcast_to", "reference/generated/dpnp.can_cast", "reference/generated/dpnp.cbrt", "reference/generated/dpnp.ceil", "reference/generated/dpnp.choose", "reference/generated/dpnp.clip", "reference/generated/dpnp.column_stack", "reference/generated/dpnp.concatenate", "reference/generated/dpnp.conj", "reference/generated/dpnp.conjugate", "reference/generated/dpnp.convolve", "reference/generated/dpnp.copy", "reference/generated/dpnp.copysign", "reference/generated/dpnp.copyto", "reference/generated/dpnp.correlate", "reference/generated/dpnp.cos", "reference/generated/dpnp.cosh", "reference/generated/dpnp.count_nonzero", "reference/generated/dpnp.cov", "reference/generated/dpnp.cross", "reference/generated/dpnp.cumprod", "reference/generated/dpnp.cumsum", "reference/generated/dpnp.deg2rad", "reference/generated/dpnp.degrees", "reference/generated/dpnp.diag", "reference/generated/dpnp.diag_indices", "reference/generated/dpnp.diag_indices_from", "reference/generated/dpnp.diagflat", "reference/generated/dpnp.diagonal", "reference/generated/dpnp.diff", "reference/generated/dpnp.divide", "reference/generated/dpnp.dot", "reference/generated/dpnp.dpnp_array.dpnp_array", "reference/generated/dpnp.dstack", "reference/generated/dpnp.dtype", "reference/generated/dpnp.ediff1d", "reference/generated/dpnp.einsum", "reference/generated/dpnp.einsum_path", "reference/generated/dpnp.empty", "reference/generated/dpnp.empty_like", "reference/generated/dpnp.equal", "reference/generated/dpnp.erf", "reference/generated/dpnp.exp", "reference/generated/dpnp.exp2", "reference/generated/dpnp.expand_dims", "reference/generated/dpnp.expm1", "reference/generated/dpnp.extract", "reference/generated/dpnp.eye", "reference/generated/dpnp.fabs", "reference/generated/dpnp.fft.fft", "reference/generated/dpnp.fft.fft2", "reference/generated/dpnp.fft.fftfreq", "reference/generated/dpnp.fft.fftn", "reference/generated/dpnp.fft.fftshift", "reference/generated/dpnp.fft.hfft", "reference/generated/dpnp.fft.ifft", "reference/generated/dpnp.fft.ifft2", "reference/generated/dpnp.fft.ifftn", "reference/generated/dpnp.fft.ifftshift", "reference/generated/dpnp.fft.ihfft", "reference/generated/dpnp.fft.irfft", "reference/generated/dpnp.fft.irfft2", "reference/generated/dpnp.fft.irfftn", "reference/generated/dpnp.fft.rfft", "reference/generated/dpnp.fft.rfft2", "reference/generated/dpnp.fft.rfftfreq", "reference/generated/dpnp.fft.rfftn", "reference/generated/dpnp.fill_diagonal", "reference/generated/dpnp.finfo", "reference/generated/dpnp.flatiter", "reference/generated/dpnp.flip", "reference/generated/dpnp.fliplr", "reference/generated/dpnp.flipud", "reference/generated/dpnp.floor", "reference/generated/dpnp.floor_divide", "reference/generated/dpnp.fmax", "reference/generated/dpnp.fmin", "reference/generated/dpnp.fmod", "reference/generated/dpnp.from_dlpack", "reference/generated/dpnp.frombuffer", "reference/generated/dpnp.fromfile", "reference/generated/dpnp.fromfunction", "reference/generated/dpnp.fromiter", "reference/generated/dpnp.fromstring", "reference/generated/dpnp.full", "reference/generated/dpnp.full_like", "reference/generated/dpnp.geomspace", "reference/generated/dpnp.get_include", "reference/generated/dpnp.gradient", "reference/generated/dpnp.greater", "reference/generated/dpnp.greater_equal", "reference/generated/dpnp.histogram", "reference/generated/dpnp.hstack", "reference/generated/dpnp.hypot", "reference/generated/dpnp.identity", "reference/generated/dpnp.iinfo", "reference/generated/dpnp.imag", "reference/generated/dpnp.indices", "reference/generated/dpnp.inner", "reference/generated/dpnp.invert", "reference/generated/dpnp.isclose", "reference/generated/dpnp.isfinite", "reference/generated/dpnp.isinf", "reference/generated/dpnp.isnan", "reference/generated/dpnp.isscalar", "reference/generated/dpnp.issubdtype", "reference/generated/dpnp.issubsctype", "reference/generated/dpnp.kron", "reference/generated/dpnp.left_shift", "reference/generated/dpnp.less", "reference/generated/dpnp.less_equal", "reference/generated/dpnp.linalg.cholesky", "reference/generated/dpnp.linalg.cond", "reference/generated/dpnp.linalg.det", "reference/generated/dpnp.linalg.eig", "reference/generated/dpnp.linalg.eigh", "reference/generated/dpnp.linalg.eigvals", "reference/generated/dpnp.linalg.inv", "reference/generated/dpnp.linalg.matrix_power", "reference/generated/dpnp.linalg.matrix_rank", "reference/generated/dpnp.linalg.multi_dot", "reference/generated/dpnp.linalg.norm", "reference/generated/dpnp.linalg.pinv", "reference/generated/dpnp.linalg.qr", "reference/generated/dpnp.linalg.slogdet", "reference/generated/dpnp.linalg.solve", "reference/generated/dpnp.linalg.svd", "reference/generated/dpnp.linspace", "reference/generated/dpnp.loadtxt", "reference/generated/dpnp.log", "reference/generated/dpnp.log10", "reference/generated/dpnp.log1p", "reference/generated/dpnp.log2", "reference/generated/dpnp.logaddexp", "reference/generated/dpnp.logical_and", "reference/generated/dpnp.logical_not", "reference/generated/dpnp.logical_or", "reference/generated/dpnp.logical_xor", "reference/generated/dpnp.logspace", "reference/generated/dpnp.logsumexp", "reference/generated/dpnp.matmul", "reference/generated/dpnp.max", "reference/generated/dpnp.maximum", "reference/generated/dpnp.mean", "reference/generated/dpnp.median", "reference/generated/dpnp.meshgrid", "reference/generated/dpnp.mgrid", "reference/generated/dpnp.min", "reference/generated/dpnp.minimum", "reference/generated/dpnp.mod", "reference/generated/dpnp.modf", "reference/generated/dpnp.moveaxis", "reference/generated/dpnp.multiply", "reference/generated/dpnp.nanargmax", "reference/generated/dpnp.nanargmin", "reference/generated/dpnp.nancumprod", "reference/generated/dpnp.nancumsum", "reference/generated/dpnp.nanmax", "reference/generated/dpnp.nanmean", "reference/generated/dpnp.nanmin", "reference/generated/dpnp.nanprod", "reference/generated/dpnp.nanstd", "reference/generated/dpnp.nansum", "reference/generated/dpnp.nanvar", "reference/generated/dpnp.ndarray", "reference/generated/dpnp.ndarray.T", "reference/generated/dpnp.ndarray.__abs__", "reference/generated/dpnp.ndarray.__add__", "reference/generated/dpnp.ndarray.__and__", "reference/generated/dpnp.ndarray.__complex__", "reference/generated/dpnp.ndarray.__copy__", "reference/generated/dpnp.ndarray.__eq__", "reference/generated/dpnp.ndarray.__float__", "reference/generated/dpnp.ndarray.__floordiv__", "reference/generated/dpnp.ndarray.__ge__", "reference/generated/dpnp.ndarray.__getitem__", "reference/generated/dpnp.ndarray.__gt__", "reference/generated/dpnp.ndarray.__iadd__", "reference/generated/dpnp.ndarray.__iand__", "reference/generated/dpnp.ndarray.__ifloordiv__", "reference/generated/dpnp.ndarray.__ilshift__", "reference/generated/dpnp.ndarray.__imod__", "reference/generated/dpnp.ndarray.__imul__", "reference/generated/dpnp.ndarray.__int__", "reference/generated/dpnp.ndarray.__invert__", "reference/generated/dpnp.ndarray.__ior__", "reference/generated/dpnp.ndarray.__ipow__", "reference/generated/dpnp.ndarray.__irshift__", "reference/generated/dpnp.ndarray.__isub__", "reference/generated/dpnp.ndarray.__itruediv__", "reference/generated/dpnp.ndarray.__ixor__", "reference/generated/dpnp.ndarray.__le__", "reference/generated/dpnp.ndarray.__len__", "reference/generated/dpnp.ndarray.__lshift__", "reference/generated/dpnp.ndarray.__lt__", "reference/generated/dpnp.ndarray.__mod__", "reference/generated/dpnp.ndarray.__mul__", "reference/generated/dpnp.ndarray.__ne__", "reference/generated/dpnp.ndarray.__neg__", "reference/generated/dpnp.ndarray.__new__", "reference/generated/dpnp.ndarray.__or__", "reference/generated/dpnp.ndarray.__pos__", "reference/generated/dpnp.ndarray.__pow__", "reference/generated/dpnp.ndarray.__repr__", "reference/generated/dpnp.ndarray.__rshift__", "reference/generated/dpnp.ndarray.__setitem__", "reference/generated/dpnp.ndarray.__str__", "reference/generated/dpnp.ndarray.__sub__", "reference/generated/dpnp.ndarray.__truediv__", "reference/generated/dpnp.ndarray.__xor__", "reference/generated/dpnp.ndarray.all", "reference/generated/dpnp.ndarray.any", "reference/generated/dpnp.ndarray.argmax", "reference/generated/dpnp.ndarray.argmin", "reference/generated/dpnp.ndarray.argsort", "reference/generated/dpnp.ndarray.astype", "reference/generated/dpnp.ndarray.choose", "reference/generated/dpnp.ndarray.clip", "reference/generated/dpnp.ndarray.conj", "reference/generated/dpnp.ndarray.conjugate", "reference/generated/dpnp.ndarray.copy", "reference/generated/dpnp.ndarray.cumsum", "reference/generated/dpnp.ndarray.diagonal", "reference/generated/dpnp.ndarray.dtype", "reference/generated/dpnp.ndarray.fill", "reference/generated/dpnp.ndarray.flags", "reference/generated/dpnp.ndarray.flat", "reference/generated/dpnp.ndarray.flatten", "reference/generated/dpnp.ndarray.imag", "reference/generated/dpnp.ndarray.item", "reference/generated/dpnp.ndarray.itemsize", "reference/generated/dpnp.ndarray.max", "reference/generated/dpnp.ndarray.mean", "reference/generated/dpnp.ndarray.min", "reference/generated/dpnp.ndarray.nbytes", "reference/generated/dpnp.ndarray.ndim", "reference/generated/dpnp.ndarray.nonzero", "reference/generated/dpnp.ndarray.partition", "reference/generated/dpnp.ndarray.prod", "reference/generated/dpnp.ndarray.put", "reference/generated/dpnp.ndarray.ravel", "reference/generated/dpnp.ndarray.real", "reference/generated/dpnp.ndarray.repeat", "reference/generated/dpnp.ndarray.reshape", "reference/generated/dpnp.ndarray.round", "reference/generated/dpnp.ndarray.shape", "reference/generated/dpnp.ndarray.size", "reference/generated/dpnp.ndarray.sort", "reference/generated/dpnp.ndarray.squeeze", "reference/generated/dpnp.ndarray.std", "reference/generated/dpnp.ndarray.strides", "reference/generated/dpnp.ndarray.sum", "reference/generated/dpnp.ndarray.swapaxes", "reference/generated/dpnp.ndarray.take", "reference/generated/dpnp.ndarray.transpose", "reference/generated/dpnp.ndarray.var", "reference/generated/dpnp.negative", "reference/generated/dpnp.nonzero", "reference/generated/dpnp.not_equal", "reference/generated/dpnp.ogrid", "reference/generated/dpnp.ones", "reference/generated/dpnp.ones_like", "reference/generated/dpnp.outer", "reference/generated/dpnp.partition", "reference/generated/dpnp.place", "reference/generated/dpnp.positive", "reference/generated/dpnp.power", "reference/generated/dpnp.prod", "reference/generated/dpnp.proj", "reference/generated/dpnp.ptp", "reference/generated/dpnp.put", "reference/generated/dpnp.put_along_axis", "reference/generated/dpnp.putmask", "reference/generated/dpnp.rad2deg", "reference/generated/dpnp.radians", "reference/generated/dpnp.random.RandomState", "reference/generated/dpnp.random.beta", "reference/generated/dpnp.random.binomial", "reference/generated/dpnp.random.bytes", "reference/generated/dpnp.random.chisquare", "reference/generated/dpnp.random.choice", "reference/generated/dpnp.random.dirichlet", "reference/generated/dpnp.random.exponential", "reference/generated/dpnp.random.f", "reference/generated/dpnp.random.gamma", "reference/generated/dpnp.random.geometric", "reference/generated/dpnp.random.gumbel", "reference/generated/dpnp.random.hypergeometric", "reference/generated/dpnp.random.laplace", "reference/generated/dpnp.random.logistic", "reference/generated/dpnp.random.lognormal", "reference/generated/dpnp.random.logseries", "reference/generated/dpnp.random.multinomial", "reference/generated/dpnp.random.multivariate_normal", "reference/generated/dpnp.random.negative_binomial", "reference/generated/dpnp.random.noncentral_chisquare", "reference/generated/dpnp.random.noncentral_f", "reference/generated/dpnp.random.normal", "reference/generated/dpnp.random.pareto", "reference/generated/dpnp.random.permutation", "reference/generated/dpnp.random.poisson", "reference/generated/dpnp.random.power", "reference/generated/dpnp.random.rand", "reference/generated/dpnp.random.randint", "reference/generated/dpnp.random.randn", "reference/generated/dpnp.random.random", "reference/generated/dpnp.random.random_integers", "reference/generated/dpnp.random.random_sample", "reference/generated/dpnp.random.ranf", "reference/generated/dpnp.random.rayleigh", "reference/generated/dpnp.random.sample", "reference/generated/dpnp.random.seed", "reference/generated/dpnp.random.shuffle", "reference/generated/dpnp.random.standard_cauchy", "reference/generated/dpnp.random.standard_exponential", "reference/generated/dpnp.random.standard_gamma", "reference/generated/dpnp.random.standard_normal", "reference/generated/dpnp.random.standard_t", "reference/generated/dpnp.random.triangular", "reference/generated/dpnp.random.uniform", "reference/generated/dpnp.random.vonmises", "reference/generated/dpnp.random.wald", "reference/generated/dpnp.random.weibull", "reference/generated/dpnp.random.zipf", "reference/generated/dpnp.ravel", "reference/generated/dpnp.real", "reference/generated/dpnp.reciprocal", "reference/generated/dpnp.reduce_hypot", "reference/generated/dpnp.remainder", "reference/generated/dpnp.repeat", "reference/generated/dpnp.reshape", "reference/generated/dpnp.result_type", "reference/generated/dpnp.right_shift", "reference/generated/dpnp.rint", "reference/generated/dpnp.roll", "reference/generated/dpnp.rollaxis", "reference/generated/dpnp.round", "reference/generated/dpnp.row_stack", "reference/generated/dpnp.rsqrt", "reference/generated/dpnp.searchsorted", "reference/generated/dpnp.select", "reference/generated/dpnp.shape", "reference/generated/dpnp.sign", "reference/generated/dpnp.signbit", "reference/generated/dpnp.sin", "reference/generated/dpnp.sinh", "reference/generated/dpnp.sort", "reference/generated/dpnp.sqrt", "reference/generated/dpnp.square", "reference/generated/dpnp.squeeze", "reference/generated/dpnp.stack", "reference/generated/dpnp.std", "reference/generated/dpnp.subtract", "reference/generated/dpnp.sum", "reference/generated/dpnp.swapaxes", "reference/generated/dpnp.take", "reference/generated/dpnp.take_along_axis", "reference/generated/dpnp.tan", "reference/generated/dpnp.tanh", "reference/generated/dpnp.tensordot", "reference/generated/dpnp.tile", "reference/generated/dpnp.trace", "reference/generated/dpnp.transpose", "reference/generated/dpnp.trapz", "reference/generated/dpnp.tri", "reference/generated/dpnp.tril", "reference/generated/dpnp.tril_indices", "reference/generated/dpnp.tril_indices_from", "reference/generated/dpnp.triu", "reference/generated/dpnp.triu_indices", "reference/generated/dpnp.triu_indices_from", "reference/generated/dpnp.true_divide", "reference/generated/dpnp.trunc", "reference/generated/dpnp.unique", "reference/generated/dpnp.unwrap", "reference/generated/dpnp.vander", "reference/generated/dpnp.var", "reference/generated/dpnp.vdot", "reference/generated/dpnp.vstack", "reference/generated/dpnp.where", "reference/generated/dpnp.zeros", "reference/generated/dpnp.zeros_like", "reference/index", "reference/indexing", "reference/linalg", "reference/logic", "reference/manipulation", "reference/math", "reference/misc", "reference/ndarray", "reference/pad", "reference/polynomials", "reference/random", "reference/routines", "reference/sorting", "reference/special", "reference/statistics", "reference/ufunc"], "filenames": ["dpctl.rst", "dpnp_backend_api.rst", "index.rst", "overview.rst", "quick_start_guide.rst", "reference/binary.rst", "reference/comparison.rst", "reference/creation.rst", "reference/dtype.rst", "reference/dtypes_table.rst", "reference/fft.rst", "reference/generated/dpnp.abs.rst", "reference/generated/dpnp.absolute.rst", "reference/generated/dpnp.add.rst", "reference/generated/dpnp.all.rst", "reference/generated/dpnp.allclose.rst", "reference/generated/dpnp.amax.rst", "reference/generated/dpnp.amin.rst", "reference/generated/dpnp.angle.rst", "reference/generated/dpnp.any.rst", "reference/generated/dpnp.arange.rst", "reference/generated/dpnp.arccos.rst", "reference/generated/dpnp.arccosh.rst", "reference/generated/dpnp.arcsin.rst", "reference/generated/dpnp.arcsinh.rst", "reference/generated/dpnp.arctan.rst", "reference/generated/dpnp.arctan2.rst", "reference/generated/dpnp.arctanh.rst", "reference/generated/dpnp.argmax.rst", "reference/generated/dpnp.argmin.rst", "reference/generated/dpnp.argsort.rst", "reference/generated/dpnp.around.rst", "reference/generated/dpnp.array.rst", "reference/generated/dpnp.array_equal.rst", "reference/generated/dpnp.asanyarray.rst", "reference/generated/dpnp.asarray.rst", "reference/generated/dpnp.ascontiguousarray.rst", "reference/generated/dpnp.asfarray.rst", "reference/generated/dpnp.asfortranarray.rst", "reference/generated/dpnp.asnumpy.rst", "reference/generated/dpnp.astype.rst", "reference/generated/dpnp.atleast_1d.rst", "reference/generated/dpnp.atleast_2d.rst", "reference/generated/dpnp.atleast_3d.rst", "reference/generated/dpnp.average.rst", "reference/generated/dpnp.bincount.rst", "reference/generated/dpnp.bitwise_and.rst", "reference/generated/dpnp.bitwise_not.rst", "reference/generated/dpnp.bitwise_or.rst", "reference/generated/dpnp.bitwise_xor.rst", "reference/generated/dpnp.broadcast_arrays.rst", "reference/generated/dpnp.broadcast_to.rst", "reference/generated/dpnp.can_cast.rst", "reference/generated/dpnp.cbrt.rst", "reference/generated/dpnp.ceil.rst", "reference/generated/dpnp.choose.rst", "reference/generated/dpnp.clip.rst", "reference/generated/dpnp.column_stack.rst", "reference/generated/dpnp.concatenate.rst", "reference/generated/dpnp.conj.rst", "reference/generated/dpnp.conjugate.rst", "reference/generated/dpnp.convolve.rst", "reference/generated/dpnp.copy.rst", "reference/generated/dpnp.copysign.rst", "reference/generated/dpnp.copyto.rst", "reference/generated/dpnp.correlate.rst", "reference/generated/dpnp.cos.rst", "reference/generated/dpnp.cosh.rst", "reference/generated/dpnp.count_nonzero.rst", "reference/generated/dpnp.cov.rst", "reference/generated/dpnp.cross.rst", "reference/generated/dpnp.cumprod.rst", "reference/generated/dpnp.cumsum.rst", "reference/generated/dpnp.deg2rad.rst", "reference/generated/dpnp.degrees.rst", "reference/generated/dpnp.diag.rst", "reference/generated/dpnp.diag_indices.rst", "reference/generated/dpnp.diag_indices_from.rst", "reference/generated/dpnp.diagflat.rst", "reference/generated/dpnp.diagonal.rst", "reference/generated/dpnp.diff.rst", "reference/generated/dpnp.divide.rst", "reference/generated/dpnp.dot.rst", "reference/generated/dpnp.dpnp_array.dpnp_array.rst", "reference/generated/dpnp.dstack.rst", "reference/generated/dpnp.dtype.rst", "reference/generated/dpnp.ediff1d.rst", "reference/generated/dpnp.einsum.rst", "reference/generated/dpnp.einsum_path.rst", "reference/generated/dpnp.empty.rst", "reference/generated/dpnp.empty_like.rst", "reference/generated/dpnp.equal.rst", "reference/generated/dpnp.erf.rst", "reference/generated/dpnp.exp.rst", "reference/generated/dpnp.exp2.rst", "reference/generated/dpnp.expand_dims.rst", "reference/generated/dpnp.expm1.rst", "reference/generated/dpnp.extract.rst", "reference/generated/dpnp.eye.rst", "reference/generated/dpnp.fabs.rst", "reference/generated/dpnp.fft.fft.rst", "reference/generated/dpnp.fft.fft2.rst", "reference/generated/dpnp.fft.fftfreq.rst", "reference/generated/dpnp.fft.fftn.rst", "reference/generated/dpnp.fft.fftshift.rst", "reference/generated/dpnp.fft.hfft.rst", "reference/generated/dpnp.fft.ifft.rst", "reference/generated/dpnp.fft.ifft2.rst", "reference/generated/dpnp.fft.ifftn.rst", "reference/generated/dpnp.fft.ifftshift.rst", "reference/generated/dpnp.fft.ihfft.rst", "reference/generated/dpnp.fft.irfft.rst", "reference/generated/dpnp.fft.irfft2.rst", "reference/generated/dpnp.fft.irfftn.rst", "reference/generated/dpnp.fft.rfft.rst", "reference/generated/dpnp.fft.rfft2.rst", "reference/generated/dpnp.fft.rfftfreq.rst", "reference/generated/dpnp.fft.rfftn.rst", "reference/generated/dpnp.fill_diagonal.rst", "reference/generated/dpnp.finfo.rst", "reference/generated/dpnp.flatiter.rst", "reference/generated/dpnp.flip.rst", "reference/generated/dpnp.fliplr.rst", "reference/generated/dpnp.flipud.rst", "reference/generated/dpnp.floor.rst", "reference/generated/dpnp.floor_divide.rst", "reference/generated/dpnp.fmax.rst", "reference/generated/dpnp.fmin.rst", "reference/generated/dpnp.fmod.rst", "reference/generated/dpnp.from_dlpack.rst", "reference/generated/dpnp.frombuffer.rst", "reference/generated/dpnp.fromfile.rst", "reference/generated/dpnp.fromfunction.rst", "reference/generated/dpnp.fromiter.rst", "reference/generated/dpnp.fromstring.rst", "reference/generated/dpnp.full.rst", "reference/generated/dpnp.full_like.rst", "reference/generated/dpnp.geomspace.rst", "reference/generated/dpnp.get_include.rst", "reference/generated/dpnp.gradient.rst", "reference/generated/dpnp.greater.rst", "reference/generated/dpnp.greater_equal.rst", "reference/generated/dpnp.histogram.rst", "reference/generated/dpnp.hstack.rst", "reference/generated/dpnp.hypot.rst", "reference/generated/dpnp.identity.rst", "reference/generated/dpnp.iinfo.rst", "reference/generated/dpnp.imag.rst", "reference/generated/dpnp.indices.rst", "reference/generated/dpnp.inner.rst", "reference/generated/dpnp.invert.rst", "reference/generated/dpnp.isclose.rst", "reference/generated/dpnp.isfinite.rst", "reference/generated/dpnp.isinf.rst", "reference/generated/dpnp.isnan.rst", "reference/generated/dpnp.isscalar.rst", "reference/generated/dpnp.issubdtype.rst", "reference/generated/dpnp.issubsctype.rst", "reference/generated/dpnp.kron.rst", "reference/generated/dpnp.left_shift.rst", "reference/generated/dpnp.less.rst", "reference/generated/dpnp.less_equal.rst", "reference/generated/dpnp.linalg.cholesky.rst", "reference/generated/dpnp.linalg.cond.rst", "reference/generated/dpnp.linalg.det.rst", "reference/generated/dpnp.linalg.eig.rst", "reference/generated/dpnp.linalg.eigh.rst", "reference/generated/dpnp.linalg.eigvals.rst", "reference/generated/dpnp.linalg.inv.rst", "reference/generated/dpnp.linalg.matrix_power.rst", "reference/generated/dpnp.linalg.matrix_rank.rst", "reference/generated/dpnp.linalg.multi_dot.rst", "reference/generated/dpnp.linalg.norm.rst", "reference/generated/dpnp.linalg.pinv.rst", "reference/generated/dpnp.linalg.qr.rst", "reference/generated/dpnp.linalg.slogdet.rst", "reference/generated/dpnp.linalg.solve.rst", "reference/generated/dpnp.linalg.svd.rst", "reference/generated/dpnp.linspace.rst", "reference/generated/dpnp.loadtxt.rst", "reference/generated/dpnp.log.rst", "reference/generated/dpnp.log10.rst", "reference/generated/dpnp.log1p.rst", "reference/generated/dpnp.log2.rst", "reference/generated/dpnp.logaddexp.rst", "reference/generated/dpnp.logical_and.rst", "reference/generated/dpnp.logical_not.rst", "reference/generated/dpnp.logical_or.rst", "reference/generated/dpnp.logical_xor.rst", "reference/generated/dpnp.logspace.rst", "reference/generated/dpnp.logsumexp.rst", "reference/generated/dpnp.matmul.rst", "reference/generated/dpnp.max.rst", "reference/generated/dpnp.maximum.rst", "reference/generated/dpnp.mean.rst", "reference/generated/dpnp.median.rst", "reference/generated/dpnp.meshgrid.rst", "reference/generated/dpnp.mgrid.rst", "reference/generated/dpnp.min.rst", "reference/generated/dpnp.minimum.rst", "reference/generated/dpnp.mod.rst", "reference/generated/dpnp.modf.rst", "reference/generated/dpnp.moveaxis.rst", "reference/generated/dpnp.multiply.rst", "reference/generated/dpnp.nanargmax.rst", "reference/generated/dpnp.nanargmin.rst", "reference/generated/dpnp.nancumprod.rst", "reference/generated/dpnp.nancumsum.rst", "reference/generated/dpnp.nanmax.rst", "reference/generated/dpnp.nanmean.rst", "reference/generated/dpnp.nanmin.rst", "reference/generated/dpnp.nanprod.rst", "reference/generated/dpnp.nanstd.rst", "reference/generated/dpnp.nansum.rst", "reference/generated/dpnp.nanvar.rst", "reference/generated/dpnp.ndarray.rst", "reference/generated/dpnp.ndarray.T.rst", "reference/generated/dpnp.ndarray.__abs__.rst", "reference/generated/dpnp.ndarray.__add__.rst", "reference/generated/dpnp.ndarray.__and__.rst", "reference/generated/dpnp.ndarray.__complex__.rst", "reference/generated/dpnp.ndarray.__copy__.rst", "reference/generated/dpnp.ndarray.__eq__.rst", "reference/generated/dpnp.ndarray.__float__.rst", "reference/generated/dpnp.ndarray.__floordiv__.rst", "reference/generated/dpnp.ndarray.__ge__.rst", "reference/generated/dpnp.ndarray.__getitem__.rst", "reference/generated/dpnp.ndarray.__gt__.rst", "reference/generated/dpnp.ndarray.__iadd__.rst", "reference/generated/dpnp.ndarray.__iand__.rst", "reference/generated/dpnp.ndarray.__ifloordiv__.rst", "reference/generated/dpnp.ndarray.__ilshift__.rst", "reference/generated/dpnp.ndarray.__imod__.rst", "reference/generated/dpnp.ndarray.__imul__.rst", "reference/generated/dpnp.ndarray.__int__.rst", "reference/generated/dpnp.ndarray.__invert__.rst", "reference/generated/dpnp.ndarray.__ior__.rst", "reference/generated/dpnp.ndarray.__ipow__.rst", "reference/generated/dpnp.ndarray.__irshift__.rst", "reference/generated/dpnp.ndarray.__isub__.rst", "reference/generated/dpnp.ndarray.__itruediv__.rst", "reference/generated/dpnp.ndarray.__ixor__.rst", "reference/generated/dpnp.ndarray.__le__.rst", "reference/generated/dpnp.ndarray.__len__.rst", "reference/generated/dpnp.ndarray.__lshift__.rst", "reference/generated/dpnp.ndarray.__lt__.rst", "reference/generated/dpnp.ndarray.__mod__.rst", "reference/generated/dpnp.ndarray.__mul__.rst", "reference/generated/dpnp.ndarray.__ne__.rst", "reference/generated/dpnp.ndarray.__neg__.rst", "reference/generated/dpnp.ndarray.__new__.rst", "reference/generated/dpnp.ndarray.__or__.rst", "reference/generated/dpnp.ndarray.__pos__.rst", "reference/generated/dpnp.ndarray.__pow__.rst", "reference/generated/dpnp.ndarray.__repr__.rst", "reference/generated/dpnp.ndarray.__rshift__.rst", "reference/generated/dpnp.ndarray.__setitem__.rst", "reference/generated/dpnp.ndarray.__str__.rst", "reference/generated/dpnp.ndarray.__sub__.rst", "reference/generated/dpnp.ndarray.__truediv__.rst", "reference/generated/dpnp.ndarray.__xor__.rst", "reference/generated/dpnp.ndarray.all.rst", "reference/generated/dpnp.ndarray.any.rst", "reference/generated/dpnp.ndarray.argmax.rst", "reference/generated/dpnp.ndarray.argmin.rst", "reference/generated/dpnp.ndarray.argsort.rst", "reference/generated/dpnp.ndarray.astype.rst", "reference/generated/dpnp.ndarray.choose.rst", "reference/generated/dpnp.ndarray.clip.rst", "reference/generated/dpnp.ndarray.conj.rst", "reference/generated/dpnp.ndarray.conjugate.rst", "reference/generated/dpnp.ndarray.copy.rst", "reference/generated/dpnp.ndarray.cumsum.rst", "reference/generated/dpnp.ndarray.diagonal.rst", "reference/generated/dpnp.ndarray.dtype.rst", "reference/generated/dpnp.ndarray.fill.rst", "reference/generated/dpnp.ndarray.flags.rst", "reference/generated/dpnp.ndarray.flat.rst", "reference/generated/dpnp.ndarray.flatten.rst", "reference/generated/dpnp.ndarray.imag.rst", "reference/generated/dpnp.ndarray.item.rst", "reference/generated/dpnp.ndarray.itemsize.rst", "reference/generated/dpnp.ndarray.max.rst", "reference/generated/dpnp.ndarray.mean.rst", "reference/generated/dpnp.ndarray.min.rst", "reference/generated/dpnp.ndarray.nbytes.rst", "reference/generated/dpnp.ndarray.ndim.rst", "reference/generated/dpnp.ndarray.nonzero.rst", "reference/generated/dpnp.ndarray.partition.rst", "reference/generated/dpnp.ndarray.prod.rst", "reference/generated/dpnp.ndarray.put.rst", "reference/generated/dpnp.ndarray.ravel.rst", "reference/generated/dpnp.ndarray.real.rst", "reference/generated/dpnp.ndarray.repeat.rst", "reference/generated/dpnp.ndarray.reshape.rst", "reference/generated/dpnp.ndarray.round.rst", "reference/generated/dpnp.ndarray.shape.rst", "reference/generated/dpnp.ndarray.size.rst", "reference/generated/dpnp.ndarray.sort.rst", "reference/generated/dpnp.ndarray.squeeze.rst", "reference/generated/dpnp.ndarray.std.rst", "reference/generated/dpnp.ndarray.strides.rst", "reference/generated/dpnp.ndarray.sum.rst", "reference/generated/dpnp.ndarray.swapaxes.rst", "reference/generated/dpnp.ndarray.take.rst", "reference/generated/dpnp.ndarray.transpose.rst", "reference/generated/dpnp.ndarray.var.rst", "reference/generated/dpnp.negative.rst", "reference/generated/dpnp.nonzero.rst", "reference/generated/dpnp.not_equal.rst", "reference/generated/dpnp.ogrid.rst", "reference/generated/dpnp.ones.rst", "reference/generated/dpnp.ones_like.rst", "reference/generated/dpnp.outer.rst", "reference/generated/dpnp.partition.rst", "reference/generated/dpnp.place.rst", "reference/generated/dpnp.positive.rst", "reference/generated/dpnp.power.rst", "reference/generated/dpnp.prod.rst", "reference/generated/dpnp.proj.rst", "reference/generated/dpnp.ptp.rst", "reference/generated/dpnp.put.rst", "reference/generated/dpnp.put_along_axis.rst", "reference/generated/dpnp.putmask.rst", "reference/generated/dpnp.rad2deg.rst", "reference/generated/dpnp.radians.rst", "reference/generated/dpnp.random.RandomState.rst", "reference/generated/dpnp.random.beta.rst", "reference/generated/dpnp.random.binomial.rst", "reference/generated/dpnp.random.bytes.rst", "reference/generated/dpnp.random.chisquare.rst", "reference/generated/dpnp.random.choice.rst", "reference/generated/dpnp.random.dirichlet.rst", "reference/generated/dpnp.random.exponential.rst", "reference/generated/dpnp.random.f.rst", "reference/generated/dpnp.random.gamma.rst", "reference/generated/dpnp.random.geometric.rst", "reference/generated/dpnp.random.gumbel.rst", "reference/generated/dpnp.random.hypergeometric.rst", "reference/generated/dpnp.random.laplace.rst", "reference/generated/dpnp.random.logistic.rst", "reference/generated/dpnp.random.lognormal.rst", "reference/generated/dpnp.random.logseries.rst", "reference/generated/dpnp.random.multinomial.rst", "reference/generated/dpnp.random.multivariate_normal.rst", "reference/generated/dpnp.random.negative_binomial.rst", "reference/generated/dpnp.random.noncentral_chisquare.rst", "reference/generated/dpnp.random.noncentral_f.rst", "reference/generated/dpnp.random.normal.rst", "reference/generated/dpnp.random.pareto.rst", "reference/generated/dpnp.random.permutation.rst", "reference/generated/dpnp.random.poisson.rst", "reference/generated/dpnp.random.power.rst", "reference/generated/dpnp.random.rand.rst", "reference/generated/dpnp.random.randint.rst", "reference/generated/dpnp.random.randn.rst", "reference/generated/dpnp.random.random.rst", "reference/generated/dpnp.random.random_integers.rst", "reference/generated/dpnp.random.random_sample.rst", "reference/generated/dpnp.random.ranf.rst", "reference/generated/dpnp.random.rayleigh.rst", "reference/generated/dpnp.random.sample.rst", "reference/generated/dpnp.random.seed.rst", "reference/generated/dpnp.random.shuffle.rst", "reference/generated/dpnp.random.standard_cauchy.rst", "reference/generated/dpnp.random.standard_exponential.rst", "reference/generated/dpnp.random.standard_gamma.rst", "reference/generated/dpnp.random.standard_normal.rst", "reference/generated/dpnp.random.standard_t.rst", "reference/generated/dpnp.random.triangular.rst", "reference/generated/dpnp.random.uniform.rst", "reference/generated/dpnp.random.vonmises.rst", "reference/generated/dpnp.random.wald.rst", "reference/generated/dpnp.random.weibull.rst", "reference/generated/dpnp.random.zipf.rst", "reference/generated/dpnp.ravel.rst", "reference/generated/dpnp.real.rst", "reference/generated/dpnp.reciprocal.rst", "reference/generated/dpnp.reduce_hypot.rst", "reference/generated/dpnp.remainder.rst", "reference/generated/dpnp.repeat.rst", "reference/generated/dpnp.reshape.rst", "reference/generated/dpnp.result_type.rst", "reference/generated/dpnp.right_shift.rst", "reference/generated/dpnp.rint.rst", "reference/generated/dpnp.roll.rst", "reference/generated/dpnp.rollaxis.rst", "reference/generated/dpnp.round.rst", "reference/generated/dpnp.row_stack.rst", "reference/generated/dpnp.rsqrt.rst", "reference/generated/dpnp.searchsorted.rst", "reference/generated/dpnp.select.rst", "reference/generated/dpnp.shape.rst", "reference/generated/dpnp.sign.rst", "reference/generated/dpnp.signbit.rst", "reference/generated/dpnp.sin.rst", "reference/generated/dpnp.sinh.rst", "reference/generated/dpnp.sort.rst", "reference/generated/dpnp.sqrt.rst", "reference/generated/dpnp.square.rst", "reference/generated/dpnp.squeeze.rst", "reference/generated/dpnp.stack.rst", "reference/generated/dpnp.std.rst", "reference/generated/dpnp.subtract.rst", "reference/generated/dpnp.sum.rst", "reference/generated/dpnp.swapaxes.rst", "reference/generated/dpnp.take.rst", "reference/generated/dpnp.take_along_axis.rst", "reference/generated/dpnp.tan.rst", "reference/generated/dpnp.tanh.rst", "reference/generated/dpnp.tensordot.rst", "reference/generated/dpnp.tile.rst", "reference/generated/dpnp.trace.rst", "reference/generated/dpnp.transpose.rst", "reference/generated/dpnp.trapz.rst", "reference/generated/dpnp.tri.rst", "reference/generated/dpnp.tril.rst", "reference/generated/dpnp.tril_indices.rst", "reference/generated/dpnp.tril_indices_from.rst", "reference/generated/dpnp.triu.rst", "reference/generated/dpnp.triu_indices.rst", "reference/generated/dpnp.triu_indices_from.rst", "reference/generated/dpnp.true_divide.rst", "reference/generated/dpnp.trunc.rst", "reference/generated/dpnp.unique.rst", "reference/generated/dpnp.unwrap.rst", "reference/generated/dpnp.vander.rst", "reference/generated/dpnp.var.rst", "reference/generated/dpnp.vdot.rst", "reference/generated/dpnp.vstack.rst", "reference/generated/dpnp.where.rst", "reference/generated/dpnp.zeros.rst", "reference/generated/dpnp.zeros_like.rst", "reference/index.rst", "reference/indexing.rst", "reference/linalg.rst", "reference/logic.rst", "reference/manipulation.rst", "reference/math.rst", "reference/misc.rst", "reference/ndarray.rst", "reference/pad.rst", "reference/polynomials.rst", "reference/random.rst", "reference/routines.rst", "reference/sorting.rst", "reference/special.rst", "reference/statistics.rst", "reference/ufunc.rst"], "titles": ["Interplay with the Data Parallel Control Library", "C++ backend API Reference", "Data Parallel Extension for NumPy*", "Overview", "Quick Start Guide", "Binary Operations", "Comparison Table NumPy/ DPNP/ CuPy", "Array creation routines", "Data type routines", "Available array data types", "FFT Functions", "dpnp.abs", "dpnp.absolute", "dpnp.add", "dpnp.all", "dpnp.allclose", "dpnp.amax", "dpnp.amin", "dpnp.angle", "dpnp.any", "dpnp.arange", "dpnp.arccos", "dpnp.arccosh", "dpnp.arcsin", "dpnp.arcsinh", "dpnp.arctan", "dpnp.arctan2", "dpnp.arctanh", "dpnp.argmax", "dpnp.argmin", "dpnp.argsort", "dpnp.around", "dpnp.array", "dpnp.array_equal", "dpnp.asanyarray", "dpnp.asarray", "dpnp.ascontiguousarray", "dpnp.asfarray", "dpnp.asfortranarray", "dpnp.asnumpy", "dpnp.astype", "dpnp.atleast_1d", "dpnp.atleast_2d", "dpnp.atleast_3d", "dpnp.average", "dpnp.bincount", "dpnp.bitwise_and", "dpnp.bitwise_not", "dpnp.bitwise_or", "dpnp.bitwise_xor", "dpnp.broadcast_arrays", "dpnp.broadcast_to", "dpnp.can_cast", "dpnp.cbrt", "dpnp.ceil", "dpnp.choose", "dpnp.clip", "dpnp.column_stack", "dpnp.concatenate", "dpnp.conj", "dpnp.conjugate", "dpnp.convolve", "dpnp.copy", "dpnp.copysign", "dpnp.copyto", "dpnp.correlate", "dpnp.cos", "dpnp.cosh", "dpnp.count_nonzero", "dpnp.cov", "dpnp.cross", "dpnp.cumprod", "dpnp.cumsum", "dpnp.deg2rad", "dpnp.degrees", "dpnp.diag", "dpnp.diag_indices", "dpnp.diag_indices_from", "dpnp.diagflat", "dpnp.diagonal", "dpnp.diff", "dpnp.divide", "dpnp.dot", "dpnp.dpnp_array.dpnp_array", "dpnp.dstack", "dpnp.dtype", "dpnp.ediff1d", "dpnp.einsum", "dpnp.einsum_path", "dpnp.empty", "dpnp.empty_like", "dpnp.equal", "dpnp.erf", "dpnp.exp", "dpnp.exp2", "dpnp.expand_dims", "dpnp.expm1", "dpnp.extract", "dpnp.eye", "dpnp.fabs", "dpnp.fft.fft", "dpnp.fft.fft2", "dpnp.fft.fftfreq", "dpnp.fft.fftn", "dpnp.fft.fftshift", "dpnp.fft.hfft", "dpnp.fft.ifft", "dpnp.fft.ifft2", "dpnp.fft.ifftn", "dpnp.fft.ifftshift", "dpnp.fft.ihfft", "dpnp.fft.irfft", "dpnp.fft.irfft2", "dpnp.fft.irfftn", "dpnp.fft.rfft", "dpnp.fft.rfft2", "dpnp.fft.rfftfreq", "dpnp.fft.rfftn", "dpnp.fill_diagonal", "dpnp.finfo", "dpnp.flatiter", "dpnp.flip", "dpnp.fliplr", "dpnp.flipud", "dpnp.floor", "dpnp.floor_divide", "dpnp.fmax", "dpnp.fmin", "dpnp.fmod", "dpnp.from_dlpack", "dpnp.frombuffer", "dpnp.fromfile", "dpnp.fromfunction", "dpnp.fromiter", "dpnp.fromstring", "dpnp.full", "dpnp.full_like", "dpnp.geomspace", "dpnp.get_include", "dpnp.gradient", "dpnp.greater", "dpnp.greater_equal", "dpnp.histogram", "dpnp.hstack", "dpnp.hypot", "dpnp.identity", "dpnp.iinfo", "dpnp.imag", "dpnp.indices", "dpnp.inner", "dpnp.invert", "dpnp.isclose", "dpnp.isfinite", "dpnp.isinf", "dpnp.isnan", "dpnp.isscalar", "dpnp.issubdtype", "dpnp.issubsctype", "dpnp.kron", "dpnp.left_shift", "dpnp.less", "dpnp.less_equal", "dpnp.linalg.cholesky", "dpnp.linalg.cond", "dpnp.linalg.det", "dpnp.linalg.eig", "dpnp.linalg.eigh", "dpnp.linalg.eigvals", "dpnp.linalg.inv", "dpnp.linalg.matrix_power", "dpnp.linalg.matrix_rank", "dpnp.linalg.multi_dot", "dpnp.linalg.norm", "dpnp.linalg.pinv", "dpnp.linalg.qr", "dpnp.linalg.slogdet", "dpnp.linalg.solve", "dpnp.linalg.svd", "dpnp.linspace", "dpnp.loadtxt", "dpnp.log", "dpnp.log10", "dpnp.log1p", "dpnp.log2", "dpnp.logaddexp", "dpnp.logical_and", "dpnp.logical_not", "dpnp.logical_or", "dpnp.logical_xor", "dpnp.logspace", "dpnp.logsumexp", "dpnp.matmul", "dpnp.max", "dpnp.maximum", "dpnp.mean", "dpnp.median", "dpnp.meshgrid", "dpnp.mgrid", "dpnp.min", "dpnp.minimum", "dpnp.mod", "dpnp.modf", "dpnp.moveaxis", "dpnp.multiply", "dpnp.nanargmax", "dpnp.nanargmin", "dpnp.nancumprod", "dpnp.nancumsum", "dpnp.nanmax", "dpnp.nanmean", "dpnp.nanmin", "dpnp.nanprod", "dpnp.nanstd", "dpnp.nansum", "dpnp.nanvar", "dpnp.ndarray", "dpnp.ndarray.T", "dpnp.ndarray.__abs__", "dpnp.ndarray.__add__", "dpnp.ndarray.__and__", "dpnp.ndarray.__complex__", "dpnp.ndarray.__copy__", "dpnp.ndarray.__eq__", "dpnp.ndarray.__float__", "dpnp.ndarray.__floordiv__", "dpnp.ndarray.__ge__", "dpnp.ndarray.__getitem__", "dpnp.ndarray.__gt__", "dpnp.ndarray.__iadd__", "dpnp.ndarray.__iand__", "dpnp.ndarray.__ifloordiv__", "dpnp.ndarray.__ilshift__", "dpnp.ndarray.__imod__", "dpnp.ndarray.__imul__", "dpnp.ndarray.__int__", "dpnp.ndarray.__invert__", "dpnp.ndarray.__ior__", "dpnp.ndarray.__ipow__", "dpnp.ndarray.__irshift__", "dpnp.ndarray.__isub__", "dpnp.ndarray.__itruediv__", "dpnp.ndarray.__ixor__", "dpnp.ndarray.__le__", "dpnp.ndarray.__len__", "dpnp.ndarray.__lshift__", "dpnp.ndarray.__lt__", "dpnp.ndarray.__mod__", "dpnp.ndarray.__mul__", "dpnp.ndarray.__ne__", "dpnp.ndarray.__neg__", "dpnp.ndarray.__new__", "dpnp.ndarray.__or__", "dpnp.ndarray.__pos__", "dpnp.ndarray.__pow__", "dpnp.ndarray.__repr__", "dpnp.ndarray.__rshift__", "dpnp.ndarray.__setitem__", "dpnp.ndarray.__str__", "dpnp.ndarray.__sub__", "dpnp.ndarray.__truediv__", "dpnp.ndarray.__xor__", "dpnp.ndarray.all", "dpnp.ndarray.any", "dpnp.ndarray.argmax", "dpnp.ndarray.argmin", "dpnp.ndarray.argsort", "dpnp.ndarray.astype", "dpnp.ndarray.choose", "dpnp.ndarray.clip", "dpnp.ndarray.conj", "dpnp.ndarray.conjugate", "dpnp.ndarray.copy", "dpnp.ndarray.cumsum", "dpnp.ndarray.diagonal", "dpnp.ndarray.dtype", "dpnp.ndarray.fill", "dpnp.ndarray.flags", "dpnp.ndarray.flat", "dpnp.ndarray.flatten", "dpnp.ndarray.imag", "dpnp.ndarray.item", "dpnp.ndarray.itemsize", "dpnp.ndarray.max", "dpnp.ndarray.mean", "dpnp.ndarray.min", "dpnp.ndarray.nbytes", "dpnp.ndarray.ndim", "dpnp.ndarray.nonzero", "dpnp.ndarray.partition", "dpnp.ndarray.prod", "dpnp.ndarray.put", "dpnp.ndarray.ravel", "dpnp.ndarray.real", "dpnp.ndarray.repeat", "dpnp.ndarray.reshape", "dpnp.ndarray.round", "dpnp.ndarray.shape", "dpnp.ndarray.size", "dpnp.ndarray.sort", "dpnp.ndarray.squeeze", "dpnp.ndarray.std", "dpnp.ndarray.strides", "dpnp.ndarray.sum", "dpnp.ndarray.swapaxes", "dpnp.ndarray.take", "dpnp.ndarray.transpose", "dpnp.ndarray.var", "dpnp.negative", "dpnp.nonzero", "dpnp.not_equal", "dpnp.ogrid", "dpnp.ones", "dpnp.ones_like", "dpnp.outer", "dpnp.partition", "dpnp.place", "dpnp.positive", "dpnp.power", "dpnp.prod", "dpnp.proj", "dpnp.ptp", "dpnp.put", "dpnp.put_along_axis", "dpnp.putmask", "dpnp.rad2deg", "dpnp.radians", "dpnp.random.RandomState", "dpnp.random.beta", "dpnp.random.binomial", "dpnp.random.bytes", "dpnp.random.chisquare", "dpnp.random.choice", "dpnp.random.dirichlet", "dpnp.random.exponential", "dpnp.random.f", "dpnp.random.gamma", "dpnp.random.geometric", "dpnp.random.gumbel", "dpnp.random.hypergeometric", "dpnp.random.laplace", "dpnp.random.logistic", "dpnp.random.lognormal", "dpnp.random.logseries", "dpnp.random.multinomial", "dpnp.random.multivariate_normal", "dpnp.random.negative_binomial", "dpnp.random.noncentral_chisquare", "dpnp.random.noncentral_f", "dpnp.random.normal", "dpnp.random.pareto", "dpnp.random.permutation", "dpnp.random.poisson", "dpnp.random.power", "dpnp.random.rand", "dpnp.random.randint", "dpnp.random.randn", "dpnp.random.random", "dpnp.random.random_integers", "dpnp.random.random_sample", "dpnp.random.ranf", "dpnp.random.rayleigh", "dpnp.random.sample", "dpnp.random.seed", "dpnp.random.shuffle", "dpnp.random.standard_cauchy", "dpnp.random.standard_exponential", "dpnp.random.standard_gamma", "dpnp.random.standard_normal", "dpnp.random.standard_t", "dpnp.random.triangular", "dpnp.random.uniform", "dpnp.random.vonmises", "dpnp.random.wald", "dpnp.random.weibull", "dpnp.random.zipf", "dpnp.ravel", "dpnp.real", "dpnp.reciprocal", "dpnp.reduce_hypot", "dpnp.remainder", "dpnp.repeat", "dpnp.reshape", "dpnp.result_type", "dpnp.right_shift", "dpnp.rint", "dpnp.roll", "dpnp.rollaxis", "dpnp.round", "dpnp.row_stack", "dpnp.rsqrt", "dpnp.searchsorted", "dpnp.select", "dpnp.shape", "dpnp.sign", "dpnp.signbit", "dpnp.sin", "dpnp.sinh", "dpnp.sort", "dpnp.sqrt", "dpnp.square", "dpnp.squeeze", "dpnp.stack", "dpnp.std", "dpnp.subtract", "dpnp.sum", "dpnp.swapaxes", "dpnp.take", "dpnp.take_along_axis", "dpnp.tan", "dpnp.tanh", "dpnp.tensordot", "dpnp.tile", "dpnp.trace", "dpnp.transpose", "dpnp.trapz", "dpnp.tri", "dpnp.tril", "dpnp.tril_indices", "dpnp.tril_indices_from", "dpnp.triu", "dpnp.triu_indices", "dpnp.triu_indices_from", "dpnp.true_divide", "dpnp.trunc", "dpnp.unique", "dpnp.unwrap", "dpnp.vander", "dpnp.var", "dpnp.vdot", "dpnp.vstack", "dpnp.where", "dpnp.zeros", "dpnp.zeros_like", "API Reference", "Array Indexing Routines", "Linear Algebra", "Logic Functions", "Array Manipulation Routines", "Mathematical Functions", "Miscellaneous routines", "Multi-Dimensional Array (ndarray)", "Padding", "Polynomials", "Random Sampling (<code class=\"docutils literal notranslate\"><span class=\"pre\">dpnp.random</span></code>)", "Routines", "Sorting, Searching, and Counting", "Special Functions", "Statistical Functions", "Universal Functions (ufunc)"], "terms": {"provid": [0, 6, 28, 29, 58, 64, 83, 95, 133, 143, 190, 192, 198, 204, 205, 208, 210, 326, 354, 357, 378, 388, 401, 406, 429, 430, 448], "api": [0, 2, 3, 6, 20, 32, 34, 35, 36, 37, 38, 62, 75, 78, 85, 89, 90, 98, 130, 131, 132, 133, 134, 135, 136, 137, 145, 148, 178, 179, 189, 197, 310, 311, 312, 326, 348, 353, 354, 355, 356, 357, 358, 359, 361, 362, 367, 370, 415, 426, 431, 432], "manag": 0, "specif": [0, 4, 85, 132], "sycl": [0, 3, 20, 32, 34, 35, 36, 37, 38, 62, 75, 78, 89, 90, 98, 130, 131, 132, 133, 134, 135, 136, 137, 145, 148, 178, 179, 189, 197, 310, 311, 312, 326, 348, 353, 354, 355, 356, 357, 358, 359, 361, 362, 367, 370, 415, 426, 431, 432], "resourc": 0, "base": [0, 4, 85, 137, 177, 180, 181, 182, 183, 189, 191, 315, 317, 321, 323], "python": [0, 2, 3, 37, 83, 85, 129, 280, 440], "packag": [0, 3], "an": [0, 3, 4, 11, 12, 14, 16, 17, 19, 20, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 56, 57, 58, 62, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 95, 97, 98, 118, 119, 121, 122, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 143, 145, 146, 148, 149, 150, 159, 164, 170, 171, 172, 174, 175, 178, 179, 189, 190, 192, 193, 194, 197, 198, 199, 201, 202, 204, 205, 208, 209, 210, 212, 213, 214, 221, 265, 267, 268, 271, 280, 282, 288, 290, 293, 294, 296, 298, 299, 301, 303, 304, 305, 310, 311, 312, 314, 315, 317, 320, 321, 322, 323, 326, 328, 333, 334, 336, 345, 348, 353, 354, 355, 356, 357, 358, 359, 361, 362, 367, 370, 374, 375, 377, 378, 380, 381, 382, 383, 385, 386, 388, 389, 391, 392, 393, 394, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 410, 411, 413, 415, 416, 417, 419, 420, 422, 424, 426, 427, 429, 430, 431, 432, 440], "below": [0, 4, 9, 75, 78, 85, 170, 172, 415, 416, 419, 440], "demonstr": [0, 4, 85], "how": [0, 4, 85, 406], "extens": [0, 1, 3, 4, 9, 138, 179, 433], "numpi": [0, 1, 3, 4, 9, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 266, 269, 270, 274, 279, 280, 290, 292, 294, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 440, 444], "can": [0, 3, 4, 13, 15, 20, 26, 30, 32, 34, 35, 36, 37, 38, 39, 40, 44, 46, 47, 48, 49, 52, 62, 63, 70, 75, 76, 78, 81, 82, 83, 85, 89, 90, 91, 98, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 140, 141, 143, 144, 145, 148, 149, 150, 158, 159, 160, 161, 162, 168, 178, 179, 184, 185, 187, 188, 189, 191, 193, 197, 199, 200, 203, 266, 298, 307, 308, 309, 310, 311, 312, 313, 316, 317, 322, 326, 348, 353, 354, 355, 356, 357, 358, 359, 361, 362, 367, 370, 379, 381, 383, 397, 403, 406, 407, 410, 415, 420, 422, 426, 428, 431, 432, 440], "easili": 0, "combin": [0, 85, 95], "devic": [0, 2, 3, 20, 32, 34, 35, 36, 37, 38, 44, 62, 75, 78, 83, 89, 90, 98, 129, 130, 131, 132, 133, 134, 135, 136, 137, 145, 148, 178, 179, 189, 190, 191, 194, 197, 209, 212, 213, 214, 310, 311, 312, 326, 348, 353, 354, 355, 356, 357, 358, 359, 361, 362, 367, 370, 377, 378, 400, 402, 404, 415, 426, 427, 431, 432], "interfac": [0, 130], "dpctl": [0, 4, 11, 12, 13, 14, 15, 19, 20, 21, 22, 23, 24, 25, 26, 27, 31, 32, 34, 35, 36, 37, 38, 46, 47, 48, 49, 54, 59, 60, 62, 63, 66, 67, 68, 75, 78, 81, 83, 89, 90, 91, 93, 96, 97, 98, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 140, 141, 144, 145, 148, 150, 152, 153, 154, 159, 160, 161, 166, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 193, 197, 199, 200, 203, 204, 205, 208, 210, 211, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 326, 348, 353, 354, 355, 356, 357, 358, 359, 361, 362, 367, 370, 379, 383, 384, 387, 393, 394, 395, 396, 398, 399, 403, 406, 408, 409, 415, 422, 423, 426, 430, 431, 432], "liter": 0, "queue": [0, 20, 32, 34, 35, 36, 37, 38, 62, 75, 78, 89, 90, 98, 130, 131, 132, 133, 134, 135, 136, 137, 145, 148, 178, 179, 189, 197, 310, 311, 312, 326, 348, 353, 354, 355, 356, 357, 358, 359, 361, 362, 367, 370, 415, 426, 431, 432], "from": [0, 3, 18, 28, 29, 30, 34, 35, 50, 52, 55, 58, 64, 73, 74, 83, 84, 85, 94, 97, 121, 129, 130, 131, 132, 133, 134, 143, 145, 170, 171, 179, 190, 196, 213, 257, 267, 271, 299, 304, 317, 322, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 357, 358, 360, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 378, 381, 382, 388, 391, 399, 400, 401, 404, 406, 407, 425, 426, 429, 430, 444], "allow": [0, 40, 83, 266, 294, 440], "set": [0, 28, 29, 32, 40, 55, 76, 78, 83, 85, 89, 135, 145, 148, 170, 172, 173, 178, 256, 266, 267, 277, 311, 312, 393, 394, 431, 432, 440], "input": [0, 11, 12, 13, 14, 15, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 53, 54, 56, 59, 60, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 78, 79, 80, 81, 82, 83, 86, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 111, 112, 113, 114, 115, 117, 121, 122, 123, 124, 125, 126, 127, 128, 130, 134, 135, 136, 139, 140, 141, 143, 144, 145, 147, 149, 150, 151, 152, 153, 154, 158, 159, 160, 161, 162, 163, 164, 166, 167, 169, 170, 172, 174, 175, 176, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 266, 278, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 348, 354, 370, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 419, 422, 423, 425, 426, 427, 428, 430, 431, 432], "current": [0, 11, 12, 13, 15, 21, 22, 23, 24, 25, 26, 27, 46, 47, 48, 49, 53, 54, 56, 63, 66, 67, 71, 72, 81, 85, 86, 93, 94, 96, 99, 124, 125, 126, 127, 128, 131, 139, 144, 145, 150, 159, 181, 182, 183, 184, 193, 199, 200, 201, 203, 206, 207, 307, 316, 317, 319, 377, 379, 383, 384, 389, 393, 394, 395, 396, 403, 408, 409, 414, 422, 423], "usabl": 0, "insid": 0, "context": 0, "": [0, 3, 4, 70, 83, 85, 101, 103, 107, 108, 112, 113, 115, 117, 130, 131, 144, 170, 172, 177, 274, 326, 327, 328, 333, 334, 335, 337, 338, 339, 340, 341, 343, 345, 348, 349, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 411, 440], "scope": [0, 4], "thi": [0, 11, 12, 16, 17, 20, 28, 29, 31, 32, 34, 35, 36, 37, 38, 39, 40, 56, 58, 62, 73, 75, 76, 78, 80, 83, 84, 85, 119, 122, 123, 130, 131, 132, 133, 134, 135, 136, 137, 138, 143, 171, 172, 175, 178, 179, 189, 190, 191, 192, 198, 200, 202, 204, 205, 208, 210, 266, 271, 275, 288, 294, 296, 322, 324, 359, 361, 375, 378, 381, 386, 388, 401, 406, 407, 411, 426, 429, 430], "wai": [0, 3, 4, 83, 131, 288, 410], "arrai": [0, 2, 3, 4, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 103, 107, 108, 112, 113, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 221, 257, 263, 264, 265, 266, 267, 268, 271, 274, 275, 276, 278, 279, 280, 281, 283, 285, 286, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 345, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 444], "creation": [0, 85, 88, 433, 440, 444], "function": [0, 2, 3, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 34, 35, 36, 38, 39, 46, 47, 48, 49, 53, 54, 59, 60, 62, 63, 65, 66, 67, 69, 71, 72, 73, 79, 81, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 144, 145, 150, 151, 152, 153, 154, 159, 160, 161, 171, 172, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 193, 195, 196, 199, 200, 201, 203, 204, 205, 206, 207, 211, 261, 262, 271, 294, 305, 307, 308, 309, 311, 312, 313, 315, 316, 317, 318, 319, 321, 324, 325, 326, 329, 331, 332, 342, 347, 363, 377, 378, 379, 383, 384, 387, 388, 389, 393, 394, 395, 396, 398, 399, 402, 403, 406, 407, 408, 409, 411, 414, 422, 423, 427, 429, 430, 431, 432, 433, 440, 444], "dpnp": [0, 2, 3, 4, 433, 440, 444, 445, 448], "which": [0, 3, 4, 28, 29, 30, 34, 35, 40, 44, 50, 58, 64, 78, 80, 82, 83, 85, 95, 119, 121, 132, 133, 137, 143, 162, 170, 172, 189, 190, 191, 192, 194, 198, 204, 205, 208, 209, 210, 211, 212, 213, 214, 266, 308, 318, 321, 378, 380, 385, 397, 400, 401, 402, 404, 413, 415, 416, 417, 419, 420, 427, 440], "i": [0, 3, 4, 6, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 44, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 139, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 164, 166, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 221, 266, 271, 278, 288, 294, 298, 307, 308, 310, 311, 312, 314, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 345, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 440], "defin": [0, 70, 85, 90, 136, 312, 316, 432, 440], "alloc": [0, 3, 4, 20, 32, 34, 35, 36, 37, 38, 40, 44, 62, 75, 78, 83, 89, 90, 98, 130, 131, 132, 133, 134, 135, 136, 137, 145, 148, 178, 179, 189, 190, 194, 197, 209, 212, 213, 214, 266, 310, 311, 312, 326, 348, 353, 354, 355, 356, 357, 358, 359, 361, 367, 370, 377, 378, 400, 402, 404, 415, 426, 427, 431, 432], "us": [0, 4, 13, 20, 32, 34, 35, 36, 37, 38, 39, 40, 46, 47, 48, 49, 52, 56, 58, 62, 70, 75, 76, 78, 81, 83, 85, 89, 90, 91, 95, 98, 124, 125, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 145, 147, 148, 149, 150, 159, 160, 161, 162, 170, 171, 173, 178, 179, 185, 187, 189, 191, 194, 196, 197, 203, 209, 212, 214, 221, 266, 271, 307, 308, 309, 310, 311, 312, 316, 317, 322, 326, 329, 331, 332, 342, 347, 348, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 367, 370, 375, 376, 379, 380, 381, 383, 385, 402, 403, 404, 406, 407, 410, 411, 414, 415, 420, 422, 426, 427, 431, 432, 440], "import": [0, 3, 4, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 78, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 158, 159, 160, 161, 162, 164, 166, 168, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 266, 271, 279, 288, 292, 298, 305, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 322, 325, 351, 360, 364, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432], "np": [0, 3, 4, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 78, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 158, 159, 160, 161, 162, 168, 170, 171, 173, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 266, 271, 275, 279, 280, 288, 292, 298, 307, 308, 309, 310, 311, 312, 313, 316, 318, 319, 320, 321, 322, 325, 351, 360, 373, 374, 375, 376, 377, 378, 379, 380, 383, 384, 385, 386, 387, 388, 389, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 414, 415, 416, 419, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432], "device_context": 0, "opencl": [0, 20, 32, 34, 35, 36, 38, 62, 75, 78, 89, 90, 98, 130, 131, 132, 133, 135, 136, 137, 145, 178, 179, 189, 197, 310, 311, 312, 415, 426, 431, 432], "gpu": [0, 3, 4, 20, 32, 34, 35, 36, 38, 62, 75, 78, 89, 90, 98, 130, 131, 132, 133, 135, 136, 137, 145, 178, 179, 189, 197, 310, 311, 312, 415, 426, 431, 432], "x": [0, 3, 4, 11, 12, 14, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 38, 41, 42, 43, 47, 50, 51, 53, 54, 59, 60, 62, 63, 65, 66, 67, 69, 70, 71, 72, 75, 78, 80, 83, 85, 86, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 120, 124, 125, 130, 131, 132, 133, 135, 136, 137, 139, 145, 147, 148, 150, 152, 153, 154, 172, 174, 176, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 196, 197, 201, 202, 206, 207, 266, 271, 279, 280, 292, 307, 308, 310, 311, 312, 313, 315, 316, 318, 319, 320, 321, 344, 350, 375, 376, 377, 378, 380, 384, 385, 386, 387, 389, 393, 394, 395, 396, 398, 399, 400, 405, 406, 408, 409, 414, 415, 423, 424, 426, 430, 431, 432], "1": [0, 3, 4, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 32, 34, 35, 36, 38, 41, 42, 43, 44, 45, 50, 51, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 136, 137, 139, 141, 142, 143, 145, 147, 148, 149, 151, 158, 159, 160, 161, 162, 163, 164, 166, 168, 170, 171, 172, 174, 175, 176, 178, 179, 180, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 265, 266, 271, 273, 275, 279, 280, 288, 292, 298, 305, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 325, 326, 328, 330, 331, 333, 335, 337, 339, 340, 341, 343, 344, 345, 348, 350, 351, 352, 353, 354, 356, 358, 359, 360, 361, 365, 367, 370, 375, 376, 377, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 440], "2": [0, 3, 4, 11, 12, 13, 20, 22, 24, 28, 29, 30, 32, 34, 35, 36, 37, 38, 41, 42, 44, 46, 48, 50, 51, 53, 54, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 78, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 101, 107, 112, 115, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 134, 135, 137, 139, 140, 141, 142, 143, 145, 147, 148, 149, 158, 159, 160, 161, 162, 163, 164, 166, 168, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 266, 271, 275, 280, 288, 305, 308, 309, 310, 311, 312, 313, 317, 318, 319, 320, 321, 325, 326, 330, 334, 338, 344, 350, 353, 355, 366, 368, 369, 372, 374, 375, 376, 377, 379, 380, 381, 383, 384, 385, 386, 387, 388, 392, 394, 395, 396, 398, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 413, 414, 415, 416, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432], "3": [0, 3, 4, 13, 20, 21, 26, 28, 29, 30, 32, 34, 35, 36, 37, 38, 41, 42, 43, 44, 46, 49, 50, 51, 53, 56, 57, 58, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 75, 76, 78, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 96, 98, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 135, 137, 139, 142, 143, 144, 145, 147, 148, 149, 158, 159, 164, 168, 170, 174, 175, 176, 177, 178, 179, 181, 182, 184, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 271, 280, 288, 298, 305, 308, 309, 310, 311, 312, 313, 317, 318, 319, 321, 326, 330, 334, 341, 344, 350, 353, 354, 355, 365, 369, 372, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 392, 394, 397, 398, 400, 401, 402, 403, 405, 406, 410, 411, 413, 414, 415, 416, 419, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432], "sum": [0, 3, 4, 6, 13, 44, 72, 75, 78, 80, 82, 83, 142, 144, 149, 184, 190, 191, 207, 213, 272, 328, 343, 345, 378, 410, 412, 440, 444], "For": [0, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 168, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 266, 269, 270, 279, 280, 289, 290, 291, 292, 293, 294, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 440], "more": [0, 3, 4, 30, 32, 41, 42, 43, 84, 85, 122, 123, 129, 131, 143, 148, 170, 171, 173, 177, 401, 410, 440], "inform": [0, 36, 38, 83, 85, 119, 276, 440, 444], "pleas": [0, 3, 440], "refer": [0, 2, 3, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 168, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 261, 262, 263, 264, 265, 266, 268, 269, 270, 279, 280, 282, 283, 284, 288, 289, 290, 291, 292, 293, 294, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 440], "document": [0, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 168, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 261, 262, 263, 264, 265, 266, 268, 269, 270, 279, 280, 282, 283, 284, 288, 289, 290, 291, 292, 293, 294, 295, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 440], "time": [0, 13, 15, 26, 46, 48, 49, 63, 80, 81, 82, 91, 125, 126, 127, 128, 140, 141, 144, 149, 154, 158, 159, 160, 161, 184, 185, 187, 188, 193, 199, 200, 203, 309, 313, 317, 328, 343, 379, 380, 383, 403, 407, 410, 411, 422, 428], "def": 0, "run": [0, 4], "executor": 0, "size": [0, 6, 20, 32, 44, 58, 65, 69, 83, 85, 131, 137, 143, 172, 174, 177, 178, 189, 194, 209, 280, 281, 296, 311, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 354, 356, 357, 358, 359, 360, 361, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 385, 388, 400, 401, 410, 420, 429, 431], "test_typ": 0, "repetit": [0, 380, 411], "reshap": [0, 6, 13, 28, 29, 41, 43, 44, 75, 76, 81, 82, 83, 84, 95, 121, 128, 148, 149, 158, 191, 192, 198, 203, 296, 305, 350, 375, 385, 403, 410, 422, 440], "arang": [0, 6, 13, 28, 29, 41, 42, 43, 44, 45, 56, 63, 74, 75, 76, 81, 82, 91, 93, 94, 96, 121, 128, 136, 137, 142, 148, 149, 158, 178, 181, 182, 185, 186, 187, 188, 189, 191, 192, 196, 198, 203, 309, 312, 317, 321, 325, 350, 379, 382, 385, 403, 410, 422, 430, 432], "dtype": [0, 9, 11, 12, 13, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 34, 35, 36, 37, 38, 40, 44, 46, 47, 48, 49, 52, 53, 54, 58, 59, 60, 63, 66, 67, 69, 76, 81, 83, 89, 90, 91, 93, 94, 96, 98, 119, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 143, 144, 145, 146, 148, 150, 152, 153, 154, 159, 160, 161, 171, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 198, 199, 200, 203, 204, 205, 208, 209, 210, 211, 212, 213, 214, 266, 272, 283, 289, 300, 302, 306, 307, 309, 311, 312, 316, 317, 318, 319, 326, 348, 354, 370, 377, 378, 379, 382, 383, 384, 388, 389, 393, 394, 395, 396, 398, 399, 401, 402, 403, 404, 408, 409, 412, 415, 416, 419, 422, 423, 427, 429, 431, 432, 440], "_": [0, 401], "rang": [0, 18, 133, 142, 320, 321, 345, 350, 401, 410, 413, 425, 444], "start_tim": 0, "perf_count": 0, "result": [0, 4, 14, 19, 28, 29, 44, 46, 47, 48, 49, 52, 56, 58, 71, 72, 82, 85, 86, 90, 99, 130, 131, 132, 133, 134, 136, 137, 139, 148, 150, 152, 153, 154, 159, 162, 172, 174, 178, 179, 185, 186, 187, 188, 189, 190, 191, 192, 194, 198, 201, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 312, 313, 317, 318, 326, 328, 358, 378, 381, 382, 383, 386, 401, 402, 404, 407, 410, 411, 427, 432, 440], "end_tim": 0, "append": [0, 6, 80, 95], "return": [0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 258, 259, 260, 261, 262, 263, 264, 265, 266, 270, 271, 272, 273, 274, 276, 277, 278, 280, 282, 283, 284, 287, 288, 289, 291, 294, 295, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 326, 329, 348, 350, 353, 354, 355, 356, 357, 358, 359, 361, 362, 367, 370, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 426, 427, 428, 429, 430, 431, 432, 440], "median": [0, 6], "get_dtyp": 0, "_dtypes_list": 0, "int32": [0, 9, 37, 52, 85, 89, 90, 98, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 130, 133, 135, 136, 145, 179, 311, 312, 326, 328, 336, 338, 343, 345, 351, 354, 370, 382, 404, 415, 431, 432], "int64": [0, 9, 52, 85, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 382], "float32": [0, 37, 40, 52, 83, 85, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 266, 326, 348, 353, 355, 356, 358, 359, 361, 367, 370, 382], "select_default_devic": 0, "has_aspect_fp64": 0, "float64": [0, 37, 40, 44, 52, 83, 85, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 266, 326, 327, 333, 334, 335, 337, 339, 340, 341, 348, 349, 352, 353, 355, 356, 358, 359, 360, 361, 366, 367, 368, 369, 370, 371, 372, 373, 374, 382, 415], "test_repetit": 0, "5": [0, 6, 13, 14, 20, 27, 28, 41, 44, 45, 46, 48, 49, 50, 54, 56, 58, 61, 64, 65, 68, 70, 71, 72, 75, 76, 80, 81, 82, 83, 86, 92, 121, 122, 123, 124, 125, 126, 127, 128, 133, 137, 139, 142, 143, 144, 147, 148, 149, 158, 159, 162, 166, 168, 171, 176, 178, 185, 186, 187, 188, 189, 192, 193, 194, 195, 196, 197, 198, 199, 202, 203, 209, 212, 266, 271, 308, 310, 311, 312, 317, 320, 321, 326, 327, 328, 330, 333, 345, 349, 350, 351, 352, 355, 358, 373, 375, 376, 377, 379, 381, 383, 384, 385, 386, 387, 388, 393, 401, 402, 404, 405, 406, 410, 411, 413, 415, 416, 419, 422, 423, 425, 426, 428, 429, 430, 431, 432], "type_nam": 0, "name": [0, 6, 85], "print": [0, 4, 44, 45, 61, 85, 142, 257, 326, 345, 350, 424], "f": [0, 6, 32, 34, 35, 36, 38, 39, 40, 53, 56, 62, 63, 83, 85, 89, 90, 94, 98, 135, 136, 191, 266, 271, 278, 311, 312, 347, 375, 377, 381, 389, 431, 432], "test": [0, 2, 14, 15, 19, 152, 153, 154, 211, 328, 444], "type": [0, 2, 3, 4, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 78, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 164, 166, 167, 168, 169, 170, 171, 172, 173, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 266, 271, 274, 278, 294, 305, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 325, 326, 327, 328, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 345, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 419, 420, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 444], "each": [0, 11, 12, 21, 22, 23, 24, 25, 27, 41, 42, 43, 44, 45, 50, 51, 53, 54, 59, 60, 63, 66, 67, 83, 85, 122, 123, 124, 125, 132, 166, 167, 191, 202, 295, 296, 307, 316, 319, 322, 328, 345, 380, 385, 389, 393, 394, 395, 396, 398, 401, 407, 408, 409, 411, 417, 420, 423, 440], "64": [0, 4, 137, 317, 387], "128": [0, 137], "256": [0, 137], "512": 0, "1024": 0, "2048": 0, "4096": 0, "time_numpi": 0, "result_numpi": 0, "time_dpnp": 0, "result_dpnp": 0, "verif": 0, "true": [0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 36, 38, 40, 41, 44, 46, 47, 48, 49, 52, 53, 54, 59, 60, 62, 63, 64, 66, 67, 68, 69, 81, 83, 85, 91, 93, 94, 95, 96, 97, 121, 122, 123, 124, 125, 126, 127, 128, 132, 137, 140, 141, 142, 144, 148, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 168, 170, 172, 173, 174, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 198, 199, 200, 203, 204, 205, 208, 209, 210, 211, 212, 213, 214, 261, 262, 266, 271, 282, 283, 284, 289, 300, 302, 306, 307, 309, 316, 317, 318, 319, 322, 331, 377, 378, 379, 381, 383, 384, 389, 393, 394, 395, 396, 398, 399, 402, 403, 404, 407, 408, 409, 410, 422, 423, 426, 427, 430], "els": [0, 175], "msg": 0, "n": [0, 4, 72, 76, 77, 80, 84, 85, 86, 95, 98, 100, 102, 103, 105, 106, 108, 110, 111, 113, 114, 116, 117, 118, 132, 139, 145, 170, 172, 173, 174, 177, 191, 196, 212, 214, 321, 328, 343, 345, 355, 365, 392, 399, 402, 405, 406, 410, 413, 415, 416, 417, 419, 420, 426, 427, 440], "4": [0, 13, 14, 20, 28, 29, 32, 41, 43, 44, 46, 48, 50, 56, 57, 58, 61, 64, 66, 68, 70, 71, 72, 75, 76, 78, 80, 81, 82, 83, 84, 85, 86, 89, 91, 94, 121, 125, 126, 127, 131, 132, 133, 135, 137, 139, 140, 141, 142, 143, 144, 147, 148, 149, 158, 161, 164, 168, 170, 175, 178, 183, 185, 189, 191, 192, 193, 194, 195, 197, 198, 199, 202, 203, 204, 205, 206, 207, 209, 212, 214, 271, 288, 298, 305, 308, 310, 312, 317, 318, 320, 321, 326, 327, 330, 350, 355, 371, 375, 376, 379, 380, 381, 385, 386, 387, 388, 393, 397, 398, 401, 402, 403, 405, 406, 410, 411, 413, 414, 416, 419, 422, 426, 427, 428, 429, 430, 432], "3e": 0, "ratio": 0, "6": [0, 4, 6, 13, 20, 28, 29, 41, 44, 48, 49, 56, 58, 64, 70, 71, 72, 74, 75, 76, 80, 81, 82, 83, 85, 86, 91, 96, 99, 121, 136, 143, 147, 148, 149, 158, 173, 174, 177, 178, 189, 206, 207, 211, 271, 280, 308, 312, 317, 320, 325, 326, 343, 345, 350, 355, 375, 376, 381, 385, 386, 387, 388, 401, 403, 404, 405, 406, 410, 414, 416, 419, 422, 425, 428, 429, 430, 432], "2f": 0, "__name__": 0, "__main__": 0, "try": [0, 4], "gpu_queu": 0, "get_sycl_devic": [0, 326], "print_device_info": 0, "except": [0, 4, 15, 20, 30, 32, 34, 35, 36, 38, 50, 51, 56, 58, 62, 68, 80, 82, 83, 89, 90, 98, 100, 106, 114, 130, 131, 132, 133, 134, 135, 136, 143, 145, 171, 179, 191, 192, 194, 198, 208, 209, 210, 212, 213, 214, 266, 296, 311, 312, 380, 381, 397, 402, 404, 427, 431, 432], "importerror": 0, "data": [1, 3, 4, 11, 12, 13, 14, 15, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 44, 46, 47, 48, 49, 51, 52, 53, 54, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 74, 75, 78, 81, 82, 83, 85, 86, 89, 90, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 119, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 152, 153, 154, 159, 160, 161, 166, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 266, 294, 305, 307, 308, 309, 311, 312, 313, 316, 317, 318, 319, 321, 322, 325, 326, 327, 328, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 345, 348, 349, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 381, 383, 384, 385, 386, 387, 388, 389, 393, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 414, 415, 422, 423, 425, 427, 429, 430, 431, 432, 433, 444], "parallel": [1, 3, 4, 9, 433], "overview": 2, "quick": [2, 3], "start": [2, 3, 20, 36, 38, 130, 137, 178, 189, 386], "guid": [2, 3], "driver": 2, "interpret": [2, 34, 35, 39, 51, 62, 85, 130, 440], "instal": 2, "exampl": [2, 3, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 78, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 158, 159, 160, 161, 162, 164, 166, 168, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 257, 266, 271, 275, 279, 280, 288, 292, 294, 298, 305, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432], "multi": [2, 83, 101, 103, 107, 108, 112, 113, 115, 117, 197, 301, 310, 433], "dimension": [2, 4, 28, 29, 30, 61, 65, 68, 76, 77, 78, 80, 83, 100, 101, 102, 103, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 130, 131, 133, 174, 190, 192, 196, 197, 198, 204, 205, 208, 210, 212, 213, 214, 299, 310, 378, 397, 402, 404, 411, 427, 428, 433], "ndarrai": [2, 3, 6, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 348, 353, 354, 355, 356, 357, 358, 359, 361, 367, 370, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 419, 420, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433], "univers": [2, 433, 440], "ufunc": [2, 433, 440], "routin": [2, 433, 440], "special": [2, 85, 92, 433, 444], "avail": [2, 3, 4, 85, 433, 440], "comparison": [2, 91, 140, 141, 160, 161, 309, 433, 444], "tabl": [2, 9, 172, 433], "cupi": [2, 433], "miscellan": [2, 433, 444], "c": [2, 4, 32, 34, 35, 36, 38, 39, 40, 53, 56, 62, 63, 70, 82, 83, 85, 89, 90, 94, 98, 135, 136, 138, 149, 158, 164, 171, 175, 179, 191, 266, 271, 278, 291, 311, 312, 317, 375, 377, 381, 389, 410, 411, 431, 432], "backend": [2, 138, 329, 331, 332, 342, 347, 363], "The": [3, 4, 13, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 44, 46, 47, 48, 49, 51, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 66, 67, 69, 70, 75, 78, 80, 81, 83, 84, 85, 86, 89, 90, 91, 93, 95, 96, 98, 100, 106, 114, 121, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 140, 141, 143, 144, 145, 147, 148, 150, 159, 160, 161, 162, 164, 166, 167, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 185, 187, 189, 190, 191, 192, 193, 197, 198, 199, 200, 202, 203, 204, 205, 208, 210, 212, 213, 214, 271, 278, 279, 288, 292, 307, 309, 310, 311, 312, 316, 317, 319, 320, 322, 326, 329, 331, 332, 342, 347, 348, 353, 354, 355, 356, 357, 358, 359, 361, 362, 367, 370, 375, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 392, 393, 395, 396, 397, 401, 402, 403, 404, 407, 408, 409, 410, 411, 413, 415, 417, 418, 420, 421, 422, 423, 426, 427, 429, 430, 431, 432, 440, 444], "librari": [3, 4, 440], "implement": [3, 6, 37, 129], "subset": [3, 400, 444], "execut": [3, 4, 11, 12, 13, 14, 15, 19, 21, 22, 23, 24, 25, 26, 27, 31, 34, 35, 46, 47, 48, 49, 53, 54, 59, 60, 63, 65, 66, 67, 69, 71, 72, 79, 81, 86, 87, 88, 91, 92, 93, 94, 96, 97, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 124, 125, 126, 127, 128, 132, 139, 140, 141, 144, 150, 151, 152, 153, 154, 159, 160, 161, 180, 181, 182, 183, 184, 185, 186, 187, 188, 193, 195, 199, 200, 201, 203, 206, 207, 211, 307, 308, 309, 313, 315, 316, 317, 318, 321, 329, 331, 332, 342, 347, 363, 377, 379, 383, 384, 387, 389, 393, 394, 395, 396, 398, 399, 403, 406, 408, 409, 414, 422, 423, 430], "ani": [3, 6, 14, 15, 30, 32, 34, 35, 36, 37, 38, 40, 50, 51, 62, 75, 78, 80, 83, 85, 118, 135, 136, 137, 143, 178, 189, 208, 210, 266, 326, 370, 397, 398, 426, 440], "drop": [3, 85], "replac": [3, 37, 56, 322, 331, 440], "core": [3, 85, 440], "numer": [3, 4, 63, 85, 307, 316, 444], "being": [3, 85], "develop": [3, 4], "part": [3, 59, 60, 83, 147, 201, 279, 292, 319, 376, 440], "intel": [3, 4], "ai": [3, 322, 407], "analyt": 3, "toolkit": 3, "distribut": [3, 4, 189, 326, 327, 328, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 357, 358, 360, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 444], "also": [3, 20, 63, 85, 95, 132, 134, 162, 202, 364, 440], "anaconda": 3, "cloud": 3, "page": [3, 444], "learn": [3, 4], "Being": 3, "mean": [3, 6, 40, 44, 83, 130, 131, 133, 172, 195, 209, 212, 214, 266, 278, 326, 339, 341, 344, 348, 367, 371, 372, 375, 381, 402, 404, 427, 440], "usag": [3, 4], "veri": [3, 196], "similar": [3, 34, 35, 83, 85, 137, 178, 189, 271, 326, 354], "class": [3, 83, 85, 86, 120, 130, 131, 132, 134, 148, 179, 326, 354, 398, 399, 415, 444], "compat": [3, 28, 29, 40, 44, 83, 190, 192, 194, 198, 204, 205, 208, 209, 210, 212, 213, 214, 266, 378, 381, 402, 404, 427, 444], "altern": [3, 4, 82, 191, 194, 209, 212, 213, 214, 402, 404, 427], "abov": [3, 75, 78, 148, 174, 190, 213, 378, 404, 415, 416, 419], "instanc": [3, 20, 32, 34, 35, 36, 37, 38, 62, 75, 78, 83, 89, 90, 98, 130, 131, 132, 133, 134, 135, 136, 137, 145, 148, 178, 179, 189, 191, 197, 310, 311, 312, 326, 348, 353, 354, 355, 356, 357, 358, 359, 361, 362, 367, 370, 415, 426, 431, 432], "creat": [3, 4, 20, 32, 34, 35, 36, 37, 38, 62, 75, 76, 78, 83, 85, 89, 90, 98, 129, 130, 131, 132, 133, 134, 135, 136, 137, 145, 148, 178, 179, 189, 197, 271, 310, 311, 312, 322, 326, 348, 353, 354, 355, 356, 357, 358, 359, 361, 362, 367, 370, 415, 426, 431, 432, 440, 444], "ident": [3, 6, 85, 176, 365], "one": [3, 4, 30, 32, 37, 41, 42, 43, 44, 56, 61, 64, 65, 83, 85, 89, 91, 95, 96, 98, 100, 102, 105, 106, 110, 111, 114, 116, 122, 123, 131, 135, 143, 145, 148, 172, 180, 181, 182, 183, 196, 197, 206, 271, 278, 281, 310, 312, 319, 345, 386, 397, 400, 401, 410, 417, 420, 431, 440], "kei": [3, 30, 83, 85, 120, 226, 256, 397], "differ": [3, 20, 32, 34, 35, 36, 38, 44, 62, 72, 75, 78, 80, 83, 85, 86, 89, 90, 98, 119, 122, 123, 130, 131, 132, 133, 135, 136, 137, 139, 145, 167, 172, 178, 179, 189, 190, 191, 197, 213, 271, 310, 311, 312, 317, 378, 403, 404, 415, 426, 431, 432, 444], "memori": [3, 32, 34, 35, 36, 38, 39, 53, 56, 62, 63, 83, 85, 89, 90, 94, 98, 135, 136, 191, 196, 276, 278, 301, 311, 312, 377, 381, 389, 431, 432, 433], "default": [3, 11, 12, 13, 14, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 40, 44, 46, 47, 48, 49, 50, 51, 53, 54, 56, 58, 59, 60, 62, 63, 65, 66, 67, 69, 70, 75, 78, 79, 80, 81, 83, 85, 86, 89, 90, 91, 93, 94, 96, 98, 100, 106, 118, 121, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 140, 141, 143, 144, 145, 148, 150, 152, 153, 154, 159, 160, 161, 162, 170, 172, 173, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 203, 204, 205, 208, 209, 210, 211, 212, 213, 214, 266, 271, 278, 307, 309, 310, 311, 312, 314, 316, 317, 318, 319, 321, 326, 330, 348, 353, 354, 355, 356, 357, 358, 359, 361, 362, 364, 365, 367, 370, 375, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 406, 408, 409, 410, 412, 413, 415, 416, 417, 419, 420, 422, 423, 426, 427, 429, 431, 432, 440], "system": [3, 4, 176], "integr": [3, 4, 44, 83, 190, 194, 201, 209, 212, 213, 214, 298, 317, 377, 378, 402, 404, 414, 427], "discret": [3, 61, 65, 72, 80, 86, 100, 101, 102, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117, 139, 326, 433], "otherwis": [3, 11, 12, 13, 14, 15, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 59, 60, 62, 63, 65, 66, 67, 68, 69, 71, 72, 79, 80, 81, 83, 85, 86, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 144, 145, 149, 150, 151, 152, 153, 154, 159, 160, 161, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 266, 278, 294, 307, 308, 309, 311, 312, 313, 315, 316, 317, 318, 321, 326, 327, 328, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 366, 367, 368, 369, 370, 371, 372, 373, 374, 377, 378, 379, 381, 383, 384, 387, 389, 393, 394, 395, 396, 397, 398, 399, 400, 402, 403, 404, 406, 408, 409, 414, 422, 423, 427, 430, 431, 432], "host": [3, 4, 20, 32, 34, 35, 36, 37, 38, 62, 75, 78, 89, 90, 98, 130, 131, 132, 133, 134, 135, 136, 137, 145, 148, 178, 179, 189, 197, 310, 311, 312, 326, 348, 353, 354, 355, 356, 357, 358, 359, 361, 367, 370, 415, 426, 431, 432], "do": [3, 4, 85, 328, 386], "have": [3, 4, 18, 28, 29, 33, 41, 42, 43, 44, 51, 53, 57, 58, 63, 70, 82, 84, 85, 94, 119, 143, 171, 190, 191, 192, 194, 198, 204, 205, 208, 209, 210, 212, 213, 214, 345, 377, 378, 388, 389, 401, 402, 404, 411, 427, 429, 440], "most": [3, 4, 80, 85, 400], "manipul": [3, 76, 433, 444], "ar": [3, 4, 11, 12, 13, 14, 15, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 53, 54, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 71, 72, 74, 79, 80, 81, 82, 83, 85, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 121, 122, 123, 124, 125, 126, 127, 128, 132, 137, 139, 140, 141, 144, 149, 150, 151, 152, 153, 154, 159, 160, 161, 162, 166, 167, 170, 171, 172, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 266, 287, 288, 307, 308, 309, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 325, 326, 327, 328, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 348, 349, 351, 352, 354, 357, 358, 360, 366, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 383, 384, 385, 387, 388, 389, 391, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 406, 408, 409, 410, 412, 414, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 440], "done": [3, 40, 83, 266], "see": [3, 31, 85, 129, 172, 343, 387, 417, 418, 420, 421, 440], "complet": [3, 4, 131, 132, 174, 386, 440], "list": [3, 6, 9, 32, 34, 35, 36, 38, 41, 42, 43, 50, 58, 62, 75, 78, 84, 85, 135, 136, 137, 143, 178, 179, 189, 191, 382, 388, 391, 401, 410, 413, 426, 429], "support": [3, 9, 11, 12, 13, 14, 15, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 34, 35, 36, 37, 38, 46, 47, 48, 49, 50, 51, 53, 54, 59, 60, 62, 63, 65, 66, 67, 68, 69, 71, 72, 74, 79, 81, 83, 85, 86, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 144, 145, 150, 151, 152, 153, 154, 159, 160, 161, 163, 166, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192, 193, 194, 195, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 266, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 325, 326, 327, 328, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 344, 345, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 366, 367, 368, 369, 370, 371, 372, 373, 374, 377, 379, 381, 383, 384, 387, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 402, 403, 404, 406, 408, 409, 412, 414, 422, 423, 425, 427, 430, 431, 432, 448], "along": [3, 4, 14, 16, 17, 19, 28, 29, 30, 44, 57, 58, 68, 71, 72, 75, 78, 80, 83, 84, 86, 121, 122, 123, 126, 127, 132, 137, 139, 143, 148, 172, 174, 178, 189, 190, 192, 193, 194, 195, 196, 198, 199, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 263, 264, 265, 272, 282, 284, 289, 290, 300, 302, 304, 306, 320, 321, 322, 378, 380, 385, 386, 388, 397, 401, 402, 404, 406, 407, 410, 411, 412, 414, 417, 420, 427, 429, 440], "limit": [3, 11, 12, 13, 14, 15, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 34, 35, 36, 38, 46, 47, 48, 49, 50, 51, 53, 54, 56, 59, 60, 62, 63, 65, 66, 67, 68, 69, 71, 72, 74, 79, 81, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 144, 145, 146, 150, 151, 152, 153, 154, 159, 160, 161, 163, 166, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192, 193, 194, 195, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 266, 268, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 325, 326, 327, 328, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 348, 349, 351, 352, 354, 357, 360, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 377, 379, 381, 383, 384, 387, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 402, 403, 404, 406, 408, 409, 412, 414, 422, 423, 425, 427, 430, 431, 432], "To": 4, "program": [4, 124], "beyond": [4, 385], "cpu": [4, 11, 12, 13, 14, 15, 19, 20, 21, 22, 23, 24, 25, 26, 27, 31, 32, 34, 35, 36, 38, 46, 47, 48, 49, 53, 54, 59, 60, 62, 63, 65, 66, 67, 69, 71, 72, 75, 78, 79, 81, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 124, 125, 126, 127, 128, 130, 131, 132, 133, 135, 136, 137, 139, 140, 141, 144, 145, 150, 151, 152, 153, 154, 159, 160, 161, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 193, 195, 197, 199, 200, 201, 203, 206, 207, 211, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 321, 377, 379, 383, 384, 387, 389, 393, 394, 395, 396, 398, 399, 403, 406, 408, 409, 414, 415, 422, 423, 426, 430, 431, 432], "you": [4, 407, 440], "need": [4, 138, 407], "appropri": [4, 28, 29, 138, 190, 192, 198, 204, 205, 208, 210, 326, 354, 357, 378, 440], "hardwar": 4, "work": [4, 31, 39, 73, 200, 324, 407, 440], "fine": 4, "laptop": 4, "graphic": 4, "In": [4, 28, 29, 162, 171, 174, 189, 209, 321, 326, 370, 381, 406], "major": [4, 34, 35, 36, 38, 39, 40, 83, 266, 278, 375], "case": [4, 20, 28, 29, 32, 34, 35, 36, 38, 44, 62, 75, 78, 80, 89, 90, 98, 130, 131, 132, 133, 135, 136, 137, 145, 174, 177, 178, 179, 189, 197, 211, 310, 311, 312, 318, 319, 381, 410, 415, 426, 431, 432], "your": 4, "window": 4, "alreadi": [4, 35, 41, 42, 43], "ha": [4, 18, 30, 44, 46, 47, 48, 49, 85, 95, 105, 110, 132, 143, 147, 150, 175, 177, 190, 194, 209, 212, 213, 214, 321, 376, 377, 378, 380, 386, 400, 401, 402, 404, 405, 411, 427, 440], "all": [4, 6, 9, 15, 19, 33, 40, 44, 57, 68, 80, 83, 84, 85, 93, 94, 96, 98, 121, 122, 123, 130, 131, 133, 137, 143, 145, 162, 170, 173, 178, 189, 204, 205, 208, 210, 213, 266, 269, 275, 288, 319, 328, 385, 388, 398, 400, 429, 440], "necessari": [4, 20, 32, 34, 35, 36, 38, 41, 64, 137, 178, 189, 191, 194, 209, 212, 213, 214, 381, 402, 404, 427], "But": [4, 85], "want": [4, 407], "up": [4, 85, 123], "date": 4, "alwai": [4, 30, 34, 40, 83, 212, 214, 266, 381, 402, 427], "updat": 4, "latest": [4, 129], "follow": [4, 44, 85, 95, 119, 146, 173, 410, 440, 444], "instruct": 4, "step": [4, 20, 137, 178, 189], "8": [4, 13, 15, 41, 53, 56, 64, 70, 75, 76, 80, 83, 85, 121, 137, 147, 151, 164, 175, 177, 178, 189, 206, 317, 318, 320, 326, 350, 369, 376, 385, 389, 395, 406, 410, 414, 416, 419, 426, 430], "9": [4, 13, 41, 56, 64, 70, 75, 76, 81, 83, 89, 99, 125, 133, 137, 173, 174, 177, 189, 203, 280, 320, 326, 328, 330, 350, 376, 385, 398, 403, 410, 416, 419, 422, 426, 430], "10": [4, 13, 22, 24, 28, 29, 44, 56, 62, 72, 76, 80, 83, 85, 96, 135, 137, 142, 147, 158, 159, 180, 181, 182, 183, 189, 190, 195, 203, 294, 320, 322, 326, 328, 338, 350, 378, 382, 383, 385, 387, 401, 407, 416, 419, 430], "If": [4, 15, 20, 28, 29, 30, 32, 34, 35, 36, 37, 38, 40, 44, 56, 58, 70, 75, 80, 82, 83, 85, 95, 98, 119, 121, 134, 137, 143, 147, 148, 149, 162, 170, 171, 172, 173, 174, 177, 178, 179, 189, 190, 192, 194, 196, 198, 204, 205, 208, 209, 210, 212, 213, 214, 266, 296, 298, 322, 326, 348, 370, 376, 377, 378, 381, 385, 388, 397, 398, 400, 401, 402, 404, 405, 407, 410, 411, 413, 426, 427, 428, 429, 440], "yet": [4, 6], "easiest": 4, "It": [4, 28, 29, 56, 82, 190, 191, 192, 194, 198, 204, 205, 208, 209, 210, 212, 213, 214, 378, 402, 404, 427], "essenti": 4, "machin": [4, 119, 146], "optim": [4, 88], "includ": [4, 20, 28, 29, 32, 34, 35, 36, 37, 38, 44, 62, 75, 78, 135, 136, 137, 138, 173, 178, 189, 190, 192, 194, 198, 204, 205, 208, 209, 210, 212, 213, 214, 319, 326, 370, 378, 402, 404, 426, 427], "anoth": [4, 64, 83, 129, 271, 290, 321, 386], "vendor": 4, "too": 4, "manual": [4, 85, 411], "shown": 4, "next": [4, 119], "section": [4, 85, 440], "recommend": [4, 308, 411], "org": 4, "channel": 4, "command": 4, "forg": 4, "pip": 4, "http": [4, 129], "pypi": 4, "simpl": [4, 188, 444], "These": [4, 85, 95, 202, 440, 444], "its": [4, 6, 15, 30, 31, 44, 59, 60, 75, 83, 100, 106, 119, 144, 145, 166, 167, 171, 173, 194, 209, 212, 214, 305, 363, 375, 378, 381, 387, 397, 402, 413, 415, 427, 440], "depend": [4, 166, 172, 174, 177, 178, 391, 430], "control": [4, 40, 52, 58, 64, 83, 143, 191, 266, 388, 401, 429], "requir": [4, 6, 32, 36, 38, 40, 83, 85, 148, 266], "compil": [4, 85, 138], "runtim": 4, "onemkl": 4, "befor": [4, 30, 58, 83, 122, 123, 190, 212, 213, 214, 288, 298, 378, 385, 386, 397, 402, 404, 411, 427, 428], "strongli": [4, 411], "advis": 4, "version": [4, 83, 85, 277, 308], "activ": 4, "local": 4, "environ": 4, "env": 4, "And": [4, 39, 40, 76, 83, 266], "sourc": [4, 6, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432], "recip": 4, "finanli": 4, "setuptool": 4, "o": [4, 85], "On": 4, "linux": 4, "cython": 4, "dpcpp_linux": 4, "mkl": 4, "devel": 4, "dpcpp": 4, "tbb": 4, "onedpl": 4, "cmake": 4, "ninja": 4, "pytest": 4, "dpcpp_win": 4, "setup": 4, "py": 4, "g": [4, 83, 85, 89, 90, 98, 135, 136, 145, 301, 311, 312, 326, 415, 431, 432], "dcmake_c_compil": 4, "path": [4, 131, 179], "icx": 4, "dcmake_cxx_compil": 4, "icpx": 4, "script": 4, "build_loc": 4, "suit": 4, "element": [4, 11, 12, 13, 14, 15, 18, 19, 21, 22, 23, 24, 25, 26, 27, 30, 31, 33, 44, 45, 46, 47, 48, 49, 53, 54, 56, 59, 60, 63, 64, 66, 67, 71, 72, 80, 81, 83, 85, 86, 91, 93, 94, 96, 97, 98, 99, 121, 122, 123, 124, 125, 126, 127, 128, 134, 140, 141, 144, 145, 147, 148, 150, 151, 152, 153, 154, 159, 160, 161, 162, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 198, 199, 200, 201, 203, 206, 207, 208, 210, 211, 212, 213, 214, 261, 262, 269, 270, 272, 274, 275, 278, 280, 281, 283, 285, 287, 288, 293, 294, 295, 297, 300, 301, 304, 306, 307, 308, 309, 315, 316, 317, 318, 319, 321, 323, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 402, 403, 404, 406, 408, 409, 410, 411, 416, 419, 422, 423, 424, 427, 430, 440, 444], "asarrai": [4, 6, 34, 36, 38, 39], "y": [4, 20, 32, 34, 35, 36, 38, 41, 50, 62, 69, 70, 75, 78, 83, 85, 89, 90, 95, 98, 130, 131, 132, 133, 135, 136, 137, 139, 145, 178, 179, 189, 196, 197, 201, 271, 294, 305, 310, 311, 312, 398, 414, 415, 426, 430, 431, 432], "locat": [4, 138, 337, 339], "same": [4, 13, 15, 26, 30, 31, 33, 36, 38, 39, 40, 44, 46, 48, 49, 51, 57, 58, 63, 73, 80, 81, 82, 83, 84, 90, 91, 95, 97, 125, 126, 127, 128, 129, 136, 140, 141, 143, 144, 149, 158, 159, 160, 161, 174, 184, 185, 186, 187, 188, 192, 193, 194, 198, 199, 200, 203, 208, 209, 210, 212, 213, 214, 266, 294, 309, 312, 313, 317, 321, 322, 324, 326, 348, 354, 370, 375, 377, 379, 380, 383, 385, 386, 388, 397, 398, 399, 400, 401, 402, 403, 404, 407, 410, 416, 418, 419, 421, 422, 427, 428, 429, 432], "shape": [4, 6, 28, 29, 32, 33, 36, 40, 43, 44, 50, 51, 53, 56, 58, 63, 65, 69, 76, 80, 82, 83, 84, 85, 89, 90, 94, 95, 97, 121, 132, 135, 136, 143, 148, 149, 158, 164, 168, 170, 171, 174, 175, 176, 177, 185, 186, 187, 188, 190, 191, 192, 194, 196, 197, 198, 202, 204, 205, 208, 209, 210, 212, 213, 214, 266, 294, 299, 305, 310, 311, 312, 321, 322, 326, 335, 338, 343, 344, 349, 353, 354, 355, 356, 357, 358, 359, 361, 366, 367, 373, 375, 377, 378, 380, 381, 385, 386, 388, 389, 397, 398, 399, 400, 401, 402, 404, 406, 410, 411, 413, 415, 416, 419, 420, 427, 429, 431, 432, 433, 444], "0": [4, 6, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 38, 41, 42, 43, 44, 45, 52, 54, 56, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 74, 75, 76, 78, 79, 80, 81, 82, 83, 85, 86, 89, 90, 91, 92, 93, 95, 96, 98, 99, 102, 116, 119, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 135, 136, 137, 139, 142, 145, 148, 149, 152, 153, 154, 158, 162, 166, 168, 170, 175, 178, 179, 180, 181, 182, 183, 186, 188, 189, 191, 192, 193, 194, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 271, 273, 275, 279, 280, 292, 295, 298, 300, 301, 302, 305, 306, 308, 310, 311, 312, 317, 318, 319, 320, 321, 322, 325, 326, 328, 333, 335, 336, 337, 339, 340, 341, 343, 344, 345, 348, 350, 351, 352, 353, 356, 358, 359, 360, 361, 364, 367, 369, 370, 371, 377, 379, 380, 384, 385, 386, 387, 389, 391, 392, 393, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 430, 431, 432], "expect": [4, 18, 53, 63, 82, 85, 94, 190, 194, 209, 212, 213, 214, 377, 378, 389, 402, 404, 427], "comput": [4, 26, 31, 44, 46, 47, 48, 49, 54, 80, 95, 99, 100, 101, 102, 103, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117, 124, 125, 142, 148, 150, 163, 164, 165, 167, 168, 171, 172, 173, 174, 175, 177, 185, 186, 187, 188, 190, 191, 192, 194, 195, 198, 200, 208, 209, 210, 212, 213, 214, 378, 379, 384, 387, 389, 402, 404, 409, 410, 423, 427], "empti": [4, 6, 32, 83, 90, 131, 135, 136, 213, 275, 311, 312, 431, 432], "found": [4, 440], "here": [6, 30, 85, 397], "correspond": [6, 20, 28, 29, 32, 34, 35, 36, 37, 38, 56, 58, 62, 75, 78, 83, 89, 90, 98, 130, 131, 132, 133, 134, 135, 136, 137, 145, 148, 166, 178, 179, 189, 191, 197, 274, 310, 311, 312, 326, 348, 353, 354, 355, 356, 357, 358, 359, 361, 362, 367, 370, 385, 392, 402, 410, 413, 415, 426, 427, 431, 432, 440], "column": [6, 34, 35, 36, 38, 39, 40, 57, 58, 83, 84, 98, 122, 123, 143, 145, 166, 171, 174, 177, 266, 278, 375, 388, 401, 415, 417, 420, 426, 429], "v1": 6, "23": [6, 326], "v0": 6, "15": [6, 28, 29, 72, 76, 173, 181, 350], "0dev0": 6, "g076998073d": 6, "v9": 6, "397": 6, "233": 6, "299": 6, "56": 6, "36": [6, 70], "47": 6, "20": [6, 148, 158, 159, 322, 328, 343, 407], "16": [6, 46, 76, 85, 133, 137, 139, 203, 317, 408], "18": [6, 85, 86, 189], "51": 6, "48": [6, 70, 206], "49": 6, "total": [6, 68, 83, 285, 402, 427], "542": 6, "351": 6, "429": 6, "ab": [6, 12], "absolut": [6, 11, 18, 99, 175, 212, 214, 319, 402, 427], "add": [6, 85], "add_docstr": 6, "add_newdoc": 6, "add_newdoc_ufunc": 6, "allclos": [6, 33, 151, 168, 173, 174, 176, 177], "alltru": 6, "amax": [6, 192], "amin": [6, 198], "angl": [6, 25, 26, 73, 74, 324, 325, 425], "apply_along_axi": 6, "apply_over_ax": 6, "arcco": [6, 22, 23, 25, 26, 66], "arccosh": [6, 21, 24, 27, 67], "arcsin": [6, 21, 24, 25, 26, 395], "arcsinh": [6, 22, 23, 27, 396], "arctan": [6, 18, 21, 23, 26, 27, 408], "arctan2": [6, 18, 25], "arctanh": [6, 22, 24, 25, 26, 409], "argmax": [6, 29, 83, 204, 322, 407, 440], "argmin": [6, 28, 83, 205, 407, 440], "argpartit": [6, 30, 440], "argsort": [6, 83, 397, 407, 413, 440], "argwher": 6, "around": [6, 83, 137, 295, 321, 387], "array2str": 6, "array_equ": 6, "array_equiv": [6, 33], "array_repr": 6, "array_split": [6, 58], "array_str": 6, "asanyarrai": [6, 35, 38], "asarray_chkfinit": [6, 34, 35], "ascontiguousarrai": [6, 34, 35, 38], "asfarrai": [6, 34, 35], "asfortranarrai": [6, 34, 35, 36], "asmatrix": 6, "atleast_1d": [6, 42, 43, 95], "atleast_2d": [6, 41, 43, 95], "atleast_3d": [6, 41, 42, 95], "averag": [6, 83, 194, 209, 283, 404, 444], "bartlett": 6, "base_repr": 6, "binary_repr": 6, "bincount": 6, "bitwise_and": [6, 47, 48, 49, 150, 185], "bitwise_not": 6, "bitwise_or": [6, 46, 47, 49, 150, 187], "bitwise_xor": [6, 46, 47, 48, 150, 188], "blackman": 6, "block": [6, 58, 84, 143, 388, 401, 429], "bmat": 6, "broadcast_arrai": [6, 51], "broadcast_shap": 6, "broadcast_to": [6, 50, 411], "busday_count": 6, "busday_offset": 6, "byte_bound": 6, "can_cast": [6, 444], "cbrt": [6, 398], "ceil": [6, 31, 124, 125, 384, 387, 423], "choos": [6, 18, 25, 26, 83, 440], "clip": [6, 83, 321, 406, 440], "column_stack": [6, 58, 84, 143, 388, 401, 429], "common_typ": 6, "compare_chararrai": 6, "compress": [6, 406, 440], "concaten": [6, 57, 84, 143, 388, 401, 407, 429], "conj": [6, 83, 147, 162, 319, 376], "conjug": [6, 59, 82, 83, 147, 162, 166, 191, 269, 319, 376, 428], "convolv": [6, 65], "copi": [6, 20, 30, 32, 34, 35, 36, 37, 38, 40, 41, 42, 43, 64, 75, 78, 83, 85, 89, 90, 98, 130, 131, 132, 133, 134, 135, 136, 137, 145, 148, 178, 179, 189, 196, 197, 221, 266, 278, 280, 288, 294, 296, 310, 311, 312, 314, 316, 326, 348, 353, 354, 355, 356, 357, 358, 359, 361, 367, 370, 381, 397, 400, 415, 416, 419, 426, 431, 432, 440], "copysign": [6, 307, 316], "copyto": [6, 83, 271], "corrcoef": [6, 69], "correl": [6, 444], "co": [6, 21, 67, 395, 408], "cosh": [6, 22, 66, 396, 409], "count_nonzero": [6, 308], "cov": [6, 344], "cross": [6, 65], "cumprod": [6, 206, 440], "cumproduct": 6, "cumsum": [6, 80, 83, 207, 404, 440], "datetime_as_str": 6, "datetime_data": 6, "deg2rad": [6, 324, 325, 425], "degre": [6, 18, 73, 212, 214, 324, 325, 368, 402, 425, 427], "delet": 6, "deprec": 6, "deprecate_with_doc": 6, "diag": [6, 78, 122, 123, 145, 177], "diag_indic": [6, 77, 118], "diag_indices_from": [6, 76, 118], "diagflat": [6, 75], "diagon": [6, 75, 76, 77, 78, 83, 98, 118, 145, 162, 412, 415, 416, 417, 418, 419, 420, 421, 440], "diff": [6, 72, 86, 139, 142], "digit": [6, 119], "disp": 6, "divid": [6, 84, 125, 128, 200, 379, 422], "divmod": [6, 440], "dot": [6, 83, 87, 88, 149, 162, 168, 169, 171, 173, 174, 176, 177, 191, 410, 428], "dsplit": [6, 58, 84], "dstack": [6, 57, 58, 143, 388, 401, 429], "ediff1d": [6, 80], "einsum": [6, 82, 88, 149, 191, 313, 410], "einsum_path": [6, 87], "empty_lik": [6, 32, 89, 136, 312, 432], "equal": [6, 14, 15, 19, 33, 44, 58, 65, 69, 83, 98, 125, 137, 140, 141, 143, 151, 156, 160, 161, 173, 174, 178, 189, 288, 309, 326, 336, 370, 379, 388, 400, 401, 415, 417, 420, 429], "exp": [6, 94, 96, 175, 180, 182, 184, 190], "exp2": [6, 93, 96], "expand_dim": [6, 28, 29], "expm1": [6, 93, 94, 182], "extract": [6, 75, 78, 148], "ey": [6, 59, 60, 68, 83, 126, 127, 145, 149, 158, 168, 170, 188, 193, 199, 392], "fab": [6, 11, 12], "fastcopyandtranspos": 6, "fill_diagon": 6, "find_common_typ": 6, "fix": [6, 85, 321], "flatnonzero": [6, 308], "flip": [6, 122, 123, 328], "fliplr": [6, 121, 123], "flipud": [6, 121, 122], "float_pow": 6, "floor": [6, 31, 54, 125, 379, 384, 387, 423], "floor_divid": [6, 128, 200, 379], "fmax": [6, 127, 192, 193, 199, 208, 317], "fmin": [6, 126, 193, 198, 199, 210, 317], "fmod": [6, 126, 127, 200, 317, 379], "format_float_posit": 6, "format_float_scientif": 6, "frexp": 6, "from_dlpack": 6, "frombuff": [6, 131, 133, 134, 179], "fromfil": [6, 130, 133, 134], "fromfunct": [6, 34, 35], "fromit": [6, 34, 35, 130, 131, 134], "frompyfunc": 6, "fromregex": [6, 179], "fromstr": [6, 130, 131, 133, 179], "full": [6, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 168, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 261, 262, 263, 264, 265, 266, 268, 269, 270, 279, 280, 282, 283, 284, 288, 289, 290, 291, 292, 293, 294, 295, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432], "full_lik": [6, 32, 90, 135, 312, 432], "gcd": 6, "genfromtxt": [6, 179], "geomspac": [6, 178, 189], "get_array_wrap": 6, "get_includ": 6, "get_printopt": 6, "getbufs": 6, "geterr": 6, "geterrcal": 6, "geterrobj": 6, "gradient": [6, 80], "greater": [6, 83, 91, 141, 160, 161, 170, 174, 288, 309, 400], "greater_equ": [6, 91, 140, 160, 161, 309], "ham": 6, "han": 6, "heavisid": 6, "histogram": [6, 444], "histogram2d": 6, "histogram_bin_edg": 6, "histogramdd": 6, "hsplit": [6, 58], "hstack": [6, 57, 58, 84, 388, 401, 429], "hypot": [6, 378], "i0": 6, "imag": [6, 83, 376, 440], "in1d": 6, "indic": [6, 28, 29, 30, 76, 77, 83, 85, 118, 132, 191, 197, 204, 205, 263, 264, 265, 287, 290, 304, 308, 321, 322, 381, 390, 393, 394, 397, 406, 407, 413, 417, 418, 420, 421], "info": 6, "inner": [6, 70, 87, 88, 171, 191, 313], "insert": [6, 28, 29, 95, 137, 178, 189, 190, 192, 198, 204, 205, 208, 210, 322, 378, 390, 444], "interp": 6, "intersect1d": 6, "invert": [6, 47, 168, 173], "is_busdai": 6, "isclos": [6, 15], "iscomplex": 6, "iscomplexobj": 6, "isfinit": [6, 153, 154, 208, 210, 213], "isfortran": 6, "isin": 6, "isinf": [6, 152, 154], "isnan": [6, 152, 153, 208, 210, 211, 213], "isnat": [6, 154], "isneginf": [6, 152, 153, 154], "isposinf": [6, 152, 153, 154], "isreal": 6, "isrealobj": 6, "isscalar": 6, "issctyp": 6, "issubclass_": 6, "issubdtyp": 6, "issubsctyp": 6, "iter": [6, 34, 35, 83, 120, 130, 131, 133, 134, 277, 444], "ix_": 6, "kaiser": 6, "kron": 6, "lcm": 6, "ldexp": 6, "left_shift": [6, 383], "less": [6, 91, 140, 141, 161, 173, 309, 393, 394], "less_equ": [6, 91, 140, 141, 160, 309], "lexsort": [6, 30, 397], "linspac": [6, 20, 92, 137, 189, 196, 425], "load": [6, 131, 179], "loadtxt": [6, 131], "log": [6, 96, 137, 175, 178, 181, 182, 183, 184, 189, 190, 341], "log10": [6, 180, 182, 183], "log1p": [6, 94, 96, 180, 181, 183], "log2": [6, 180, 181, 182], "logaddexp": [6, 190], "logaddexp2": 6, "logical_and": [6, 46, 186, 187, 188], "logical_not": [6, 47, 150, 185, 187, 188], "logical_or": [6, 48, 185, 186, 188], "logical_xor": [6, 49, 185, 186, 187], "logspac": [6, 137, 178], "lookfor": 6, "mask_indic": 6, "mat": 6, "matmul": [6, 82, 174, 177, 428], "max": [6, 16, 28, 83, 119, 126, 146, 170, 193, 198, 199, 208, 268, 343, 407, 411, 440], "maximum": [6, 16, 28, 29, 56, 83, 126, 127, 192, 198, 199, 204, 205, 208, 210, 263, 282, 317, 320, 322], "maximum_sctyp": 6, "may_share_memori": 6, "meshgrid": [6, 132, 197, 310], "min": [6, 17, 29, 56, 83, 119, 127, 146, 174, 177, 192, 193, 199, 210, 268, 407, 440], "min_scalar_typ": 6, "minimum": [6, 17, 28, 29, 56, 83, 126, 127, 192, 193, 198, 204, 205, 208, 210, 264, 284, 317, 320], "mintypecod": 6, "mod": [6, 379], "modf": 6, "moveaxi": [6, 385, 386, 413], "msort": 6, "multipli": 6, "nan_to_num": 6, "nanargmax": [6, 28, 205], "nanargmin": [6, 29, 204], "nancumprod": [6, 207], "nancumsum": 6, "nanmax": [6, 126, 192, 193, 199, 210], "nanmean": [6, 194, 212, 214, 402, 427], "nanmedian": 6, "nanmin": [6, 127, 193, 198, 199, 208], "nanpercentil": 6, "nanprod": [6, 318], "nanquantil": 6, "nanstd": [6, 194, 209, 214, 402, 427], "nansum": 6, "nanvar": [6, 194, 209, 212, 402, 427], "ndim": [6, 32, 36, 38, 41, 42, 43, 69, 76, 83, 85, 158, 177, 311, 411, 413, 431], "neg": [6, 14, 19, 45, 63, 78, 95, 98, 121, 134, 152, 153, 154, 208, 210, 213, 316, 317, 345, 398, 406], "nested_it": 6, "nextaft": 6, "nonzero": [6, 68, 83, 430, 440], "not_equ": [6, 91, 140, 141, 160, 161], "obj2sctyp": 6, "ones": [6, 32, 36, 38, 44, 81, 83, 89, 90, 91, 95, 98, 135, 136, 144, 145, 158, 170, 190, 211, 312, 318, 378, 382, 386, 413, 415, 422, 431, 432], "ones_lik": [6, 32, 90, 136, 311, 432], "outer": [6, 70, 87, 88, 158], "packbit": 6, "pad": [6, 85], "partit": [6, 20, 32, 34, 35, 36, 37, 38, 62, 75, 78, 83, 89, 90, 98, 130, 131, 132, 133, 134, 135, 136, 137, 145, 148, 178, 179, 189, 197, 310, 311, 312, 326, 348, 353, 354, 355, 356, 357, 358, 359, 361, 362, 367, 370, 397, 415, 426, 431, 432, 440], "percentil": [6, 195], "piecewis": 6, "place": [6, 56, 58, 82, 83, 95, 148, 191, 194, 209, 212, 213, 214, 298, 310, 321, 363, 381, 385, 397, 401, 402, 404, 427, 440], "poli": 6, "polyadd": 6, "polyd": 6, "polydiv": 6, "polyfit": 6, "polyint": 6, "polymul": 6, "polysub": 6, "polyv": 6, "posit": [6, 14, 18, 19, 20, 34, 35, 53, 63, 78, 83, 95, 98, 119, 131, 152, 153, 154, 162, 202, 208, 210, 213, 288, 307, 317, 319, 328, 352, 385, 386, 389, 398, 399, 413], "power": [6, 94, 169, 399, 426], "printopt": 6, "prod": [6, 83, 211, 440], "product": [6, 70, 71, 82, 83, 87, 88, 149, 158, 169, 171, 176, 191, 203, 206, 211, 313, 318, 410, 428, 444], "promote_typ": 6, "ptp": [6, 440], "put": [6, 83, 322, 407, 440], "put_along_axi": [6, 321, 407], "putmask": [6, 321], "quantil": 6, "rad2deg": [6, 73, 74, 425], "radian": [6, 18, 73, 74, 324, 425], "ravel": [6, 83, 172, 278, 440], "ravel_multi_index": 6, "real": [6, 18, 20, 25, 26, 53, 54, 63, 83, 111, 112, 113, 114, 115, 117, 119, 124, 126, 127, 144, 147, 162, 166, 167, 170, 173, 174, 175, 177, 184, 190, 212, 213, 214, 319, 328, 345, 377, 378, 389, 394, 398, 402, 404, 423, 427, 440, 444], "real_if_clos": 6, "recfromcsv": 6, "recfromtxt": 6, "reciproc": [6, 389, 398], "remaind": [6, 125, 126, 127, 128, 200, 317], "repeat": [6, 83, 166, 167, 196, 411, 440], "resiz": [6, 95, 440], "result_typ": [6, 52, 85, 444], "right_shift": [6, 159], "rint": [6, 31, 387], "roll": [6, 386], "rollaxi": [6, 385], "root": [6, 53, 144, 377, 378, 389, 398, 399], "rot90": 6, "round": [6, 20, 31, 83, 124, 125, 379, 384, 423, 440, 444], "round_": 6, "row_stack": [6, 429], "safe_ev": 6, "save": [6, 131], "savetxt": 6, "savez": 6, "savez_compress": 6, "sctype2char": 6, "searchsort": [6, 397, 440], "select": [6, 64, 400, 433], "set_numeric_op": 6, "set_printopt": 6, "set_string_funct": 6, "setbufs": 6, "setdiff1d": 6, "seterr": 6, "seterrcal": 6, "seterrobj": 6, "setxor1d": 6, "shares_memori": 6, "show_config": 6, "sign": [6, 59, 60, 63, 85, 164, 175, 213, 307, 316, 394, 404], "signbit": [6, 393], "sin": [6, 23, 66, 196, 396, 408], "sinc": [6, 83, 298], "sinh": [6, 24, 67, 395, 409], "sometru": 6, "sort": [6, 30, 83, 177, 265, 288, 390, 407, 413, 433, 440, 444], "sort_complex": 6, "space": [6, 20, 131, 137, 178, 189], "split": [6, 58, 84, 143, 388, 401, 429, 444], "sqrt": [6, 53, 83, 279, 292, 378, 389, 399], "squar": [6, 53, 144, 145, 162, 165, 166, 168, 169, 175, 212, 214, 330, 346, 377, 378, 389, 398, 402, 418, 421, 426, 427], "squeez": [6, 83, 95, 440], "stack": [6, 57, 58, 84, 143, 164, 170, 173, 174, 175, 191, 388, 407, 429], "std": [6, 83, 194, 209, 212, 214, 427, 440], "subtract": 6, "swapax": [6, 83, 202, 440], "take": [6, 57, 83, 322, 381, 407, 440], "take_along_axi": [6, 28, 29, 30, 55, 322, 406], "tan": [6, 25, 26, 66, 395, 409], "tanh": [6, 27, 67, 396, 408], "tensordot": [6, 82, 149, 191], "tile": [6, 380, 444], "trace": [6, 75, 78, 440], "transpos": [6, 83, 162, 202, 216, 440, 444], "trapz": [6, 404], "tri": 6, "tril": [6, 75, 415, 417, 418, 421], "tril_indic": [6, 418, 421], "tril_indices_from": 6, "trim_zero": 6, "triu": [6, 75, 415, 420], "triu_indic": 6, "triu_indices_from": 6, "true_divid": [6, 81], "trunc": [6, 31, 54, 124, 384, 387], "typenam": 6, "union1d": 6, "uniqu": [6, 44, 45, 85, 190, 194, 202, 209, 212, 213, 214, 378, 402, 404, 427], "unpackbit": 6, "unravel_index": [6, 28, 29], "unwrap": [6, 73, 324], "vander": 6, "var": [6, 83, 194, 209, 212, 214, 402, 440], "vdot": [6, 82, 191], "vsplit": [6, 58], "vstack": [6, 57, 58, 84, 143, 388, 401], "where": [6, 11, 12, 13, 14, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 32, 34, 35, 36, 37, 38, 42, 43, 44, 46, 47, 48, 49, 53, 54, 56, 59, 60, 62, 63, 64, 66, 67, 75, 78, 80, 81, 83, 89, 90, 91, 93, 94, 95, 96, 97, 98, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 140, 141, 144, 145, 148, 149, 150, 151, 152, 153, 154, 159, 160, 161, 162, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 197, 198, 199, 200, 203, 208, 209, 210, 211, 212, 213, 214, 261, 262, 282, 283, 284, 289, 300, 302, 306, 307, 309, 310, 311, 312, 316, 317, 318, 319, 326, 348, 353, 354, 355, 356, 357, 358, 359, 361, 362, 367, 370, 377, 378, 379, 383, 384, 386, 389, 390, 393, 394, 395, 396, 398, 399, 402, 403, 404, 408, 409, 413, 415, 422, 423, 426, 427, 431, 432], "who": 6, "zero": [6, 14, 19, 28, 29, 30, 32, 68, 76, 80, 83, 89, 90, 98, 104, 109, 124, 131, 135, 136, 145, 170, 173, 177, 190, 192, 194, 198, 202, 204, 205, 208, 209, 210, 212, 213, 214, 287, 308, 311, 312, 317, 319, 326, 328, 356, 358, 359, 361, 378, 393, 394, 397, 402, 404, 410, 415, 416, 419, 427, 432], "zeros_lik": [6, 32, 90, 136, 312, 431], "astyp": [6, 83, 137, 308], "byteswap": 6, "dump": 6, "fill": [6, 32, 83, 89, 90, 118, 135, 136, 196, 271, 311, 312, 406, 415, 431, 432], "flatten": [6, 28, 29, 30, 58, 75, 78, 83, 204, 205, 277, 291, 298, 308, 322, 375, 380, 385, 397, 407, 428], "getfield": [6, 85], "item": [6, 83, 130, 131, 133, 433], "itemset": 6, "newbyteord": [6, 85], "setfield": [6, 85], "setflag": 6, "tobyt": 6, "tofil": [6, 131], "tolist": 6, "tostr": 6, "view": [6, 41, 42, 43, 50, 83, 95, 121, 122, 123, 196, 202, 216, 294, 305, 322, 381, 400, 405, 413], "linalg": [6, 82, 399], "choleski": 6, "cond": 6, "det": [6, 175], "eig": [6, 166, 167], "eigh": 6, "eigval": [6, 166], "eigvalsh": 6, "inv": [6, 173], "lstsq": 6, "matrix_pow": [6, 399], "matrix_rank": 6, "multi_dot": [6, 82], "norm": [6, 100, 101, 103, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 117, 163, 444], "pinv": 6, "qr": 6, "slogdet": [6, 164], "solv": [6, 444], "svd": [6, 170, 173], "tensorinv": 6, "tensorsolv": 6, "fft": [6, 433, 444], "fft2": 6, "fftfreq": 6, "fftn": 6, "fftshift": 6, "hfft": 6, "ifft": 6, "ifft2": 6, "ifftn": 6, "ifftshift": 6, "ihfft": 6, "irfft": 6, "irfft2": 6, "irfftn": 6, "rfft": 6, "rfft2": 6, "rfftfreq": 6, "rfftn": 6, "beta": [6, 337], "binomi": [6, 345], "byte": [6, 40, 83, 85, 130, 131, 179, 266, 281, 285], "chisquar": 6, "choic": [6, 55, 83, 267], "default_rng": 6, "dirichlet": 6, "exponenti": [6, 93, 94, 96, 180, 184, 190, 339, 365], "gamma": [6, 366], "geometr": [6, 137, 178], "get_stat": [6, 326], "gumbel": 6, "hypergeometr": 6, "laplac": 6, "logist": 6, "lognorm": 6, "logseri": 6, "multinomi": 6, "multivariate_norm": 6, "negative_binomi": 6, "noncentral_chisquar": 6, "noncentral_f": 6, "normal": [6, 69, 166, 174, 326, 341, 344, 355, 367], "pareto": 6, "permut": [6, 83, 202, 305, 413, 444], "poisson": 6, "rand": [6, 326, 356, 358, 359, 361], "randint": [6, 83, 280, 326, 357], "randn": [6, 121, 122, 123, 173, 174, 177, 326, 401], "random_integ": [6, 326, 354], "random_sampl": [6, 326, 353, 356, 359, 361], "ranf": 6, "rayleigh": 6, "seed": [6, 83, 280, 326], "set_stat": 6, "shuffl": 6, "standard_cauchi": 6, "standard_exponenti": 6, "standard_gamma": 6, "standard_norm": [6, 326, 355], "standard_t": 6, "triangular": [6, 162, 174], "uniform": [6, 85, 189, 326, 353, 356, 358, 359, 361], "vonmis": 6, "wald": 6, "weibul": [6, 374], "zipf": 6, "show": [9, 85, 144, 188, 196, 208, 210, 213, 364], "constant": [9, 85], "alias": 9, "bool": [9, 14, 18, 19, 28, 29, 32, 37, 40, 44, 52, 64, 83, 85, 91, 100, 106, 114, 137, 140, 141, 152, 153, 154, 160, 161, 162, 170, 172, 173, 177, 178, 189, 190, 192, 194, 196, 198, 204, 205, 208, 209, 210, 212, 213, 214, 266, 308, 309, 378, 381, 402, 404, 426, 427], "complex64": [9, 44, 100, 106], "complex128": [9, 44, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 382], "bool_": 9, "cdoubl": 9, "complex": [9, 11, 12, 18, 25, 26, 52, 59, 60, 82, 83, 85, 92, 119, 147, 166, 167, 174, 175, 177, 190, 191, 212, 213, 214, 269, 270, 319, 376, 378, 393, 398, 402, 404, 427, 428, 440, 444], "cfloat": 9, "csingl": 9, "doubl": [9, 339, 410], "float": [9, 15, 18, 20, 25, 34, 35, 37, 44, 52, 63, 85, 89, 90, 98, 119, 130, 131, 132, 133, 134, 135, 136, 139, 145, 147, 170, 172, 173, 178, 179, 189, 190, 192, 194, 198, 209, 212, 213, 214, 311, 312, 326, 330, 355, 356, 358, 359, 361, 364, 365, 367, 370, 376, 377, 378, 402, 404, 415, 427, 431, 432, 440, 444], "float_": 9, "float16": 9, "int": [9, 20, 28, 29, 30, 37, 44, 45, 51, 58, 70, 75, 76, 78, 80, 83, 85, 89, 90, 91, 95, 98, 119, 121, 130, 131, 132, 133, 134, 135, 136, 137, 139, 145, 146, 148, 178, 189, 190, 192, 194, 198, 202, 204, 205, 208, 209, 210, 212, 213, 214, 266, 311, 312, 314, 318, 322, 326, 354, 357, 378, 380, 381, 385, 386, 387, 392, 397, 400, 401, 402, 404, 405, 407, 410, 411, 413, 415, 416, 417, 418, 419, 420, 421, 426, 427, 431, 432, 440], "int_": 9, "intc": 9, "singl": [9, 30, 51, 57, 83, 171, 299, 326, 345, 354, 355, 356, 357, 358, 359, 361, 367, 440], "singlecomplex": 9, "e": [9, 22, 24, 83, 85, 89, 90, 95, 98, 131, 135, 136, 145, 175, 180, 301, 311, 312, 326, 405, 415, 431, 432], "euler_gamma": 9, "inf": [9, 15, 26, 34, 35, 63, 81, 152, 153, 154, 163, 172, 180, 181, 183, 193, 199, 204, 205, 208, 210, 213, 319, 398, 422], "infin": [9, 14, 19, 124, 125, 152, 153, 154, 208, 210, 213, 379, 423, 444], "infti": 9, "nan": [9, 14, 15, 19, 28, 29, 34, 35, 81, 126, 127, 152, 153, 154, 181, 192, 193, 194, 198, 199, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 317, 318, 319, 398, 402, 422, 427, 444], "ninf": [9, 208, 210, 213], "nzero": 9, "pi": [9, 18, 26, 66, 67, 74, 395, 396, 408, 409, 425], "pinf": 9, "pzero": 9, "out": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 66, 67, 68, 69, 70, 74, 75, 78, 80, 81, 82, 83, 84, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 158, 159, 160, 161, 168, 171, 173, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 202, 203, 204, 205, 208, 209, 210, 211, 212, 213, 214, 261, 262, 263, 264, 267, 268, 271, 272, 278, 282, 283, 284, 289, 295, 300, 302, 304, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 325, 326, 348, 353, 354, 355, 356, 357, 358, 359, 361, 367, 370, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 419, 422, 423, 425, 426, 427, 428, 429, 431, 432], "none": [11, 12, 13, 14, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 44, 45, 46, 47, 48, 49, 53, 54, 55, 56, 58, 59, 60, 62, 63, 66, 67, 68, 69, 70, 75, 78, 80, 81, 82, 83, 85, 86, 89, 90, 91, 93, 94, 95, 96, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 121, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 140, 141, 142, 143, 144, 145, 148, 150, 152, 153, 154, 159, 160, 161, 163, 170, 171, 172, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 203, 204, 205, 208, 209, 210, 211, 212, 213, 214, 261, 262, 263, 264, 265, 267, 268, 272, 280, 282, 283, 284, 288, 289, 290, 293, 295, 298, 299, 300, 302, 304, 306, 307, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 377, 378, 379, 380, 381, 383, 384, 385, 387, 388, 389, 390, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 412, 413, 414, 415, 417, 420, 422, 423, 426, 427, 429, 430, 431, 432, 440], "order": [11, 12, 13, 21, 22, 23, 24, 25, 26, 27, 30, 32, 34, 35, 36, 38, 39, 40, 46, 47, 48, 49, 53, 54, 56, 59, 60, 62, 63, 66, 67, 81, 83, 85, 87, 88, 89, 90, 91, 93, 94, 96, 98, 121, 122, 123, 124, 125, 131, 135, 136, 140, 141, 144, 150, 152, 153, 154, 159, 160, 161, 166, 167, 172, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 193, 196, 199, 200, 202, 203, 221, 265, 266, 271, 278, 288, 291, 298, 307, 309, 311, 312, 314, 316, 317, 319, 375, 377, 379, 381, 383, 384, 389, 390, 393, 394, 395, 396, 397, 398, 399, 403, 408, 409, 410, 413, 422, 423, 426, 431, 432, 444], "k": [11, 12, 13, 21, 22, 23, 24, 25, 26, 27, 32, 34, 35, 39, 40, 46, 47, 48, 49, 53, 54, 56, 59, 60, 62, 63, 66, 67, 75, 78, 81, 83, 91, 93, 94, 96, 98, 124, 125, 140, 141, 144, 150, 152, 153, 154, 158, 159, 160, 161, 174, 176, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 193, 199, 200, 203, 221, 266, 271, 278, 307, 309, 316, 317, 319, 377, 379, 383, 384, 389, 393, 394, 395, 396, 398, 399, 403, 408, 409, 410, 415, 416, 417, 418, 419, 420, 421, 422, 423, 448], "subok": [11, 12, 13, 21, 22, 23, 24, 25, 26, 27, 32, 40, 46, 47, 48, 49, 50, 51, 53, 54, 59, 60, 62, 63, 66, 67, 81, 83, 90, 91, 93, 94, 96, 124, 125, 126, 127, 128, 136, 140, 141, 144, 150, 152, 153, 154, 159, 160, 161, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 193, 199, 200, 203, 266, 307, 309, 312, 316, 317, 319, 377, 379, 383, 384, 389, 393, 394, 395, 396, 398, 399, 403, 408, 409, 422, 423, 432], "kwarg": [11, 12, 13, 15, 21, 22, 23, 24, 25, 26, 27, 46, 47, 48, 49, 53, 54, 56, 59, 60, 63, 66, 67, 71, 72, 81, 83, 87, 91, 93, 94, 96, 99, 124, 125, 126, 127, 128, 132, 139, 140, 141, 144, 150, 152, 153, 154, 159, 160, 161, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 193, 199, 200, 201, 203, 206, 207, 250, 268, 294, 307, 309, 316, 317, 319, 377, 379, 383, 384, 389, 393, 394, 395, 396, 398, 399, 403, 408, 409, 414, 422, 423, 424], "calcul": [11, 12, 18, 44, 72, 80, 86, 93, 94, 96, 99, 124, 126, 127, 139, 173, 184, 190, 191, 194, 200, 209, 212, 213, 214, 317, 378, 379, 398, 402, 427, 428, 433], "valu": [11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 38, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 79, 80, 81, 83, 85, 86, 89, 90, 91, 93, 94, 96, 97, 98, 99, 100, 106, 118, 119, 120, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 140, 141, 144, 145, 148, 150, 152, 153, 154, 159, 160, 161, 162, 167, 170, 172, 173, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 203, 204, 205, 208, 209, 210, 211, 212, 213, 214, 218, 219, 222, 224, 225, 227, 228, 229, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 251, 253, 255, 256, 257, 258, 259, 260, 263, 264, 266, 268, 271, 275, 277, 288, 290, 307, 308, 309, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 326, 336, 353, 354, 370, 377, 378, 379, 380, 381, 383, 384, 385, 387, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 402, 403, 404, 406, 407, 408, 409, 412, 422, 423, 425, 427, 431, 432, 440, 444], "wise": [11, 12, 13, 15, 18, 21, 22, 23, 24, 25, 26, 27, 31, 33, 46, 47, 48, 49, 53, 54, 57, 58, 59, 60, 63, 66, 67, 81, 83, 84, 91, 93, 94, 96, 99, 124, 126, 127, 128, 140, 141, 143, 147, 150, 151, 152, 153, 154, 159, 160, 161, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 192, 193, 198, 199, 200, 201, 203, 208, 210, 211, 270, 307, 309, 316, 317, 319, 376, 377, 379, 383, 384, 387, 388, 389, 393, 394, 395, 396, 398, 399, 401, 403, 408, 409, 422, 423, 429, 440], "contain": [11, 12, 14, 19, 20, 28, 29, 46, 47, 48, 49, 56, 64, 70, 83, 85, 129, 134, 138, 148, 150, 159, 166, 174, 177, 190, 192, 194, 198, 204, 205, 208, 209, 210, 212, 213, 214, 294, 326, 377, 378, 383, 398, 402, 404, 413, 417, 420, 427, 440], "paramet": [11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 266, 275, 278, 294, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 326, 327, 328, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 426, 427, 428, 429, 430, 431, 432], "onli": [11, 12, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 38, 40, 41, 44, 54, 56, 59, 60, 62, 65, 66, 67, 69, 79, 83, 85, 86, 89, 90, 93, 96, 98, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 124, 130, 131, 132, 133, 134, 135, 136, 137, 148, 152, 153, 154, 159, 162, 174, 177, 178, 179, 180, 181, 182, 183, 186, 189, 191, 192, 194, 195, 198, 204, 205, 208, 209, 210, 211, 212, 214, 266, 298, 307, 311, 312, 314, 316, 318, 319, 321, 326, 348, 354, 370, 381, 383, 384, 387, 390, 391, 393, 394, 395, 396, 397, 402, 404, 406, 407, 408, 409, 412, 423, 427, 430, 431, 432, 440], "either": [11, 12, 13, 14, 15, 19, 21, 22, 23, 24, 25, 26, 27, 31, 38, 44, 46, 47, 48, 49, 54, 59, 60, 63, 66, 67, 68, 81, 85, 91, 93, 96, 97, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 124, 125, 126, 127, 128, 140, 141, 144, 149, 150, 151, 152, 153, 154, 159, 160, 161, 172, 174, 176, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 193, 199, 200, 203, 204, 205, 208, 210, 211, 213, 307, 308, 309, 313, 315, 316, 317, 318, 319, 321, 362, 378, 379, 383, 384, 387, 393, 394, 395, 396, 398, 399, 403, 404, 406, 407, 408, 409, 422, 423, 430], "tensor": [11, 12, 13, 14, 15, 19, 21, 22, 23, 24, 25, 26, 27, 31, 37, 46, 47, 48, 49, 54, 59, 60, 63, 66, 67, 68, 81, 83, 91, 93, 96, 97, 124, 125, 126, 127, 128, 140, 141, 144, 150, 152, 153, 154, 159, 160, 161, 166, 176, 180, 181, 182, 183, 184, 185, 186, 187, 188, 193, 199, 200, 203, 204, 205, 208, 210, 211, 307, 308, 309, 313, 315, 316, 317, 318, 319, 320, 321, 379, 383, 384, 387, 393, 394, 395, 396, 398, 399, 403, 406, 408, 409, 410, 422, 423, 430], "usm_ndarrai": [11, 12, 13, 14, 15, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 37, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 63, 64, 66, 67, 68, 70, 80, 81, 82, 83, 84, 90, 91, 93, 94, 95, 96, 97, 121, 122, 123, 124, 125, 126, 127, 128, 136, 140, 141, 143, 144, 147, 149, 150, 152, 153, 154, 158, 159, 160, 161, 162, 164, 166, 168, 170, 171, 173, 174, 175, 176, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 196, 198, 199, 200, 202, 203, 204, 205, 208, 209, 210, 211, 212, 213, 214, 266, 307, 308, 309, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 416, 419, 422, 423, 427, 428, 429, 430, 432], "keyword": [11, 12, 13, 15, 21, 22, 23, 24, 25, 26, 27, 46, 47, 48, 49, 53, 54, 56, 63, 66, 67, 70, 71, 72, 81, 86, 93, 94, 96, 99, 124, 125, 126, 127, 128, 132, 139, 144, 150, 159, 181, 182, 183, 184, 191, 193, 199, 200, 201, 203, 206, 207, 307, 316, 317, 319, 377, 379, 383, 384, 389, 393, 394, 395, 396, 403, 408, 409, 414, 422, 423, 440], "argument": [11, 12, 13, 15, 18, 20, 21, 22, 23, 24, 25, 26, 27, 46, 47, 48, 49, 52, 53, 54, 56, 58, 63, 66, 67, 71, 72, 81, 82, 83, 85, 86, 92, 93, 94, 96, 99, 124, 125, 126, 127, 128, 139, 144, 147, 150, 156, 157, 159, 171, 181, 182, 183, 184, 191, 193, 199, 200, 201, 203, 206, 207, 294, 307, 316, 317, 319, 376, 377, 379, 382, 383, 384, 389, 393, 394, 395, 396, 401, 403, 408, 409, 410, 414, 422, 423, 440], "unsupport": [11, 12, 13, 15, 21, 22, 23, 24, 25, 26, 27, 46, 47, 48, 49, 53, 54, 56, 63, 66, 67, 71, 72, 81, 93, 94, 96, 99, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 124, 125, 126, 127, 128, 139, 144, 150, 159, 181, 182, 183, 184, 193, 199, 200, 201, 203, 206, 207, 307, 316, 317, 319, 377, 379, 383, 384, 389, 393, 394, 395, 396, 403, 408, 409, 414, 422, 423], "sequenti": [11, 12, 13, 14, 15, 19, 21, 22, 23, 24, 25, 26, 27, 31, 46, 47, 48, 49, 53, 54, 59, 60, 63, 65, 66, 67, 69, 71, 72, 79, 81, 86, 87, 88, 91, 92, 93, 94, 96, 97, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 124, 125, 126, 127, 128, 139, 140, 141, 144, 150, 151, 152, 153, 154, 159, 160, 161, 180, 181, 182, 183, 184, 185, 186, 187, 188, 193, 195, 199, 200, 201, 203, 206, 207, 211, 307, 308, 309, 313, 315, 316, 317, 318, 321, 377, 379, 383, 384, 387, 389, 393, 394, 395, 396, 398, 399, 403, 406, 408, 409, 414, 422, 423, 430], "exclud": [11, 12, 178, 326, 370], "note": [11, 12, 13, 14, 18, 19, 28, 29, 30, 31, 39, 62, 70, 73, 81, 83, 85, 95, 124, 130, 131, 132, 133, 134, 148, 152, 172, 179, 189, 200, 203, 212, 213, 214, 271, 294, 308, 321, 324, 329, 331, 332, 342, 347, 377, 381, 397, 402, 403, 405, 406, 410, 411, 422, 427, 428], "shorthand": [11, 12, 13, 46, 47, 48, 49, 81, 91, 125, 140, 141, 150, 159, 160, 161, 185, 187, 191, 203, 307, 309, 316, 317, 379, 383, 403, 422, 430], "1j": [11, 12, 18, 59, 60, 83, 147, 177, 279, 292, 376, 399], "5620499351813308": [11, 12], "x1": [13, 15, 18, 25, 26, 40, 45, 46, 48, 49, 55, 63, 65, 71, 72, 73, 74, 77, 79, 81, 83, 86, 91, 99, 118, 125, 126, 127, 128, 139, 140, 141, 144, 151, 159, 160, 161, 165, 172, 184, 185, 186, 187, 188, 191, 193, 195, 196, 199, 200, 201, 203, 206, 207, 266, 307, 309, 313, 314, 316, 317, 323, 324, 325, 363, 379, 383, 385, 390, 403, 412, 414, 418, 421, 422, 425], "x2": [13, 14, 15, 18, 19, 25, 26, 32, 46, 48, 49, 63, 65, 81, 91, 125, 126, 127, 128, 140, 141, 144, 151, 159, 160, 161, 184, 185, 186, 187, 188, 191, 193, 196, 199, 200, 203, 307, 308, 309, 313, 316, 317, 379, 383, 385, 390, 398, 403, 422], "scalar": [13, 15, 26, 32, 34, 35, 36, 37, 38, 46, 48, 49, 52, 62, 63, 64, 70, 75, 78, 80, 81, 82, 83, 85, 91, 125, 126, 127, 128, 135, 136, 137, 140, 141, 144, 149, 155, 158, 159, 160, 161, 176, 178, 184, 185, 187, 188, 189, 191, 193, 196, 199, 200, 203, 275, 280, 309, 313, 317, 322, 326, 327, 328, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 345, 348, 349, 351, 352, 354, 357, 360, 362, 366, 368, 369, 370, 371, 372, 373, 374, 379, 383, 403, 410, 422, 426, 428, 430, 440], "both": [13, 15, 26, 44, 46, 48, 49, 56, 63, 70, 81, 82, 91, 125, 126, 127, 128, 140, 141, 144, 149, 158, 159, 160, 161, 172, 184, 185, 187, 188, 191, 193, 199, 200, 203, 213, 309, 313, 317, 379, 383, 403, 410, 422, 428], "equival": [13, 14, 16, 17, 19, 28, 29, 30, 31, 44, 62, 70, 81, 82, 83, 84, 95, 190, 203, 221, 261, 262, 294, 305, 316, 325, 326, 354, 378, 381, 387, 392, 397, 403, 404, 410, 413, 422, 440], "term": [13, 81, 203, 403, 422], "broadcast": [13, 44, 50, 51, 56, 64, 81, 126, 127, 144, 172, 173, 185, 187, 188, 190, 191, 193, 194, 199, 203, 209, 212, 213, 214, 317, 321, 322, 378, 380, 402, 403, 404, 407, 411, 422, 427], "b": [13, 15, 28, 29, 46, 49, 57, 58, 64, 70, 71, 72, 82, 83, 84, 85, 86, 91, 128, 130, 131, 140, 141, 143, 149, 158, 160, 161, 164, 171, 173, 175, 176, 177, 185, 187, 191, 192, 198, 206, 207, 309, 313, 317, 327, 382, 388, 401, 410, 411, 414, 428, 429], "7": [13, 15, 20, 41, 54, 56, 64, 68, 70, 72, 75, 76, 80, 81, 83, 86, 93, 121, 124, 137, 139, 149, 151, 158, 177, 195, 203, 207, 280, 308, 319, 320, 326, 350, 376, 379, 382, 384, 385, 403, 404, 405, 406, 410, 416, 419, 422, 423, 428, 430], "oper": [13, 46, 47, 48, 49, 81, 85, 91, 95, 125, 140, 141, 150, 159, 160, 161, 162, 185, 186, 187, 188, 191, 203, 307, 309, 316, 317, 321, 379, 383, 403, 411, 422, 433, 444], "axi": [14, 16, 17, 18, 19, 28, 29, 30, 44, 57, 58, 68, 70, 71, 72, 80, 83, 84, 86, 95, 100, 105, 106, 110, 111, 114, 121, 122, 123, 126, 127, 132, 137, 139, 143, 148, 172, 178, 189, 190, 191, 192, 193, 194, 195, 198, 199, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 261, 262, 263, 264, 265, 272, 282, 283, 284, 288, 289, 290, 293, 298, 299, 300, 302, 304, 306, 314, 318, 320, 321, 322, 375, 378, 380, 381, 385, 386, 388, 397, 400, 401, 402, 404, 405, 406, 407, 410, 411, 413, 414, 427, 429, 440], "keepdim": [14, 16, 17, 19, 28, 29, 44, 68, 83, 172, 190, 192, 194, 195, 198, 204, 205, 208, 209, 210, 211, 212, 213, 214, 261, 262, 263, 264, 282, 283, 284, 289, 300, 302, 306, 318, 320, 322, 378, 402, 404, 407, 427], "fals": [14, 15, 16, 17, 18, 19, 28, 29, 32, 33, 36, 38, 40, 44, 46, 47, 49, 50, 51, 52, 62, 68, 69, 83, 85, 90, 91, 118, 132, 136, 137, 140, 141, 148, 150, 151, 152, 153, 154, 160, 161, 162, 170, 172, 173, 177, 178, 185, 186, 187, 188, 189, 190, 192, 194, 195, 196, 198, 204, 205, 208, 209, 210, 211, 212, 213, 214, 261, 262, 263, 264, 266, 282, 283, 284, 289, 300, 302, 306, 309, 312, 318, 320, 378, 381, 394, 402, 404, 426, 427, 432], "whether": [14, 15, 19, 85, 162, 174, 178, 381], "given": [14, 19, 20, 28, 29, 31, 32, 34, 35, 36, 38, 40, 44, 57, 62, 68, 69, 71, 72, 80, 82, 83, 84, 85, 86, 89, 90, 118, 121, 126, 127, 135, 136, 137, 139, 144, 168, 178, 189, 192, 193, 196, 198, 199, 206, 207, 208, 210, 211, 212, 213, 214, 263, 264, 266, 272, 284, 289, 290, 295, 300, 302, 306, 311, 312, 318, 320, 321, 326, 331, 353, 370, 378, 380, 384, 385, 386, 387, 388, 402, 404, 410, 411, 414, 415, 427, 429, 431, 432, 440], "evalu": [14, 15, 19, 83, 87, 88, 91, 196, 261, 262, 313, 410], "logic": [14, 19, 185, 187, 188, 433, 444], "AND": [14, 46, 47, 48, 49, 150, 185, 186, 187, 188], "reduct": [14, 19], "method": [14, 16, 17, 19, 30, 40, 62, 82, 83, 85, 120, 129, 131, 170, 173, 177, 266, 271, 294, 326, 381, 392, 404, 413, 433], "Not": [14, 19, 152, 206, 208, 210, 211, 213, 318], "number": [14, 18, 19, 20, 31, 44, 45, 50, 51, 59, 60, 68, 78, 80, 83, 85, 95, 98, 119, 124, 125, 130, 131, 133, 134, 137, 145, 146, 152, 163, 170, 172, 174, 175, 177, 178, 189, 206, 208, 210, 211, 212, 213, 214, 286, 295, 296, 297, 308, 318, 319, 326, 328, 338, 362, 379, 380, 384, 385, 386, 387, 393, 394, 402, 405, 411, 413, 415, 423, 426, 427, 444], "becaus": [14, 19], "x3": [14, 19], "rtol": [15, 151], "1e": [15, 96, 151, 173, 181, 182, 184, 344], "05": [15, 151], "atol": [15, 151], "08": [15, 66, 151, 344, 395], "two": [15, 33, 41, 42, 46, 47, 48, 49, 61, 65, 70, 78, 80, 82, 83, 85, 87, 88, 95, 149, 150, 151, 158, 166, 171, 176, 185, 187, 188, 191, 192, 193, 198, 199, 202, 208, 210, 288, 303, 313, 326, 355, 405, 410, 417, 420, 428], "within": [15, 20, 33, 40, 83, 151, 266, 321, 326, 370], "toler": [15, 33, 151], "A": [15, 20, 32, 34, 35, 36, 37, 38, 39, 40, 50, 51, 53, 56, 57, 62, 63, 64, 75, 78, 83, 85, 89, 90, 94, 95, 98, 121, 122, 123, 129, 130, 131, 132, 133, 134, 135, 136, 137, 145, 148, 162, 167, 170, 171, 174, 175, 178, 179, 189, 191, 197, 211, 213, 266, 271, 278, 296, 310, 311, 312, 318, 326, 328, 345, 348, 353, 354, 355, 356, 357, 358, 359, 361, 362, 367, 370, 375, 377, 380, 389, 394, 405, 410, 411, 413, 415, 426, 431, 432], "boolean": [15, 46, 48, 49, 64, 85, 148, 151, 152, 153, 154, 185, 186, 187, 188, 190, 194, 209, 211, 212, 213, 214, 378, 381, 394, 402, 404, 406, 427], "dim": 15, "typeerror": [15, 44, 64, 68, 100, 106, 114], "rais": [15, 20, 30, 32, 34, 35, 36, 38, 50, 51, 55, 56, 62, 64, 68, 82, 83, 89, 90, 94, 98, 100, 106, 114, 130, 131, 132, 133, 134, 135, 136, 145, 169, 171, 179, 190, 191, 192, 194, 198, 204, 205, 208, 209, 210, 212, 213, 214, 266, 267, 296, 311, 312, 317, 378, 381, 397, 399, 400, 402, 404, 427, 431, 432], "integ": [15, 20, 31, 44, 46, 47, 48, 49, 51, 83, 85, 124, 125, 146, 150, 151, 159, 169, 172, 190, 192, 194, 198, 208, 209, 210, 212, 213, 214, 298, 317, 321, 326, 354, 357, 362, 378, 379, 381, 383, 384, 387, 399, 402, 404, 406, 410, 423, 427, 440], "1e10": [15, 151], "00001e10": [15, 151], "initi": [16, 17, 83, 89, 134, 192, 198, 208, 210, 211, 213, 282, 284, 289, 302, 318, 326, 404], "alia": [16, 17, 81, 119, 215, 326, 356, 359, 361, 388, 422, 429], "z": [18, 20, 32, 34, 35, 36, 38, 62, 75, 78, 89, 90, 98, 130, 131, 132, 133, 135, 136, 137, 145, 178, 179, 189, 196, 197, 310, 311, 312, 336, 415, 426, 431, 432], "deg": [18, 325], "point": [18, 20, 25, 34, 35, 44, 63, 85, 89, 90, 98, 119, 130, 131, 132, 134, 135, 136, 145, 178, 179, 190, 194, 209, 212, 213, 214, 311, 312, 326, 355, 367, 377, 378, 402, 404, 415, 427, 431, 432, 444], "option": [18, 20, 28, 29, 30, 32, 34, 35, 36, 37, 38, 40, 44, 52, 53, 56, 58, 62, 63, 64, 70, 75, 78, 80, 82, 83, 85, 89, 90, 94, 98, 121, 130, 131, 132, 133, 134, 135, 136, 137, 143, 145, 148, 162, 170, 171, 172, 173, 174, 177, 178, 179, 189, 190, 191, 192, 194, 196, 197, 198, 204, 205, 208, 209, 210, 212, 213, 214, 266, 278, 310, 311, 312, 326, 348, 353, 354, 355, 356, 357, 358, 359, 361, 362, 367, 370, 375, 377, 378, 380, 381, 385, 386, 388, 389, 397, 400, 401, 402, 404, 406, 413, 415, 416, 417, 418, 419, 420, 421, 426, 427, 429, 431, 432], "counterclockwis": 18, "plane": 18, "determin": [18, 131, 132, 134, 157, 164, 174, 175, 185, 187, 188, 191], "promot": [18, 20, 32, 34, 35, 36, 38, 52, 137, 178, 189, 191, 382, 411], "rule": [18, 20, 32, 34, 35, 36, 38, 44, 52, 64, 70, 137, 178, 189, 190, 191, 194, 209, 212, 213, 214, 378, 382, 402, 404, 414, 427], "although": [18, 85, 411], "undefin": [18, 83, 288], "arc": [18, 25, 26], "tangent": [18, 21, 22, 23, 24, 25, 26, 27, 66, 67, 395, 396, 408, 409], "quadrant": [18, 25, 26], "correctli": [18, 25, 26, 172, 308], "trigonometr": [18, 21, 22, 23, 24, 25, 26, 27, 66, 67, 395, 396, 408, 409, 444], "invers": [18, 21, 22, 23, 24, 25, 26, 27, 47, 66, 67, 94, 95, 96, 106, 107, 108, 109, 110, 111, 112, 113, 150, 168, 173, 180, 182, 372, 395, 396, 408, 409], "0j": [18, 82, 83, 191, 279, 292, 393], "57079633": [18, 26, 325, 425], "78539816": [18, 25, 26, 425], "mai": [18, 40, 52, 56, 58, 64, 83, 85, 95, 143, 166, 174, 189, 191, 209, 212, 214, 266, 322, 388, 401, 411, 429, 440], "vari": [18, 132, 148, 166, 209, 212, 214], "90": [18, 74, 430], "45": [18, 26], "OR": [19, 46, 47, 48, 49, 150, 185, 186, 187, 188], "stop": [20, 137, 178, 189], "like": [20, 32, 34, 35, 36, 38, 40, 41, 42, 43, 57, 83, 84, 89, 98, 130, 131, 132, 133, 134, 135, 137, 145, 178, 179, 189, 266, 311, 326, 370, 381, 431, 444], "usm_typ": [20, 32, 34, 35, 36, 37, 38, 62, 75, 78, 83, 89, 90, 98, 130, 131, 132, 133, 134, 135, 136, 137, 145, 148, 178, 179, 189, 197, 310, 311, 312, 326, 348, 353, 354, 355, 356, 357, 358, 359, 361, 367, 370, 415, 426, 431, 432], "sycl_queu": [20, 32, 34, 35, 36, 37, 38, 62, 75, 78, 83, 89, 90, 98, 130, 131, 132, 133, 134, 135, 136, 137, 145, 148, 178, 179, 189, 197, 310, 311, 312, 326, 348, 353, 354, 355, 356, 357, 358, 359, 361, 362, 367, 370, 415, 426, 431, 432], "evenli": [20, 137, 178, 189, 384, 387], "interv": [20, 95, 137, 178, 189, 326, 354, 356, 358, 359, 361, 369, 370, 405], "end": [20, 85, 137, 178, 189], "doe": [20, 52, 174], "some": [20, 85, 95, 97, 124, 149, 440], "off": 20, "affect": 20, "length": [20, 44, 80, 83, 91, 134, 137, 143, 177, 189, 196, 296, 329, 381, 382, 388, 392, 400, 410, 411, 429], "between": [20, 52, 80, 86, 119, 131, 134, 149, 167, 178, 189, 343, 357, 425], "specifi": [20, 30, 32, 34, 35, 36, 38, 44, 51, 52, 58, 62, 75, 78, 79, 83, 89, 90, 98, 121, 130, 131, 132, 133, 135, 136, 137, 145, 172, 178, 179, 189, 190, 194, 195, 197, 209, 211, 212, 213, 214, 265, 273, 310, 311, 312, 318, 326, 339, 349, 367, 375, 378, 385, 386, 401, 402, 404, 410, 413, 415, 426, 427, 431, 432], "must": [20, 28, 29, 44, 51, 53, 56, 57, 58, 63, 80, 82, 84, 94, 95, 97, 122, 131, 134, 143, 162, 171, 172, 179, 190, 191, 192, 194, 198, 202, 204, 205, 208, 209, 210, 212, 213, 214, 321, 322, 377, 378, 385, 388, 389, 401, 402, 404, 405, 407, 410, 413, 427, 429], "desir": [20, 32, 34, 35, 36, 38, 39, 51, 89, 90, 98, 135, 136, 137, 145, 178, 189, 311, 312, 386, 411, 415, 431, 432], "repres": [20, 32, 34, 35, 36, 37, 38, 44, 83, 85, 129, 132, 137, 148, 175, 178, 189, 196, 214, 296, 326, 440], "consid": [20, 32, 34, 35, 36, 38, 88, 137, 152, 170, 178, 189, 191, 326, 354], "capabl": [20, 32, 34, 35, 36, 38, 44, 137, 178, 189, 191], "when": [20, 32, 34, 35, 36, 38, 39, 40, 44, 62, 64, 83, 85, 137, 172, 174, 178, 189, 191, 208, 210, 266, 386, 406, 410, 430], "string": [20, 32, 34, 35, 36, 37, 38, 62, 75, 78, 85, 89, 90, 98, 130, 131, 132, 133, 134, 135, 136, 137, 145, 148, 178, 179, 189, 197, 310, 311, 312, 326, 348, 353, 354, 355, 356, 357, 358, 359, 361, 362, 367, 370, 415, 426, 431, 432, 440], "sycldevic": [20, 32, 34, 35, 36, 37, 38, 62, 75, 78, 89, 90, 98, 130, 131, 132, 133, 134, 135, 136, 137, 145, 148, 178, 179, 189, 197, 310, 311, 312, 326, 348, 353, 354, 355, 356, 357, 358, 359, 361, 362, 367, 370, 415, 426, 431, 432], "syclqueu": [20, 32, 34, 35, 36, 37, 38, 62, 75, 78, 89, 90, 98, 130, 131, 132, 133, 134, 135, 136, 137, 145, 148, 178, 179, 189, 197, 310, 311, 312, 326, 348, 353, 354, 355, 356, 357, 358, 359, 361, 362, 367, 370, 415, 426, 431, 432], "concept": [20, 32, 34, 35, 36, 37, 38, 62, 75, 78, 89, 90, 98, 130, 131, 132, 133, 134, 135, 136, 137, 145, 148, 178, 179, 189, 197, 310, 311, 312, 326, 348, 353, 354, 355, 356, 357, 358, 359, 361, 362, 367, 370, 415, 426, 431, 432, 440], "output": [20, 30, 32, 34, 35, 36, 37, 38, 53, 56, 62, 63, 75, 78, 80, 82, 85, 89, 90, 91, 94, 98, 130, 131, 132, 133, 134, 135, 136, 137, 140, 141, 145, 147, 148, 160, 161, 169, 171, 178, 179, 189, 191, 194, 196, 197, 205, 209, 212, 213, 214, 257, 309, 310, 311, 312, 326, 327, 328, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 345, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 380, 389, 397, 400, 402, 404, 411, 415, 426, 427, 431, 432, 444], "oneapi": [20, 32, 34, 35, 36, 37, 38, 62, 75, 78, 89, 90, 98, 130, 131, 132, 133, 134, 135, 136, 137, 145, 148, 178, 179, 189, 197, 310, 311, 312, 326, 348, 353, 354, 355, 356, 357, 358, 359, 361, 362, 367, 370, 415, 426, 431, 432], "filter": [20, 32, 34, 35, 36, 37, 38, 62, 75, 78, 89, 90, 98, 130, 131, 132, 133, 134, 135, 136, 137, 145, 148, 178, 179, 189, 197, 310, 311, 312, 326, 348, 353, 354, 355, 356, 357, 358, 359, 361, 362, 367, 370, 415, 426, 431, 432], "selector": [20, 32, 34, 35, 36, 37, 38, 62, 75, 78, 89, 90, 98, 130, 131, 132, 133, 134, 135, 136, 137, 145, 148, 178, 179, 189, 197, 310, 311, 312, 326, 348, 353, 354, 355, 356, 357, 358, 359, 361, 362, 367, 370, 415, 426, 431, 432], "non": [20, 28, 29, 32, 34, 35, 36, 37, 38, 44, 45, 62, 68, 75, 78, 83, 89, 90, 98, 130, 131, 132, 133, 134, 135, 136, 137, 145, 148, 152, 166, 178, 179, 189, 192, 197, 198, 204, 205, 208, 210, 212, 214, 287, 308, 310, 311, 312, 317, 326, 348, 353, 354, 355, 356, 357, 358, 359, 361, 362, 367, 370, 398, 410, 415, 426, 431, 432], "object": [20, 32, 34, 35, 36, 37, 38, 39, 62, 75, 78, 83, 85, 89, 90, 95, 98, 119, 120, 129, 130, 131, 132, 133, 134, 135, 136, 137, 145, 146, 148, 166, 172, 178, 179, 189, 197, 294, 310, 311, 312, 326, 348, 353, 354, 355, 356, 357, 358, 359, 361, 362, 367, 370, 381, 415, 426, 431, 432, 440], "dpnp_arrai": [20, 32, 34, 35, 36, 38, 62, 75, 78, 89, 90, 98, 119, 129, 130, 131, 132, 133, 134, 135, 136, 137, 145, 146, 148, 178, 179, 189, 197, 215, 310, 311, 312, 326, 348, 353, 354, 355, 356, 357, 358, 359, 361, 362, 367, 370, 415, 416, 419, 426, 431, 432, 433], "properti": [20, 32, 34, 35, 36, 37, 38, 62, 75, 78, 83, 89, 90, 98, 130, 131, 132, 133, 134, 135, 136, 137, 145, 148, 174, 178, 179, 189, 197, 216, 274, 276, 277, 279, 281, 285, 286, 292, 296, 297, 301, 305, 310, 311, 312, 326, 348, 353, 354, 355, 356, 357, 358, 359, 361, 362, 367, 370, 415, 426, 431, 432, 440], "share": [20, 32, 34, 35, 36, 37, 38, 62, 75, 78, 89, 90, 98, 130, 131, 132, 133, 134, 135, 136, 137, 145, 148, 178, 179, 189, 197, 310, 311, 312, 326, 348, 353, 354, 355, 356, 357, 358, 359, 361, 367, 370, 415, 426, 431, 432], "usm": [20, 32, 34, 35, 36, 37, 38, 62, 75, 78, 89, 90, 98, 130, 131, 132, 133, 134, 135, 136, 137, 145, 148, 178, 179, 189, 197, 310, 311, 312, 326, 348, 353, 354, 355, 356, 357, 358, 359, 361, 367, 370, 400, 415, 426, 431, 432], "d": [20, 44, 57, 58, 75, 76, 78, 82, 84, 85, 98, 101, 102, 103, 107, 108, 112, 113, 115, 116, 117, 122, 123, 134, 143, 145, 149, 164, 166, 171, 172, 175, 191, 196, 308, 317, 321, 331, 375, 381, 388, 392, 401, 406, 410, 411, 426, 429, 430, 440], "notimplementederror": [20, 30, 32, 34, 35, 36, 38, 50, 51, 56, 62, 83, 89, 90, 98, 130, 131, 132, 133, 134, 135, 136, 145, 179, 191, 192, 194, 198, 208, 209, 210, 212, 213, 214, 266, 311, 312, 397, 402, 404, 427, 431, 432], "care": 20, "handl": [20, 85, 179, 308, 406, 444], "endpoint": [20, 137, 178, 189], "level_zero": [20, 32, 34, 35, 36, 38, 62, 75, 78, 89, 90, 98, 130, 131, 132, 133, 135, 136, 137, 145, 178, 179, 189, 197, 310, 311, 312, 415, 426, 431, 432], "cosin": [21, 22, 23, 24, 25, 26, 27, 66, 67, 395, 396, 408, 409], "sine": [21, 22, 23, 24, 25, 26, 27, 66, 67, 395, 396, 408, 409], "hyperbol": [21, 22, 23, 24, 25, 26, 27, 66, 67, 395, 396, 408, 409, 444], "14159265": [21, 26], "65745445": 22, "99322285": 22, "5707963267948966": 23, "72538256": 24, "99822295": 24, "180": 26, "135": 26, "54930614": 27, "search": [28, 29, 204, 205, 433, 444], "index": [28, 29, 30, 55, 83, 85, 98, 148, 196, 204, 205, 267, 301, 321, 322, 375, 381, 406, 407, 433, 444], "should": [28, 29, 40, 82, 83, 131, 138, 151, 190, 191, 192, 198, 202, 204, 205, 208, 210, 266, 343, 378, 381, 390, 410, 440], "reduc": [28, 29, 44, 174, 177, 190, 192, 194, 196, 198, 204, 205, 208, 209, 210, 212, 213, 214, 378, 402, 404, 427], "ax": [28, 29, 44, 80, 82, 83, 95, 101, 103, 104, 107, 108, 109, 112, 113, 115, 117, 121, 149, 172, 176, 190, 191, 192, 194, 198, 202, 204, 205, 208, 209, 210, 212, 213, 214, 296, 303, 305, 378, 385, 386, 400, 402, 404, 405, 410, 411, 413, 427], "dimens": [28, 29, 32, 41, 42, 43, 44, 57, 58, 64, 69, 70, 76, 80, 83, 85, 95, 122, 123, 143, 148, 149, 170, 172, 174, 190, 192, 194, 196, 197, 198, 202, 204, 205, 208, 209, 210, 212, 213, 214, 278, 286, 296, 310, 322, 326, 356, 358, 359, 361, 378, 381, 392, 400, 401, 402, 404, 405, 407, 411, 417, 418, 420, 421, 427, 440, 444], "singleton": [28, 29, 44, 95, 190, 192, 194, 198, 204, 205, 208, 209, 210, 212, 213, 214, 378, 400, 402, 404, 427], "accordingli": [28, 29, 192, 198, 204, 205, 208, 210], "first": [28, 29, 30, 44, 57, 58, 63, 70, 82, 85, 94, 121, 149, 156, 157, 158, 171, 179, 191, 192, 196, 198, 204, 205, 317, 375, 381, 385, 388, 397, 399, 405, 407, 410, 428, 429], "occurr": [28, 29, 45, 204, 205], "igonr": [28, 29, 204, 205], "convert": [28, 29, 32, 34, 35, 36, 37, 38, 39, 41, 42, 43, 62, 73, 74, 75, 78, 85, 95, 135, 136, 137, 178, 189, 324, 325, 425, 426], "flat": [28, 29, 83, 120, 278, 380], "tupl": [28, 29, 32, 34, 35, 36, 38, 44, 51, 62, 75, 76, 78, 83, 85, 95, 121, 132, 135, 136, 137, 148, 158, 172, 174, 178, 189, 190, 191, 192, 194, 196, 197, 198, 208, 209, 210, 212, 213, 214, 296, 308, 310, 378, 381, 385, 392, 400, 402, 404, 411, 413, 417, 420, 426, 427, 440], "appli": [28, 29, 30, 44, 52, 185, 187, 188, 382, 410], "index_arrai": [28, 29, 30], "call": [28, 29, 30, 36, 38, 85, 132, 171, 221, 400, 411, 430], "multipl": [28, 29, 30, 44, 58, 70, 85, 143, 166, 167, 168, 171, 190, 192, 194, 198, 208, 209, 210, 212, 213, 214, 378, 388, 397, 401, 402, 404, 427, 429, 433], "11": [28, 29, 44, 67, 76, 83, 139, 294, 345, 354, 387, 396, 416, 419], "12": [28, 29, 43, 70, 76, 85, 147, 189, 318, 320, 350, 416, 419], "13": [28, 29, 47, 76, 82, 85, 150, 191, 207], "14": [28, 29, 46, 47, 76, 82, 149, 150, 410], "24": [28, 29, 70, 71, 86, 149, 158, 318, 410], "re": [28, 29, 45, 142, 385, 424], "kind": [30, 40, 52, 58, 64, 83, 85, 119, 143, 171, 190, 191, 213, 265, 266, 288, 298, 314, 378, 388, 397, 401, 404, 429, 444], "would": [30, 58, 83, 85, 132, 148, 171, 191, 288, 326, 397, 401, 407, 413], "last": [30, 70, 80, 121, 137, 149, 171, 178, 189, 191, 375, 381, 385, 397, 400, 410], "stabl": [30, 397], "unlik": [30, 83, 294, 397], "other": [30, 40, 50, 51, 80, 83, 85, 124, 132, 145, 171, 202, 218, 219, 222, 224, 225, 227, 228, 229, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 251, 253, 255, 258, 259, 260, 266, 319, 326, 370, 386, 397, 433, 444], "accept": [30, 326, 397], "yield": [30, 326, 440], "gener": [30, 44, 85, 137, 167, 173, 174, 179, 189, 326, 328, 331, 362, 426, 440, 444], "irrespect": 30, "axiserror": [30, 397], "indirect": [30, 397], "partial": [30, 397], "ind": [30, 417, 420], "decim": [31, 83, 119, 295, 384, 387], "detail": [31, 129, 387, 417, 418, 420, 421, 440], "nearest": [31, 124, 125, 379, 384, 387, 423], "truncat": [31, 54, 124, 364, 384, 387, 423], "ndmin": 32, "array_lik": [32, 34, 35, 36, 37, 38, 39, 44, 62, 64, 75, 78, 135, 136, 137, 167, 169, 172, 178, 189, 322, 326, 392, 410, 418, 421, 426], "form": [32, 34, 35, 36, 37, 38, 57, 62, 75, 78, 84, 135, 136, 137, 178, 189, 388, 426, 429], "layout": [32, 34, 35, 36, 38, 39, 53, 56, 62, 63, 83, 89, 90, 94, 98, 135, 136, 191, 276, 311, 312, 377, 381, 389, 431, 432, 433], "newli": [32, 34, 35, 40, 53, 56, 62, 63, 83, 89, 90, 94, 98, 135, 136, 191, 266, 311, 312, 377, 389, 431, 432], "satisfi": [32, 36, 38, 40, 83, 97, 168, 266], "new": [32, 40, 50, 51, 57, 58, 83, 84, 85, 89, 90, 95, 129, 133, 134, 135, 136, 137, 143, 145, 178, 189, 202, 211, 266, 294, 305, 311, 312, 318, 381, 385, 386, 388, 401, 411, 413, 429, 431, 432, 440], "uniniti": [32, 89, 90, 135, 311, 431], "than": [32, 83, 119, 122, 123, 132, 143, 170, 173, 174, 288, 393, 394, 400, 401, 410], "a1": 33, "a2": 33, "equal_nan": [33, 151], "consist": [33, 131, 178, 407, 410], "contigu": [34, 35, 36, 38, 82, 83, 171, 278, 291, 375, 381], "check": [34, 35, 52, 162, 173, 176], "construct": [34, 35, 55, 75, 78, 83, 85, 130, 131, 132, 133, 134, 179, 197, 267, 310, 380, 411, 433], "grid": [34, 35, 132, 148, 196, 197, 310], "No": [35, 162], "perform": [35, 56, 80, 121, 162], "match": [35, 58, 64, 80, 85, 131, 149, 191, 321, 322, 401, 406, 407, 410], "pass": [35, 83, 85, 132, 294], "through": [35, 85, 440], "subclass": [35, 157], "content": [36, 83, 363], "flag": [36, 38, 83, 85, 271], "about": [36, 38, 83, 119, 276, 440], "f_contigu": [36, 38], "make": [36, 38, 57, 85, 196], "now": [36, 38, 76], "c_contigu": [36, 38, 83, 271], "Then": [36, 38], "x0": [36, 38, 62, 75, 78, 312, 426, 432], "__sycl_usm_array_interface__": 37, "protocol": [37, 85, 129], "buffer": [37, 83, 130, 131, 133, 134, 179, 381], "possibli": 37, "nest": [37, 84, 143, 388, 401, 429], "sequenc": [37, 41, 42, 43, 57, 58, 61, 65, 84, 89, 90, 135, 136, 137, 143, 148, 169, 171, 178, 189, 202, 311, 312, 350, 363, 382, 388, 401, 410, 429, 431, 432], "str": [37, 58, 85, 131, 134, 143, 179, 388, 401, 429], "code": [37, 85], "coerc": [37, 130, 131, 132, 133, 134, 179], "laid": 38, "fortran": [38, 40, 83, 266, 278, 375, 381], "row": [38, 40, 57, 58, 83, 84, 98, 122, 123, 143, 145, 148, 171, 177, 266, 278, 375, 388, 401, 415, 417, 429], "arbitrari": [39, 82, 85, 149, 191, 382], "keep": [39, 40, 83, 266], "stride": [39, 40, 83, 266], "close": [39, 40, 83, 95, 178, 266, 326, 354], "possibl": [39, 40, 42, 43, 83, 95, 266, 294, 381, 400, 405, 413], "exactli": [39, 73, 134, 324, 326, 354], "cast": [40, 52, 58, 64, 83, 143, 190, 191, 194, 209, 212, 213, 214, 266, 378, 388, 401, 402, 404, 427, 429], "unsaf": [40, 52, 58, 64, 83, 143, 191, 266, 388, 401, 429], "target": [40, 52, 83, 266], "style": [40, 83, 266, 278, 375], "happen": [40, 44, 83, 266, 328], "itself": [40, 83, 85, 266, 440], "equiv": [40, 52, 58, 64, 83, 143, 191, 266, 388, 401, 429], "safe": [40, 52, 58, 64, 83, 143, 191, 266, 388, 401, 429], "same_kind": [40, 52, 58, 64, 83, 143, 191, 266, 388, 401, 429], "what": [40, 52, 58, 64, 83, 85, 91, 143, 191, 266, 328, 345, 388, 401, 429], "occur": [40, 52, 58, 64, 83, 143, 191, 266, 278, 388, 401, 429], "backward": [40, 83, 266, 385, 386], "chang": [40, 59, 60, 62, 63, 70, 83, 85, 266, 301, 305, 307, 315, 316, 321, 322, 323, 375, 381, 386, 425, 444], "preserv": [40, 41, 42, 43, 56, 83, 85, 121, 122, 123, 266], "convers": [40, 83, 266, 433], "By": [40, 70, 83, 137, 178, 189, 191, 192, 194, 198, 208, 209, 210, 212, 214, 266, 375, 380, 385, 402, 415, 417, 420, 427], "instead": [40, 82, 83, 95, 124, 137, 148, 171, 178, 189, 266, 308], "arr_t": [40, 83, 266], "unless": [40, 83, 170, 172, 189, 211, 266, 318], "condit": [40, 82, 83, 97, 163, 171, 266, 315, 321, 323, 391, 430], "ari": [41, 42, 43], "least": [41, 42, 43, 44, 84, 85, 95, 122, 131, 151, 174, 388, 429], "One": [41, 42, 43, 70, 84, 85, 381], "made": [41, 85], "three": [41, 42, 43, 95, 326, 362, 410], "avoid": [42, 43], "weight": [44, 45, 69, 142, 194, 209, 404], "over": [44, 82, 120, 121, 132, 137, 149, 172, 178, 189, 190, 191, 192, 194, 196, 198, 206, 208, 209, 210, 211, 212, 213, 214, 318, 326, 353, 358, 369, 370, 378, 402, 404, 410, 427, 444], "entir": [44, 190, 192, 194, 198, 208, 209, 210, 212, 213, 214, 378, 402, 404, 427], "associ": [44, 440], "contribut": 44, "accord": [44, 52, 85, 119, 166, 167, 190, 194, 209, 212, 213, 214, 378, 402, 404, 427], "assum": [44, 170, 173, 177], "avg": 44, "constraint": 44, "sum_of_weight": 44, "taken": [44, 80, 191, 212, 214, 402, 415, 417, 420, 427, 428], "so": [44, 85, 91, 178, 180, 190, 194, 196, 209, 212, 213, 214, 364, 378, 398, 402, 404, 410, 411, 427], "remain": [44, 190, 194, 202, 209, 212, 213, 214, 378, 381, 402, 404, 427], "second": [44, 63, 70, 82, 85, 94, 143, 149, 157, 158, 191, 192, 196, 198, 317, 399, 405, 410, 428], "pattern": 44, "lowest": [44, 87, 88, 326, 354], "precis": [44, 85, 119], "previou": 44, "still": 44, "arithmet": [44, 137, 194, 195, 209, 212, 214, 316, 402, 404, 427, 433, 444], "75": [44, 92, 139, 168, 178], "With": [44, 172], "w": [44, 166, 167], "minlength": 45, "count": [45, 68, 85, 121, 130, 131, 133, 134, 169, 308, 328, 433, 444], "find": [45, 170, 173, 177, 390, 397, 424, 444], "bit": [46, 47, 48, 49, 85, 119, 146, 150, 159, 185, 187, 188, 383, 444], "truth": [46, 47, 48, 49, 91, 140, 141, 150, 160, 161, 185, 186, 187, 188, 309, 444], "xor": [46, 47, 48, 49, 150, 185, 186, 187, 188], "255": [46, 48], "NOT": [47, 150, 185, 186, 187, 188], "31": [49, 137], "26": 49, "arg": [50, 87, 326], "against": [50, 51, 56, 138, 172, 173, 322, 407], "origin": [50, 83, 172, 196, 202, 381, 385], "from_": 52, "basic": [52, 440, 444], "i8": [52, 85], "f8": [52, 85], "f4": 52, "1000": [52, 137, 171, 189, 327, 328, 333, 335, 337, 338, 339, 340, 341, 348, 349, 352, 354, 356, 359, 361, 367, 371, 372, 373, 374], "i4": [52, 85], "u4": 52, "cube": [53, 398], "popul": [53, 63, 83, 94, 326, 353, 377, 389], "correct": [53, 58, 63, 94, 176, 377, 389, 401], "27": [53, 189, 317, 389, 426], "mode": [55, 61, 65, 83, 174, 267, 290, 304, 321, 364, 369, 406], "prefer": [55, 62, 83, 271], "a_min": 56, "a_max": 56, "edg": 56, "right": [56, 70, 122, 123, 144, 159, 165, 166, 171, 369, 378, 383, 390, 426], "hold": [56, 172, 211, 318], "Its": [56, 322], "those": [56, 322], "tup": [57, 84, 143, 388, 429], "them": [57, 440], "just": [57, 85], "turn": 57, "join": [57, 58, 84, 143, 388, 401, 429, 444], "depth": [57, 58, 84, 143, 388, 401, 429], "third": [57, 58, 84, 143, 388, 401, 429], "horizont": [57, 58, 84, 121, 143, 388, 401, 429], "vertic": [57, 58, 84, 121, 122, 143, 388, 401, 429], "exist": [57, 58, 84, 85, 95, 143, 381, 388, 401, 429, 444], "destin": [58, 143, 202, 321, 322, 388, 401, 407, 429], "were": [58, 132, 326, 355, 401], "cannot": [58, 83, 204, 205, 296, 400, 401], "togeth": [58, 85, 401], "sub": [58, 85, 143, 388, 401, 415, 429], "3rd": 58, "assembl": [58, 84, 143, 388, 401, 429], "t": [58, 69, 83, 85, 162, 167, 305, 368], "obtain": [59, 60, 162, 308], "imaginari": [59, 60, 83, 147, 279, 319, 376], "2j": [59, 60, 82, 147, 166, 191, 376, 393, 428], "j": [59, 60, 132, 147, 148, 158, 162, 166, 183, 191, 319, 322, 376, 399, 407, 410], "v": [61, 75, 78, 85, 166], "linear": [61, 65, 176, 189, 433, 444], "convolut": [61, 65], "ca": 61, "we": [62, 76, 322, 407], "modifi": [62, 363], "dst": 64, "src": 64, "violat": 64, "wherev": 64, "valid": [65, 95, 405, 417, 418, 420, 421], "000000e": [66, 395], "00": [66, 395], "371139e": 66, "5091786": 67, "591953": 67, "coordin": [68, 132, 196], "19": [68, 85], "m": [69, 84, 85, 98, 121, 122, 123, 162, 164, 166, 167, 168, 170, 173, 174, 175, 176, 177, 191, 322, 407, 415, 416, 417, 419, 420], "rowvar": 69, "bia": 69, "ddof": [69, 83, 212, 214, 300, 306, 402, 427], "fweight": 69, "aweight": 69, "estim": [69, 328, 345], "covari": 69, "matrix": [69, 82, 149, 162, 163, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 191, 196, 399, 419, 426, 428, 433, 444], "variabl": 69, "axisa": 70, "axisb": 70, "axisc": 70, "vector": [70, 132, 149, 163, 170, 171, 172, 177, 191, 196, 428, 444], "ignor": [70, 85, 126, 127, 134, 192, 193, 194, 198, 199, 204, 205, 208, 209, 210, 212, 214, 402, 427], "overrid": [70, 90, 136, 312, 432], "direct": [70, 80, 122, 123], "hand": 70, "orient": 70, "definit": [70, 124, 162], "30": [70, 74, 322, 325, 407, 428], "60": [70, 74, 322, 407, 410, 430], "72": 70, "cumul": [71, 72, 80, 83, 206, 207, 272, 404], "120": [71, 74], "720": 71, "th": [72, 75, 78, 80, 86, 98, 139, 195, 413, 416, 419], "21": [72, 85], "remov": [73, 83, 95, 299, 324, 400, 444], "larg": [73, 85, 173, 324], "jump": [73, 324], "wrap": [73, 83, 118, 290, 304, 321, 324, 406], "rad": 74, "150": 74, "question": 75, "main": [75, 76, 77, 78, 98, 118, 145, 167, 415, 416, 419], "upper": [75, 98, 162, 174, 415, 419, 420], "triangl": [75, 144, 378, 415, 416, 417, 418, 419, 420, 421], "lower": [75, 98, 156, 162, 415, 416, 417, 418, 421], "access": [76, 77, 118, 440], "usual": [76, 85, 191], "di": 76, "100": [76, 137, 158, 171, 189, 338, 364], "d3": 76, "give": [78, 83, 305, 381, 392], "offset": [79, 83, 85, 130, 131, 273, 412, 417, 418, 420, 421], "axis1": [79, 83, 273, 303, 405, 412], "axis2": [79, 83, 273, 303, 405, 412], "prepend": [80, 95, 411], "differenc": 80, "prior": 80, "expand": [80, 95], "smaller": [80, 83, 119, 125, 288, 379], "consecut": [80, 86], "quotient": [81, 200, 379, 422], "dp": [81, 83, 164, 166, 175, 176, 305, 317, 381, 382, 392, 403, 413, 422, 430], "met": [82, 171], "attempt": [82, 171], "flexibl": [82, 85, 131, 171], "einstein": [82, 87, 88, 149, 191, 313, 410], "summat": [82, 87, 88, 149, 191, 313, 410], "convent": [82, 87, 88, 149, 191, 313, 410], "chain": [82, 83], "neither": [82, 177, 191, 208, 210], "3j": [82, 191], "499128": 82, "wrapper": 83, "compliant": 83, "__getitem__": [83, 85, 120], "self": [83, 85, 120, 217, 218, 219, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 258, 259, 260, 277, 326], "__setitem__": [83, 120], "val": [83, 118, 120, 147, 256, 290, 315, 321, 376], "__len__": [83, 85], "len": [83, 85, 148, 196, 197, 243, 392, 426], "asnumpi": 83, "behavior": [83, 271, 411], "conveni": [83, 326], "assign": [83, 275], "collaps": [83, 278], "get_arrai": 83, "get": [83, 137, 178, 189, 301, 407, 440], "id": [83, 280], "standard": [83, 119, 125, 128, 194, 200, 209, 212, 214, 257, 280, 300, 326, 341, 348, 355, 364, 365, 366, 367, 368, 379, 402, 427, 440, 444], "random": [83, 121, 122, 123, 171, 173, 174, 177, 280, 401, 433, 444], "123": [83, 280], "kth": [83, 288, 314], "introselect": [83, 288, 314], "rearrang": [83, 288, 444], "move": [83, 202, 288, 385, 386, 413], "behind": [83, 288], "sh": [83, 294], "free": [83, 294], "separ": [83, 85, 131, 134, 294], "could": [83, 298], "howev": [83, 298, 393], "entri": [83, 85, 89, 121, 122, 123, 299, 400], "deviat": [83, 194, 209, 212, 214, 300, 326, 341, 348, 402, 427], "interchang": [83, 202, 303, 405], "to_devic": 83, "target_devic": 83, "transfer": 83, "suitabl": [83, 305], "without": [83, 89, 296, 305, 375, 381, 440], "varianc": [83, 194, 209, 212, 214, 306, 402, 427, 444], "__eq__": [83, 85, 120, 326], "__ne__": [83, 85, 120, 326], "__lt__": [83, 85, 120, 326], "__le__": [83, 85, 120, 326], "__gt__": [83, 85, 120, 326], "__ge__": [83, 85, 120, 326], "attribut": [83, 85, 90, 119, 136, 146, 174, 312, 432, 433], "70710677": [83, 279, 292], "items": [83, 85], "nbyte": 83, "consum": [83, 285], "setter": [83, 296], "involv": [83, 296], "displac": [83, 301], "upon": [83, 301], "unit": [83, 175, 301], "respect": [83, 301], "s1": [83, 85, 158, 301], "s2": [83, 85, 301], "s3": [83, 301], "i1": [83, 85, 301], "i2": [83, 85, 301], "i3": [83, 301], "sycl_context": 83, "sycl_devic": 83, "after": [84, 345, 385], "been": [84, 322, 386, 407], "rebuild": 84, "nd": [84, 143, 388, 401, 429], "align": 85, "homogen": 85, "describ": [85, 172, 190, 213, 378, 404, 444], "fundament": 85, "field": [85, 196], "struct": 85, "obj": [85, 129, 155], "dictionari": 85, "comma": 85, "sticki": 85, "isalignedstruct": 85, "built": 85, "int16": 85, "structur": [85, 179], "f1": 85, "unsign": [85, 213, 404], "uint64": 85, "f2": 85, "u8": 85, "s10": 85, "format": [85, 131, 134, 444], "f0": 85, "void": 85, "hello": 85, "world": [85, 328, 345], "v10": 85, "subdivid": 85, "int8": [85, 318], "gender": 85, "ag": 85, "uint8": [85, 130, 131], "u1": [85, 130, 131], "25": [85, 92, 139, 142, 168, 178, 203, 214, 355, 364, 426, 427], "surnam": 85, "s25": 85, "new_ord": 85, "forc": 85, "swap": [85, 405], "opposit": 85, "endian": 85, "littl": 85, "big": 85, "nativ": 85, "new_dtyp": 85, "sy": 85, "sys_is_l": 85, "byteord": 85, "native_cod": 85, "swapped_cod": 85, "native_dt": 85, "swapped_dt": 85, "l": [85, 162, 166], "subarrai": [85, 148], "regardless": 85, "subdtyp": 85, "8f": 85, "charact": [85, 131], "applic": 85, "dt": 85, "relev": [85, 137, 178, 189], "ascii": 85, "even": [85, 387], "char": 85, "descr": 85, "__array_interface__": 85, "descript": [85, 190, 213, 378, 404, 440], "warn": [85, 204, 205, 344], "directli": [85, 132, 148, 189, 407], "accur": 85, "reconstruct": [85, 177], "str_": 85, "grade": 85, "u16": 85, "fulli": 85, "titl": 85, "32": [85, 137, 410], "present": [85, 208, 210, 213], "unicod": 85, "meta": 85, "notic": 85, "s16": 85, "mask": [85, 315, 323, 406], "multiarrai": 85, "item_hasobject": 85, "list_pickl": 85, "item_is_point": 85, "needs_init": 85, "needs_pyapi": 85, "use_getitem": 85, "use_setitem": 85, "explan": 85, "thei": [85, 167, 388, 410, 426, 429, 440], "user": 85, "particular": [85, 171], "hasobject": 85, "recal": 85, "actual": [85, 162, 171], "address": 85, "pointer": [85, 213, 404], "distinguish": 85, "won": 85, "maintain": [85, 390, 407], "produc": [85, 179], "isbuiltin": 85, "relat": 85, "read": [85, 130, 131, 133, 134, 179, 375, 381], "etc": [85, 345], "machineri": 85, "extend": [85, 158, 440], "field1": 85, "isn": 85, "platform": 85, "anyth": 85, "arr": [85, 308, 323, 350, 418, 421], "80": [85, 430], "biufcmmosuv": 85, "identifi": 85, "u": [85, 162, 177], "timedelta": 85, "datetim": 85, "metadata": 85, "readonli": 85, "mappingproxi": 85, "approach": 85, "propag": [85, 126, 127, 192, 193, 198, 199, 208, 210, 211, 213], "guarante": [85, 381], "certain": 85, "project": [85, 319], "featur": 85, "wa": [85, 171, 190, 192, 198, 208, 210, 212, 214, 326, 367, 378, 402, 427], "long": 85, "undocu": 85, "well": [85, 131, 328, 345, 364], "aspect": 85, "futur": 85, "ad": [85, 164, 175, 444], "datatyp": [85, 170], "dt2": 85, "key2": 85, "value2": 85, "arr2": 85, "clear": 85, "width": 85, "un": 85, "void640": 85, "increas": [85, 95, 426], "walk": 85, "num": [85, 92, 137, 178, 189, 425], "roughli": 85, "typestr": 85, "item_dtyp": 85, "whose": [85, 98, 167, 202, 385, 418, 421], "retriev": 85, "extra": [85, 134], "impli": 85, "tack": 85, "to_end": 86, "to_begin": 86, "operand": [87, 88, 313, 410], "cost": [87, 88], "contract": [87, 88, 410], "express": [87, 88, 179], "subscript": 88, "greedi": 88, "intermedi": 88, "03088525e": 89, "312": 89, "prototyp": 90, "compar": 91, "in_array1": 92, "error": [92, 190, 378, 400, 433], "scipi": 92, "math": 92, "99532227": 92, "99853728": 92, "99959305": 92, "99989938": 92, "99997791": 92, "718281828": [93, 96], "389056099": [93, 96], "p": [94, 163, 328, 331, 336, 342, 345], "appear": [95, 122, 123], "whenev": [95, 405, 413], "rank": [95, 97, 132, 170, 405], "resid": 95, "henc": 95, "resolv": [95, 190, 213, 378, 404], "newaxi": 95, "minu": [96, 124, 125, 379, 423], "callcul": 96, "00000000005e": 96, "000000082740371e": 96, "elsewher": [98, 145, 415, 430], "fourier": [100, 101, 102, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117, 433], "transform": [100, 101, 102, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117, 433], "batch": [101, 103, 107, 108, 112, 113, 115, 117], "sampl": [102, 116, 137, 178, 189, 322, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 357, 360, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 407, 433, 444], "frequenc": [102, 104, 109, 116], "shift": [104, 109, 159, 383, 385], "compon": [104, 109, 119, 147, 319, 376], "center": [104, 109], "spectrum": [104, 109], "signal": [105, 110], "hermitian": [105, 110, 162, 166, 170, 173, 177, 444], "symmetri": [105, 110], "occupi": [119, 146], "ep": [119, 170], "smallest": [119, 146], "represent": [119, 146, 148, 440], "larger": 119, "ieee": 119, "754": 119, "epsneg": 119, "largest": [119, 125, 146, 379], "approxim": 119, "resolut": 119, "tini": 119, "smallest_norm": 119, "finfo_object": 119, "__next__": 120, "__iter__": 120, "revers": [121, 122, 123, 413, 426], "reorder": [121, 202], "left": [122, 123, 159, 172, 369, 383, 390, 426], "down": 123, "toward": [124, 125, 379, 423], "spreadsheet": 124, "word": [124, 326, 370], "divis": [125, 126, 127, 128, 200, 317, 379], "floordivid": 125, "complementari": [125, 128, 200], "__dlpack__": 129, "dmlc": 129, "github": 129, "io": [129, 179], "dlpack": 129, "__dlpack_device__": 129, "buffer_lik": 130, "expos": [130, 440], "text": [130, 131, 133, 134, 179], "binari": [130, 131, 133, 134, 433, 444], "file": [130, 131, 133, 134, 138, 179], "x01": [130, 131], "x02": [130, 131], "x03": [130, 131], "x04": [130, 131], "67305985": 130, "x05": 130, "sep": [131, 134], "highli": 131, "effici": [131, 170, 173, 177], "known": [131, 364], "pars": [131, 179], "simpli": 131, "written": 131, "open": [131, 178, 310, 326, 356, 358, 359, 361, 370, 405], "filenam": [131, 179], "treat": [131, 171, 179, 206, 211, 213, 318, 319, 322, 407, 411, 440], "whitespac": [131, 134], "permit": 131, "pickl": [131, 179], "write": [131, 381], "temporari": 131, "tempfil": 131, "fh": 131, "temporaryfil": 131, "x00": 131, "flush": 131, "seek": 131, "therefor": 132, "fn": 132, "callabl": 132, "back": [132, 375, 381, 386], "matric": [132, 164, 167, 168, 170, 172, 173, 174, 175, 177, 191, 196, 444], "lambda": 132, "fill_valu": [135, 136], "50": [137, 158, 184, 189, 322, 407, 410, 430], "scale": [137, 174, 178, 189, 326, 333, 335, 337, 338, 339, 340, 348, 360, 365, 372], "progress": [137, 178], "final": [137, 189], "store": [137, 178, 189, 191], "begin": [137, 178, 189], "62341325": 137, "6227766": 137, "177": [137, 189], "827941": [137, 189], "63": 137, "127": 137, "directori": 138, "h": [138, 162, 174, 196], "header": 138, "modul": [138, 433], "vararg": 139, "y1": [139, 414], "bin": [142, 364], "densiti": 142, "dataset": 142, "hist": [142, 364], "bin_edg": 142, "4999999999999996": 142, "leg": [144, 378], "hypotenus": [144, 378], "reduce_hypot": 144, "iinfo_object": 146, "4j": [147, 376, 428], "6j": [147, 376, 428], "spars": [148, 196], "dens": [148, 197], "ith": [148, 310], "col": 148, "straightforward": 148, "whichev": 149, "generalis": 149, "ordinari": [149, 162], "multidimension": 149, "38": [149, 328], "62": 149, "86": 149, "110": 149, "134": 149, "finit": [152, 153, 154, 319], "nat": 154, "arg1": [156, 157], "arg2": [156, 157], "typecod": 156, "hierarchi": 156, "kroneck": 158, "500": 158, "600": 158, "700": 158, "70": [158, 428, 430], "j1": 158, "40": [159, 322, 407], "decomposit": [162, 170, 173, 177, 444], "symmetr": [162, 166, 170, 173, 177], "verifi": 162, "addit": [162, 209], "factor": [162, 174], "fro": 163, "logarithm": [164, 175, 178, 180, 181, 182, 183, 184, 190, 342, 444], "bc": [164, 175], "eigenvalu": [165, 166, 167, 444], "eigenvector": [165, 166, 167], "uplo": 166, "ascend": 166, "17157288": 166, "82842712": 166, "92387953": 166, "38268343": 166, "38268343j": 166, "92387953j": 166, "aren": 167, "necessarili": 167, "nor": [167, 208, 210], "ainv": 168, "sever": 168, "onc": 168, "suppli": [169, 171, 326, 355], "tol": [170, 344], "singular": [170, 173, 177], "threshold": 170, "epsilon": 170, "enabl": [170, 173, 177], "defici": 170, "exact": 171, "10000": [171, 336, 351, 360, 370], "333": 171, "ord": 172, "abl": 172, "eight": 172, "infinit": [172, 319], "under": 172, "rcond": 173, "moor": 173, "penros": 173, "pseudo": [173, 326], "cutoff": 173, "small": 173, "largest_singular_valu": 173, "q": [174, 195], "orthonorm": 174, "r": 174, "raw": 174, "tau": 174, "namedtupl": 174, "orthogon": 174, "unitari": [174, 177], "household": 174, "reflector": 174, "r2": 174, "natur": [175, 180, 181, 182, 183, 184, 190], "circl": 175, "logabsdet": 175, "69314718": [175, 182], "09861229": [175, 182], "07944154": 175, "equat": [176, 444], "solut": 176, "full_matric": 177, "compute_uv": 177, "vh": 177, "descend": 177, "2d": [177, 191], "smat": 177, "4d": 177, "retstep": 178, "There": 178, "half": [178, 326, 356, 358, 359, 361, 370, 405], "fname": 179, "pathlib": 179, "gz": 179, "bz2": 179, "decompress": 179, "line": 179, "regular": 179, "miss": 179, "stringio": 179, "behav": 179, "n2": [179, 196], "plu": [180, 181, 182, 183], "30102999566": 181, "99": [182, 322], "xi": [183, 196], "26618007j": 183, "logsumdexp": 184, "prob1": 184, "prob2": 184, "5e": 184, "prob12": 184, "113": 184, "87649168": 184, "ln": 189, "log_bas": 189, "uniformli": [189, 326, 370], "215": 189, "443469": 189, "464": 189, "15888336": 189, "316": 189, "22776602": 189, "562": 189, "34132519": 189, "0396842": 189, "34960421": 189, "98024613": 189, "72075441": 189, "infer": [190, 213, 378, 381, 404], "30258509": 190, "signatur": 191, "extobj": 191, "mix": 191, "98": 191, "maxima": 192, "while": [194, 209, 212, 214, 308, 385, 402, 415, 427], "overwrite_input": 195, "xy": 196, "xn": 196, "ij": 196, "cartesian": 196, "n1": 196, "ni": [196, 322, 407], "nn": 196, "conserv": 196, "n3": 196, "nx": 196, "ny": 196, "xv": 196, "yv": 196, "matplotlib": [196, 364], "pyplot": [196, 364], "plt": [196, 364], "xx": 196, "yy": 196, "contourf": 196, "dpnp_iface_arraycr": [197, 310], "mgridclass": 197, "5j": [197, 310], "minima": 198, "fraction": 201, "slice": [204, 205, 208, 209, 210, 212, 213, 214, 321, 322, 407, 420, 440], "valueerror": [204, 205, 381, 400], "trust": [204, 205], "encount": [208, 210], "runtimewarn": [208, 210], "6666666666666665": 209, "across": [211, 213], "delta": [212, 214, 402, 425, 427], "freedom": [212, 214, 368, 402, 427], "divisor": [212, 214, 402, 427], "nonneg": [212, 214, 402, 427], "247219128924647": 212, "5555555555555554": 214, "repr": 254, "136": 257, "272": 257, "408": 257, "out2": 308, "ogridclass": 310, "expon": [317, 352, 444], "125": [317, 426], "effect": 317, "onto": 319, "riemann": 319, "sphere": 319, "magnitud": 319, "7j": 319, "1d": [321, 322, 407], "contrast": 321, "cyclic": 321, "clamp": [321, 406], "boundari": 321, "44": 321, "55": 321, "22": 321, "nk": [322, 407], "nj": [322, 407], "had": [322, 407], "everi": [322, 407], "52359878": 325, "04719755": 325, "0943951": 325, "61799388": 325, "mersenn": 326, "twister": 326, "maximumum": [326, 362], "intern": 326, "state": 326, "get_sycl_queu": 326, "loc": [326, 337, 339, 340, 348, 372], "draw": [326, 327, 328, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 354, 360, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373], "gaussian": [326, 348, 372], "drawn": [326, 327, 328, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 348, 349, 351, 352, 354, 357, 360, 366, 367, 368, 369, 370, 371, 372, 373, 374, 391], "parameter": [326, 348, 370], "58997253": 326, "84288406": 326, "33836967": 326, "16394577": 326, "40882036": 326, "39295758": 326, "48927254": 326, "74921661": 326, "13436424": 326, "56920387": 326, "84743374": 326, "80226506": 326, "76377462": 326, "06310682": 326, "25506903": 326, "1179187": 326, "49543509": 326, "76096244": 326, "low": [326, 354, 357, 370, 440], "high": [326, 354, 357, 370], "inclus": [326, 354, 357], "exclus": [326, 354], "omit": [326, 354, 430], "d0": [326, 353, 355], "d1": [326, 355], "dn": [326, 353, 355], "84401099": 326, "four": [326, 355], "88997253": 326, "54288406": 326, "63836967": 326, "46394577": 326, "70882036": 326, "69295758": 326, "78927254": 326, "04921661": 326, "continu": [326, 358], "stdev": [326, 367], "81715362": 326, "54465213": 326, "18557831": 326, "28352814": 326, "67718303": 326, "11570901": 326, "21968665": 326, "18236388": 326, "08156915": 326, "21941987": 326, "24544512": 326, "63522211": 326, "673174": 326, "54": 326, "48093112": 326, "52928804": 326, "1196081": 326, "6990877": 326, "34074171": 326, "alpha": [327, 332, 333, 349, 352], "trial": 328, "probabl": [328, 336, 345], "coin": 328, "compani": [328, 345], "drill": [328, 345], "wild": [328, 345], "cat": [328, 345], "oil": [328, 345], "explor": [328, 345], "success": [328, 336, 345], "nine": 328, "fail": 328, "let": 328, "000": 328, "model": 328, "20000": 328, "answer": 328, "38885": 328, "fallback": [329, 331, 332, 342, 347, 363], "df": [330, 346, 368, 369], "chi": [330, 346], "89920014": 330, "00867716": 330, "13710533": 330, "62318272": 330, "dfnum": [334, 347], "dfden": [334, 347], "ten": 336, "thousand": 336, "individu": 336, "35": 336, "mu": [337, 341, 348, 371], "ngood": 338, "nbad": 338, "nsampl": 338, "nsamp": 338, "good": 338, "bad": 338, "decai": 339, "sigma": [341, 348], "seri": 342, "pval": 343, "iinfo": 343, "throw": 343, "dice": 343, "check_valid": 344, "multivari": 344, "100000": 345, "nonc": [346, 347], "noncentr": [346, 347], "todo": 346, "ii": 349, "lomax": 349, "randomli": 350, "lam": 351, "randomst": 354, "1923875335537315": 355, "rese": 362, "legaci": 362, "mt19937": 362, "engin": 362, "cauchi": 364, "lorentz": 364, "plot": 364, "1000000": [364, 366, 368, 369], "3x8000": 365, "8000": 365, "student": 368, "kappa": 371, "von": 371, "mise": 371, "dispers": 371, "pack": [375, 444], "fastest": [375, 381], "slowest": [375, 381], "subtyp": 375, "rsqrt": [377, 398], "33": 377, "3003003": 377, "16227766": 378, "fit": 380, "rep": [380, 411], "newshap": 381, "account": 381, "underli": 381, "never": 381, "reus": 381, "unspecifi": 381, "arrays_and_dtyp": 382, "introduc": 385, "restor": 385, "rel": [385, 386], "until": [385, 386], "li": [385, 386], "reposit": 386, "37": 387, "x_i": 389, "35355338": 389, "19245009": 389, "side": 390, "sorter": 390, "condlist": 391, "choicelist": 391, "742278e": 395, "3012989": 396, "548739": 396, "traceback": 400, "recent": 400, "118033988749895": 402, "composit": [404, 414], "trapezoid": [404, 414], "bound": 406, "fanci": 406, "trivial": 407, "ai_min": 407, "ai_max": 407, "22460635e": 408, "63317787e": 408, "996272": 409, "917152": 409, "integer_lik": 410, "Or": 410, "common": 410, "otim": 410, "cdot": 410, "nth": 410, "0th": 410, "1th": 410, "forth": 410, "4400": 410, "4730": 410, "4532": 410, "4874": 410, "4664": 410, "5018": 410, "4796": 410, "5162": 410, "4928": 410, "5306": 410, "slower": 410, "replic": 411, "thu": 411, "dx": 414, "complement": 425, "phase": 425, "49778714": 425, "28318531": 425, "vandermond": 426, "8j": 428, "higher": 428, "chosen": 430, "algebra": [433, 444], "mathemat": [433, 444], "statist": [433, 444], "summari": 433, "level": [433, 440], "util": 433, "counterpart": 440, "constructor": 440, "syntax": 440, "reflect": 440, "intrins": 440, "sometim": 440, "reset": 440, "meaningfulli": 440, "mani": 440, "fashion": 440, "typic": 440, "briefli": 440, "explain": 440, "docstr": 440, "proce": 440, "pow": 440, "short": 440, "unari": 440, "custom": 440, "cover": 444, "build": 444, "elementwis": [444, 448], "helper": 444, "ration": 444, "extrema": 444, "dparrai": 445, "variou": 448}, "objects": {"": [[3, 0, 0, "-", "dpnp"]], "dpnp": [[11, 1, 1, "", "abs"], [12, 1, 1, "", "absolute"], [13, 1, 1, "", "add"], [14, 1, 1, "", "all"], [15, 1, 1, "", "allclose"], [16, 1, 1, "", "amax"], [17, 1, 1, "", "amin"], [18, 1, 1, "", "angle"], [19, 1, 1, "", "any"], [20, 1, 1, "", "arange"], [21, 1, 1, "", "arccos"], [22, 1, 1, "", "arccosh"], [23, 1, 1, "", "arcsin"], [24, 1, 1, "", "arcsinh"], [25, 1, 1, "", "arctan"], [26, 1, 1, "", "arctan2"], [27, 1, 1, "", "arctanh"], [28, 1, 1, "", "argmax"], [29, 1, 1, "", "argmin"], [30, 1, 1, "", "argsort"], [31, 1, 1, "", "around"], [32, 1, 1, "", "array"], [33, 1, 1, "", "array_equal"], [34, 1, 1, "", "asanyarray"], [35, 1, 1, "", "asarray"], [36, 1, 1, "", "ascontiguousarray"], [37, 1, 1, "", "asfarray"], [38, 1, 1, "", "asfortranarray"], [39, 1, 1, "", "asnumpy"], [40, 1, 1, "", "astype"], [41, 1, 1, "", "atleast_1d"], [42, 1, 1, "", "atleast_2d"], [43, 1, 1, "", "atleast_3d"], [44, 1, 1, "", "average"], [45, 1, 1, "", "bincount"], [46, 1, 1, "", "bitwise_and"], [47, 1, 1, "", "bitwise_not"], [48, 1, 1, "", "bitwise_or"], [49, 1, 1, "", "bitwise_xor"], [50, 1, 1, "", "broadcast_arrays"], [51, 1, 1, "", "broadcast_to"], [52, 1, 1, "", "can_cast"], [53, 1, 1, "", "cbrt"], [54, 1, 1, "", "ceil"], [55, 1, 1, "", "choose"], [56, 1, 1, "", "clip"], [57, 1, 1, "", "column_stack"], [58, 1, 1, "", "concatenate"], [59, 1, 1, "", "conj"], [60, 1, 1, "", "conjugate"], [61, 1, 1, "", "convolve"], [62, 1, 1, "", "copy"], [63, 1, 1, "", "copysign"], [64, 1, 1, "", "copyto"], [65, 1, 1, "", "correlate"], [66, 1, 1, "", "cos"], [67, 1, 1, "", "cosh"], [68, 1, 1, "", "count_nonzero"], [69, 1, 1, "", "cov"], [70, 1, 1, "", "cross"], [71, 1, 1, "", "cumprod"], [72, 1, 1, "", "cumsum"], [73, 1, 1, "", "deg2rad"], [74, 1, 1, "", "degrees"], [75, 1, 1, "", "diag"], [76, 1, 1, "", "diag_indices"], [77, 1, 1, "", "diag_indices_from"], [78, 1, 1, "", "diagflat"], [79, 1, 1, "", "diagonal"], [80, 1, 1, "", "diff"], [81, 1, 1, "", "divide"], [82, 1, 1, "", "dot"], [84, 1, 1, "", "dstack"], [85, 2, 1, "", "dtype"], [86, 1, 1, "", "ediff1d"], [87, 1, 1, "", "einsum"], [88, 1, 1, "", "einsum_path"], [89, 1, 1, "", "empty"], [90, 1, 1, "", "empty_like"], [91, 1, 1, "", "equal"], [92, 1, 1, "", "erf"], [93, 1, 1, "", "exp"], [94, 1, 1, "", "exp2"], [95, 1, 1, "", "expand_dims"], [96, 1, 1, "", "expm1"], [97, 1, 1, "", "extract"], [98, 1, 1, "", "eye"], [99, 1, 1, "", "fabs"], [10, 0, 0, "-", "fft"], [118, 1, 1, "", "fill_diagonal"], [119, 1, 1, "", "finfo"], [120, 2, 1, "", "flatiter"], [121, 1, 1, "", "flip"], [122, 1, 1, "", "fliplr"], [123, 1, 1, "", "flipud"], [124, 1, 1, "", "floor"], [125, 1, 1, "", "floor_divide"], [126, 1, 1, "", "fmax"], [127, 1, 1, "", "fmin"], [128, 1, 1, "", "fmod"], [129, 1, 1, "", "from_dlpack"], [130, 1, 1, "", "frombuffer"], [131, 1, 1, "", "fromfile"], [132, 1, 1, "", "fromfunction"], [133, 1, 1, "", "fromiter"], [134, 1, 1, "", "fromstring"], [135, 1, 1, "", "full"], [136, 1, 1, "", "full_like"], [137, 1, 1, "", "geomspace"], [138, 1, 1, "", "get_include"], [139, 1, 1, "", "gradient"], [140, 1, 1, "", "greater"], [141, 1, 1, "", "greater_equal"], [142, 1, 1, "", "histogram"], [143, 1, 1, "", "hstack"], [144, 1, 1, "", "hypot"], [145, 1, 1, "", "identity"], [146, 1, 1, "", "iinfo"], [147, 1, 1, "", "imag"], [148, 1, 1, "", "indices"], [149, 1, 1, "", "inner"], [150, 1, 1, "", "invert"], [151, 1, 1, "", "isclose"], [152, 1, 1, "", "isfinite"], [153, 1, 1, "", "isinf"], [154, 1, 1, "", "isnan"], [155, 1, 1, "", "isscalar"], [156, 1, 1, "", "issubdtype"], [157, 1, 1, "", "issubsctype"], [158, 1, 1, "", "kron"], [159, 1, 1, "", "left_shift"], [160, 1, 1, "", "less"], [161, 1, 1, "", "less_equal"], [178, 1, 1, "", "linspace"], [179, 1, 1, "", "loadtxt"], [180, 1, 1, "", "log"], [181, 1, 1, "", "log10"], [182, 1, 1, "", "log1p"], [183, 1, 1, "", "log2"], [184, 1, 1, "", "logaddexp"], [185, 1, 1, "", "logical_and"], [186, 1, 1, "", "logical_not"], [187, 1, 1, "", "logical_or"], [188, 1, 1, "", "logical_xor"], [189, 1, 1, "", "logspace"], [190, 1, 1, "", "logsumexp"], [191, 1, 1, "", "matmul"], [192, 1, 1, "", "max"], [193, 1, 1, "", "maximum"], [194, 1, 1, "", "mean"], [195, 1, 1, "", "median"], [196, 1, 1, "", "meshgrid"], [197, 5, 1, "", "mgrid"], [198, 1, 1, "", "min"], [199, 1, 1, "", "minimum"], [200, 1, 1, "", "mod"], [201, 1, 1, "", "modf"], [202, 1, 1, "", "moveaxis"], [203, 1, 1, "", "multiply"], [204, 1, 1, "", "nanargmax"], [205, 1, 1, "", "nanargmin"], [206, 1, 1, "", "nancumprod"], [207, 1, 1, "", "nancumsum"], [208, 1, 1, "", "nanmax"], [209, 1, 1, "", "nanmean"], [210, 1, 1, "", "nanmin"], [211, 1, 1, "", "nanprod"], [212, 1, 1, "", "nanstd"], [213, 1, 1, "", "nansum"], [214, 1, 1, "", "nanvar"], [215, 3, 1, "", "ndarray"], [307, 1, 1, "", "negative"], [308, 1, 1, "", "nonzero"], [309, 1, 1, "", "not_equal"], [310, 5, 1, "", "ogrid"], [311, 1, 1, "", "ones"], [312, 1, 1, "", "ones_like"], [313, 1, 1, "", "outer"], [314, 1, 1, "", "partition"], [315, 1, 1, "", "place"], [316, 1, 1, "", "positive"], [317, 1, 1, "", "power"], [318, 1, 1, "", "prod"], [319, 1, 1, "", "proj"], [320, 1, 1, "", "ptp"], [321, 1, 1, "", "put"], [322, 1, 1, "", "put_along_axis"], [323, 1, 1, "", "putmask"], [324, 1, 1, "", "rad2deg"], [325, 1, 1, "", "radians"], [443, 0, 0, "-", "random"], [375, 1, 1, "", "ravel"], [376, 1, 1, "", "real"], [377, 1, 1, "", "reciprocal"], [378, 1, 1, "", "reduce_hypot"], [379, 1, 1, "", "remainder"], [380, 1, 1, "", "repeat"], [381, 1, 1, "", "reshape"], [382, 1, 1, "", "result_type"], [383, 1, 1, "", "right_shift"], [384, 1, 1, "", "rint"], [385, 1, 1, "", "roll"], [386, 1, 1, "", "rollaxis"], [387, 1, 1, "", "round"], [388, 1, 1, "", "row_stack"], [389, 1, 1, "", "rsqrt"], [390, 1, 1, "", "searchsorted"], [391, 1, 1, "", "select"], [392, 1, 1, "", "shape"], [393, 1, 1, "", "sign"], [394, 1, 1, "", "signbit"], [395, 1, 1, "", "sin"], [396, 1, 1, "", "sinh"], [397, 1, 1, "", "sort"], [398, 1, 1, "", "sqrt"], [399, 1, 1, "", "square"], [400, 1, 1, "", "squeeze"], [401, 1, 1, "", "stack"], [402, 1, 1, "", "std"], [403, 1, 1, "", "subtract"], [404, 1, 1, "", "sum"], [405, 1, 1, "", "swapaxes"], [406, 1, 1, "", "take"], [407, 1, 1, "", "take_along_axis"], [408, 1, 1, "", "tan"], [409, 1, 1, "", "tanh"], [410, 1, 1, "", "tensordot"], [411, 1, 1, "", "tile"], [412, 1, 1, "", "trace"], [413, 1, 1, "", "transpose"], [414, 1, 1, "", "trapz"], [415, 1, 1, "", "tri"], [416, 1, 1, "", "tril"], [417, 1, 1, "", "tril_indices"], [418, 1, 1, "", "tril_indices_from"], [419, 1, 1, "", "triu"], [420, 1, 1, "", "triu_indices"], [421, 1, 1, "", "triu_indices_from"], [422, 1, 1, "", "true_divide"], [423, 1, 1, "", "trunc"], [424, 1, 1, "", "unique"], [425, 1, 1, "", "unwrap"], [426, 1, 1, "", "vander"], [427, 1, 1, "", "var"], [428, 1, 1, "", "vdot"], [429, 1, 1, "", "vstack"], [430, 1, 1, "", "where"], [431, 1, 1, "", "zeros"], [432, 1, 1, "", "zeros_like"]], "dpnp.dpnp_array": [[83, 2, 1, "", "dpnp_array"]], "dpnp.dpnp_array.dpnp_array": [[83, 3, 1, "", "T"], [83, 4, 1, "", "__eq__"], [83, 4, 1, "", "__ge__"], [83, 4, 1, "", "__getitem__"], [83, 4, 1, "", "__gt__"], [83, 4, 1, "", "__le__"], [83, 4, 1, "", "__len__"], [83, 4, 1, "", "__lt__"], [83, 4, 1, "", "__ne__"], [83, 4, 1, "", "__setitem__"], [83, 4, 1, "", "all"], [83, 4, 1, "", "any"], [83, 4, 1, "", "argmax"], [83, 4, 1, "", "argmin"], [83, 4, 1, "", "argsort"], [83, 4, 1, "", "asnumpy"], [83, 4, 1, "", "astype"], [83, 4, 1, "", "choose"], [83, 4, 1, "", "clip"], [83, 4, 1, "", "conj"], [83, 4, 1, "", "conjugate"], [83, 4, 1, "", "copy"], [83, 4, 1, "", "cumsum"], [83, 3, 1, "", "device"], [83, 4, 1, "", "diagonal"], [83, 4, 1, "", "dot"], [83, 3, 1, "", "dtype"], [83, 4, 1, "", "fill"], [83, 3, 1, "", "flags"], [83, 3, 1, "", "flat"], [83, 4, 1, "", "flatten"], [83, 4, 1, "", "get_array"], [83, 3, 1, "", "imag"], [83, 4, 1, "", "item"], [83, 3, 1, "", "itemsize"], [83, 4, 1, "", "max"], [83, 4, 1, "", "mean"], [83, 4, 1, "", "min"], [83, 3, 1, "", "nbytes"], [83, 3, 1, "", "ndim"], [83, 4, 1, "", "nonzero"], [83, 4, 1, "", "partition"], [83, 4, 1, "", "prod"], [83, 4, 1, "", "put"], [83, 4, 1, "", "ravel"], [83, 3, 1, "", "real"], [83, 4, 1, "", "repeat"], [83, 4, 1, "", "reshape"], [83, 4, 1, "", "round"], [83, 3, 1, "", "shape"], [83, 3, 1, "", "size"], [83, 4, 1, "", "sort"], [83, 4, 1, "", "squeeze"], [83, 4, 1, "", "std"], [83, 3, 1, "", "strides"], [83, 4, 1, "", "sum"], [83, 4, 1, "", "swapaxes"], [83, 3, 1, "", "sycl_context"], [83, 3, 1, "", "sycl_device"], [83, 3, 1, "", "sycl_queue"], [83, 4, 1, "", "take"], [83, 4, 1, "", "to_device"], [83, 4, 1, "", "transpose"], [83, 3, 1, "", "usm_type"], [83, 4, 1, "", "var"]], "dpnp.dtype": [[85, 4, 1, "", "__eq__"], [85, 4, 1, "", "__ge__"], [85, 4, 1, "", "__getitem__"], [85, 4, 1, "", "__gt__"], [85, 4, 1, "", "__le__"], [85, 4, 1, "", "__len__"], [85, 4, 1, "", "__lt__"], [85, 4, 1, "", "__ne__"], [85, 3, 1, "", "alignment"], [85, 3, 1, "", "base"], [85, 3, 1, "", "byteorder"], [85, 3, 1, "", "char"], [85, 3, 1, "", "descr"], [85, 3, 1, "", "fields"], [85, 3, 1, "", "flags"], [85, 3, 1, "", "hasobject"], [85, 3, 1, "", "isalignedstruct"], [85, 3, 1, "", "isbuiltin"], [85, 3, 1, "", "isnative"], [85, 3, 1, "", "itemsize"], [85, 3, 1, "", "kind"], [85, 3, 1, "", "metadata"], [85, 3, 1, "", "name"], [85, 3, 1, "", "names"], [85, 3, 1, "", "ndim"], [85, 4, 1, "", "newbyteorder"], [85, 3, 1, "", "num"], [85, 3, 1, "", "shape"], [85, 3, 1, "", "str"], [85, 3, 1, "", "subdtype"], [85, 3, 1, "", "type"]], "dpnp.fft": [[100, 1, 1, "", "fft"], [101, 1, 1, "", "fft2"], [102, 1, 1, "", "fftfreq"], [103, 1, 1, "", "fftn"], [104, 1, 1, "", "fftshift"], [105, 1, 1, "", "hfft"], [106, 1, 1, "", "ifft"], [107, 1, 1, "", "ifft2"], [108, 1, 1, "", "ifftn"], [109, 1, 1, "", "ifftshift"], [110, 1, 1, "", "ihfft"], [111, 1, 1, "", "irfft"], [112, 1, 1, "", "irfft2"], [113, 1, 1, "", "irfftn"], [114, 1, 1, "", "rfft"], [115, 1, 1, "", "rfft2"], [116, 1, 1, "", "rfftfreq"], [117, 1, 1, "", "rfftn"]], "dpnp.flatiter": [[120, 4, 1, "", "__eq__"], [120, 4, 1, "", "__ge__"], [120, 4, 1, "", "__getitem__"], [120, 4, 1, "", "__gt__"], [120, 4, 1, "", "__iter__"], [120, 4, 1, "", "__le__"], [120, 4, 1, "", "__lt__"], [120, 4, 1, "", "__ne__"], [120, 4, 1, "", "__next__"], [120, 4, 1, "", "__setitem__"]], "dpnp.linalg": [[162, 1, 1, "", "cholesky"], [163, 1, 1, "", "cond"], [164, 1, 1, "", "det"], [165, 1, 1, "", "eig"], [166, 1, 1, "", "eigh"], [167, 1, 1, "", "eigvals"], [168, 1, 1, "", "inv"], [169, 1, 1, "", "matrix_power"], [170, 1, 1, "", "matrix_rank"], [171, 1, 1, "", "multi_dot"], [172, 1, 1, "", "norm"], [173, 1, 1, "", "pinv"], [174, 1, 1, "", "qr"], [175, 1, 1, "", "slogdet"], [176, 1, 1, "", "solve"], [177, 1, 1, "", "svd"]], "dpnp.ndarray": [[216, 6, 1, "", "T"], [217, 4, 1, "", "__abs__"], [218, 4, 1, "", "__add__"], [219, 4, 1, "", "__and__"], [220, 4, 1, "", "__complex__"], [221, 4, 1, "", "__copy__"], [222, 4, 1, "", "__eq__"], [223, 4, 1, "", "__float__"], [224, 4, 1, "", "__floordiv__"], [225, 4, 1, "", "__ge__"], [226, 4, 1, "", "__getitem__"], [227, 4, 1, "", "__gt__"], [228, 4, 1, "", "__iadd__"], [229, 4, 1, "", "__iand__"], [230, 4, 1, "", "__ifloordiv__"], [231, 4, 1, "", "__ilshift__"], [232, 4, 1, "", "__imod__"], [233, 4, 1, "", "__imul__"], [234, 4, 1, "", "__int__"], [235, 4, 1, "", "__invert__"], [236, 4, 1, "", "__ior__"], [237, 4, 1, "", "__ipow__"], [238, 4, 1, "", "__irshift__"], [239, 4, 1, "", "__isub__"], [240, 4, 1, "", "__itruediv__"], [241, 4, 1, "", "__ixor__"], [242, 4, 1, "", "__le__"], [243, 4, 1, "", "__len__"], [244, 4, 1, "", "__lshift__"], [245, 4, 1, "", "__lt__"], [246, 4, 1, "", "__mod__"], [247, 4, 1, "", "__mul__"], [248, 4, 1, "", "__ne__"], [249, 4, 1, "", "__neg__"], [250, 4, 1, "", "__new__"], [251, 4, 1, "", "__or__"], [252, 4, 1, "", "__pos__"], [253, 4, 1, "", "__pow__"], [254, 4, 1, "", "__repr__"], [255, 4, 1, "", "__rshift__"], [256, 4, 1, "", "__setitem__"], [257, 4, 1, "", "__str__"], [258, 4, 1, "", "__sub__"], [259, 4, 1, "", "__truediv__"], [260, 4, 1, "", "__xor__"], [261, 4, 1, "", "all"], [262, 4, 1, "", "any"], [263, 4, 1, "", "argmax"], [264, 4, 1, "", "argmin"], [265, 4, 1, "", "argsort"], [266, 4, 1, "", "astype"], [267, 4, 1, "", "choose"], [268, 4, 1, "", "clip"], [269, 4, 1, "", "conj"], [270, 4, 1, "", "conjugate"], [271, 4, 1, "", "copy"], [272, 4, 1, "", "cumsum"], [273, 4, 1, "", "diagonal"], [274, 6, 1, "", "dtype"], [275, 4, 1, "", "fill"], [276, 6, 1, "", "flags"], [277, 6, 1, "", "flat"], [278, 4, 1, "", "flatten"], [279, 6, 1, "", "imag"], [280, 4, 1, "", "item"], [281, 6, 1, "", "itemsize"], [282, 4, 1, "", "max"], [283, 4, 1, "", "mean"], [284, 4, 1, "", "min"], [285, 6, 1, "", "nbytes"], [286, 6, 1, "", "ndim"], [287, 4, 1, "", "nonzero"], [288, 4, 1, "", "partition"], [289, 4, 1, "", "prod"], [290, 4, 1, "", "put"], [291, 4, 1, "", "ravel"], [292, 6, 1, "", "real"], [293, 4, 1, "", "repeat"], [294, 4, 1, "", "reshape"], [295, 4, 1, "", "round"], [296, 6, 1, "", "shape"], [297, 6, 1, "", "size"], [298, 4, 1, "", "sort"], [299, 4, 1, "", "squeeze"], [300, 4, 1, "", "std"], [301, 6, 1, "", "strides"], [302, 4, 1, "", "sum"], [303, 4, 1, "", "swapaxes"], [304, 4, 1, "", "take"], [305, 4, 1, "", "transpose"], [306, 4, 1, "", "var"]], "dpnp.random": [[326, 2, 1, "", "RandomState"], [327, 1, 1, "", "beta"], [328, 1, 1, "", "binomial"], [329, 1, 1, "", "bytes"], [330, 1, 1, "", "chisquare"], [331, 1, 1, "", "choice"], [332, 1, 1, "", "dirichlet"], [333, 1, 1, "", "exponential"], [334, 1, 1, "", "f"], [335, 1, 1, "", "gamma"], [336, 1, 1, "", "geometric"], [337, 1, 1, "", "gumbel"], [338, 1, 1, "", "hypergeometric"], [339, 1, 1, "", "laplace"], [340, 1, 1, "", "logistic"], [341, 1, 1, "", "lognormal"], [342, 1, 1, "", "logseries"], [343, 1, 1, "", "multinomial"], [344, 1, 1, "", "multivariate_normal"], [345, 1, 1, "", "negative_binomial"], [346, 1, 1, "", "noncentral_chisquare"], [347, 1, 1, "", "noncentral_f"], [348, 1, 1, "", "normal"], [349, 1, 1, "", "pareto"], [350, 1, 1, "", "permutation"], [351, 1, 1, "", "poisson"], [352, 1, 1, "", "power"], [353, 1, 1, "", "rand"], [354, 1, 1, "", "randint"], [355, 1, 1, "", "randn"], [356, 1, 1, "", "random"], [357, 1, 1, "", "random_integers"], [358, 1, 1, "", "random_sample"], [359, 1, 1, "", "ranf"], [360, 1, 1, "", "rayleigh"], [361, 1, 1, "", "sample"], [362, 1, 1, "", "seed"], [363, 1, 1, "", "shuffle"], [364, 1, 1, "", "standard_cauchy"], [365, 1, 1, "", "standard_exponential"], [366, 1, 1, "", "standard_gamma"], [367, 1, 1, "", "standard_normal"], [368, 1, 1, "", "standard_t"], [369, 1, 1, "", "triangular"], [370, 1, 1, "", "uniform"], [371, 1, 1, "", "vonmises"], [372, 1, 1, "", "wald"], [373, 1, 1, "", "weibull"], [374, 1, 1, "", "zipf"]], "dpnp.random.RandomState": [[326, 4, 1, "", "__eq__"], [326, 4, 1, "", "__ge__"], [326, 4, 1, "", "__gt__"], [326, 4, 1, "", "__le__"], [326, 4, 1, "", "__lt__"], [326, 4, 1, "", "__ne__"], [326, 4, 1, "", "get_state"], [326, 4, 1, "", "get_sycl_device"], [326, 4, 1, "", "get_sycl_queue"], [326, 4, 1, "", "normal"], [326, 4, 1, "", "rand"], [326, 4, 1, "", "randint"], [326, 4, 1, "", "randn"], [326, 4, 1, "", "random_sample"], [326, 4, 1, "", "standard_normal"], [326, 4, 1, "", "uniform"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:attribute", "4": "py:method", "5": "py:data", "6": "py:property"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "method", "Python method"], "5": ["py", "data", "Python data"], "6": ["py", "property", "Python property"]}, "titleterms": {"interplai": 0, "data": [0, 2, 7, 8, 9, 434, 440, 443], "parallel": [0, 2], "control": 0, "librari": 0, "exampl": [0, 4], "c": 1, "backend": 1, "api": [1, 433], "refer": [1, 433], "extens": 2, "numpi": [2, 6], "develop": 2, "inform": [2, 8], "overview": 3, "quick": 4, "start": 4, "guid": 4, "devic": 4, "driver": 4, "python": 4, "interpret": 4, "instal": 4, "packag": [4, 442], "from": [4, 7], "anaconda": 4, "build": [4, 7], "conda": 4, "scikit": 4, "test": [4, 8, 436], "binari": 5, "oper": [5, 434, 436, 437, 438, 440, 448], "elementwis": 5, "bit": [5, 448], "pack": 5, "output": 5, "format": 5, "comparison": [6, 436, 440, 448], "tabl": 6, "dpnp": [6, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 443], "cupi": 6, "summari": 6, "modul": [6, 442], "level": 6, "multi": [6, 440], "dimension": [6, 440], "arrai": [6, 7, 9, 32, 434, 436, 437, 440], "linear": [6, 435], "algebra": [6, 435], "discret": 6, "fourier": 6, "transform": 6, "random": [6, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 443], "sampl": [6, 361, 443], "creation": 7, "routin": [7, 8, 10, 434, 437, 438, 439, 444], "shape": [7, 296, 392, 437, 440], "valu": [7, 436], "exist": 7, "numer": 7, "rang": 7, "matric": 7, "The": 7, "matrix": [7, 435, 440], "class": 7, "type": [8, 9, 436, 440], "creat": 8, "miscellan": [8, 438, 439], "avail": [9, 448], "fft": [10, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117], "function": [10, 436, 438, 446, 447, 448], "standard": 10, "real": [10, 292, 376], "hermitian": 10, "helper": 10, "ab": 11, "absolut": 12, "add": 13, "all": [14, 261], "allclos": 15, "amax": 16, "amin": 17, "angl": 18, "ani": [19, 262], "arang": 20, "arcco": 21, "arccosh": 22, "arcsin": 23, "arcsinh": 24, "arctan": 25, "arctan2": 26, "arctanh": 27, "argmax": [28, 263], "argmin": [29, 264], "argsort": [30, 265], "around": 31, "array_equ": 33, "asanyarrai": 34, "asarrai": 35, "ascontiguousarrai": 36, "asfarrai": 37, "asfortranarrai": 38, "asnumpi": 39, "astyp": [40, 266], "atleast_1d": 41, "atleast_2d": 42, "atleast_3d": 43, "averag": [44, 447], "bincount": 45, "bitwise_and": 46, "bitwise_not": 47, "bitwise_or": 48, "bitwise_xor": 49, "broadcast_arrai": 50, "broadcast_to": 51, "can_cast": 52, "cbrt": 53, "ceil": 54, "choos": [55, 267], "clip": [56, 268], "column_stack": 57, "concaten": 58, "conj": [59, 269], "conjug": [60, 270], "convolv": 61, "copi": [62, 271], "copysign": 63, "copyto": 64, "correl": [65, 447], "co": 66, "cosh": 67, "count_nonzero": 68, "cov": 69, "cross": 70, "cumprod": 71, "cumsum": [72, 272], "deg2rad": 73, "degre": 74, "diag": 75, "diag_indic": 76, "diag_indices_from": 77, "diagflat": 78, "diagon": [79, 273], "diff": 80, "divid": 81, "dot": 82, "dpnp_arrai": 83, "dstack": 84, "dtype": [85, 274], "ediff1d": 86, "einsum": 87, "einsum_path": 88, "empti": 89, "empty_lik": 90, "equal": 91, "erf": 92, "exp": 93, "exp2": 94, "expand_dim": 95, "expm1": 96, "extract": 97, "ey": 98, "fab": 99, "fft2": 101, "fftfreq": 102, "fftn": 103, "fftshift": 104, "hfft": 105, "ifft": 106, "ifft2": 107, "ifftn": 108, "ifftshift": 109, "ihfft": 110, "irfft": 111, "irfft2": 112, "irfftn": 113, "rfft": 114, "rfft2": 115, "rfftfreq": 116, "rfftn": 117, "fill_diagon": 118, "finfo": 119, "flatit": 120, "flip": 121, "fliplr": 122, "flipud": 123, "floor": 124, "floor_divid": 125, "fmax": 126, "fmin": 127, "fmod": 128, "from_dlpack": 129, "frombuff": 130, "fromfil": 131, "fromfunct": 132, "fromit": 133, "fromstr": 134, "full": 135, "full_lik": 136, "geomspac": 137, "get_includ": 138, "gradient": 139, "greater": 140, "greater_equ": 141, "histogram": [142, 447], "hstack": 143, "hypot": 144, "ident": 145, "iinfo": 146, "imag": [147, 279], "indic": 148, "inner": 149, "invert": 150, "isclos": 151, "isfinit": 152, "isinf": 153, "isnan": 154, "isscalar": 155, "issubdtyp": 156, "issubsctyp": 157, "kron": 158, "left_shift": 159, "less": 160, "less_equ": 161, "linalg": [162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177], "choleski": 162, "cond": 163, "det": 164, "eig": 165, "eigh": 166, "eigval": 167, "inv": 168, "matrix_pow": 169, "matrix_rank": 170, "multi_dot": 171, "norm": [172, 435], "pinv": 173, "qr": 174, "slogdet": 175, "solv": [176, 435], "svd": 177, "linspac": 178, "loadtxt": 179, "log": 180, "log10": 181, "log1p": 182, "log2": 183, "logaddexp": 184, "logical_and": 185, "logical_not": 186, "logical_or": 187, "logical_xor": 188, "logspac": 189, "logsumexp": 190, "matmul": 191, "max": [192, 282], "maximum": 193, "mean": [194, 283], "median": 195, "meshgrid": 196, "mgrid": 197, "min": [198, 284], "minimum": 199, "mod": 200, "modf": 201, "moveaxi": 202, "multipli": 203, "nanargmax": 204, "nanargmin": 205, "nancumprod": 206, "nancumsum": 207, "nanmax": 208, "nanmean": 209, "nanmin": 210, "nanprod": 211, "nanstd": 212, "nansum": 213, "nanvar": 214, "ndarrai": [215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 440], "t": 216, "__abs__": 217, "__add__": 218, "__and__": 219, "__complex__": 220, "__copy__": 221, "__eq__": 222, "__float__": 223, "__floordiv__": 224, "__ge__": 225, "__getitem__": 226, "__gt__": 227, "__iadd__": 228, "__iand__": 229, "__ifloordiv__": 230, "__ilshift__": 231, "__imod__": 232, "__imul__": 233, "__int__": 234, "__invert__": 235, "__ior__": 236, "__ipow__": 237, "__irshift__": 238, "__isub__": 239, "__itruediv__": 240, "__ixor__": 241, "__le__": 242, "__len__": 243, "__lshift__": 244, "__lt__": 245, "__mod__": 246, "__mul__": 247, "__ne__": 248, "__neg__": 249, "__new__": 250, "__or__": 251, "__pos__": 252, "__pow__": 253, "__repr__": 254, "__rshift__": 255, "__setitem__": 256, "__str__": 257, "__sub__": 258, "__truediv__": 259, "__xor__": 260, "fill": 275, "flag": 276, "flat": 277, "flatten": 278, "item": [280, 440], "items": 281, "nbyte": 285, "ndim": 286, "nonzero": [287, 308], "partit": [288, 314], "prod": [289, 318], "put": [290, 321], "ravel": [291, 375], "repeat": [293, 380], "reshap": [294, 381], "round": [295, 387, 438], "size": 297, "sort": [298, 397, 445], "squeez": [299, 400], "std": [300, 402], "stride": 301, "sum": [302, 404, 438], "swapax": [303, 405], "take": [304, 406], "transpos": [305, 413, 437], "var": [306, 427], "neg": 307, "not_equ": 309, "ogrid": 310, "ones": 311, "ones_lik": 312, "outer": 313, "place": 315, "posit": 316, "power": [317, 352], "proj": 319, "ptp": 320, "put_along_axi": 322, "putmask": 323, "rad2deg": 324, "radian": 325, "randomst": 326, "beta": 327, "binomi": 328, "byte": 329, "chisquar": 330, "choic": 331, "dirichlet": 332, "exponenti": 333, "f": 334, "gamma": 335, "geometr": 336, "gumbel": 337, "hypergeometr": 338, "laplac": 339, "logist": 340, "lognorm": 341, "logseri": 342, "multinomi": 343, "multivariate_norm": 344, "negative_binomi": 345, "noncentral_chisquar": 346, "noncentral_f": 347, "normal": 348, "pareto": 349, "permut": [350, 443], "poisson": 351, "rand": 353, "randint": 354, "randn": 355, "random_integ": 357, "random_sampl": 358, "ranf": 359, "rayleigh": 360, "seed": 362, "shuffl": 363, "standard_cauchi": 364, "standard_exponenti": 365, "standard_gamma": 366, "standard_norm": 367, "standard_t": 368, "triangular": 369, "uniform": 370, "vonmis": 371, "wald": 372, "weibul": 373, "zipf": 374, "reciproc": 377, "reduce_hypot": 378, "remaind": 379, "result_typ": 382, "right_shift": 383, "rint": 384, "roll": 385, "rollaxi": 386, "row_stack": 388, "rsqrt": 389, "searchsort": 390, "select": [391, 440], "sign": 393, "signbit": 394, "sin": 395, "sinh": 396, "sqrt": 398, "squar": 399, "stack": 401, "subtract": 403, "take_along_axi": 407, "tan": 408, "tanh": 409, "tensordot": 410, "tile": [411, 437], "trace": 412, "trapz": 414, "tri": 415, "tril": 416, "tril_indic": 417, "tril_indices_from": 418, "triu": 419, "triu_indic": 420, "triu_indices_from": 421, "true_divid": 422, "trunc": 423, "uniqu": 424, "unwrap": 425, "vander": 426, "vdot": 428, "vstack": 429, "where": 430, "zero": 431, "zeros_lik": 432, "index": [434, 440], "gener": [434, 443], "like": [434, 437], "insert": 434, "iter": 434, "over": 434, "vector": 435, "product": [435, 438], "decomposit": 435, "eigenvalu": 435, "other": [435, 438, 440], "number": [435, 437, 438], "equat": 435, "logic": 436, "truth": 436, "infin": 436, "nan": 436, "manipul": [437, 440], "basic": [437, 442], "chang": 437, "dimens": 437, "kind": 437, "join": 437, "split": 437, "ad": 437, "remov": 437, "element": 437, "rearrang": 437, "mathemat": 438, "trigonometr": [438, 448], "hyperbol": 438, "differ": 438, "expon": 438, "logarithm": 438, "special": [438, 440, 446], "float": [438, 448], "point": 438, "ration": 438, "arithmet": [438, 440, 442], "handl": 438, "complex": 438, "extrema": 438, "find": 438, "util": 439, "construct": 440, "attribut": 440, "memori": 440, "layout": 440, "method": 440, "convers": 440, "calcul": 440, "multipl": 440, "pad": 441, "polynomi": 442, "polyutil": 442, "poly1d": 442, "simpl": 443, "distribut": 443, "search": 445, "count": 445, "error": 446, "statist": 447, "order": 447, "varianc": 447, "univers": 448, "ufunc": 448, "math": 448, "twiddl": 448}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1, "sphinx.ext.intersphinx": 1, "sphinx": 60}, "alltitles": {"Interplay with the Data Parallel Control Library": [[0, "interplay-with-the-data-parallel-control-library"]], "Example": [[0, "example"]], "C++ backend API Reference": [[1, "c-backend-api-reference"]], "Data Parallel Extension for NumPy*": [[2, "module-dpnp"]], "Development information": [[2, null]], "Overview": [[3, "id1"]], "Quick Start Guide": [[4, "id1"]], "Device Drivers": [[4, "device-drivers"]], "Python Interpreter": [[4, "python-interpreter"]], "Installation": [[4, "installation"]], "Install Package from Anaconda": [[4, "install-package-from-anaconda"]], "Build and Install Conda Package": [[4, "build-and-install-conda-package"]], "Build and Install with scikit-build": [[4, "build-and-install-with-scikit-build"]], "Testing": [[4, "testing"]], "Examples": [[4, "examples"]], "Binary Operations": [[5, "binary-operations"]], "Elementwise bit operations": [[5, "elementwise-bit-operations"]], "Bit packing": [[5, "bit-packing"]], "Output formatting": [[5, "output-formatting"]], "Comparison Table NumPy/ DPNP/ CuPy": [[6, "comparison-table-numpy-dpnp-cupy"]], "Summary": [[6, "summary"]], "Module-Level": [[6, "module-level"]], "Multi-Dimensional Array": [[6, "multi-dimensional-array"]], "Linear Algebra": [[6, "linear-algebra"], [435, "linear-algebra"]], "Discrete Fourier Transform": [[6, "discrete-fourier-transform"]], "Random Sampling": [[6, "random-sampling"]], "Array creation routines": [[7, "array-creation-routines"]], "From shape or value": [[7, "from-shape-or-value"]], "From existing data": [[7, "from-existing-data"]], "Numerical ranges": [[7, "numerical-ranges"]], "Building matrices": [[7, "building-matrices"]], "The Matrix class": [[7, "the-matrix-class"]], "Data type routines": [[8, "data-type-routines"]], "Creating data types": [[8, "creating-data-types"]], "Data type information": [[8, "data-type-information"]], "Data type testing": [[8, "data-type-testing"]], "Miscellaneous": [[8, "miscellaneous"], [438, "miscellaneous"]], "Available array data types": [[9, "available-array-data-types"]], "FFT Functions": [[10, "fft-functions"]], "Standard FFTs": [[10, "standard-ffts"]], "Real FFTs": [[10, "real-ffts"]], "Hermitian FFTs": [[10, "hermitian-ffts"]], "Helper routines": [[10, "helper-routines"]], "dpnp.abs": [[11, "dpnp-abs"]], "dpnp.absolute": [[12, "dpnp-absolute"]], "dpnp.add": [[13, "dpnp-add"]], "dpnp.all": [[14, "dpnp-all"]], "dpnp.allclose": [[15, "dpnp-allclose"]], "dpnp.amax": [[16, "dpnp-amax"]], "dpnp.amin": [[17, "dpnp-amin"]], "dpnp.angle": [[18, "dpnp-angle"]], "dpnp.any": [[19, "dpnp-any"]], "dpnp.arange": [[20, "dpnp-arange"]], "dpnp.arccos": [[21, "dpnp-arccos"]], "dpnp.arccosh": [[22, "dpnp-arccosh"]], "dpnp.arcsin": [[23, "dpnp-arcsin"]], "dpnp.arcsinh": [[24, "dpnp-arcsinh"]], "dpnp.arctan": [[25, "dpnp-arctan"]], "dpnp.arctan2": [[26, "dpnp-arctan2"]], "dpnp.arctanh": [[27, "dpnp-arctanh"]], "dpnp.argmax": [[28, "dpnp-argmax"]], "dpnp.argmin": [[29, "dpnp-argmin"]], "dpnp.argsort": [[30, "dpnp-argsort"]], "dpnp.around": [[31, "dpnp-around"]], "dpnp.array": [[32, "dpnp-array"]], "dpnp.array_equal": [[33, "dpnp-array-equal"]], "dpnp.asanyarray": [[34, "dpnp-asanyarray"]], "dpnp.asarray": [[35, "dpnp-asarray"]], "dpnp.ascontiguousarray": [[36, "dpnp-ascontiguousarray"]], "dpnp.asfarray": [[37, "dpnp-asfarray"]], "dpnp.asfortranarray": [[38, "dpnp-asfortranarray"]], "dpnp.asnumpy": [[39, "dpnp-asnumpy"]], "dpnp.astype": [[40, "dpnp-astype"]], "dpnp.atleast_1d": [[41, "dpnp-atleast-1d"]], "dpnp.atleast_2d": [[42, "dpnp-atleast-2d"]], "dpnp.atleast_3d": [[43, "dpnp-atleast-3d"]], "dpnp.average": [[44, "dpnp-average"]], "dpnp.bincount": [[45, "dpnp-bincount"]], "dpnp.bitwise_and": [[46, "dpnp-bitwise-and"]], "dpnp.bitwise_not": [[47, "dpnp-bitwise-not"]], "dpnp.bitwise_or": [[48, "dpnp-bitwise-or"]], "dpnp.bitwise_xor": [[49, "dpnp-bitwise-xor"]], "dpnp.broadcast_arrays": [[50, "dpnp-broadcast-arrays"]], "dpnp.broadcast_to": [[51, "dpnp-broadcast-to"]], "dpnp.can_cast": [[52, "dpnp-can-cast"]], "dpnp.cbrt": [[53, "dpnp-cbrt"]], "dpnp.ceil": [[54, "dpnp-ceil"]], "dpnp.choose": [[55, "dpnp-choose"]], "dpnp.clip": [[56, "dpnp-clip"]], "dpnp.column_stack": [[57, "dpnp-column-stack"]], "dpnp.concatenate": [[58, "dpnp-concatenate"]], "dpnp.conj": [[59, "dpnp-conj"]], "dpnp.conjugate": [[60, "dpnp-conjugate"]], "dpnp.convolve": [[61, "dpnp-convolve"]], "dpnp.copy": [[62, "dpnp-copy"]], "dpnp.copysign": [[63, "dpnp-copysign"]], "dpnp.copyto": [[64, "dpnp-copyto"]], "dpnp.correlate": [[65, "dpnp-correlate"]], "dpnp.cos": [[66, "dpnp-cos"]], "dpnp.cosh": [[67, "dpnp-cosh"]], "dpnp.count_nonzero": [[68, "dpnp-count-nonzero"]], "dpnp.cov": [[69, "dpnp-cov"]], "dpnp.cross": [[70, "dpnp-cross"]], "dpnp.cumprod": [[71, "dpnp-cumprod"]], "dpnp.cumsum": [[72, "dpnp-cumsum"]], "dpnp.deg2rad": [[73, "dpnp-deg2rad"]], "dpnp.degrees": [[74, "dpnp-degrees"]], "dpnp.diag": [[75, "dpnp-diag"]], "dpnp.diag_indices": [[76, "dpnp-diag-indices"]], "dpnp.diag_indices_from": [[77, "dpnp-diag-indices-from"]], "dpnp.diagflat": [[78, "dpnp-diagflat"]], "dpnp.diagonal": [[79, "dpnp-diagonal"]], "dpnp.diff": [[80, "dpnp-diff"]], "dpnp.divide": [[81, "dpnp-divide"]], "dpnp.dot": [[82, "dpnp-dot"]], "dpnp.dpnp_array.dpnp_array": [[83, "dpnp-dpnp-array-dpnp-array"]], "dpnp.dstack": [[84, "dpnp-dstack"]], "dpnp.dtype": [[85, "dpnp-dtype"]], "dpnp.ediff1d": [[86, "dpnp-ediff1d"]], "dpnp.einsum": [[87, "dpnp-einsum"]], "dpnp.einsum_path": [[88, "dpnp-einsum-path"]], "dpnp.empty": [[89, "dpnp-empty"]], "dpnp.empty_like": [[90, "dpnp-empty-like"]], "dpnp.equal": [[91, "dpnp-equal"]], "dpnp.erf": [[92, "dpnp-erf"]], "dpnp.exp": [[93, "dpnp-exp"]], "dpnp.exp2": [[94, "dpnp-exp2"]], "dpnp.expand_dims": [[95, "dpnp-expand-dims"]], "dpnp.expm1": [[96, "dpnp-expm1"]], "dpnp.extract": [[97, "dpnp-extract"]], "dpnp.eye": [[98, "dpnp-eye"]], "dpnp.fabs": [[99, "dpnp-fabs"]], "dpnp.fft.fft": [[100, "dpnp-fft-fft"]], "dpnp.fft.fft2": [[101, "dpnp-fft-fft2"]], "dpnp.fft.fftfreq": [[102, "dpnp-fft-fftfreq"]], "dpnp.fft.fftn": [[103, "dpnp-fft-fftn"]], "dpnp.fft.fftshift": [[104, "dpnp-fft-fftshift"]], "dpnp.fft.hfft": [[105, "dpnp-fft-hfft"]], "dpnp.fft.ifft": [[106, "dpnp-fft-ifft"]], "dpnp.fft.ifft2": [[107, "dpnp-fft-ifft2"]], "dpnp.fft.ifftn": [[108, "dpnp-fft-ifftn"]], "dpnp.fft.ifftshift": [[109, "dpnp-fft-ifftshift"]], "dpnp.fft.ihfft": [[110, "dpnp-fft-ihfft"]], "dpnp.fft.irfft": [[111, "dpnp-fft-irfft"]], "dpnp.fft.irfft2": [[112, "dpnp-fft-irfft2"]], "dpnp.fft.irfftn": [[113, "dpnp-fft-irfftn"]], "dpnp.fft.rfft": [[114, "dpnp-fft-rfft"]], "dpnp.fft.rfft2": [[115, "dpnp-fft-rfft2"]], "dpnp.fft.rfftfreq": [[116, "dpnp-fft-rfftfreq"]], "dpnp.fft.rfftn": [[117, "dpnp-fft-rfftn"]], "dpnp.fill_diagonal": [[118, "dpnp-fill-diagonal"]], "dpnp.finfo": [[119, "dpnp-finfo"]], "dpnp.flatiter": [[120, "dpnp-flatiter"]], "dpnp.flip": [[121, "dpnp-flip"]], "dpnp.fliplr": [[122, "dpnp-fliplr"]], "dpnp.flipud": [[123, "dpnp-flipud"]], "dpnp.floor": [[124, "dpnp-floor"]], "dpnp.floor_divide": [[125, "dpnp-floor-divide"]], "dpnp.fmax": [[126, "dpnp-fmax"]], "dpnp.fmin": [[127, "dpnp-fmin"]], "dpnp.fmod": [[128, "dpnp-fmod"]], "dpnp.from_dlpack": [[129, "dpnp-from-dlpack"]], "dpnp.frombuffer": [[130, "dpnp-frombuffer"]], "dpnp.fromfile": [[131, "dpnp-fromfile"]], "dpnp.fromfunction": [[132, "dpnp-fromfunction"]], "dpnp.fromiter": [[133, "dpnp-fromiter"]], "dpnp.fromstring": [[134, "dpnp-fromstring"]], "dpnp.full": [[135, "dpnp-full"]], "dpnp.full_like": [[136, "dpnp-full-like"]], "dpnp.geomspace": [[137, "dpnp-geomspace"]], "dpnp.get_include": [[138, "dpnp-get-include"]], "dpnp.gradient": [[139, "dpnp-gradient"]], "dpnp.greater": [[140, "dpnp-greater"]], "dpnp.greater_equal": [[141, "dpnp-greater-equal"]], "dpnp.histogram": [[142, "dpnp-histogram"]], "dpnp.hstack": [[143, "dpnp-hstack"]], "dpnp.hypot": [[144, "dpnp-hypot"]], "dpnp.identity": [[145, "dpnp-identity"]], "dpnp.iinfo": [[146, "dpnp-iinfo"]], "dpnp.imag": [[147, "dpnp-imag"]], "dpnp.indices": [[148, "dpnp-indices"]], "dpnp.inner": [[149, "dpnp-inner"]], "dpnp.invert": [[150, "dpnp-invert"]], "dpnp.isclose": [[151, "dpnp-isclose"]], "dpnp.isfinite": [[152, "dpnp-isfinite"]], "dpnp.isinf": [[153, "dpnp-isinf"]], "dpnp.isnan": [[154, "dpnp-isnan"]], "dpnp.isscalar": [[155, "dpnp-isscalar"]], "dpnp.issubdtype": [[156, "dpnp-issubdtype"]], "dpnp.issubsctype": [[157, "dpnp-issubsctype"]], "dpnp.kron": [[158, "dpnp-kron"]], "dpnp.left_shift": [[159, "dpnp-left-shift"]], "dpnp.less": [[160, "dpnp-less"]], "dpnp.less_equal": [[161, "dpnp-less-equal"]], "dpnp.linalg.cholesky": [[162, "dpnp-linalg-cholesky"]], "dpnp.linalg.cond": [[163, "dpnp-linalg-cond"]], "dpnp.linalg.det": [[164, "dpnp-linalg-det"]], "dpnp.linalg.eig": [[165, "dpnp-linalg-eig"]], "dpnp.linalg.eigh": [[166, "dpnp-linalg-eigh"]], "dpnp.linalg.eigvals": [[167, "dpnp-linalg-eigvals"]], "dpnp.linalg.inv": [[168, "dpnp-linalg-inv"]], "dpnp.linalg.matrix_power": [[169, "dpnp-linalg-matrix-power"]], "dpnp.linalg.matrix_rank": [[170, "dpnp-linalg-matrix-rank"]], "dpnp.linalg.multi_dot": [[171, "dpnp-linalg-multi-dot"]], "dpnp.linalg.norm": [[172, "dpnp-linalg-norm"]], "dpnp.linalg.pinv": [[173, "dpnp-linalg-pinv"]], "dpnp.linalg.qr": [[174, "dpnp-linalg-qr"]], "dpnp.linalg.slogdet": [[175, "dpnp-linalg-slogdet"]], "dpnp.linalg.solve": [[176, "dpnp-linalg-solve"]], "dpnp.linalg.svd": [[177, "dpnp-linalg-svd"]], "dpnp.linspace": [[178, "dpnp-linspace"]], "dpnp.loadtxt": [[179, "dpnp-loadtxt"]], "dpnp.log": [[180, "dpnp-log"]], "dpnp.log10": [[181, "dpnp-log10"]], "dpnp.log1p": [[182, "dpnp-log1p"]], "dpnp.log2": [[183, "dpnp-log2"]], "dpnp.logaddexp": [[184, "dpnp-logaddexp"]], "dpnp.logical_and": [[185, "dpnp-logical-and"]], "dpnp.logical_not": [[186, "dpnp-logical-not"]], "dpnp.logical_or": [[187, "dpnp-logical-or"]], "dpnp.logical_xor": [[188, "dpnp-logical-xor"]], "dpnp.logspace": [[189, "dpnp-logspace"]], "dpnp.logsumexp": [[190, "dpnp-logsumexp"]], "dpnp.matmul": [[191, "dpnp-matmul"]], "dpnp.max": [[192, "dpnp-max"]], "dpnp.maximum": [[193, "dpnp-maximum"]], "dpnp.mean": [[194, "dpnp-mean"]], "dpnp.median": [[195, "dpnp-median"]], "dpnp.meshgrid": [[196, "dpnp-meshgrid"]], "dpnp.mgrid": [[197, "dpnp-mgrid"]], "dpnp.min": [[198, "dpnp-min"]], "dpnp.minimum": [[199, "dpnp-minimum"]], "dpnp.mod": [[200, "dpnp-mod"]], "dpnp.modf": [[201, "dpnp-modf"]], "dpnp.moveaxis": [[202, "dpnp-moveaxis"]], "dpnp.multiply": [[203, "dpnp-multiply"]], "dpnp.nanargmax": [[204, "dpnp-nanargmax"]], "dpnp.nanargmin": [[205, "dpnp-nanargmin"]], "dpnp.nancumprod": [[206, "dpnp-nancumprod"]], "dpnp.nancumsum": [[207, "dpnp-nancumsum"]], "dpnp.nanmax": [[208, "dpnp-nanmax"]], "dpnp.nanmean": [[209, "dpnp-nanmean"]], "dpnp.nanmin": [[210, "dpnp-nanmin"]], "dpnp.nanprod": [[211, "dpnp-nanprod"]], "dpnp.nanstd": [[212, "dpnp-nanstd"]], "dpnp.nansum": [[213, "dpnp-nansum"]], "dpnp.nanvar": [[214, "dpnp-nanvar"]], "dpnp.ndarray": [[215, "dpnp-ndarray"]], "dpnp.ndarray.T": [[216, "dpnp-ndarray-t"]], "dpnp.ndarray.__abs__": [[217, "dpnp-ndarray-abs"]], "dpnp.ndarray.__add__": [[218, "dpnp-ndarray-add"]], "dpnp.ndarray.__and__": [[219, "dpnp-ndarray-and"]], "dpnp.ndarray.__complex__": [[220, "dpnp-ndarray-complex"]], "dpnp.ndarray.__copy__": [[221, "dpnp-ndarray-copy"]], "dpnp.ndarray.__eq__": [[222, "dpnp-ndarray-eq"]], "dpnp.ndarray.__float__": [[223, "dpnp-ndarray-float"]], "dpnp.ndarray.__floordiv__": [[224, "dpnp-ndarray-floordiv"]], "dpnp.ndarray.__ge__": [[225, "dpnp-ndarray-ge"]], "dpnp.ndarray.__getitem__": [[226, "dpnp-ndarray-getitem"]], "dpnp.ndarray.__gt__": [[227, "dpnp-ndarray-gt"]], "dpnp.ndarray.__iadd__": [[228, "dpnp-ndarray-iadd"]], "dpnp.ndarray.__iand__": [[229, "dpnp-ndarray-iand"]], "dpnp.ndarray.__ifloordiv__": [[230, "dpnp-ndarray-ifloordiv"]], "dpnp.ndarray.__ilshift__": [[231, "dpnp-ndarray-ilshift"]], "dpnp.ndarray.__imod__": [[232, "dpnp-ndarray-imod"]], "dpnp.ndarray.__imul__": [[233, "dpnp-ndarray-imul"]], "dpnp.ndarray.__int__": [[234, "dpnp-ndarray-int"]], "dpnp.ndarray.__invert__": [[235, "dpnp-ndarray-invert"]], "dpnp.ndarray.__ior__": [[236, "dpnp-ndarray-ior"]], "dpnp.ndarray.__ipow__": [[237, "dpnp-ndarray-ipow"]], "dpnp.ndarray.__irshift__": [[238, "dpnp-ndarray-irshift"]], "dpnp.ndarray.__isub__": [[239, "dpnp-ndarray-isub"]], "dpnp.ndarray.__itruediv__": [[240, "dpnp-ndarray-itruediv"]], "dpnp.ndarray.__ixor__": [[241, "dpnp-ndarray-ixor"]], "dpnp.ndarray.__le__": [[242, "dpnp-ndarray-le"]], "dpnp.ndarray.__len__": [[243, "dpnp-ndarray-len"]], "dpnp.ndarray.__lshift__": [[244, "dpnp-ndarray-lshift"]], "dpnp.ndarray.__lt__": [[245, "dpnp-ndarray-lt"]], "dpnp.ndarray.__mod__": [[246, "dpnp-ndarray-mod"]], "dpnp.ndarray.__mul__": [[247, "dpnp-ndarray-mul"]], "dpnp.ndarray.__ne__": [[248, "dpnp-ndarray-ne"]], "dpnp.ndarray.__neg__": [[249, "dpnp-ndarray-neg"]], "dpnp.ndarray.__new__": [[250, "dpnp-ndarray-new"]], "dpnp.ndarray.__or__": [[251, "dpnp-ndarray-or"]], "dpnp.ndarray.__pos__": [[252, "dpnp-ndarray-pos"]], "dpnp.ndarray.__pow__": [[253, "dpnp-ndarray-pow"]], "dpnp.ndarray.__repr__": [[254, "dpnp-ndarray-repr"]], "dpnp.ndarray.__rshift__": [[255, "dpnp-ndarray-rshift"]], "dpnp.ndarray.__setitem__": [[256, "dpnp-ndarray-setitem"]], "dpnp.ndarray.__str__": [[257, "dpnp-ndarray-str"]], "dpnp.ndarray.__sub__": [[258, "dpnp-ndarray-sub"]], "dpnp.ndarray.__truediv__": [[259, "dpnp-ndarray-truediv"]], "dpnp.ndarray.__xor__": [[260, "dpnp-ndarray-xor"]], "dpnp.ndarray.all": [[261, "dpnp-ndarray-all"]], "dpnp.ndarray.any": [[262, "dpnp-ndarray-any"]], "dpnp.ndarray.argmax": [[263, "dpnp-ndarray-argmax"]], "dpnp.ndarray.argmin": [[264, "dpnp-ndarray-argmin"]], "dpnp.ndarray.argsort": [[265, "dpnp-ndarray-argsort"]], "dpnp.ndarray.astype": [[266, "dpnp-ndarray-astype"]], "dpnp.ndarray.choose": [[267, "dpnp-ndarray-choose"]], "dpnp.ndarray.clip": [[268, "dpnp-ndarray-clip"]], "dpnp.ndarray.conj": [[269, "dpnp-ndarray-conj"]], "dpnp.ndarray.conjugate": [[270, "dpnp-ndarray-conjugate"]], "dpnp.ndarray.copy": [[271, "dpnp-ndarray-copy"]], "dpnp.ndarray.cumsum": [[272, "dpnp-ndarray-cumsum"]], "dpnp.ndarray.diagonal": [[273, "dpnp-ndarray-diagonal"]], "dpnp.ndarray.dtype": [[274, "dpnp-ndarray-dtype"]], "dpnp.ndarray.fill": [[275, "dpnp-ndarray-fill"]], "dpnp.ndarray.flags": [[276, "dpnp-ndarray-flags"]], "dpnp.ndarray.flat": [[277, "dpnp-ndarray-flat"]], "dpnp.ndarray.flatten": [[278, "dpnp-ndarray-flatten"]], "dpnp.ndarray.imag": [[279, "dpnp-ndarray-imag"]], "dpnp.ndarray.item": [[280, "dpnp-ndarray-item"]], "dpnp.ndarray.itemsize": [[281, "dpnp-ndarray-itemsize"]], "dpnp.ndarray.max": [[282, "dpnp-ndarray-max"]], "dpnp.ndarray.mean": [[283, "dpnp-ndarray-mean"]], "dpnp.ndarray.min": [[284, "dpnp-ndarray-min"]], "dpnp.ndarray.nbytes": [[285, "dpnp-ndarray-nbytes"]], "dpnp.ndarray.ndim": [[286, "dpnp-ndarray-ndim"]], "dpnp.ndarray.nonzero": [[287, "dpnp-ndarray-nonzero"]], "dpnp.ndarray.partition": [[288, "dpnp-ndarray-partition"]], "dpnp.ndarray.prod": [[289, "dpnp-ndarray-prod"]], "dpnp.ndarray.put": [[290, "dpnp-ndarray-put"]], "dpnp.ndarray.ravel": [[291, "dpnp-ndarray-ravel"]], "dpnp.ndarray.real": [[292, "dpnp-ndarray-real"]], "dpnp.ndarray.repeat": [[293, "dpnp-ndarray-repeat"]], "dpnp.ndarray.reshape": [[294, "dpnp-ndarray-reshape"]], "dpnp.ndarray.round": [[295, "dpnp-ndarray-round"]], "dpnp.ndarray.shape": [[296, "dpnp-ndarray-shape"]], "dpnp.ndarray.size": [[297, "dpnp-ndarray-size"]], "dpnp.ndarray.sort": [[298, "dpnp-ndarray-sort"]], "dpnp.ndarray.squeeze": [[299, "dpnp-ndarray-squeeze"]], "dpnp.ndarray.std": [[300, "dpnp-ndarray-std"]], "dpnp.ndarray.strides": [[301, "dpnp-ndarray-strides"]], "dpnp.ndarray.sum": [[302, "dpnp-ndarray-sum"]], "dpnp.ndarray.swapaxes": [[303, "dpnp-ndarray-swapaxes"]], "dpnp.ndarray.take": [[304, "dpnp-ndarray-take"]], "dpnp.ndarray.transpose": [[305, "dpnp-ndarray-transpose"]], "dpnp.ndarray.var": [[306, "dpnp-ndarray-var"]], "dpnp.negative": [[307, "dpnp-negative"]], "dpnp.nonzero": [[308, "dpnp-nonzero"]], "dpnp.not_equal": [[309, "dpnp-not-equal"]], "dpnp.ogrid": [[310, "dpnp-ogrid"]], "dpnp.ones": [[311, "dpnp-ones"]], "dpnp.ones_like": [[312, "dpnp-ones-like"]], "dpnp.outer": [[313, "dpnp-outer"]], "dpnp.partition": [[314, "dpnp-partition"]], "dpnp.place": [[315, "dpnp-place"]], "dpnp.positive": [[316, "dpnp-positive"]], "dpnp.power": [[317, "dpnp-power"]], "dpnp.prod": [[318, "dpnp-prod"]], "dpnp.proj": [[319, "dpnp-proj"]], "dpnp.ptp": [[320, "dpnp-ptp"]], "dpnp.put": [[321, "dpnp-put"]], "dpnp.put_along_axis": [[322, "dpnp-put-along-axis"]], "dpnp.putmask": [[323, "dpnp-putmask"]], "dpnp.rad2deg": [[324, "dpnp-rad2deg"]], "dpnp.radians": [[325, "dpnp-radians"]], "dpnp.random.RandomState": [[326, "dpnp-random-randomstate"]], "dpnp.random.beta": [[327, "dpnp-random-beta"]], "dpnp.random.binomial": [[328, "dpnp-random-binomial"]], "dpnp.random.bytes": [[329, "dpnp-random-bytes"]], "dpnp.random.chisquare": [[330, "dpnp-random-chisquare"]], "dpnp.random.choice": [[331, "dpnp-random-choice"]], "dpnp.random.dirichlet": [[332, "dpnp-random-dirichlet"]], "dpnp.random.exponential": [[333, "dpnp-random-exponential"]], "dpnp.random.f": [[334, "dpnp-random-f"]], "dpnp.random.gamma": [[335, "dpnp-random-gamma"]], "dpnp.random.geometric": [[336, "dpnp-random-geometric"]], "dpnp.random.gumbel": [[337, "dpnp-random-gumbel"]], "dpnp.random.hypergeometric": [[338, "dpnp-random-hypergeometric"]], "dpnp.random.laplace": [[339, "dpnp-random-laplace"]], "dpnp.random.logistic": [[340, "dpnp-random-logistic"]], "dpnp.random.lognormal": [[341, "dpnp-random-lognormal"]], "dpnp.random.logseries": [[342, "dpnp-random-logseries"]], "dpnp.random.multinomial": [[343, "dpnp-random-multinomial"]], "dpnp.random.multivariate_normal": [[344, "dpnp-random-multivariate-normal"]], "dpnp.random.negative_binomial": [[345, "dpnp-random-negative-binomial"]], "dpnp.random.noncentral_chisquare": [[346, "dpnp-random-noncentral-chisquare"]], "dpnp.random.noncentral_f": [[347, "dpnp-random-noncentral-f"]], "dpnp.random.normal": [[348, "dpnp-random-normal"]], "dpnp.random.pareto": [[349, "dpnp-random-pareto"]], "dpnp.random.permutation": [[350, "dpnp-random-permutation"]], "dpnp.random.poisson": [[351, "dpnp-random-poisson"]], "dpnp.random.power": [[352, "dpnp-random-power"]], "dpnp.random.rand": [[353, "dpnp-random-rand"]], "dpnp.random.randint": [[354, "dpnp-random-randint"]], "dpnp.random.randn": [[355, "dpnp-random-randn"]], "dpnp.random.random": [[356, "dpnp-random-random"]], "dpnp.random.random_integers": [[357, "dpnp-random-random-integers"]], "dpnp.random.random_sample": [[358, "dpnp-random-random-sample"]], "dpnp.random.ranf": [[359, "dpnp-random-ranf"]], "dpnp.random.rayleigh": [[360, "dpnp-random-rayleigh"]], "dpnp.random.sample": [[361, "dpnp-random-sample"]], "dpnp.random.seed": [[362, "dpnp-random-seed"]], "dpnp.random.shuffle": [[363, "dpnp-random-shuffle"]], "dpnp.random.standard_cauchy": [[364, "dpnp-random-standard-cauchy"]], "dpnp.random.standard_exponential": [[365, "dpnp-random-standard-exponential"]], "dpnp.random.standard_gamma": [[366, "dpnp-random-standard-gamma"]], "dpnp.random.standard_normal": [[367, "dpnp-random-standard-normal"]], "dpnp.random.standard_t": [[368, "dpnp-random-standard-t"]], "dpnp.random.triangular": [[369, "dpnp-random-triangular"]], "dpnp.random.uniform": [[370, "dpnp-random-uniform"]], "dpnp.random.vonmises": [[371, "dpnp-random-vonmises"]], "dpnp.random.wald": [[372, "dpnp-random-wald"]], "dpnp.random.weibull": [[373, "dpnp-random-weibull"]], "dpnp.random.zipf": [[374, "dpnp-random-zipf"]], "dpnp.ravel": [[375, "dpnp-ravel"]], "dpnp.real": [[376, "dpnp-real"]], "dpnp.reciprocal": [[377, "dpnp-reciprocal"]], "dpnp.reduce_hypot": [[378, "dpnp-reduce-hypot"]], "dpnp.remainder": [[379, "dpnp-remainder"]], "dpnp.repeat": [[380, "dpnp-repeat"]], "dpnp.reshape": [[381, "dpnp-reshape"]], "dpnp.result_type": [[382, "dpnp-result-type"]], "dpnp.right_shift": [[383, "dpnp-right-shift"]], "dpnp.rint": [[384, "dpnp-rint"]], "dpnp.roll": [[385, "dpnp-roll"]], "dpnp.rollaxis": [[386, "dpnp-rollaxis"]], "dpnp.round": [[387, "dpnp-round"]], "dpnp.row_stack": [[388, "dpnp-row-stack"]], "dpnp.rsqrt": [[389, "dpnp-rsqrt"]], "dpnp.searchsorted": [[390, "dpnp-searchsorted"]], "dpnp.select": [[391, "dpnp-select"]], "dpnp.shape": [[392, "dpnp-shape"]], "dpnp.sign": [[393, "dpnp-sign"]], "dpnp.signbit": [[394, "dpnp-signbit"]], "dpnp.sin": [[395, "dpnp-sin"]], "dpnp.sinh": [[396, "dpnp-sinh"]], "dpnp.sort": [[397, "dpnp-sort"]], "dpnp.sqrt": [[398, "dpnp-sqrt"]], "dpnp.square": [[399, "dpnp-square"]], "dpnp.squeeze": [[400, "dpnp-squeeze"]], "dpnp.stack": [[401, "dpnp-stack"]], "dpnp.std": [[402, "dpnp-std"]], "dpnp.subtract": [[403, "dpnp-subtract"]], "dpnp.sum": [[404, "dpnp-sum"]], "dpnp.swapaxes": [[405, "dpnp-swapaxes"]], "dpnp.take": [[406, "dpnp-take"]], "dpnp.take_along_axis": [[407, "dpnp-take-along-axis"]], "dpnp.tan": [[408, "dpnp-tan"]], "dpnp.tanh": [[409, "dpnp-tanh"]], "dpnp.tensordot": [[410, "dpnp-tensordot"]], "dpnp.tile": [[411, "dpnp-tile"]], "dpnp.trace": [[412, "dpnp-trace"]], "dpnp.transpose": [[413, "dpnp-transpose"]], "dpnp.trapz": [[414, "dpnp-trapz"]], "dpnp.tri": [[415, "dpnp-tri"]], "dpnp.tril": [[416, "dpnp-tril"]], "dpnp.tril_indices": [[417, "dpnp-tril-indices"]], "dpnp.tril_indices_from": [[418, "dpnp-tril-indices-from"]], "dpnp.triu": [[419, "dpnp-triu"]], "dpnp.triu_indices": [[420, "dpnp-triu-indices"]], "dpnp.triu_indices_from": [[421, "dpnp-triu-indices-from"]], "dpnp.true_divide": [[422, "dpnp-true-divide"]], "dpnp.trunc": [[423, "dpnp-trunc"]], "dpnp.unique": [[424, "dpnp-unique"]], "dpnp.unwrap": [[425, "dpnp-unwrap"]], "dpnp.vander": [[426, "dpnp-vander"]], "dpnp.var": [[427, "dpnp-var"]], "dpnp.vdot": [[428, "dpnp-vdot"]], "dpnp.vstack": [[429, "dpnp-vstack"]], "dpnp.where": [[430, "dpnp-where"]], "dpnp.zeros": [[431, "dpnp-zeros"]], "dpnp.zeros_like": [[432, "dpnp-zeros-like"]], "API Reference": [[433, "api-reference"]], "Array Indexing Routines": [[434, "array-indexing-routines"]], "Generating index arrays": [[434, "generating-index-arrays"]], "Indexing-like operations": [[434, "indexing-like-operations"]], "Inserting data into arrays": [[434, "inserting-data-into-arrays"]], "Iterating over arrays": [[434, "iterating-over-arrays"]], "Matrix and vector products": [[435, "matrix-and-vector-products"]], "Decompositions": [[435, "decompositions"]], "Matrix eigenvalues": [[435, "matrix-eigenvalues"]], "Norms and other numbers": [[435, "norms-and-other-numbers"]], "Solving linear equations": [[435, "solving-linear-equations"]], "Logic Functions": [[436, "logic-functions"]], "Truth value testing": [[436, "truth-value-testing"]], "Infinities and NaNs": [[436, "infinities-and-nans"]], "Array type testing": [[436, "array-type-testing"]], "Logic operations": [[436, "logic-operations"]], "Comparison": [[436, "comparison"]], "Array Manipulation Routines": [[437, "array-manipulation-routines"]], "Basic operations": [[437, "basic-operations"]], "Changing array shape": [[437, "changing-array-shape"]], "Transpose-like operations": [[437, "transpose-like-operations"]], "Changing number of dimensions": [[437, "changing-number-of-dimensions"]], "Changing kind of array": [[437, "changing-kind-of-array"]], "Joining arrays": [[437, "joining-arrays"]], "Splitting arrays": [[437, "splitting-arrays"]], "Tiling arrays": [[437, "tiling-arrays"]], "Adding and removing elements": [[437, "adding-and-removing-elements"]], "Rearranging elements": [[437, "rearranging-elements"]], "Mathematical Functions": [[438, "mathematical-functions"]], "Trigonometric functions": [[438, "trigonometric-functions"], [448, "trigonometric-functions"]], "Hyperbolic functions": [[438, "hyperbolic-functions"]], "Rounding": [[438, "rounding"]], "Sums, products, differences": [[438, "sums-products-differences"]], "Exponents and logarithms": [[438, "exponents-and-logarithms"]], "Other special functions": [[438, "other-special-functions"]], "Floating point routines": [[438, "floating-point-routines"]], "Rational routines": [[438, "rational-routines"]], "Arithmetic operations": [[438, "arithmetic-operations"]], "Handling complex numbers": [[438, "handling-complex-numbers"]], "Extrema Finding": [[438, "extrema-finding"]], "Miscellaneous routines": [[439, "miscellaneous-routines"]], "Utility": [[439, "utility"]], "Multi-Dimensional Array (ndarray)": [[440, "multi-dimensional-array-ndarray"]], "Constructing arrays": [[440, "constructing-arrays"]], "Indexing arrays": [[440, "indexing-arrays"]], "Array attributes": [[440, "array-attributes"]], "Memory layout": [[440, "memory-layout"]], "Data type": [[440, "data-type"]], "Other attributes": [[440, "other-attributes"]], "Array methods": [[440, "array-methods"]], "Array conversion": [[440, "array-conversion"]], "Shape manipulation": [[440, "shape-manipulation"]], "Item selection and manipulation": [[440, "item-selection-and-manipulation"]], "Calculation": [[440, "calculation"]], "Arithmetic, matrix multiplication, and comparison operations": [[440, "arithmetic-matrix-multiplication-and-comparison-operations"]], "Special methods": [[440, "special-methods"]], "Padding": [[441, "padding"]], "Polynomials": [[442, "polynomials"]], "Polynomial Package": [[442, "polynomial-package"]], "Polynomial Module": [[442, "polynomial-module"]], "Polyutils": [[442, "polyutils"]], "Poly1d": [[442, "poly1d"]], "Basics": [[442, "basics"]], "Arithmetic": [[442, "arithmetic"]], "Random Sampling (dpnp.random)": [[443, "random-sampling-dpnp-random"]], "Simple random data": [[443, "simple-random-data"]], "Permutations": [[443, "permutations"]], "Distributions": [[443, "distributions"]], "Random generator": [[443, "random-generator"]], "Routines": [[444, "routines"]], "Sorting, Searching, and Counting": [[445, "sorting-searching-and-counting"]], "Sorting": [[445, "sorting"]], "Searching": [[445, "searching"]], "Counting": [[445, "counting"]], "Special Functions": [[446, "special-functions"]], "Error Function": [[446, "error-function"]], "Statistical Functions": [[447, "statistical-functions"]], "Order statistics": [[447, "order-statistics"]], "Averages and variances": [[447, "averages-and-variances"]], "Histograms": [[447, "histograms"]], "Correlations": [[447, "correlations"]], "Universal Functions (ufunc)": [[448, "universal-functions-ufunc"]], "Available ufuncs": [[448, "available-ufuncs"]], "Math operations": [[448, "math-operations"]], "Bit-twiddling functions": [[448, "bit-twiddling-functions"]], "Comparison functions": [[448, "comparison-functions"]], "Floating functions": [[448, "floating-functions"]]}, "indexentries": {"dpnp": [[2, "module-dpnp"], [3, "module-dpnp"]], "module": [[2, "module-dpnp"], [3, "module-dpnp"], [10, "module-dpnp.fft"], [443, "module-dpnp.random"]], "dpnp.fft": [[10, "module-dpnp.fft"]], "abs() (in module dpnp)": [[11, "dpnp.abs"]], "absolute() (in module dpnp)": [[12, "dpnp.absolute"]], "add() (in module dpnp)": [[13, "dpnp.add"]], "all() (in module dpnp)": [[14, "dpnp.all"]], "allclose() (in module dpnp)": [[15, "dpnp.allclose"]], "amax() (in module dpnp)": [[16, "dpnp.amax"]], "amin() (in module dpnp)": [[17, "dpnp.amin"]], "angle() (in module dpnp)": [[18, "dpnp.angle"]], "any() (in module dpnp)": [[19, "dpnp.any"]], "arange() (in module dpnp)": [[20, "dpnp.arange"]], "arccos() (in module dpnp)": [[21, "dpnp.arccos"]], "arccosh() (in module dpnp)": [[22, "dpnp.arccosh"]], "arcsin() (in module dpnp)": [[23, "dpnp.arcsin"]], "arcsinh() (in module dpnp)": [[24, "dpnp.arcsinh"]], "arctan() (in module dpnp)": [[25, "dpnp.arctan"]], "arctan2() (in module dpnp)": [[26, "dpnp.arctan2"]], "arctanh() (in module dpnp)": [[27, "dpnp.arctanh"]], "argmax() (in module dpnp)": [[28, "dpnp.argmax"]], "argmin() (in module dpnp)": [[29, "dpnp.argmin"]], "argsort() (in module dpnp)": [[30, "dpnp.argsort"]], "around() (in module dpnp)": [[31, "dpnp.around"]], "array() (in module dpnp)": [[32, "dpnp.array"]], "array_equal() (in module dpnp)": [[33, "dpnp.array_equal"]], "asanyarray() (in module dpnp)": [[34, "dpnp.asanyarray"]], "asarray() (in module dpnp)": [[35, "dpnp.asarray"]], "ascontiguousarray() (in module dpnp)": [[36, "dpnp.ascontiguousarray"]], "asfarray() (in module dpnp)": [[37, "dpnp.asfarray"]], "asfortranarray() (in module dpnp)": [[38, "dpnp.asfortranarray"]], "asnumpy() (in module dpnp)": [[39, "dpnp.asnumpy"]], "astype() (in module dpnp)": [[40, "dpnp.astype"]], "atleast_1d() (in module dpnp)": [[41, "dpnp.atleast_1d"]], "atleast_2d() (in module dpnp)": [[42, "dpnp.atleast_2d"]], "atleast_3d() (in module dpnp)": [[43, "dpnp.atleast_3d"]], "average() (in module dpnp)": [[44, "dpnp.average"]], "bincount() (in module dpnp)": [[45, "dpnp.bincount"]], "bitwise_and() (in module dpnp)": [[46, "dpnp.bitwise_and"]], "bitwise_not() (in module dpnp)": [[47, "dpnp.bitwise_not"]], "bitwise_or() (in module dpnp)": [[48, "dpnp.bitwise_or"]], "bitwise_xor() (in module dpnp)": [[49, "dpnp.bitwise_xor"]], "broadcast_arrays() (in module dpnp)": [[50, "dpnp.broadcast_arrays"]], "broadcast_to() (in module dpnp)": [[51, "dpnp.broadcast_to"]], "can_cast() (in module dpnp)": [[52, "dpnp.can_cast"]], "cbrt() (in module dpnp)": [[53, "dpnp.cbrt"]], "ceil() (in module dpnp)": [[54, "dpnp.ceil"]], "choose() (in module dpnp)": [[55, "dpnp.choose"]], "clip() (in module dpnp)": [[56, "dpnp.clip"]], "column_stack() (in module dpnp)": [[57, "dpnp.column_stack"]], "concatenate() (in module dpnp)": [[58, "dpnp.concatenate"]], "conj() (in module dpnp)": [[59, "dpnp.conj"]], "conjugate() (in module dpnp)": [[60, "dpnp.conjugate"]], "convolve() (in module dpnp)": [[61, "dpnp.convolve"]], "copy() (in module dpnp)": [[62, "dpnp.copy"]], "copysign() (in module dpnp)": [[63, "dpnp.copysign"]], "copyto() (in module dpnp)": [[64, "dpnp.copyto"]], "correlate() (in module dpnp)": [[65, "dpnp.correlate"]], "cos() (in module dpnp)": [[66, "dpnp.cos"]], "cosh() (in module dpnp)": [[67, "dpnp.cosh"]], "count_nonzero() (in module dpnp)": [[68, "dpnp.count_nonzero"]], "cov() (in module dpnp)": [[69, "dpnp.cov"]], "cross() (in module dpnp)": [[70, "dpnp.cross"]], "cumprod() (in module dpnp)": [[71, "dpnp.cumprod"]], "cumsum() (in module dpnp)": [[72, "dpnp.cumsum"]], "deg2rad() (in module dpnp)": [[73, "dpnp.deg2rad"]], "degrees() (in module dpnp)": [[74, "dpnp.degrees"]], "diag() (in module dpnp)": [[75, "dpnp.diag"]], "diag_indices() (in module dpnp)": [[76, "dpnp.diag_indices"]], "diag_indices_from() (in module dpnp)": [[77, "dpnp.diag_indices_from"]], "diagflat() (in module dpnp)": [[78, "dpnp.diagflat"]], "diagonal() (in module dpnp)": [[79, "dpnp.diagonal"]], "diff() (in module dpnp)": [[80, "dpnp.diff"]], "divide() (in module dpnp)": [[81, "dpnp.divide"]], "dot() (in module dpnp)": [[82, "dpnp.dot"]], "t (dpnp.dpnp_array.dpnp_array attribute)": [[83, "dpnp.dpnp_array.dpnp_array.T"]], "__eq__() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.__eq__"]], "__ge__() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.__ge__"]], "__getitem__() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.__getitem__"]], "__gt__() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.__gt__"]], "__le__() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.__le__"]], "__len__() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.__len__"]], "__lt__() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.__lt__"]], "__ne__() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.__ne__"]], "__setitem__() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.__setitem__"]], "all() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.all"]], "any() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.any"]], "argmax() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.argmax"]], "argmin() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.argmin"]], "argsort() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.argsort"]], "asnumpy() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.asnumpy"]], "astype() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.astype"]], "choose() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.choose"]], "clip() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.clip"]], "conj() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.conj"]], "conjugate() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.conjugate"]], "copy() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.copy"]], "cumsum() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.cumsum"]], "device (dpnp.dpnp_array.dpnp_array attribute)": [[83, "dpnp.dpnp_array.dpnp_array.device"]], "diagonal() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.diagonal"]], "dot() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.dot"]], "dpnp_array (class in dpnp.dpnp_array)": [[83, "dpnp.dpnp_array.dpnp_array"]], "dtype (dpnp.dpnp_array.dpnp_array attribute)": [[83, "dpnp.dpnp_array.dpnp_array.dtype"]], "fill() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.fill"]], "flags (dpnp.dpnp_array.dpnp_array attribute)": [[83, "dpnp.dpnp_array.dpnp_array.flags"]], "flat (dpnp.dpnp_array.dpnp_array attribute)": [[83, "dpnp.dpnp_array.dpnp_array.flat"]], "flatten() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.flatten"]], "get_array() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.get_array"]], "imag (dpnp.dpnp_array.dpnp_array attribute)": [[83, "dpnp.dpnp_array.dpnp_array.imag"]], "item() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.item"]], "itemsize (dpnp.dpnp_array.dpnp_array attribute)": [[83, "dpnp.dpnp_array.dpnp_array.itemsize"]], "max() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.max"]], "mean() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.mean"]], "min() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.min"]], "nbytes (dpnp.dpnp_array.dpnp_array attribute)": [[83, "dpnp.dpnp_array.dpnp_array.nbytes"]], "ndim (dpnp.dpnp_array.dpnp_array attribute)": [[83, "dpnp.dpnp_array.dpnp_array.ndim"]], "nonzero() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.nonzero"]], "partition() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.partition"]], "prod() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.prod"]], "put() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.put"]], "ravel() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.ravel"]], "real (dpnp.dpnp_array.dpnp_array attribute)": [[83, "dpnp.dpnp_array.dpnp_array.real"]], "repeat() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.repeat"]], "reshape() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.reshape"]], "round() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.round"]], "shape (dpnp.dpnp_array.dpnp_array attribute)": [[83, "dpnp.dpnp_array.dpnp_array.shape"]], "size (dpnp.dpnp_array.dpnp_array attribute)": [[83, "dpnp.dpnp_array.dpnp_array.size"]], "sort() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.sort"]], "squeeze() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.squeeze"]], "std() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.std"]], "strides (dpnp.dpnp_array.dpnp_array attribute)": [[83, "dpnp.dpnp_array.dpnp_array.strides"]], "sum() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.sum"]], "swapaxes() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.swapaxes"]], "sycl_context (dpnp.dpnp_array.dpnp_array attribute)": [[83, "dpnp.dpnp_array.dpnp_array.sycl_context"]], "sycl_device (dpnp.dpnp_array.dpnp_array attribute)": [[83, "dpnp.dpnp_array.dpnp_array.sycl_device"]], "sycl_queue (dpnp.dpnp_array.dpnp_array attribute)": [[83, "dpnp.dpnp_array.dpnp_array.sycl_queue"]], "take() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.take"]], "to_device() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.to_device"]], "transpose() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.transpose"]], "usm_type (dpnp.dpnp_array.dpnp_array attribute)": [[83, "dpnp.dpnp_array.dpnp_array.usm_type"]], "var() (dpnp.dpnp_array.dpnp_array method)": [[83, "dpnp.dpnp_array.dpnp_array.var"]], "dstack() (in module dpnp)": [[84, "dpnp.dstack"]], "__eq__() (dpnp.dtype method)": [[85, "dpnp.dtype.__eq__"]], "__ge__() (dpnp.dtype method)": [[85, "dpnp.dtype.__ge__"]], "__getitem__() (dpnp.dtype method)": [[85, "dpnp.dtype.__getitem__"]], "__gt__() (dpnp.dtype method)": [[85, "dpnp.dtype.__gt__"]], "__le__() (dpnp.dtype method)": [[85, "dpnp.dtype.__le__"]], "__len__() (dpnp.dtype method)": [[85, "dpnp.dtype.__len__"]], "__lt__() (dpnp.dtype method)": [[85, "dpnp.dtype.__lt__"]], "__ne__() (dpnp.dtype method)": [[85, "dpnp.dtype.__ne__"]], "alignment (dpnp.dtype attribute)": [[85, "dpnp.dtype.alignment"]], "base (dpnp.dtype attribute)": [[85, "dpnp.dtype.base"]], "byteorder (dpnp.dtype attribute)": [[85, "dpnp.dtype.byteorder"]], "char (dpnp.dtype attribute)": [[85, "dpnp.dtype.char"]], "descr (dpnp.dtype attribute)": [[85, "dpnp.dtype.descr"]], "dtype (class in dpnp)": [[85, "dpnp.dtype"]], "fields (dpnp.dtype attribute)": [[85, "dpnp.dtype.fields"]], "flags (dpnp.dtype attribute)": [[85, "dpnp.dtype.flags"]], "hasobject (dpnp.dtype attribute)": [[85, "dpnp.dtype.hasobject"]], "isalignedstruct (dpnp.dtype attribute)": [[85, "dpnp.dtype.isalignedstruct"]], "isbuiltin (dpnp.dtype attribute)": [[85, "dpnp.dtype.isbuiltin"]], "isnative (dpnp.dtype attribute)": [[85, "dpnp.dtype.isnative"]], "itemsize (dpnp.dtype attribute)": [[85, "dpnp.dtype.itemsize"]], "kind (dpnp.dtype attribute)": [[85, "dpnp.dtype.kind"]], "metadata (dpnp.dtype attribute)": [[85, "dpnp.dtype.metadata"]], "name (dpnp.dtype attribute)": [[85, "dpnp.dtype.name"]], "names (dpnp.dtype attribute)": [[85, "dpnp.dtype.names"]], "ndim (dpnp.dtype attribute)": [[85, "dpnp.dtype.ndim"]], "newbyteorder() (dpnp.dtype method)": [[85, "dpnp.dtype.newbyteorder"]], "num (dpnp.dtype attribute)": [[85, "dpnp.dtype.num"]], "shape (dpnp.dtype attribute)": [[85, "dpnp.dtype.shape"]], "str (dpnp.dtype attribute)": [[85, "dpnp.dtype.str"]], "subdtype (dpnp.dtype attribute)": [[85, "dpnp.dtype.subdtype"]], "type (dpnp.dtype attribute)": [[85, "dpnp.dtype.type"]], "ediff1d() (in module dpnp)": [[86, "dpnp.ediff1d"]], "einsum() (in module dpnp)": [[87, "dpnp.einsum"]], "einsum_path() (in module dpnp)": [[88, "dpnp.einsum_path"]], "empty() (in module dpnp)": [[89, "dpnp.empty"]], "empty_like() (in module dpnp)": [[90, "dpnp.empty_like"]], "equal() (in module dpnp)": [[91, "dpnp.equal"]], "erf() (in module dpnp)": [[92, "dpnp.erf"]], "exp() (in module dpnp)": [[93, "dpnp.exp"]], "exp2() (in module dpnp)": [[94, "dpnp.exp2"]], "expand_dims() (in module dpnp)": [[95, "dpnp.expand_dims"]], "expm1() (in module dpnp)": [[96, "dpnp.expm1"]], "extract() (in module dpnp)": [[97, "dpnp.extract"]], "eye() (in module dpnp)": [[98, "dpnp.eye"]], "fabs() (in module dpnp)": [[99, "dpnp.fabs"]], "fft() (in module dpnp.fft)": [[100, "dpnp.fft.fft"]], "fft2() (in module dpnp.fft)": [[101, "dpnp.fft.fft2"]], "fftfreq() (in module dpnp.fft)": [[102, "dpnp.fft.fftfreq"]], "fftn() (in module dpnp.fft)": [[103, "dpnp.fft.fftn"]], "fftshift() (in module dpnp.fft)": [[104, "dpnp.fft.fftshift"]], "hfft() (in module dpnp.fft)": [[105, "dpnp.fft.hfft"]], "ifft() (in module dpnp.fft)": [[106, "dpnp.fft.ifft"]], "ifft2() (in module dpnp.fft)": [[107, "dpnp.fft.ifft2"]], "ifftn() (in module dpnp.fft)": [[108, "dpnp.fft.ifftn"]], "ifftshift() (in module dpnp.fft)": [[109, "dpnp.fft.ifftshift"]], "ihfft() (in module dpnp.fft)": [[110, "dpnp.fft.ihfft"]], "irfft() (in module dpnp.fft)": [[111, "dpnp.fft.irfft"]], "irfft2() (in module dpnp.fft)": [[112, "dpnp.fft.irfft2"]], "irfftn() (in module dpnp.fft)": [[113, "dpnp.fft.irfftn"]], "rfft() (in module dpnp.fft)": [[114, "dpnp.fft.rfft"]], "rfft2() (in module dpnp.fft)": [[115, "dpnp.fft.rfft2"]], "rfftfreq() (in module dpnp.fft)": [[116, "dpnp.fft.rfftfreq"]], "rfftn() (in module dpnp.fft)": [[117, "dpnp.fft.rfftn"]], "fill_diagonal() (in module dpnp)": [[118, "dpnp.fill_diagonal"]], "finfo() (in module dpnp)": [[119, "dpnp.finfo"]], "__eq__() (dpnp.flatiter method)": [[120, "dpnp.flatiter.__eq__"]], "__ge__() (dpnp.flatiter method)": [[120, "dpnp.flatiter.__ge__"]], "__getitem__() (dpnp.flatiter method)": [[120, "dpnp.flatiter.__getitem__"]], "__gt__() (dpnp.flatiter method)": [[120, "dpnp.flatiter.__gt__"]], "__iter__() (dpnp.flatiter method)": [[120, "dpnp.flatiter.__iter__"]], "__le__() (dpnp.flatiter method)": [[120, "dpnp.flatiter.__le__"]], "__lt__() (dpnp.flatiter method)": [[120, "dpnp.flatiter.__lt__"]], "__ne__() (dpnp.flatiter method)": [[120, "dpnp.flatiter.__ne__"]], "__next__() (dpnp.flatiter method)": [[120, "dpnp.flatiter.__next__"]], "__setitem__() (dpnp.flatiter method)": [[120, "dpnp.flatiter.__setitem__"]], "flatiter (class in dpnp)": [[120, "dpnp.flatiter"]], "flip() (in module dpnp)": [[121, "dpnp.flip"]], "fliplr() (in module dpnp)": [[122, "dpnp.fliplr"]], "flipud() (in module dpnp)": [[123, "dpnp.flipud"]], "floor() (in module dpnp)": [[124, "dpnp.floor"]], "floor_divide() (in module dpnp)": [[125, "dpnp.floor_divide"]], "fmax() (in module dpnp)": [[126, "dpnp.fmax"]], "fmin() (in module dpnp)": [[127, "dpnp.fmin"]], "fmod() (in module dpnp)": [[128, "dpnp.fmod"]], "from_dlpack() (in module dpnp)": [[129, "dpnp.from_dlpack"]], "frombuffer() (in module dpnp)": [[130, "dpnp.frombuffer"]], "fromfile() (in module dpnp)": [[131, "dpnp.fromfile"]], "fromfunction() (in module dpnp)": [[132, "dpnp.fromfunction"]], "fromiter() (in module dpnp)": [[133, "dpnp.fromiter"]], "fromstring() (in module dpnp)": [[134, "dpnp.fromstring"]], "full() (in module dpnp)": [[135, "dpnp.full"]], "full_like() (in module dpnp)": [[136, "dpnp.full_like"]], "geomspace() (in module dpnp)": [[137, "dpnp.geomspace"]], "get_include() (in module dpnp)": [[138, "dpnp.get_include"]], "gradient() (in module dpnp)": [[139, "dpnp.gradient"]], "greater() (in module dpnp)": [[140, "dpnp.greater"]], "greater_equal() (in module dpnp)": [[141, "dpnp.greater_equal"]], "histogram() (in module dpnp)": [[142, "dpnp.histogram"]], "hstack() (in module dpnp)": [[143, "dpnp.hstack"]], "hypot() (in module dpnp)": [[144, "dpnp.hypot"]], "identity() (in module dpnp)": [[145, "dpnp.identity"]], "iinfo() (in module dpnp)": [[146, "dpnp.iinfo"]], "imag() (in module dpnp)": [[147, "dpnp.imag"]], "indices() (in module dpnp)": [[148, "dpnp.indices"]], "inner() (in module dpnp)": [[149, "dpnp.inner"]], "invert() (in module dpnp)": [[150, "dpnp.invert"]], "isclose() (in module dpnp)": [[151, "dpnp.isclose"]], "isfinite() (in module dpnp)": [[152, "dpnp.isfinite"]], "isinf() (in module dpnp)": [[153, "dpnp.isinf"]], "isnan() (in module dpnp)": [[154, "dpnp.isnan"]], "isscalar() (in module dpnp)": [[155, "dpnp.isscalar"]], "issubdtype() (in module dpnp)": [[156, "dpnp.issubdtype"]], "issubsctype() (in module dpnp)": [[157, "dpnp.issubsctype"]], "kron() (in module dpnp)": [[158, "dpnp.kron"]], "left_shift() (in module dpnp)": [[159, "dpnp.left_shift"]], "less() (in module dpnp)": [[160, "dpnp.less"]], "less_equal() (in module dpnp)": [[161, "dpnp.less_equal"]], "cholesky() (in module dpnp.linalg)": [[162, "dpnp.linalg.cholesky"]], "cond() (in module dpnp.linalg)": [[163, "dpnp.linalg.cond"]], "det() (in module dpnp.linalg)": [[164, "dpnp.linalg.det"]], "eig() (in module dpnp.linalg)": [[165, "dpnp.linalg.eig"]], "eigh() (in module dpnp.linalg)": [[166, "dpnp.linalg.eigh"]], "eigvals() (in module dpnp.linalg)": [[167, "dpnp.linalg.eigvals"]], "inv() (in module dpnp.linalg)": [[168, "dpnp.linalg.inv"]], "matrix_power() (in module dpnp.linalg)": [[169, "dpnp.linalg.matrix_power"]], "matrix_rank() (in module dpnp.linalg)": [[170, "dpnp.linalg.matrix_rank"]], "multi_dot() (in module dpnp.linalg)": [[171, "dpnp.linalg.multi_dot"]], "norm() (in module dpnp.linalg)": [[172, "dpnp.linalg.norm"]], "pinv() (in module dpnp.linalg)": [[173, "dpnp.linalg.pinv"]], "qr() (in module dpnp.linalg)": [[174, "dpnp.linalg.qr"]], "slogdet() (in module dpnp.linalg)": [[175, "dpnp.linalg.slogdet"]], "solve() (in module dpnp.linalg)": [[176, "dpnp.linalg.solve"]], "svd() (in module dpnp.linalg)": [[177, "dpnp.linalg.svd"]], "linspace() (in module dpnp)": [[178, "dpnp.linspace"]], "loadtxt() (in module dpnp)": [[179, "dpnp.loadtxt"]], "log() (in module dpnp)": [[180, "dpnp.log"]], "log10() (in module dpnp)": [[181, "dpnp.log10"]], "log1p() (in module dpnp)": [[182, "dpnp.log1p"]], "log2() (in module dpnp)": [[183, "dpnp.log2"]], "logaddexp() (in module dpnp)": [[184, "dpnp.logaddexp"]], "logical_and() (in module dpnp)": [[185, "dpnp.logical_and"]], "logical_not() (in module dpnp)": [[186, "dpnp.logical_not"]], "logical_or() (in module dpnp)": [[187, "dpnp.logical_or"]], "logical_xor() (in module dpnp)": [[188, "dpnp.logical_xor"]], "logspace() (in module dpnp)": [[189, "dpnp.logspace"]], "logsumexp() (in module dpnp)": [[190, "dpnp.logsumexp"]], "matmul() (in module dpnp)": [[191, "dpnp.matmul"]], "max() (in module dpnp)": [[192, "dpnp.max"]], "maximum() (in module dpnp)": [[193, "dpnp.maximum"]], "mean() (in module dpnp)": [[194, "dpnp.mean"]], "median() (in module dpnp)": [[195, "dpnp.median"]], "meshgrid() (in module dpnp)": [[196, "dpnp.meshgrid"]], "mgrid (in module dpnp)": [[197, "dpnp.mgrid"]], "min() (in module dpnp)": [[198, "dpnp.min"]], "minimum() (in module dpnp)": [[199, "dpnp.minimum"]], "mod() (in module dpnp)": [[200, "dpnp.mod"]], "modf() (in module dpnp)": [[201, "dpnp.modf"]], "moveaxis() (in module dpnp)": [[202, "dpnp.moveaxis"]], "multiply() (in module dpnp)": [[203, "dpnp.multiply"]], "nanargmax() (in module dpnp)": [[204, "dpnp.nanargmax"]], "nanargmin() (in module dpnp)": [[205, "dpnp.nanargmin"]], "nancumprod() (in module dpnp)": [[206, "dpnp.nancumprod"]], "nancumsum() (in module dpnp)": [[207, "dpnp.nancumsum"]], "nanmax() (in module dpnp)": [[208, "dpnp.nanmax"]], "nanmean() (in module dpnp)": [[209, "dpnp.nanmean"]], "nanmin() (in module dpnp)": [[210, "dpnp.nanmin"]], "nanprod() (in module dpnp)": [[211, "dpnp.nanprod"]], "nanstd() (in module dpnp)": [[212, "dpnp.nanstd"]], "nansum() (in module dpnp)": [[213, "dpnp.nansum"]], "nanvar() (in module dpnp)": [[214, "dpnp.nanvar"]], "ndarray (in module dpnp)": [[215, "dpnp.ndarray"]], "t (dpnp.ndarray property)": [[216, "dpnp.ndarray.T"]], "__abs__() (dpnp.ndarray method)": [[217, "dpnp.ndarray.__abs__"]], "__add__() (dpnp.ndarray method)": [[218, "dpnp.ndarray.__add__"]], "__and__() (dpnp.ndarray method)": [[219, "dpnp.ndarray.__and__"]], "__complex__() (dpnp.ndarray method)": [[220, "dpnp.ndarray.__complex__"]], "__copy__() (dpnp.ndarray method)": [[221, "dpnp.ndarray.__copy__"]], "__eq__() (dpnp.ndarray method)": [[222, "dpnp.ndarray.__eq__"]], "__float__() (dpnp.ndarray method)": [[223, "dpnp.ndarray.__float__"]], "__floordiv__() (dpnp.ndarray method)": [[224, "dpnp.ndarray.__floordiv__"]], "__ge__() (dpnp.ndarray method)": [[225, "dpnp.ndarray.__ge__"]], "__getitem__() (dpnp.ndarray method)": [[226, "dpnp.ndarray.__getitem__"]], "__gt__() (dpnp.ndarray method)": [[227, "dpnp.ndarray.__gt__"]], "__iadd__() (dpnp.ndarray method)": [[228, "dpnp.ndarray.__iadd__"]], "__iand__() (dpnp.ndarray method)": [[229, "dpnp.ndarray.__iand__"]], "__ifloordiv__() (dpnp.ndarray method)": [[230, "dpnp.ndarray.__ifloordiv__"]], "__ilshift__() (dpnp.ndarray method)": [[231, "dpnp.ndarray.__ilshift__"]], "__imod__() (dpnp.ndarray method)": [[232, "dpnp.ndarray.__imod__"]], "__imul__() (dpnp.ndarray method)": [[233, "dpnp.ndarray.__imul__"]], "__int__() (dpnp.ndarray method)": [[234, "dpnp.ndarray.__int__"]], "__invert__() (dpnp.ndarray method)": [[235, "dpnp.ndarray.__invert__"]], "__ior__() (dpnp.ndarray method)": [[236, "dpnp.ndarray.__ior__"]], "__ipow__() (dpnp.ndarray method)": [[237, "dpnp.ndarray.__ipow__"]], "__irshift__() (dpnp.ndarray method)": [[238, "dpnp.ndarray.__irshift__"]], "__isub__() (dpnp.ndarray method)": [[239, "dpnp.ndarray.__isub__"]], "__itruediv__() (dpnp.ndarray method)": [[240, "dpnp.ndarray.__itruediv__"]], "__ixor__() (dpnp.ndarray method)": [[241, "dpnp.ndarray.__ixor__"]], "__le__() (dpnp.ndarray method)": [[242, "dpnp.ndarray.__le__"]], "__len__() (dpnp.ndarray method)": [[243, "dpnp.ndarray.__len__"]], "__lshift__() (dpnp.ndarray method)": [[244, "dpnp.ndarray.__lshift__"]], "__lt__() (dpnp.ndarray method)": [[245, "dpnp.ndarray.__lt__"]], "__mod__() (dpnp.ndarray method)": [[246, "dpnp.ndarray.__mod__"]], "__mul__() (dpnp.ndarray method)": [[247, "dpnp.ndarray.__mul__"]], "__ne__() (dpnp.ndarray method)": [[248, "dpnp.ndarray.__ne__"]], "__neg__() (dpnp.ndarray method)": [[249, "dpnp.ndarray.__neg__"]], "__new__() (dpnp.ndarray method)": [[250, "dpnp.ndarray.__new__"]], "__or__() (dpnp.ndarray method)": [[251, "dpnp.ndarray.__or__"]], "__pos__() (dpnp.ndarray method)": [[252, "dpnp.ndarray.__pos__"]], "__pow__() (dpnp.ndarray method)": [[253, "dpnp.ndarray.__pow__"]], "__repr__() (dpnp.ndarray method)": [[254, "dpnp.ndarray.__repr__"]], "__rshift__() (dpnp.ndarray method)": [[255, "dpnp.ndarray.__rshift__"]], "__setitem__() (dpnp.ndarray method)": [[256, "dpnp.ndarray.__setitem__"]], "__str__() (dpnp.ndarray method)": [[257, "dpnp.ndarray.__str__"]], "__sub__() (dpnp.ndarray method)": [[258, "dpnp.ndarray.__sub__"]], "__truediv__() (dpnp.ndarray method)": [[259, "dpnp.ndarray.__truediv__"]], "__xor__() (dpnp.ndarray method)": [[260, "dpnp.ndarray.__xor__"]], "all() (dpnp.ndarray method)": [[261, "dpnp.ndarray.all"]], "any() (dpnp.ndarray method)": [[262, "dpnp.ndarray.any"]], "argmax() (dpnp.ndarray method)": [[263, "dpnp.ndarray.argmax"]], "argmin() (dpnp.ndarray method)": [[264, "dpnp.ndarray.argmin"]], "argsort() (dpnp.ndarray method)": [[265, "dpnp.ndarray.argsort"]], "astype() (dpnp.ndarray method)": [[266, "dpnp.ndarray.astype"]], "choose() (dpnp.ndarray method)": [[267, "dpnp.ndarray.choose"]], "clip() (dpnp.ndarray method)": [[268, "dpnp.ndarray.clip"]], "conj() (dpnp.ndarray method)": [[269, "dpnp.ndarray.conj"]], "conjugate() (dpnp.ndarray method)": [[270, "dpnp.ndarray.conjugate"]], "copy() (dpnp.ndarray method)": [[271, "dpnp.ndarray.copy"]], "cumsum() (dpnp.ndarray method)": [[272, "dpnp.ndarray.cumsum"]], "diagonal() (dpnp.ndarray method)": [[273, "dpnp.ndarray.diagonal"]], "dtype (dpnp.ndarray property)": [[274, "dpnp.ndarray.dtype"]], "fill() (dpnp.ndarray method)": [[275, "dpnp.ndarray.fill"]], "flags (dpnp.ndarray property)": [[276, "dpnp.ndarray.flags"]], "flat (dpnp.ndarray property)": [[277, "dpnp.ndarray.flat"]], "flatten() (dpnp.ndarray method)": [[278, "dpnp.ndarray.flatten"]], "imag (dpnp.ndarray property)": [[279, "dpnp.ndarray.imag"]], "item() (dpnp.ndarray method)": [[280, "dpnp.ndarray.item"]], "itemsize (dpnp.ndarray property)": [[281, "dpnp.ndarray.itemsize"]], "max() (dpnp.ndarray method)": [[282, "dpnp.ndarray.max"]], "mean() (dpnp.ndarray method)": [[283, "dpnp.ndarray.mean"]], "min() (dpnp.ndarray method)": [[284, "dpnp.ndarray.min"]], "nbytes (dpnp.ndarray property)": [[285, "dpnp.ndarray.nbytes"]], "ndim (dpnp.ndarray property)": [[286, "dpnp.ndarray.ndim"]], "nonzero() (dpnp.ndarray method)": [[287, "dpnp.ndarray.nonzero"]], "partition() (dpnp.ndarray method)": [[288, "dpnp.ndarray.partition"]], "prod() (dpnp.ndarray method)": [[289, "dpnp.ndarray.prod"]], "put() (dpnp.ndarray method)": [[290, "dpnp.ndarray.put"]], "ravel() (dpnp.ndarray method)": [[291, "dpnp.ndarray.ravel"]], "real (dpnp.ndarray property)": [[292, "dpnp.ndarray.real"]], "repeat() (dpnp.ndarray method)": [[293, "dpnp.ndarray.repeat"]], "reshape() (dpnp.ndarray method)": [[294, "dpnp.ndarray.reshape"]], "round() (dpnp.ndarray method)": [[295, "dpnp.ndarray.round"]], "shape (dpnp.ndarray property)": [[296, "dpnp.ndarray.shape"]], "size (dpnp.ndarray property)": [[297, "dpnp.ndarray.size"]], "sort() (dpnp.ndarray method)": [[298, "dpnp.ndarray.sort"]], "squeeze() (dpnp.ndarray method)": [[299, "dpnp.ndarray.squeeze"]], "std() (dpnp.ndarray method)": [[300, "dpnp.ndarray.std"]], "strides (dpnp.ndarray property)": [[301, "dpnp.ndarray.strides"]], "sum() (dpnp.ndarray method)": [[302, "dpnp.ndarray.sum"]], "swapaxes() (dpnp.ndarray method)": [[303, "dpnp.ndarray.swapaxes"]], "take() (dpnp.ndarray method)": [[304, "dpnp.ndarray.take"]], "transpose() (dpnp.ndarray method)": [[305, "dpnp.ndarray.transpose"]], "var() (dpnp.ndarray method)": [[306, "dpnp.ndarray.var"]], "negative() (in module dpnp)": [[307, "dpnp.negative"]], "nonzero() (in module dpnp)": [[308, "dpnp.nonzero"]], "not_equal() (in module dpnp)": [[309, "dpnp.not_equal"]], "ogrid (in module dpnp)": [[310, "dpnp.ogrid"]], "ones() (in module dpnp)": [[311, "dpnp.ones"]], "ones_like() (in module dpnp)": [[312, "dpnp.ones_like"]], "outer() (in module dpnp)": [[313, "dpnp.outer"]], "partition() (in module dpnp)": [[314, "dpnp.partition"]], "place() (in module dpnp)": [[315, "dpnp.place"]], "positive() (in module dpnp)": [[316, "dpnp.positive"]], "power() (in module dpnp)": [[317, "dpnp.power"]], "prod() (in module dpnp)": [[318, "dpnp.prod"]], "proj() (in module dpnp)": [[319, "dpnp.proj"]], "ptp() (in module dpnp)": [[320, "dpnp.ptp"]], "put() (in module dpnp)": [[321, "dpnp.put"]], "put_along_axis() (in module dpnp)": [[322, "dpnp.put_along_axis"]], "putmask() (in module dpnp)": [[323, "dpnp.putmask"]], "rad2deg() (in module dpnp)": [[324, "dpnp.rad2deg"]], "radians() (in module dpnp)": [[325, "dpnp.radians"]], "randomstate (class in dpnp.random)": [[326, "dpnp.random.RandomState"]], "__eq__() (dpnp.random.randomstate method)": [[326, "dpnp.random.RandomState.__eq__"]], "__ge__() (dpnp.random.randomstate method)": [[326, "dpnp.random.RandomState.__ge__"]], "__gt__() (dpnp.random.randomstate method)": [[326, "dpnp.random.RandomState.__gt__"]], "__le__() (dpnp.random.randomstate method)": [[326, "dpnp.random.RandomState.__le__"]], "__lt__() (dpnp.random.randomstate method)": [[326, "dpnp.random.RandomState.__lt__"]], "__ne__() (dpnp.random.randomstate method)": [[326, "dpnp.random.RandomState.__ne__"]], "get_state() (dpnp.random.randomstate method)": [[326, "dpnp.random.RandomState.get_state"]], "get_sycl_device() (dpnp.random.randomstate method)": [[326, "dpnp.random.RandomState.get_sycl_device"]], "get_sycl_queue() (dpnp.random.randomstate method)": [[326, "dpnp.random.RandomState.get_sycl_queue"]], "normal() (dpnp.random.randomstate method)": [[326, "dpnp.random.RandomState.normal"]], "rand() (dpnp.random.randomstate method)": [[326, "dpnp.random.RandomState.rand"]], "randint() (dpnp.random.randomstate method)": [[326, "dpnp.random.RandomState.randint"]], "randn() (dpnp.random.randomstate method)": [[326, "dpnp.random.RandomState.randn"]], "random_sample() (dpnp.random.randomstate method)": [[326, "dpnp.random.RandomState.random_sample"]], "standard_normal() (dpnp.random.randomstate method)": [[326, "dpnp.random.RandomState.standard_normal"]], "uniform() (dpnp.random.randomstate method)": [[326, "dpnp.random.RandomState.uniform"]], "beta() (in module dpnp.random)": [[327, "dpnp.random.beta"]], "binomial() (in module dpnp.random)": [[328, "dpnp.random.binomial"]], "bytes() (in module dpnp.random)": [[329, "dpnp.random.bytes"]], "chisquare() (in module dpnp.random)": [[330, "dpnp.random.chisquare"]], "choice() (in module dpnp.random)": [[331, "dpnp.random.choice"]], "dirichlet() (in module dpnp.random)": [[332, "dpnp.random.dirichlet"]], "exponential() (in module dpnp.random)": [[333, "dpnp.random.exponential"]], "f() (in module dpnp.random)": [[334, "dpnp.random.f"]], "gamma() (in module dpnp.random)": [[335, "dpnp.random.gamma"]], "geometric() (in module dpnp.random)": [[336, "dpnp.random.geometric"]], "gumbel() (in module dpnp.random)": [[337, "dpnp.random.gumbel"]], "hypergeometric() (in module dpnp.random)": [[338, "dpnp.random.hypergeometric"]], "laplace() (in module dpnp.random)": [[339, "dpnp.random.laplace"]], "logistic() (in module dpnp.random)": [[340, "dpnp.random.logistic"]], "lognormal() (in module dpnp.random)": [[341, "dpnp.random.lognormal"]], "logseries() (in module dpnp.random)": [[342, "dpnp.random.logseries"]], "multinomial() (in module dpnp.random)": [[343, "dpnp.random.multinomial"]], "multivariate_normal() (in module dpnp.random)": [[344, "dpnp.random.multivariate_normal"]], "negative_binomial() (in module dpnp.random)": [[345, "dpnp.random.negative_binomial"]], "noncentral_chisquare() (in module dpnp.random)": [[346, "dpnp.random.noncentral_chisquare"]], "noncentral_f() (in module dpnp.random)": [[347, "dpnp.random.noncentral_f"]], "normal() (in module dpnp.random)": [[348, "dpnp.random.normal"]], "pareto() (in module dpnp.random)": [[349, "dpnp.random.pareto"]], "permutation() (in module dpnp.random)": [[350, "dpnp.random.permutation"]], "poisson() (in module dpnp.random)": [[351, "dpnp.random.poisson"]], "power() (in module dpnp.random)": [[352, "dpnp.random.power"]], "rand() (in module dpnp.random)": [[353, "dpnp.random.rand"]], "randint() (in module dpnp.random)": [[354, "dpnp.random.randint"]], "randn() (in module dpnp.random)": [[355, "dpnp.random.randn"]], "random() (in module dpnp.random)": [[356, "dpnp.random.random"]], "random_integers() (in module dpnp.random)": [[357, "dpnp.random.random_integers"]], "random_sample() (in module dpnp.random)": [[358, "dpnp.random.random_sample"]], "ranf() (in module dpnp.random)": [[359, "dpnp.random.ranf"]], "rayleigh() (in module dpnp.random)": [[360, "dpnp.random.rayleigh"]], "sample() (in module dpnp.random)": [[361, "dpnp.random.sample"]], "seed() (in module dpnp.random)": [[362, "dpnp.random.seed"]], "shuffle() (in module dpnp.random)": [[363, "dpnp.random.shuffle"]], "standard_cauchy() (in module dpnp.random)": [[364, "dpnp.random.standard_cauchy"]], "standard_exponential() (in module dpnp.random)": [[365, "dpnp.random.standard_exponential"]], "standard_gamma() (in module dpnp.random)": [[366, "dpnp.random.standard_gamma"]], "standard_normal() (in module dpnp.random)": [[367, "dpnp.random.standard_normal"]], "standard_t() (in module dpnp.random)": [[368, "dpnp.random.standard_t"]], "triangular() (in module dpnp.random)": [[369, "dpnp.random.triangular"]], "uniform() (in module dpnp.random)": [[370, "dpnp.random.uniform"]], "vonmises() (in module dpnp.random)": [[371, "dpnp.random.vonmises"]], "wald() (in module dpnp.random)": [[372, "dpnp.random.wald"]], "weibull() (in module dpnp.random)": [[373, "dpnp.random.weibull"]], "zipf() (in module dpnp.random)": [[374, "dpnp.random.zipf"]], "ravel() (in module dpnp)": [[375, "dpnp.ravel"]], "real() (in module dpnp)": [[376, "dpnp.real"]], "reciprocal() (in module dpnp)": [[377, "dpnp.reciprocal"]], "reduce_hypot() (in module dpnp)": [[378, "dpnp.reduce_hypot"]], "remainder() (in module dpnp)": [[379, "dpnp.remainder"]], "repeat() (in module dpnp)": [[380, "dpnp.repeat"]], "reshape() (in module dpnp)": [[381, "dpnp.reshape"]], "result_type() (in module dpnp)": [[382, "dpnp.result_type"]], "right_shift() (in module dpnp)": [[383, "dpnp.right_shift"]], "rint() (in module dpnp)": [[384, "dpnp.rint"]], "roll() (in module dpnp)": [[385, "dpnp.roll"]], "rollaxis() (in module dpnp)": [[386, "dpnp.rollaxis"]], "round() (in module dpnp)": [[387, "dpnp.round"]], "row_stack() (in module dpnp)": [[388, "dpnp.row_stack"]], "rsqrt() (in module dpnp)": [[389, "dpnp.rsqrt"]], "searchsorted() (in module dpnp)": [[390, "dpnp.searchsorted"]], "select() (in module dpnp)": [[391, "dpnp.select"]], "shape() (in module dpnp)": [[392, "dpnp.shape"]], "sign() (in module dpnp)": [[393, "dpnp.sign"]], "signbit() (in module dpnp)": [[394, "dpnp.signbit"]], "sin() (in module dpnp)": [[395, "dpnp.sin"]], "sinh() (in module dpnp)": [[396, "dpnp.sinh"]], "sort() (in module dpnp)": [[397, "dpnp.sort"]], "sqrt() (in module dpnp)": [[398, "dpnp.sqrt"]], "square() (in module dpnp)": [[399, "dpnp.square"]], "squeeze() (in module dpnp)": [[400, "dpnp.squeeze"]], "stack() (in module dpnp)": [[401, "dpnp.stack"]], "std() (in module dpnp)": [[402, "dpnp.std"]], "subtract() (in module dpnp)": [[403, "dpnp.subtract"]], "sum() (in module dpnp)": [[404, "dpnp.sum"]], "swapaxes() (in module dpnp)": [[405, "dpnp.swapaxes"]], "take() (in module dpnp)": [[406, "dpnp.take"]], "take_along_axis() (in module dpnp)": [[407, "dpnp.take_along_axis"]], "tan() (in module dpnp)": [[408, "dpnp.tan"]], "tanh() (in module dpnp)": [[409, "dpnp.tanh"]], "tensordot() (in module dpnp)": [[410, "dpnp.tensordot"]], "tile() (in module dpnp)": [[411, "dpnp.tile"]], "trace() (in module dpnp)": [[412, "dpnp.trace"]], "transpose() (in module dpnp)": [[413, "dpnp.transpose"]], "trapz() (in module dpnp)": [[414, "dpnp.trapz"]], "tri() (in module dpnp)": [[415, "dpnp.tri"]], "tril() (in module dpnp)": [[416, "dpnp.tril"]], "tril_indices() (in module dpnp)": [[417, "dpnp.tril_indices"]], "tril_indices_from() (in module dpnp)": [[418, "dpnp.tril_indices_from"]], "triu() (in module dpnp)": [[419, "dpnp.triu"]], "triu_indices() (in module dpnp)": [[420, "dpnp.triu_indices"]], "triu_indices_from() (in module dpnp)": [[421, "dpnp.triu_indices_from"]], "true_divide() (in module dpnp)": [[422, "dpnp.true_divide"]], "trunc() (in module dpnp)": [[423, "dpnp.trunc"]], "unique() (in module dpnp)": [[424, "dpnp.unique"]], "unwrap() (in module dpnp)": [[425, "dpnp.unwrap"]], "vander() (in module dpnp)": [[426, "dpnp.vander"]], "var() (in module dpnp)": [[427, "dpnp.var"]], "vdot() (in module dpnp)": [[428, "dpnp.vdot"]], "vstack() (in module dpnp)": [[429, "dpnp.vstack"]], "where() (in module dpnp)": [[430, "dpnp.where"]], "zeros() (in module dpnp)": [[431, "dpnp.zeros"]], "zeros_like() (in module dpnp)": [[432, "dpnp.zeros_like"]], "dpnp.random": [[443, "module-dpnp.random"]]}})