Search.setIndex({"docnames": ["dpctl", "dpnp_backend_api", "index", "overview", "quick_start_guide", "reference/binary", "reference/comparison", "reference/creation", "reference/dtype", "reference/dtypes_table", "reference/fft", "reference/generated/dpnp.abs", "reference/generated/dpnp.absolute", "reference/generated/dpnp.add", "reference/generated/dpnp.all", "reference/generated/dpnp.allclose", "reference/generated/dpnp.amax", "reference/generated/dpnp.amin", "reference/generated/dpnp.any", "reference/generated/dpnp.arange", "reference/generated/dpnp.arccos", "reference/generated/dpnp.arccosh", "reference/generated/dpnp.arcsin", "reference/generated/dpnp.arcsinh", "reference/generated/dpnp.arctan", "reference/generated/dpnp.arctan2", "reference/generated/dpnp.arctanh", "reference/generated/dpnp.argmax", "reference/generated/dpnp.argmin", "reference/generated/dpnp.argsort", "reference/generated/dpnp.around", "reference/generated/dpnp.array", "reference/generated/dpnp.array_equal", "reference/generated/dpnp.asanyarray", "reference/generated/dpnp.asarray", "reference/generated/dpnp.ascontiguousarray", "reference/generated/dpnp.asfarray", "reference/generated/dpnp.asfortranarray", "reference/generated/dpnp.asnumpy", "reference/generated/dpnp.atleast_1d", "reference/generated/dpnp.atleast_2d", "reference/generated/dpnp.atleast_3d", "reference/generated/dpnp.average", "reference/generated/dpnp.bincount", "reference/generated/dpnp.bitwise_and", "reference/generated/dpnp.bitwise_not", "reference/generated/dpnp.bitwise_or", "reference/generated/dpnp.bitwise_xor", "reference/generated/dpnp.broadcast_arrays", "reference/generated/dpnp.broadcast_to", "reference/generated/dpnp.can_cast", "reference/generated/dpnp.cbrt", "reference/generated/dpnp.ceil", "reference/generated/dpnp.choose", "reference/generated/dpnp.clip", "reference/generated/dpnp.column_stack", "reference/generated/dpnp.concatenate", "reference/generated/dpnp.conj", "reference/generated/dpnp.conjugate", "reference/generated/dpnp.convolve", "reference/generated/dpnp.copy", "reference/generated/dpnp.copysign", "reference/generated/dpnp.copyto", "reference/generated/dpnp.correlate", "reference/generated/dpnp.cos", "reference/generated/dpnp.cosh", "reference/generated/dpnp.count_nonzero", "reference/generated/dpnp.cov", "reference/generated/dpnp.cross", "reference/generated/dpnp.cumprod", "reference/generated/dpnp.cumsum", "reference/generated/dpnp.deg2rad", "reference/generated/dpnp.degrees", "reference/generated/dpnp.diag", "reference/generated/dpnp.diag_indices", "reference/generated/dpnp.diag_indices_from", "reference/generated/dpnp.diagflat", "reference/generated/dpnp.diagonal", "reference/generated/dpnp.diff", "reference/generated/dpnp.divide", "reference/generated/dpnp.dot", "reference/generated/dpnp.dpnp_array.dpnp_array", "reference/generated/dpnp.dstack", "reference/generated/dpnp.dtype", "reference/generated/dpnp.ediff1d", "reference/generated/dpnp.einsum", "reference/generated/dpnp.einsum_path", "reference/generated/dpnp.empty", "reference/generated/dpnp.empty_like", "reference/generated/dpnp.equal", "reference/generated/dpnp.erf", "reference/generated/dpnp.exp", "reference/generated/dpnp.exp2", "reference/generated/dpnp.expand_dims", "reference/generated/dpnp.expm1", "reference/generated/dpnp.extract", "reference/generated/dpnp.eye", "reference/generated/dpnp.fabs", "reference/generated/dpnp.fft.fft", "reference/generated/dpnp.fft.fft2", "reference/generated/dpnp.fft.fftfreq", "reference/generated/dpnp.fft.fftn", "reference/generated/dpnp.fft.fftshift", "reference/generated/dpnp.fft.hfft", "reference/generated/dpnp.fft.ifft", "reference/generated/dpnp.fft.ifft2", "reference/generated/dpnp.fft.ifftn", "reference/generated/dpnp.fft.ifftshift", "reference/generated/dpnp.fft.ihfft", "reference/generated/dpnp.fft.irfft", "reference/generated/dpnp.fft.irfft2", "reference/generated/dpnp.fft.irfftn", "reference/generated/dpnp.fft.rfft", "reference/generated/dpnp.fft.rfft2", "reference/generated/dpnp.fft.rfftfreq", "reference/generated/dpnp.fft.rfftn", "reference/generated/dpnp.fill_diagonal", "reference/generated/dpnp.finfo", "reference/generated/dpnp.flatiter", "reference/generated/dpnp.flip", "reference/generated/dpnp.fliplr", "reference/generated/dpnp.flipud", "reference/generated/dpnp.floor", "reference/generated/dpnp.floor_divide", "reference/generated/dpnp.fmax", "reference/generated/dpnp.fmin", "reference/generated/dpnp.fmod", "reference/generated/dpnp.from_dlpack", "reference/generated/dpnp.frombuffer", "reference/generated/dpnp.fromfile", "reference/generated/dpnp.fromfunction", "reference/generated/dpnp.fromiter", "reference/generated/dpnp.fromstring", "reference/generated/dpnp.full", "reference/generated/dpnp.full_like", "reference/generated/dpnp.geomspace", "reference/generated/dpnp.get_include", "reference/generated/dpnp.gradient", "reference/generated/dpnp.greater", "reference/generated/dpnp.greater_equal", "reference/generated/dpnp.histogram", "reference/generated/dpnp.hstack", "reference/generated/dpnp.hypot", "reference/generated/dpnp.identity", "reference/generated/dpnp.iinfo", "reference/generated/dpnp.imag", "reference/generated/dpnp.indices", "reference/generated/dpnp.inner", "reference/generated/dpnp.invert", "reference/generated/dpnp.isclose", "reference/generated/dpnp.isfinite", "reference/generated/dpnp.isinf", "reference/generated/dpnp.isnan", "reference/generated/dpnp.isscalar", "reference/generated/dpnp.issubdtype", "reference/generated/dpnp.issubsctype", "reference/generated/dpnp.kron", "reference/generated/dpnp.left_shift", "reference/generated/dpnp.less", "reference/generated/dpnp.less_equal", "reference/generated/dpnp.linalg.cholesky", "reference/generated/dpnp.linalg.cond", "reference/generated/dpnp.linalg.det", "reference/generated/dpnp.linalg.eig", "reference/generated/dpnp.linalg.eigh", "reference/generated/dpnp.linalg.eigvals", "reference/generated/dpnp.linalg.inv", "reference/generated/dpnp.linalg.matrix_power", "reference/generated/dpnp.linalg.matrix_rank", "reference/generated/dpnp.linalg.multi_dot", "reference/generated/dpnp.linalg.norm", "reference/generated/dpnp.linalg.qr", "reference/generated/dpnp.linalg.slogdet", "reference/generated/dpnp.linalg.solve", "reference/generated/dpnp.linalg.svd", "reference/generated/dpnp.linspace", "reference/generated/dpnp.loadtxt", "reference/generated/dpnp.log", "reference/generated/dpnp.log10", "reference/generated/dpnp.log1p", "reference/generated/dpnp.log2", "reference/generated/dpnp.logaddexp", "reference/generated/dpnp.logical_and", "reference/generated/dpnp.logical_not", "reference/generated/dpnp.logical_or", "reference/generated/dpnp.logical_xor", "reference/generated/dpnp.logspace", "reference/generated/dpnp.logsumexp", "reference/generated/dpnp.matmul", "reference/generated/dpnp.max", "reference/generated/dpnp.maximum", "reference/generated/dpnp.mean", "reference/generated/dpnp.median", "reference/generated/dpnp.meshgrid", "reference/generated/dpnp.mgrid", "reference/generated/dpnp.min", "reference/generated/dpnp.minimum", "reference/generated/dpnp.mod", "reference/generated/dpnp.modf", "reference/generated/dpnp.moveaxis", "reference/generated/dpnp.multiply", "reference/generated/dpnp.nanargmax", "reference/generated/dpnp.nanargmin", "reference/generated/dpnp.nancumprod", "reference/generated/dpnp.nancumsum", "reference/generated/dpnp.nanmax", "reference/generated/dpnp.nanmean", "reference/generated/dpnp.nanmin", "reference/generated/dpnp.nanprod", "reference/generated/dpnp.nanstd", "reference/generated/dpnp.nansum", "reference/generated/dpnp.nanvar", "reference/generated/dpnp.ndarray", "reference/generated/dpnp.ndarray.T", "reference/generated/dpnp.ndarray.__abs__", "reference/generated/dpnp.ndarray.__add__", "reference/generated/dpnp.ndarray.__and__", "reference/generated/dpnp.ndarray.__complex__", "reference/generated/dpnp.ndarray.__copy__", "reference/generated/dpnp.ndarray.__eq__", "reference/generated/dpnp.ndarray.__float__", "reference/generated/dpnp.ndarray.__floordiv__", "reference/generated/dpnp.ndarray.__ge__", "reference/generated/dpnp.ndarray.__getitem__", "reference/generated/dpnp.ndarray.__gt__", "reference/generated/dpnp.ndarray.__iadd__", "reference/generated/dpnp.ndarray.__iand__", "reference/generated/dpnp.ndarray.__ifloordiv__", "reference/generated/dpnp.ndarray.__ilshift__", "reference/generated/dpnp.ndarray.__imod__", "reference/generated/dpnp.ndarray.__imul__", "reference/generated/dpnp.ndarray.__int__", "reference/generated/dpnp.ndarray.__invert__", "reference/generated/dpnp.ndarray.__ior__", "reference/generated/dpnp.ndarray.__ipow__", "reference/generated/dpnp.ndarray.__irshift__", "reference/generated/dpnp.ndarray.__isub__", "reference/generated/dpnp.ndarray.__itruediv__", "reference/generated/dpnp.ndarray.__ixor__", "reference/generated/dpnp.ndarray.__le__", "reference/generated/dpnp.ndarray.__len__", "reference/generated/dpnp.ndarray.__lshift__", "reference/generated/dpnp.ndarray.__lt__", "reference/generated/dpnp.ndarray.__mod__", "reference/generated/dpnp.ndarray.__mul__", "reference/generated/dpnp.ndarray.__ne__", "reference/generated/dpnp.ndarray.__neg__", "reference/generated/dpnp.ndarray.__new__", "reference/generated/dpnp.ndarray.__or__", "reference/generated/dpnp.ndarray.__pos__", "reference/generated/dpnp.ndarray.__pow__", "reference/generated/dpnp.ndarray.__repr__", "reference/generated/dpnp.ndarray.__rshift__", "reference/generated/dpnp.ndarray.__setitem__", "reference/generated/dpnp.ndarray.__str__", "reference/generated/dpnp.ndarray.__sub__", "reference/generated/dpnp.ndarray.__truediv__", "reference/generated/dpnp.ndarray.__xor__", "reference/generated/dpnp.ndarray.all", "reference/generated/dpnp.ndarray.any", "reference/generated/dpnp.ndarray.argmax", "reference/generated/dpnp.ndarray.argmin", "reference/generated/dpnp.ndarray.argsort", "reference/generated/dpnp.ndarray.astype", "reference/generated/dpnp.ndarray.choose", "reference/generated/dpnp.ndarray.clip", "reference/generated/dpnp.ndarray.conj", "reference/generated/dpnp.ndarray.conjugate", "reference/generated/dpnp.ndarray.copy", "reference/generated/dpnp.ndarray.cumsum", "reference/generated/dpnp.ndarray.diagonal", "reference/generated/dpnp.ndarray.dtype", "reference/generated/dpnp.ndarray.fill", "reference/generated/dpnp.ndarray.flags", "reference/generated/dpnp.ndarray.flat", "reference/generated/dpnp.ndarray.flatten", "reference/generated/dpnp.ndarray.imag", "reference/generated/dpnp.ndarray.item", "reference/generated/dpnp.ndarray.itemsize", "reference/generated/dpnp.ndarray.max", "reference/generated/dpnp.ndarray.mean", "reference/generated/dpnp.ndarray.min", "reference/generated/dpnp.ndarray.nbytes", "reference/generated/dpnp.ndarray.ndim", "reference/generated/dpnp.ndarray.nonzero", "reference/generated/dpnp.ndarray.partition", "reference/generated/dpnp.ndarray.prod", "reference/generated/dpnp.ndarray.put", "reference/generated/dpnp.ndarray.ravel", "reference/generated/dpnp.ndarray.real", "reference/generated/dpnp.ndarray.repeat", "reference/generated/dpnp.ndarray.reshape", "reference/generated/dpnp.ndarray.round", "reference/generated/dpnp.ndarray.shape", "reference/generated/dpnp.ndarray.size", "reference/generated/dpnp.ndarray.squeeze", "reference/generated/dpnp.ndarray.std", "reference/generated/dpnp.ndarray.strides", "reference/generated/dpnp.ndarray.sum", "reference/generated/dpnp.ndarray.swapaxes", "reference/generated/dpnp.ndarray.take", "reference/generated/dpnp.ndarray.transpose", "reference/generated/dpnp.ndarray.var", "reference/generated/dpnp.negative", "reference/generated/dpnp.nonzero", "reference/generated/dpnp.not_equal", "reference/generated/dpnp.ogrid", "reference/generated/dpnp.ones", "reference/generated/dpnp.ones_like", "reference/generated/dpnp.outer", "reference/generated/dpnp.partition", "reference/generated/dpnp.place", "reference/generated/dpnp.positive", "reference/generated/dpnp.power", "reference/generated/dpnp.prod", "reference/generated/dpnp.proj", "reference/generated/dpnp.ptp", "reference/generated/dpnp.put", "reference/generated/dpnp.put_along_axis", "reference/generated/dpnp.putmask", "reference/generated/dpnp.rad2deg", "reference/generated/dpnp.radians", "reference/generated/dpnp.random.RandomState", "reference/generated/dpnp.random.beta", "reference/generated/dpnp.random.binomial", "reference/generated/dpnp.random.bytes", "reference/generated/dpnp.random.chisquare", "reference/generated/dpnp.random.choice", "reference/generated/dpnp.random.dirichlet", "reference/generated/dpnp.random.exponential", "reference/generated/dpnp.random.f", "reference/generated/dpnp.random.gamma", "reference/generated/dpnp.random.geometric", "reference/generated/dpnp.random.gumbel", "reference/generated/dpnp.random.hypergeometric", "reference/generated/dpnp.random.laplace", "reference/generated/dpnp.random.logistic", "reference/generated/dpnp.random.lognormal", "reference/generated/dpnp.random.logseries", "reference/generated/dpnp.random.multinomial", "reference/generated/dpnp.random.multivariate_normal", "reference/generated/dpnp.random.negative_binomial", "reference/generated/dpnp.random.noncentral_chisquare", "reference/generated/dpnp.random.noncentral_f", "reference/generated/dpnp.random.normal", "reference/generated/dpnp.random.pareto", "reference/generated/dpnp.random.permutation", "reference/generated/dpnp.random.poisson", "reference/generated/dpnp.random.power", "reference/generated/dpnp.random.rand", "reference/generated/dpnp.random.randint", "reference/generated/dpnp.random.randn", "reference/generated/dpnp.random.random", "reference/generated/dpnp.random.random_integers", "reference/generated/dpnp.random.random_sample", "reference/generated/dpnp.random.ranf", "reference/generated/dpnp.random.rayleigh", "reference/generated/dpnp.random.sample", "reference/generated/dpnp.random.seed", "reference/generated/dpnp.random.shuffle", "reference/generated/dpnp.random.standard_cauchy", "reference/generated/dpnp.random.standard_exponential", "reference/generated/dpnp.random.standard_gamma", "reference/generated/dpnp.random.standard_normal", "reference/generated/dpnp.random.standard_t", "reference/generated/dpnp.random.triangular", "reference/generated/dpnp.random.uniform", "reference/generated/dpnp.random.vonmises", "reference/generated/dpnp.random.wald", "reference/generated/dpnp.random.weibull", "reference/generated/dpnp.random.zipf", "reference/generated/dpnp.ravel", "reference/generated/dpnp.real", "reference/generated/dpnp.reciprocal", "reference/generated/dpnp.reduce_hypot", "reference/generated/dpnp.remainder", "reference/generated/dpnp.repeat", "reference/generated/dpnp.reshape", "reference/generated/dpnp.result_type", "reference/generated/dpnp.right_shift", "reference/generated/dpnp.rint", "reference/generated/dpnp.roll", "reference/generated/dpnp.rollaxis", "reference/generated/dpnp.round", "reference/generated/dpnp.row_stack", "reference/generated/dpnp.rsqrt", "reference/generated/dpnp.searchsorted", "reference/generated/dpnp.select", "reference/generated/dpnp.shape", "reference/generated/dpnp.sign", "reference/generated/dpnp.signbit", "reference/generated/dpnp.sin", "reference/generated/dpnp.sinh", "reference/generated/dpnp.sort", "reference/generated/dpnp.sqrt", "reference/generated/dpnp.square", "reference/generated/dpnp.squeeze", "reference/generated/dpnp.stack", "reference/generated/dpnp.std", "reference/generated/dpnp.subtract", "reference/generated/dpnp.sum", "reference/generated/dpnp.swapaxes", "reference/generated/dpnp.take", "reference/generated/dpnp.take_along_axis", "reference/generated/dpnp.tan", "reference/generated/dpnp.tanh", "reference/generated/dpnp.tensordot", "reference/generated/dpnp.tile", "reference/generated/dpnp.trace", "reference/generated/dpnp.transpose", "reference/generated/dpnp.trapz", "reference/generated/dpnp.tri", "reference/generated/dpnp.tril", "reference/generated/dpnp.tril_indices", "reference/generated/dpnp.tril_indices_from", "reference/generated/dpnp.triu", "reference/generated/dpnp.triu_indices", "reference/generated/dpnp.triu_indices_from", "reference/generated/dpnp.true_divide", "reference/generated/dpnp.trunc", "reference/generated/dpnp.unique", "reference/generated/dpnp.unwrap", "reference/generated/dpnp.vander", "reference/generated/dpnp.var", "reference/generated/dpnp.vdot", "reference/generated/dpnp.vstack", "reference/generated/dpnp.where", "reference/generated/dpnp.zeros", "reference/generated/dpnp.zeros_like", "reference/index", "reference/indexing", "reference/linalg", "reference/logic", "reference/manipulation", "reference/math", "reference/misc", "reference/ndarray", "reference/pad", "reference/polynomials", "reference/random", "reference/routines", "reference/sorting", "reference/special", "reference/statistics", "reference/ufunc"], "filenames": ["dpctl.rst", "dpnp_backend_api.rst", "index.rst", "overview.rst", "quick_start_guide.rst", "reference/binary.rst", "reference/comparison.rst", "reference/creation.rst", "reference/dtype.rst", "reference/dtypes_table.rst", "reference/fft.rst", "reference/generated/dpnp.abs.rst", "reference/generated/dpnp.absolute.rst", "reference/generated/dpnp.add.rst", "reference/generated/dpnp.all.rst", "reference/generated/dpnp.allclose.rst", "reference/generated/dpnp.amax.rst", "reference/generated/dpnp.amin.rst", "reference/generated/dpnp.any.rst", "reference/generated/dpnp.arange.rst", "reference/generated/dpnp.arccos.rst", "reference/generated/dpnp.arccosh.rst", "reference/generated/dpnp.arcsin.rst", "reference/generated/dpnp.arcsinh.rst", "reference/generated/dpnp.arctan.rst", "reference/generated/dpnp.arctan2.rst", "reference/generated/dpnp.arctanh.rst", "reference/generated/dpnp.argmax.rst", "reference/generated/dpnp.argmin.rst", "reference/generated/dpnp.argsort.rst", "reference/generated/dpnp.around.rst", "reference/generated/dpnp.array.rst", "reference/generated/dpnp.array_equal.rst", "reference/generated/dpnp.asanyarray.rst", "reference/generated/dpnp.asarray.rst", "reference/generated/dpnp.ascontiguousarray.rst", "reference/generated/dpnp.asfarray.rst", "reference/generated/dpnp.asfortranarray.rst", "reference/generated/dpnp.asnumpy.rst", "reference/generated/dpnp.atleast_1d.rst", "reference/generated/dpnp.atleast_2d.rst", "reference/generated/dpnp.atleast_3d.rst", "reference/generated/dpnp.average.rst", "reference/generated/dpnp.bincount.rst", "reference/generated/dpnp.bitwise_and.rst", "reference/generated/dpnp.bitwise_not.rst", "reference/generated/dpnp.bitwise_or.rst", "reference/generated/dpnp.bitwise_xor.rst", "reference/generated/dpnp.broadcast_arrays.rst", "reference/generated/dpnp.broadcast_to.rst", "reference/generated/dpnp.can_cast.rst", "reference/generated/dpnp.cbrt.rst", "reference/generated/dpnp.ceil.rst", "reference/generated/dpnp.choose.rst", "reference/generated/dpnp.clip.rst", "reference/generated/dpnp.column_stack.rst", "reference/generated/dpnp.concatenate.rst", "reference/generated/dpnp.conj.rst", "reference/generated/dpnp.conjugate.rst", "reference/generated/dpnp.convolve.rst", "reference/generated/dpnp.copy.rst", "reference/generated/dpnp.copysign.rst", "reference/generated/dpnp.copyto.rst", "reference/generated/dpnp.correlate.rst", "reference/generated/dpnp.cos.rst", "reference/generated/dpnp.cosh.rst", "reference/generated/dpnp.count_nonzero.rst", "reference/generated/dpnp.cov.rst", "reference/generated/dpnp.cross.rst", "reference/generated/dpnp.cumprod.rst", "reference/generated/dpnp.cumsum.rst", "reference/generated/dpnp.deg2rad.rst", "reference/generated/dpnp.degrees.rst", "reference/generated/dpnp.diag.rst", "reference/generated/dpnp.diag_indices.rst", "reference/generated/dpnp.diag_indices_from.rst", "reference/generated/dpnp.diagflat.rst", "reference/generated/dpnp.diagonal.rst", "reference/generated/dpnp.diff.rst", "reference/generated/dpnp.divide.rst", "reference/generated/dpnp.dot.rst", "reference/generated/dpnp.dpnp_array.dpnp_array.rst", "reference/generated/dpnp.dstack.rst", "reference/generated/dpnp.dtype.rst", "reference/generated/dpnp.ediff1d.rst", "reference/generated/dpnp.einsum.rst", "reference/generated/dpnp.einsum_path.rst", "reference/generated/dpnp.empty.rst", "reference/generated/dpnp.empty_like.rst", "reference/generated/dpnp.equal.rst", "reference/generated/dpnp.erf.rst", "reference/generated/dpnp.exp.rst", "reference/generated/dpnp.exp2.rst", "reference/generated/dpnp.expand_dims.rst", "reference/generated/dpnp.expm1.rst", "reference/generated/dpnp.extract.rst", "reference/generated/dpnp.eye.rst", "reference/generated/dpnp.fabs.rst", "reference/generated/dpnp.fft.fft.rst", "reference/generated/dpnp.fft.fft2.rst", "reference/generated/dpnp.fft.fftfreq.rst", "reference/generated/dpnp.fft.fftn.rst", "reference/generated/dpnp.fft.fftshift.rst", "reference/generated/dpnp.fft.hfft.rst", "reference/generated/dpnp.fft.ifft.rst", "reference/generated/dpnp.fft.ifft2.rst", "reference/generated/dpnp.fft.ifftn.rst", "reference/generated/dpnp.fft.ifftshift.rst", "reference/generated/dpnp.fft.ihfft.rst", "reference/generated/dpnp.fft.irfft.rst", "reference/generated/dpnp.fft.irfft2.rst", "reference/generated/dpnp.fft.irfftn.rst", "reference/generated/dpnp.fft.rfft.rst", "reference/generated/dpnp.fft.rfft2.rst", "reference/generated/dpnp.fft.rfftfreq.rst", "reference/generated/dpnp.fft.rfftn.rst", "reference/generated/dpnp.fill_diagonal.rst", "reference/generated/dpnp.finfo.rst", "reference/generated/dpnp.flatiter.rst", "reference/generated/dpnp.flip.rst", "reference/generated/dpnp.fliplr.rst", "reference/generated/dpnp.flipud.rst", "reference/generated/dpnp.floor.rst", "reference/generated/dpnp.floor_divide.rst", "reference/generated/dpnp.fmax.rst", "reference/generated/dpnp.fmin.rst", "reference/generated/dpnp.fmod.rst", "reference/generated/dpnp.from_dlpack.rst", "reference/generated/dpnp.frombuffer.rst", "reference/generated/dpnp.fromfile.rst", "reference/generated/dpnp.fromfunction.rst", "reference/generated/dpnp.fromiter.rst", "reference/generated/dpnp.fromstring.rst", "reference/generated/dpnp.full.rst", "reference/generated/dpnp.full_like.rst", "reference/generated/dpnp.geomspace.rst", "reference/generated/dpnp.get_include.rst", "reference/generated/dpnp.gradient.rst", "reference/generated/dpnp.greater.rst", "reference/generated/dpnp.greater_equal.rst", "reference/generated/dpnp.histogram.rst", "reference/generated/dpnp.hstack.rst", "reference/generated/dpnp.hypot.rst", "reference/generated/dpnp.identity.rst", "reference/generated/dpnp.iinfo.rst", "reference/generated/dpnp.imag.rst", "reference/generated/dpnp.indices.rst", "reference/generated/dpnp.inner.rst", "reference/generated/dpnp.invert.rst", "reference/generated/dpnp.isclose.rst", "reference/generated/dpnp.isfinite.rst", "reference/generated/dpnp.isinf.rst", "reference/generated/dpnp.isnan.rst", "reference/generated/dpnp.isscalar.rst", "reference/generated/dpnp.issubdtype.rst", "reference/generated/dpnp.issubsctype.rst", "reference/generated/dpnp.kron.rst", "reference/generated/dpnp.left_shift.rst", "reference/generated/dpnp.less.rst", "reference/generated/dpnp.less_equal.rst", "reference/generated/dpnp.linalg.cholesky.rst", "reference/generated/dpnp.linalg.cond.rst", "reference/generated/dpnp.linalg.det.rst", "reference/generated/dpnp.linalg.eig.rst", "reference/generated/dpnp.linalg.eigh.rst", "reference/generated/dpnp.linalg.eigvals.rst", "reference/generated/dpnp.linalg.inv.rst", "reference/generated/dpnp.linalg.matrix_power.rst", "reference/generated/dpnp.linalg.matrix_rank.rst", "reference/generated/dpnp.linalg.multi_dot.rst", "reference/generated/dpnp.linalg.norm.rst", "reference/generated/dpnp.linalg.qr.rst", "reference/generated/dpnp.linalg.slogdet.rst", "reference/generated/dpnp.linalg.solve.rst", "reference/generated/dpnp.linalg.svd.rst", "reference/generated/dpnp.linspace.rst", "reference/generated/dpnp.loadtxt.rst", "reference/generated/dpnp.log.rst", "reference/generated/dpnp.log10.rst", "reference/generated/dpnp.log1p.rst", "reference/generated/dpnp.log2.rst", "reference/generated/dpnp.logaddexp.rst", "reference/generated/dpnp.logical_and.rst", "reference/generated/dpnp.logical_not.rst", "reference/generated/dpnp.logical_or.rst", "reference/generated/dpnp.logical_xor.rst", "reference/generated/dpnp.logspace.rst", "reference/generated/dpnp.logsumexp.rst", "reference/generated/dpnp.matmul.rst", "reference/generated/dpnp.max.rst", "reference/generated/dpnp.maximum.rst", "reference/generated/dpnp.mean.rst", "reference/generated/dpnp.median.rst", "reference/generated/dpnp.meshgrid.rst", "reference/generated/dpnp.mgrid.rst", "reference/generated/dpnp.min.rst", "reference/generated/dpnp.minimum.rst", "reference/generated/dpnp.mod.rst", "reference/generated/dpnp.modf.rst", "reference/generated/dpnp.moveaxis.rst", "reference/generated/dpnp.multiply.rst", "reference/generated/dpnp.nanargmax.rst", "reference/generated/dpnp.nanargmin.rst", "reference/generated/dpnp.nancumprod.rst", "reference/generated/dpnp.nancumsum.rst", "reference/generated/dpnp.nanmax.rst", "reference/generated/dpnp.nanmean.rst", "reference/generated/dpnp.nanmin.rst", "reference/generated/dpnp.nanprod.rst", "reference/generated/dpnp.nanstd.rst", "reference/generated/dpnp.nansum.rst", "reference/generated/dpnp.nanvar.rst", "reference/generated/dpnp.ndarray.rst", "reference/generated/dpnp.ndarray.T.rst", "reference/generated/dpnp.ndarray.__abs__.rst", "reference/generated/dpnp.ndarray.__add__.rst", "reference/generated/dpnp.ndarray.__and__.rst", "reference/generated/dpnp.ndarray.__complex__.rst", "reference/generated/dpnp.ndarray.__copy__.rst", "reference/generated/dpnp.ndarray.__eq__.rst", "reference/generated/dpnp.ndarray.__float__.rst", "reference/generated/dpnp.ndarray.__floordiv__.rst", "reference/generated/dpnp.ndarray.__ge__.rst", "reference/generated/dpnp.ndarray.__getitem__.rst", "reference/generated/dpnp.ndarray.__gt__.rst", "reference/generated/dpnp.ndarray.__iadd__.rst", "reference/generated/dpnp.ndarray.__iand__.rst", "reference/generated/dpnp.ndarray.__ifloordiv__.rst", "reference/generated/dpnp.ndarray.__ilshift__.rst", "reference/generated/dpnp.ndarray.__imod__.rst", "reference/generated/dpnp.ndarray.__imul__.rst", "reference/generated/dpnp.ndarray.__int__.rst", "reference/generated/dpnp.ndarray.__invert__.rst", "reference/generated/dpnp.ndarray.__ior__.rst", "reference/generated/dpnp.ndarray.__ipow__.rst", "reference/generated/dpnp.ndarray.__irshift__.rst", "reference/generated/dpnp.ndarray.__isub__.rst", "reference/generated/dpnp.ndarray.__itruediv__.rst", "reference/generated/dpnp.ndarray.__ixor__.rst", "reference/generated/dpnp.ndarray.__le__.rst", "reference/generated/dpnp.ndarray.__len__.rst", "reference/generated/dpnp.ndarray.__lshift__.rst", "reference/generated/dpnp.ndarray.__lt__.rst", "reference/generated/dpnp.ndarray.__mod__.rst", "reference/generated/dpnp.ndarray.__mul__.rst", "reference/generated/dpnp.ndarray.__ne__.rst", "reference/generated/dpnp.ndarray.__neg__.rst", "reference/generated/dpnp.ndarray.__new__.rst", "reference/generated/dpnp.ndarray.__or__.rst", "reference/generated/dpnp.ndarray.__pos__.rst", "reference/generated/dpnp.ndarray.__pow__.rst", "reference/generated/dpnp.ndarray.__repr__.rst", "reference/generated/dpnp.ndarray.__rshift__.rst", "reference/generated/dpnp.ndarray.__setitem__.rst", "reference/generated/dpnp.ndarray.__str__.rst", "reference/generated/dpnp.ndarray.__sub__.rst", "reference/generated/dpnp.ndarray.__truediv__.rst", "reference/generated/dpnp.ndarray.__xor__.rst", "reference/generated/dpnp.ndarray.all.rst", "reference/generated/dpnp.ndarray.any.rst", "reference/generated/dpnp.ndarray.argmax.rst", "reference/generated/dpnp.ndarray.argmin.rst", "reference/generated/dpnp.ndarray.argsort.rst", "reference/generated/dpnp.ndarray.astype.rst", "reference/generated/dpnp.ndarray.choose.rst", "reference/generated/dpnp.ndarray.clip.rst", "reference/generated/dpnp.ndarray.conj.rst", "reference/generated/dpnp.ndarray.conjugate.rst", "reference/generated/dpnp.ndarray.copy.rst", "reference/generated/dpnp.ndarray.cumsum.rst", "reference/generated/dpnp.ndarray.diagonal.rst", "reference/generated/dpnp.ndarray.dtype.rst", "reference/generated/dpnp.ndarray.fill.rst", "reference/generated/dpnp.ndarray.flags.rst", "reference/generated/dpnp.ndarray.flat.rst", "reference/generated/dpnp.ndarray.flatten.rst", "reference/generated/dpnp.ndarray.imag.rst", "reference/generated/dpnp.ndarray.item.rst", "reference/generated/dpnp.ndarray.itemsize.rst", "reference/generated/dpnp.ndarray.max.rst", "reference/generated/dpnp.ndarray.mean.rst", "reference/generated/dpnp.ndarray.min.rst", "reference/generated/dpnp.ndarray.nbytes.rst", "reference/generated/dpnp.ndarray.ndim.rst", "reference/generated/dpnp.ndarray.nonzero.rst", "reference/generated/dpnp.ndarray.partition.rst", "reference/generated/dpnp.ndarray.prod.rst", "reference/generated/dpnp.ndarray.put.rst", "reference/generated/dpnp.ndarray.ravel.rst", "reference/generated/dpnp.ndarray.real.rst", "reference/generated/dpnp.ndarray.repeat.rst", "reference/generated/dpnp.ndarray.reshape.rst", "reference/generated/dpnp.ndarray.round.rst", "reference/generated/dpnp.ndarray.shape.rst", "reference/generated/dpnp.ndarray.size.rst", "reference/generated/dpnp.ndarray.squeeze.rst", "reference/generated/dpnp.ndarray.std.rst", "reference/generated/dpnp.ndarray.strides.rst", "reference/generated/dpnp.ndarray.sum.rst", "reference/generated/dpnp.ndarray.swapaxes.rst", "reference/generated/dpnp.ndarray.take.rst", "reference/generated/dpnp.ndarray.transpose.rst", "reference/generated/dpnp.ndarray.var.rst", "reference/generated/dpnp.negative.rst", "reference/generated/dpnp.nonzero.rst", "reference/generated/dpnp.not_equal.rst", "reference/generated/dpnp.ogrid.rst", "reference/generated/dpnp.ones.rst", "reference/generated/dpnp.ones_like.rst", "reference/generated/dpnp.outer.rst", "reference/generated/dpnp.partition.rst", "reference/generated/dpnp.place.rst", "reference/generated/dpnp.positive.rst", "reference/generated/dpnp.power.rst", "reference/generated/dpnp.prod.rst", "reference/generated/dpnp.proj.rst", "reference/generated/dpnp.ptp.rst", "reference/generated/dpnp.put.rst", "reference/generated/dpnp.put_along_axis.rst", "reference/generated/dpnp.putmask.rst", "reference/generated/dpnp.rad2deg.rst", "reference/generated/dpnp.radians.rst", "reference/generated/dpnp.random.RandomState.rst", "reference/generated/dpnp.random.beta.rst", "reference/generated/dpnp.random.binomial.rst", "reference/generated/dpnp.random.bytes.rst", "reference/generated/dpnp.random.chisquare.rst", "reference/generated/dpnp.random.choice.rst", "reference/generated/dpnp.random.dirichlet.rst", "reference/generated/dpnp.random.exponential.rst", "reference/generated/dpnp.random.f.rst", "reference/generated/dpnp.random.gamma.rst", "reference/generated/dpnp.random.geometric.rst", "reference/generated/dpnp.random.gumbel.rst", "reference/generated/dpnp.random.hypergeometric.rst", "reference/generated/dpnp.random.laplace.rst", "reference/generated/dpnp.random.logistic.rst", "reference/generated/dpnp.random.lognormal.rst", "reference/generated/dpnp.random.logseries.rst", "reference/generated/dpnp.random.multinomial.rst", "reference/generated/dpnp.random.multivariate_normal.rst", "reference/generated/dpnp.random.negative_binomial.rst", "reference/generated/dpnp.random.noncentral_chisquare.rst", "reference/generated/dpnp.random.noncentral_f.rst", "reference/generated/dpnp.random.normal.rst", "reference/generated/dpnp.random.pareto.rst", "reference/generated/dpnp.random.permutation.rst", "reference/generated/dpnp.random.poisson.rst", "reference/generated/dpnp.random.power.rst", "reference/generated/dpnp.random.rand.rst", "reference/generated/dpnp.random.randint.rst", "reference/generated/dpnp.random.randn.rst", "reference/generated/dpnp.random.random.rst", "reference/generated/dpnp.random.random_integers.rst", "reference/generated/dpnp.random.random_sample.rst", "reference/generated/dpnp.random.ranf.rst", "reference/generated/dpnp.random.rayleigh.rst", "reference/generated/dpnp.random.sample.rst", "reference/generated/dpnp.random.seed.rst", "reference/generated/dpnp.random.shuffle.rst", "reference/generated/dpnp.random.standard_cauchy.rst", "reference/generated/dpnp.random.standard_exponential.rst", "reference/generated/dpnp.random.standard_gamma.rst", "reference/generated/dpnp.random.standard_normal.rst", "reference/generated/dpnp.random.standard_t.rst", "reference/generated/dpnp.random.triangular.rst", "reference/generated/dpnp.random.uniform.rst", "reference/generated/dpnp.random.vonmises.rst", "reference/generated/dpnp.random.wald.rst", "reference/generated/dpnp.random.weibull.rst", "reference/generated/dpnp.random.zipf.rst", "reference/generated/dpnp.ravel.rst", "reference/generated/dpnp.real.rst", "reference/generated/dpnp.reciprocal.rst", "reference/generated/dpnp.reduce_hypot.rst", "reference/generated/dpnp.remainder.rst", "reference/generated/dpnp.repeat.rst", "reference/generated/dpnp.reshape.rst", "reference/generated/dpnp.result_type.rst", "reference/generated/dpnp.right_shift.rst", "reference/generated/dpnp.rint.rst", "reference/generated/dpnp.roll.rst", "reference/generated/dpnp.rollaxis.rst", "reference/generated/dpnp.round.rst", "reference/generated/dpnp.row_stack.rst", "reference/generated/dpnp.rsqrt.rst", "reference/generated/dpnp.searchsorted.rst", "reference/generated/dpnp.select.rst", "reference/generated/dpnp.shape.rst", "reference/generated/dpnp.sign.rst", "reference/generated/dpnp.signbit.rst", "reference/generated/dpnp.sin.rst", "reference/generated/dpnp.sinh.rst", "reference/generated/dpnp.sort.rst", "reference/generated/dpnp.sqrt.rst", "reference/generated/dpnp.square.rst", "reference/generated/dpnp.squeeze.rst", "reference/generated/dpnp.stack.rst", "reference/generated/dpnp.std.rst", "reference/generated/dpnp.subtract.rst", "reference/generated/dpnp.sum.rst", "reference/generated/dpnp.swapaxes.rst", "reference/generated/dpnp.take.rst", "reference/generated/dpnp.take_along_axis.rst", "reference/generated/dpnp.tan.rst", "reference/generated/dpnp.tanh.rst", "reference/generated/dpnp.tensordot.rst", "reference/generated/dpnp.tile.rst", "reference/generated/dpnp.trace.rst", "reference/generated/dpnp.transpose.rst", "reference/generated/dpnp.trapz.rst", "reference/generated/dpnp.tri.rst", "reference/generated/dpnp.tril.rst", "reference/generated/dpnp.tril_indices.rst", "reference/generated/dpnp.tril_indices_from.rst", "reference/generated/dpnp.triu.rst", "reference/generated/dpnp.triu_indices.rst", "reference/generated/dpnp.triu_indices_from.rst", "reference/generated/dpnp.true_divide.rst", "reference/generated/dpnp.trunc.rst", "reference/generated/dpnp.unique.rst", "reference/generated/dpnp.unwrap.rst", "reference/generated/dpnp.vander.rst", "reference/generated/dpnp.var.rst", "reference/generated/dpnp.vdot.rst", "reference/generated/dpnp.vstack.rst", "reference/generated/dpnp.where.rst", "reference/generated/dpnp.zeros.rst", "reference/generated/dpnp.zeros_like.rst", "reference/index.rst", "reference/indexing.rst", "reference/linalg.rst", "reference/logic.rst", "reference/manipulation.rst", "reference/math.rst", "reference/misc.rst", "reference/ndarray.rst", "reference/pad.rst", "reference/polynomials.rst", "reference/random.rst", "reference/routines.rst", "reference/sorting.rst", "reference/special.rst", "reference/statistics.rst", "reference/ufunc.rst"], "titles": ["Interplay with the Data Parallel Control Library", "C++ backend API Reference", "Data Parallel Extension for NumPy*", "Overview", "Quick Start Guide", "Binary Operations", "Comparison Table NumPy/ DPNP/ CuPy", "Array Creation Routines", "Data type routines", "Available array data types", "FFT Functions", "dpnp.abs", "dpnp.absolute", "dpnp.add", "dpnp.all", "dpnp.allclose", "dpnp.amax", "dpnp.amin", "dpnp.any", "dpnp.arange", "dpnp.arccos", "dpnp.arccosh", "dpnp.arcsin", "dpnp.arcsinh", "dpnp.arctan", "dpnp.arctan2", "dpnp.arctanh", "dpnp.argmax", "dpnp.argmin", "dpnp.argsort", "dpnp.around", "dpnp.array", "dpnp.array_equal", "dpnp.asanyarray", "dpnp.asarray", "dpnp.ascontiguousarray", "dpnp.asfarray", "dpnp.asfortranarray", "dpnp.asnumpy", "dpnp.atleast_1d", "dpnp.atleast_2d", "dpnp.atleast_3d", "dpnp.average", "dpnp.bincount", "dpnp.bitwise_and", "dpnp.bitwise_not", "dpnp.bitwise_or", "dpnp.bitwise_xor", "dpnp.broadcast_arrays", "dpnp.broadcast_to", "dpnp.can_cast", "dpnp.cbrt", "dpnp.ceil", "dpnp.choose", "dpnp.clip", "dpnp.column_stack", "dpnp.concatenate", "dpnp.conj", "dpnp.conjugate", "dpnp.convolve", "dpnp.copy", "dpnp.copysign", "dpnp.copyto", "dpnp.correlate", "dpnp.cos", "dpnp.cosh", "dpnp.count_nonzero", "dpnp.cov", "dpnp.cross", "dpnp.cumprod", "dpnp.cumsum", "dpnp.deg2rad", "dpnp.degrees", "dpnp.diag", "dpnp.diag_indices", "dpnp.diag_indices_from", "dpnp.diagflat", "dpnp.diagonal", "dpnp.diff", "dpnp.divide", "dpnp.dot", "dpnp.dpnp_array.dpnp_array", "dpnp.dstack", "dpnp.dtype", "dpnp.ediff1d", "dpnp.einsum", "dpnp.einsum_path", "dpnp.empty", "dpnp.empty_like", "dpnp.equal", "dpnp.erf", "dpnp.exp", "dpnp.exp2", "dpnp.expand_dims", "dpnp.expm1", "dpnp.extract", "dpnp.eye", "dpnp.fabs", "dpnp.fft.fft", "dpnp.fft.fft2", "dpnp.fft.fftfreq", "dpnp.fft.fftn", "dpnp.fft.fftshift", "dpnp.fft.hfft", "dpnp.fft.ifft", "dpnp.fft.ifft2", "dpnp.fft.ifftn", "dpnp.fft.ifftshift", "dpnp.fft.ihfft", "dpnp.fft.irfft", "dpnp.fft.irfft2", "dpnp.fft.irfftn", "dpnp.fft.rfft", "dpnp.fft.rfft2", "dpnp.fft.rfftfreq", "dpnp.fft.rfftn", "dpnp.fill_diagonal", "dpnp.finfo", "dpnp.flatiter", "dpnp.flip", "dpnp.fliplr", "dpnp.flipud", "dpnp.floor", "dpnp.floor_divide", "dpnp.fmax", "dpnp.fmin", "dpnp.fmod", "dpnp.from_dlpack", "dpnp.frombuffer", "dpnp.fromfile", "dpnp.fromfunction", "dpnp.fromiter", "dpnp.fromstring", "dpnp.full", "dpnp.full_like", "dpnp.geomspace", "dpnp.get_include", "dpnp.gradient", "dpnp.greater", "dpnp.greater_equal", "dpnp.histogram", "dpnp.hstack", "dpnp.hypot", "dpnp.identity", "dpnp.iinfo", "dpnp.imag", "dpnp.indices", "dpnp.inner", "dpnp.invert", "dpnp.isclose", "dpnp.isfinite", "dpnp.isinf", "dpnp.isnan", "dpnp.isscalar", "dpnp.issubdtype", "dpnp.issubsctype", "dpnp.kron", "dpnp.left_shift", "dpnp.less", "dpnp.less_equal", "dpnp.linalg.cholesky", "dpnp.linalg.cond", "dpnp.linalg.det", "dpnp.linalg.eig", "dpnp.linalg.eigh", "dpnp.linalg.eigvals", "dpnp.linalg.inv", "dpnp.linalg.matrix_power", "dpnp.linalg.matrix_rank", "dpnp.linalg.multi_dot", "dpnp.linalg.norm", "dpnp.linalg.qr", "dpnp.linalg.slogdet", "dpnp.linalg.solve", "dpnp.linalg.svd", "dpnp.linspace", "dpnp.loadtxt", "dpnp.log", "dpnp.log10", "dpnp.log1p", "dpnp.log2", "dpnp.logaddexp", "dpnp.logical_and", "dpnp.logical_not", "dpnp.logical_or", "dpnp.logical_xor", "dpnp.logspace", "dpnp.logsumexp", "dpnp.matmul", "dpnp.max", "dpnp.maximum", "dpnp.mean", "dpnp.median", "dpnp.meshgrid", "dpnp.mgrid", "dpnp.min", "dpnp.minimum", "dpnp.mod", "dpnp.modf", "dpnp.moveaxis", "dpnp.multiply", "dpnp.nanargmax", "dpnp.nanargmin", "dpnp.nancumprod", "dpnp.nancumsum", "dpnp.nanmax", "dpnp.nanmean", "dpnp.nanmin", "dpnp.nanprod", "dpnp.nanstd", "dpnp.nansum", "dpnp.nanvar", "dpnp.ndarray", "dpnp.ndarray.T", "dpnp.ndarray.__abs__", "dpnp.ndarray.__add__", "dpnp.ndarray.__and__", "dpnp.ndarray.__complex__", "dpnp.ndarray.__copy__", "dpnp.ndarray.__eq__", "dpnp.ndarray.__float__", "dpnp.ndarray.__floordiv__", "dpnp.ndarray.__ge__", "dpnp.ndarray.__getitem__", "dpnp.ndarray.__gt__", "dpnp.ndarray.__iadd__", "dpnp.ndarray.__iand__", "dpnp.ndarray.__ifloordiv__", "dpnp.ndarray.__ilshift__", "dpnp.ndarray.__imod__", "dpnp.ndarray.__imul__", "dpnp.ndarray.__int__", "dpnp.ndarray.__invert__", "dpnp.ndarray.__ior__", "dpnp.ndarray.__ipow__", "dpnp.ndarray.__irshift__", "dpnp.ndarray.__isub__", "dpnp.ndarray.__itruediv__", "dpnp.ndarray.__ixor__", "dpnp.ndarray.__le__", "dpnp.ndarray.__len__", "dpnp.ndarray.__lshift__", "dpnp.ndarray.__lt__", "dpnp.ndarray.__mod__", "dpnp.ndarray.__mul__", "dpnp.ndarray.__ne__", "dpnp.ndarray.__neg__", "dpnp.ndarray.__new__", "dpnp.ndarray.__or__", "dpnp.ndarray.__pos__", "dpnp.ndarray.__pow__", "dpnp.ndarray.__repr__", "dpnp.ndarray.__rshift__", "dpnp.ndarray.__setitem__", "dpnp.ndarray.__str__", "dpnp.ndarray.__sub__", "dpnp.ndarray.__truediv__", "dpnp.ndarray.__xor__", "dpnp.ndarray.all", "dpnp.ndarray.any", "dpnp.ndarray.argmax", "dpnp.ndarray.argmin", "dpnp.ndarray.argsort", "dpnp.ndarray.astype", "dpnp.ndarray.choose", "dpnp.ndarray.clip", "dpnp.ndarray.conj", "dpnp.ndarray.conjugate", "dpnp.ndarray.copy", "dpnp.ndarray.cumsum", "dpnp.ndarray.diagonal", "dpnp.ndarray.dtype", "dpnp.ndarray.fill", "dpnp.ndarray.flags", "dpnp.ndarray.flat", "dpnp.ndarray.flatten", "dpnp.ndarray.imag", "dpnp.ndarray.item", "dpnp.ndarray.itemsize", "dpnp.ndarray.max", "dpnp.ndarray.mean", "dpnp.ndarray.min", "dpnp.ndarray.nbytes", "dpnp.ndarray.ndim", "dpnp.ndarray.nonzero", "dpnp.ndarray.partition", "dpnp.ndarray.prod", "dpnp.ndarray.put", "dpnp.ndarray.ravel", "dpnp.ndarray.real", "dpnp.ndarray.repeat", "dpnp.ndarray.reshape", "dpnp.ndarray.round", "dpnp.ndarray.shape", "dpnp.ndarray.size", "dpnp.ndarray.squeeze", "dpnp.ndarray.std", "dpnp.ndarray.strides", "dpnp.ndarray.sum", "dpnp.ndarray.swapaxes", "dpnp.ndarray.take", "dpnp.ndarray.transpose", "dpnp.ndarray.var", "dpnp.negative", "dpnp.nonzero", "dpnp.not_equal", "dpnp.ogrid", "dpnp.ones", "dpnp.ones_like", "dpnp.outer", "dpnp.partition", "dpnp.place", "dpnp.positive", "dpnp.power", "dpnp.prod", "dpnp.proj", "dpnp.ptp", "dpnp.put", "dpnp.put_along_axis", "dpnp.putmask", "dpnp.rad2deg", "dpnp.radians", "dpnp.random.RandomState", "dpnp.random.beta", "dpnp.random.binomial", "dpnp.random.bytes", "dpnp.random.chisquare", "dpnp.random.choice", "dpnp.random.dirichlet", "dpnp.random.exponential", "dpnp.random.f", "dpnp.random.gamma", "dpnp.random.geometric", "dpnp.random.gumbel", "dpnp.random.hypergeometric", "dpnp.random.laplace", "dpnp.random.logistic", "dpnp.random.lognormal", "dpnp.random.logseries", "dpnp.random.multinomial", "dpnp.random.multivariate_normal", "dpnp.random.negative_binomial", "dpnp.random.noncentral_chisquare", "dpnp.random.noncentral_f", "dpnp.random.normal", "dpnp.random.pareto", "dpnp.random.permutation", "dpnp.random.poisson", "dpnp.random.power", "dpnp.random.rand", "dpnp.random.randint", "dpnp.random.randn", "dpnp.random.random", "dpnp.random.random_integers", "dpnp.random.random_sample", "dpnp.random.ranf", "dpnp.random.rayleigh", "dpnp.random.sample", "dpnp.random.seed", "dpnp.random.shuffle", "dpnp.random.standard_cauchy", "dpnp.random.standard_exponential", "dpnp.random.standard_gamma", "dpnp.random.standard_normal", "dpnp.random.standard_t", "dpnp.random.triangular", "dpnp.random.uniform", "dpnp.random.vonmises", "dpnp.random.wald", "dpnp.random.weibull", "dpnp.random.zipf", "dpnp.ravel", "dpnp.real", "dpnp.reciprocal", "dpnp.reduce_hypot", "dpnp.remainder", "dpnp.repeat", "dpnp.reshape", "dpnp.result_type", "dpnp.right_shift", "dpnp.rint", "dpnp.roll", "dpnp.rollaxis", "dpnp.round", "dpnp.row_stack", "dpnp.rsqrt", "dpnp.searchsorted", "dpnp.select", "dpnp.shape", "dpnp.sign", "dpnp.signbit", "dpnp.sin", "dpnp.sinh", "dpnp.sort", "dpnp.sqrt", "dpnp.square", "dpnp.squeeze", "dpnp.stack", "dpnp.std", "dpnp.subtract", "dpnp.sum", "dpnp.swapaxes", "dpnp.take", "dpnp.take_along_axis", "dpnp.tan", "dpnp.tanh", "dpnp.tensordot", "dpnp.tile", "dpnp.trace", "dpnp.transpose", "dpnp.trapz", "dpnp.tri", "dpnp.tril", "dpnp.tril_indices", "dpnp.tril_indices_from", "dpnp.triu", "dpnp.triu_indices", "dpnp.triu_indices_from", "dpnp.true_divide", "dpnp.trunc", "dpnp.unique", "dpnp.unwrap", "dpnp.vander", "dpnp.var", "dpnp.vdot", "dpnp.vstack", "dpnp.where", "dpnp.zeros", "dpnp.zeros_like", "API Reference", "Array Indexing Routines", "Linear Algebra", "Logic Functions", "Array Manipulation Routines", "Mathematical Functions", "Miscellaneous routines", "Multi-Dimensional Array (ndarray)", "Padding", "Polynomials", "Random Sampling (<code class=\"docutils literal notranslate\"><span class=\"pre\">dpnp.random</span></code>)", "Routines", "Sorting, Searching, and Counting", "Special Functions", "Statistical Functions", "Universal Functions (ufunc)"], "terms": {"provid": [0, 6, 27, 28, 56, 62, 81, 93, 141, 187, 189, 195, 201, 202, 205, 207, 322, 350, 353, 374, 384, 397, 402, 425, 426, 444], "api": [0, 2, 3, 6, 36, 83, 146, 194, 306, 322, 344, 349, 350, 351, 352, 353, 354, 355, 357, 358, 363, 366], "manag": 0, "specif": [0, 4, 83], "sycl": [0, 3, 36, 146, 194, 306, 322, 344, 349, 350, 351, 352, 353, 354, 355, 357, 358, 363, 366], "resourc": 0, "base": [0, 4, 83, 135, 174, 177, 178, 179, 180, 186, 311, 313, 317, 319], "python": [0, 2, 3, 36, 81, 83, 127, 277, 436], "packag": [0, 3], "an": [0, 3, 4, 11, 12, 14, 16, 17, 18, 19, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 53, 54, 55, 56, 60, 73, 74, 75, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 93, 95, 116, 117, 119, 120, 124, 125, 127, 129, 130, 131, 134, 136, 137, 141, 143, 144, 146, 148, 157, 162, 168, 170, 172, 187, 189, 190, 191, 194, 195, 196, 198, 199, 201, 202, 205, 206, 207, 209, 210, 211, 218, 262, 264, 265, 268, 277, 279, 285, 287, 290, 291, 293, 295, 297, 299, 300, 301, 306, 307, 308, 310, 311, 313, 316, 317, 318, 319, 322, 324, 329, 330, 332, 341, 344, 349, 350, 351, 352, 353, 354, 355, 357, 358, 363, 366, 370, 371, 374, 376, 377, 378, 379, 381, 382, 384, 385, 387, 388, 389, 390, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 407, 409, 411, 412, 413, 415, 416, 418, 420, 423, 425, 426, 427, 428, 436], "below": [0, 4, 9, 83, 168, 170, 411, 415, 436], "demonstr": [0, 4, 83], "how": [0, 4, 83, 402], "extens": [0, 1, 3, 4, 9, 136, 429], "numpi": [0, 1, 3, 4, 9, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 262, 263, 266, 267, 271, 276, 277, 287, 289, 291, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 436, 440], "can": [0, 3, 4, 13, 15, 25, 36, 42, 44, 45, 46, 47, 50, 61, 74, 79, 80, 81, 83, 89, 123, 124, 125, 126, 129, 138, 139, 141, 142, 146, 148, 157, 158, 159, 181, 182, 184, 185, 188, 190, 194, 196, 197, 200, 263, 303, 304, 305, 306, 309, 312, 313, 318, 322, 344, 349, 350, 351, 352, 353, 354, 355, 357, 358, 363, 366, 375, 377, 379, 399, 402, 403, 416, 418, 436], "easili": 0, "combin": [0, 83, 93], "devic": [0, 2, 3, 19, 31, 33, 34, 35, 36, 37, 42, 73, 76, 81, 87, 88, 96, 127, 133, 134, 135, 143, 146, 175, 186, 187, 191, 194, 206, 209, 210, 211, 306, 307, 308, 322, 344, 349, 350, 351, 352, 353, 354, 355, 357, 358, 363, 366, 374, 396, 398, 400, 411, 422, 423, 427, 428], "interfac": 0, "dpctl": [0, 4, 11, 12, 13, 14, 15, 18, 20, 21, 22, 23, 24, 25, 26, 30, 36, 44, 45, 46, 47, 51, 52, 57, 58, 61, 64, 65, 66, 79, 80, 81, 88, 89, 91, 92, 94, 95, 122, 123, 124, 125, 126, 134, 138, 139, 142, 145, 146, 148, 150, 151, 152, 157, 158, 159, 164, 173, 177, 178, 179, 180, 181, 182, 183, 184, 185, 188, 189, 190, 193, 194, 195, 196, 197, 200, 201, 202, 205, 207, 208, 303, 304, 305, 306, 308, 309, 311, 312, 313, 314, 315, 316, 317, 322, 344, 349, 350, 351, 352, 353, 354, 355, 357, 358, 363, 366, 372, 375, 379, 380, 383, 385, 389, 390, 391, 392, 394, 395, 399, 402, 404, 405, 412, 415, 418, 419, 426, 428], "liter": 0, "queue": [0, 36, 146, 194, 306, 322, 344, 349, 350, 351, 352, 353, 354, 355, 357, 358, 363, 366], "from": [0, 3, 27, 28, 29, 33, 34, 48, 50, 53, 56, 62, 71, 72, 81, 82, 83, 92, 95, 119, 127, 129, 131, 132, 141, 143, 176, 187, 193, 210, 254, 264, 268, 295, 300, 313, 318, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 353, 354, 356, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 374, 377, 378, 384, 387, 395, 396, 397, 400, 402, 403, 421, 425, 426, 440], "allow": [0, 81, 263, 291, 436], "set": [0, 27, 28, 31, 53, 74, 81, 83, 87, 133, 143, 146, 168, 170, 253, 263, 264, 274, 307, 308, 389, 390, 427, 428, 436], "input": [0, 11, 12, 13, 14, 15, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 51, 52, 54, 57, 58, 61, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 76, 77, 78, 79, 80, 81, 84, 87, 88, 89, 90, 91, 92, 93, 94, 97, 109, 110, 111, 112, 113, 115, 119, 120, 121, 122, 123, 124, 125, 126, 133, 134, 137, 138, 139, 141, 142, 143, 145, 147, 148, 149, 150, 151, 152, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 170, 171, 172, 173, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 263, 275, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 344, 350, 366, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 404, 405, 406, 407, 408, 409, 410, 418, 419, 421, 423, 426, 427, 428], "current": [0, 11, 12, 13, 15, 20, 21, 22, 23, 24, 25, 26, 44, 45, 46, 47, 51, 52, 54, 61, 64, 65, 68, 69, 70, 79, 80, 83, 84, 91, 92, 94, 97, 122, 123, 124, 125, 126, 137, 142, 143, 147, 148, 157, 178, 179, 180, 181, 188, 190, 196, 197, 198, 200, 203, 204, 303, 312, 313, 315, 373, 375, 379, 380, 385, 389, 390, 391, 392, 393, 399, 404, 405, 406, 410, 411, 418, 419], "usabl": 0, "insid": 0, "context": 0, "": [0, 3, 4, 81, 83, 99, 101, 105, 106, 110, 111, 113, 115, 142, 168, 170, 174, 271, 322, 323, 324, 329, 330, 331, 333, 334, 335, 336, 337, 339, 341, 344, 345, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 407, 436], "scope": [0, 4], "thi": [0, 11, 12, 16, 17, 27, 28, 30, 36, 38, 54, 56, 60, 71, 74, 78, 81, 82, 83, 117, 120, 121, 129, 136, 141, 170, 172, 187, 189, 195, 197, 199, 201, 202, 205, 207, 262, 263, 268, 272, 285, 291, 293, 318, 320, 355, 357, 371, 374, 377, 382, 384, 397, 402, 403, 407, 424, 425, 426], "wai": [0, 3, 4, 81, 129, 285], "arrai": [0, 2, 3, 4, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 101, 105, 106, 110, 111, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 156, 157, 158, 159, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 218, 254, 260, 261, 262, 263, 264, 265, 268, 271, 272, 273, 275, 276, 277, 278, 280, 282, 283, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 341, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 440], "creation": [0, 83, 86, 429, 436, 440], "function": [0, 2, 3, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 37, 38, 44, 45, 46, 47, 51, 52, 57, 58, 60, 61, 63, 64, 65, 67, 68, 69, 70, 71, 77, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 122, 123, 124, 125, 126, 129, 130, 133, 134, 136, 137, 138, 139, 142, 143, 147, 148, 149, 150, 151, 152, 157, 158, 159, 166, 169, 170, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 190, 192, 193, 196, 197, 198, 200, 201, 202, 203, 204, 208, 258, 259, 268, 291, 301, 303, 304, 305, 307, 308, 309, 311, 312, 313, 314, 315, 317, 320, 321, 322, 325, 327, 328, 338, 343, 359, 373, 374, 375, 379, 380, 383, 384, 385, 389, 390, 391, 392, 393, 394, 395, 398, 399, 402, 403, 404, 405, 406, 407, 410, 411, 412, 415, 418, 419, 423, 424, 425, 426, 427, 428, 429, 436, 440], "dpnp": [0, 2, 3, 4, 429, 436, 440, 441, 444], "which": [0, 3, 4, 27, 28, 33, 34, 42, 48, 56, 62, 78, 81, 83, 93, 117, 119, 141, 160, 168, 170, 187, 189, 191, 195, 201, 202, 205, 206, 207, 208, 209, 210, 211, 262, 263, 304, 314, 317, 374, 376, 381, 396, 397, 398, 400, 409, 413, 416, 423, 436], "i": [0, 3, 4, 6, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 42, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 122, 123, 124, 125, 126, 133, 134, 137, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 160, 161, 162, 164, 166, 168, 169, 170, 171, 172, 173, 175, 177, 178, 179, 180, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 218, 262, 263, 268, 275, 285, 291, 303, 304, 306, 307, 308, 310, 312, 313, 314, 315, 316, 317, 318, 321, 322, 323, 324, 326, 329, 330, 331, 332, 333, 334, 335, 336, 337, 341, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 418, 419, 421, 422, 423, 425, 426, 427, 428, 436], "defin": [0, 81, 83, 262, 312, 436], "alloc": [0, 3, 4, 36, 42, 81, 146, 187, 191, 194, 206, 209, 210, 211, 263, 306, 322, 344, 349, 350, 351, 352, 353, 354, 355, 357, 363, 366, 374, 396, 398, 400, 423], "us": [0, 4, 13, 29, 36, 44, 45, 46, 47, 50, 54, 56, 74, 79, 81, 83, 89, 93, 122, 123, 129, 135, 136, 138, 139, 146, 148, 157, 158, 159, 160, 175, 182, 184, 186, 188, 191, 193, 194, 200, 206, 209, 211, 218, 262, 263, 268, 303, 304, 305, 306, 312, 313, 318, 322, 325, 327, 328, 338, 343, 344, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 363, 366, 371, 375, 376, 377, 379, 381, 398, 399, 400, 402, 403, 407, 410, 416, 418, 423, 436], "import": [0, 3, 4, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 76, 78, 79, 80, 81, 82, 83, 84, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 119, 120, 121, 122, 123, 124, 125, 126, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 157, 158, 159, 162, 164, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 263, 268, 276, 285, 289, 301, 303, 304, 305, 306, 307, 308, 309, 312, 313, 314, 315, 316, 317, 318, 321, 347, 356, 360, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 415, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428], "np": [0, 3, 4, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 76, 78, 79, 81, 82, 83, 84, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 119, 120, 121, 122, 123, 124, 125, 126, 133, 134, 135, 137, 138, 139, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 157, 158, 159, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 263, 268, 272, 276, 277, 285, 289, 303, 304, 305, 306, 307, 308, 309, 312, 314, 315, 316, 317, 318, 321, 347, 356, 369, 370, 371, 372, 373, 374, 375, 376, 379, 380, 381, 382, 383, 384, 385, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 410, 411, 412, 415, 418, 419, 420, 421, 422, 423, 425, 427, 428], "device_context": 0, "opencl": 0, "gpu": [0, 3, 4], "x": [0, 3, 4, 11, 12, 14, 18, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 35, 37, 39, 40, 41, 45, 48, 49, 51, 52, 57, 58, 60, 61, 63, 64, 65, 67, 68, 69, 70, 73, 76, 78, 81, 83, 84, 87, 88, 90, 91, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 118, 122, 123, 130, 133, 134, 137, 143, 145, 146, 147, 148, 150, 151, 152, 170, 173, 177, 178, 179, 180, 182, 183, 184, 185, 187, 193, 194, 198, 199, 203, 204, 263, 268, 276, 277, 289, 303, 304, 306, 307, 308, 309, 311, 312, 314, 315, 316, 317, 340, 346, 371, 372, 373, 374, 376, 380, 381, 382, 383, 385, 389, 390, 391, 392, 394, 395, 396, 401, 402, 404, 405, 406, 410, 419, 420, 422, 426, 427, 428], "1": [0, 3, 4, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 31, 33, 34, 35, 37, 39, 40, 41, 42, 43, 48, 49, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 117, 119, 120, 121, 122, 123, 124, 125, 126, 128, 131, 132, 134, 135, 137, 139, 140, 141, 143, 145, 146, 147, 149, 157, 158, 159, 161, 162, 164, 166, 169, 170, 172, 173, 176, 177, 179, 180, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 262, 263, 268, 270, 272, 276, 277, 285, 289, 301, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 321, 322, 324, 326, 327, 329, 331, 333, 335, 336, 337, 339, 340, 341, 344, 346, 347, 348, 349, 350, 352, 354, 355, 356, 357, 361, 363, 366, 371, 372, 373, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 415, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 436], "2": [0, 3, 4, 11, 12, 13, 19, 21, 23, 27, 28, 29, 31, 33, 34, 35, 36, 37, 39, 40, 42, 44, 46, 48, 49, 51, 52, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 73, 74, 76, 78, 79, 80, 81, 82, 83, 84, 88, 89, 90, 91, 92, 93, 94, 96, 97, 99, 105, 110, 113, 119, 120, 121, 122, 123, 124, 125, 126, 135, 137, 138, 139, 140, 141, 143, 145, 146, 147, 157, 158, 159, 161, 162, 164, 166, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 263, 268, 272, 277, 285, 301, 304, 305, 306, 307, 308, 309, 313, 314, 315, 316, 317, 321, 322, 326, 330, 334, 340, 346, 349, 351, 362, 364, 365, 368, 370, 371, 372, 373, 375, 376, 377, 379, 380, 381, 382, 383, 384, 388, 390, 391, 392, 394, 396, 397, 398, 399, 400, 401, 403, 404, 405, 406, 407, 409, 410, 411, 412, 415, 416, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428], "3": [0, 3, 4, 13, 19, 20, 25, 27, 28, 29, 31, 33, 34, 35, 36, 37, 39, 40, 41, 42, 44, 47, 48, 49, 51, 54, 55, 56, 59, 60, 61, 62, 63, 66, 67, 68, 69, 70, 73, 74, 76, 78, 79, 80, 81, 82, 83, 84, 88, 89, 90, 91, 92, 94, 96, 119, 120, 121, 122, 123, 124, 125, 126, 135, 137, 140, 141, 142, 143, 145, 146, 147, 157, 162, 172, 173, 174, 175, 176, 178, 179, 181, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 268, 277, 285, 301, 304, 305, 306, 308, 309, 313, 314, 315, 317, 322, 326, 330, 337, 340, 346, 349, 350, 351, 361, 365, 368, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 388, 390, 393, 394, 396, 397, 398, 399, 401, 402, 406, 407, 409, 410, 411, 412, 415, 418, 420, 421, 422, 423, 425, 426, 428], "sum": [0, 3, 4, 6, 13, 42, 70, 73, 76, 78, 80, 81, 140, 142, 181, 187, 188, 204, 210, 269, 324, 339, 341, 374, 408, 436, 440], "For": [0, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 164, 166, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 263, 266, 267, 276, 277, 286, 287, 288, 289, 290, 291, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 436], "more": [0, 3, 4, 31, 39, 40, 41, 82, 83, 120, 121, 127, 141, 146, 168, 169, 397, 412, 415, 436], "inform": [0, 35, 37, 81, 83, 117, 273, 436, 440], "pleas": [0, 3, 436], "refer": [0, 2, 3, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 164, 166, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 258, 259, 260, 261, 263, 265, 266, 267, 276, 277, 279, 280, 281, 285, 286, 287, 288, 289, 290, 291, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 436], "document": [0, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 164, 166, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 258, 259, 260, 261, 262, 263, 265, 266, 267, 276, 277, 279, 280, 281, 285, 286, 287, 288, 289, 290, 291, 292, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 436], "time": [0, 13, 15, 25, 44, 46, 47, 61, 78, 79, 80, 89, 123, 124, 125, 126, 138, 139, 142, 152, 157, 158, 159, 181, 182, 184, 185, 190, 196, 197, 200, 305, 309, 313, 324, 339, 375, 376, 379, 399, 403, 407, 418], "def": 0, "run": [0, 4], "executor": 0, "size": [0, 6, 31, 42, 56, 63, 67, 68, 81, 83, 135, 141, 170, 175, 186, 191, 206, 277, 278, 293, 307, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 350, 352, 353, 354, 355, 356, 357, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 381, 384, 396, 397, 416, 425, 427], "test_typ": 0, "repetit": [0, 376, 407], "reshap": [0, 6, 13, 27, 28, 39, 41, 42, 73, 74, 79, 81, 82, 93, 119, 126, 146, 188, 189, 195, 200, 293, 301, 346, 371, 381, 399, 418, 436], "arang": [0, 6, 13, 27, 28, 39, 40, 41, 42, 43, 54, 61, 72, 73, 74, 79, 89, 91, 92, 94, 119, 126, 134, 135, 140, 146, 175, 178, 179, 182, 183, 184, 185, 186, 188, 189, 193, 195, 200, 305, 308, 313, 317, 321, 346, 375, 378, 381, 399, 418, 426, 428], "dtype": [0, 9, 11, 12, 13, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33, 34, 35, 36, 37, 42, 44, 45, 46, 47, 50, 51, 52, 56, 57, 58, 61, 64, 65, 67, 74, 79, 81, 87, 88, 89, 91, 92, 94, 96, 117, 122, 123, 124, 125, 126, 131, 133, 134, 135, 137, 138, 139, 141, 142, 143, 144, 146, 148, 150, 151, 152, 157, 158, 159, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 195, 196, 197, 200, 201, 202, 205, 206, 207, 208, 209, 210, 211, 263, 269, 280, 286, 296, 298, 302, 303, 305, 307, 308, 312, 313, 314, 315, 322, 344, 350, 366, 374, 375, 378, 379, 380, 384, 385, 389, 390, 391, 392, 394, 395, 397, 398, 399, 400, 404, 405, 408, 411, 418, 419, 423, 425, 427, 428, 436], "_": [0, 397], "rang": [0, 140, 316, 317, 341, 346, 397, 409, 421, 440], "start_tim": 0, "perf_count": 0, "result": [0, 4, 14, 18, 27, 28, 42, 44, 45, 46, 47, 50, 54, 56, 68, 69, 70, 83, 84, 97, 130, 137, 146, 147, 148, 150, 151, 152, 157, 170, 182, 183, 184, 185, 187, 188, 189, 191, 195, 198, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 309, 313, 314, 322, 324, 354, 374, 377, 378, 379, 382, 397, 398, 400, 403, 406, 407, 423, 436], "end_tim": 0, "append": [0, 6, 78, 93], "return": [0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 162, 164, 165, 167, 168, 169, 170, 172, 173, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 214, 215, 216, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 267, 268, 269, 270, 271, 273, 274, 275, 277, 279, 280, 281, 284, 285, 286, 288, 291, 292, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 316, 322, 325, 344, 346, 349, 350, 351, 352, 353, 354, 355, 357, 358, 363, 366, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 423, 424, 425, 426, 427, 428, 436], "median": [0, 6], "get_dtyp": 0, "_dtypes_list": 0, "int32": [0, 9, 36, 50, 83, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 128, 129, 130, 131, 132, 176, 322, 324, 332, 334, 339, 341, 347, 350, 366, 378, 400], "int64": [0, 9, 50, 83, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 128, 129, 130, 131, 132, 176, 378], "float32": [0, 36, 50, 81, 83, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 128, 129, 130, 131, 132, 176, 263, 322, 344, 349, 351, 352, 354, 355, 357, 363, 366, 378], "select_default_devic": 0, "has_aspect_fp64": 0, "float64": [0, 36, 42, 50, 81, 83, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 128, 129, 130, 131, 132, 176, 263, 322, 323, 329, 330, 331, 333, 335, 336, 337, 344, 345, 348, 349, 351, 352, 354, 355, 356, 357, 362, 363, 364, 365, 366, 367, 368, 369, 370, 378, 411], "test_repetit": 0, "5": [0, 6, 13, 14, 19, 26, 27, 39, 42, 43, 44, 46, 47, 48, 52, 54, 56, 59, 62, 63, 66, 68, 69, 70, 73, 74, 78, 79, 81, 84, 90, 119, 120, 121, 122, 123, 124, 125, 126, 135, 137, 140, 141, 142, 145, 146, 157, 164, 173, 175, 182, 183, 184, 185, 186, 189, 190, 191, 192, 193, 194, 195, 196, 199, 200, 206, 209, 263, 268, 304, 306, 307, 308, 313, 316, 317, 322, 323, 324, 326, 329, 341, 345, 346, 347, 348, 351, 354, 369, 371, 372, 373, 375, 377, 379, 380, 381, 382, 383, 384, 389, 397, 398, 400, 401, 402, 406, 407, 409, 411, 412, 415, 418, 419, 421, 422, 425, 426, 427, 428], "type_nam": 0, "name": [0, 6, 83], "print": [0, 4, 31, 42, 43, 59, 83, 87, 140, 254, 322, 341, 346, 420], "f": [0, 6, 35, 37, 51, 54, 61, 81, 83, 87, 88, 92, 96, 133, 134, 263, 268, 275, 307, 308, 343, 371, 377, 385, 427, 428], "test": [0, 2, 14, 15, 18, 150, 151, 152, 208, 324, 440], "type": [0, 2, 3, 4, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 76, 78, 79, 80, 81, 82, 83, 84, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 162, 164, 165, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 262, 263, 268, 271, 275, 291, 301, 303, 304, 305, 306, 307, 308, 309, 312, 313, 314, 315, 316, 317, 321, 322, 323, 324, 326, 329, 330, 331, 332, 333, 334, 335, 336, 337, 341, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 415, 416, 418, 419, 421, 422, 423, 425, 426, 427, 428, 429, 440], "each": [0, 11, 12, 20, 21, 22, 23, 24, 26, 39, 40, 41, 42, 43, 48, 49, 51, 52, 57, 58, 61, 64, 65, 81, 83, 120, 121, 122, 123, 130, 164, 165, 176, 193, 199, 292, 293, 303, 312, 315, 318, 324, 341, 376, 381, 385, 389, 390, 391, 392, 394, 397, 403, 404, 405, 407, 413, 416, 419, 436], "64": [0, 4, 135, 313, 383], "128": [0, 135], "256": [0, 135], "512": 0, "1024": 0, "2048": 0, "4096": 0, "time_numpi": 0, "result_numpi": 0, "time_dpnp": 0, "result_dpnp": 0, "verif": 0, "true": [0, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 35, 37, 39, 42, 44, 45, 46, 47, 50, 51, 52, 57, 58, 60, 61, 62, 64, 65, 66, 67, 79, 81, 83, 89, 91, 92, 93, 94, 95, 119, 120, 121, 122, 123, 124, 125, 126, 135, 138, 139, 140, 142, 146, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 168, 170, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 195, 196, 197, 200, 201, 202, 205, 206, 207, 208, 209, 210, 211, 258, 259, 263, 268, 279, 280, 281, 286, 296, 298, 302, 303, 305, 312, 313, 314, 315, 318, 327, 374, 375, 377, 379, 380, 385, 389, 390, 391, 392, 394, 395, 398, 399, 400, 403, 404, 405, 418, 419, 422, 423, 426], "els": [0, 172], "msg": 0, "n": [0, 4, 70, 74, 75, 78, 82, 83, 84, 93, 96, 98, 100, 101, 103, 104, 106, 108, 109, 111, 112, 114, 115, 116, 137, 143, 168, 170, 193, 209, 211, 317, 324, 339, 341, 351, 361, 388, 395, 398, 401, 402, 409, 411, 413, 416, 422, 423, 436], "4": [0, 13, 14, 19, 27, 28, 31, 39, 41, 42, 44, 46, 48, 54, 55, 56, 59, 62, 64, 66, 68, 69, 70, 73, 74, 76, 78, 79, 81, 82, 83, 84, 87, 89, 92, 119, 123, 124, 125, 133, 135, 137, 138, 139, 140, 141, 142, 145, 146, 159, 162, 172, 175, 180, 182, 186, 188, 189, 190, 191, 192, 194, 195, 196, 199, 200, 201, 202, 203, 204, 206, 209, 211, 268, 285, 301, 304, 306, 308, 313, 314, 316, 317, 322, 323, 326, 346, 351, 367, 371, 372, 375, 376, 377, 381, 382, 383, 384, 389, 393, 394, 397, 398, 399, 401, 402, 406, 407, 409, 410, 412, 415, 418, 422, 423, 425, 426, 428], "3e": 0, "ratio": 0, "6": [0, 4, 6, 13, 19, 27, 28, 39, 42, 46, 47, 54, 56, 62, 68, 69, 70, 72, 73, 74, 78, 79, 81, 83, 84, 89, 94, 97, 119, 134, 141, 145, 146, 174, 175, 186, 203, 204, 208, 268, 277, 304, 308, 313, 316, 321, 322, 339, 341, 346, 351, 371, 372, 377, 381, 382, 383, 384, 397, 399, 400, 401, 402, 406, 410, 412, 415, 418, 421, 425, 426, 428], "2f": 0, "__name__": 0, "__main__": 0, "try": [0, 4], "gpu_queu": 0, "get_sycl_devic": [0, 322], "print_device_info": 0, "except": [0, 4, 15, 31, 33, 34, 35, 37, 48, 49, 54, 56, 60, 66, 73, 76, 78, 81, 98, 104, 112, 141, 189, 191, 195, 205, 206, 207, 209, 210, 211, 263, 293, 376, 377, 398, 400, 422, 423], "importerror": 0, "data": [1, 3, 4, 11, 12, 13, 14, 15, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 36, 38, 42, 44, 45, 46, 47, 49, 50, 51, 52, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 76, 79, 80, 81, 83, 84, 89, 90, 91, 92, 94, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 117, 122, 123, 124, 125, 126, 127, 129, 132, 137, 138, 139, 141, 142, 144, 145, 146, 148, 149, 150, 151, 152, 157, 158, 159, 164, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 263, 291, 301, 303, 304, 305, 309, 312, 313, 314, 315, 317, 318, 321, 322, 323, 324, 326, 329, 330, 331, 332, 333, 334, 335, 336, 337, 341, 344, 345, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 379, 380, 381, 382, 383, 384, 385, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 402, 403, 404, 405, 406, 410, 411, 412, 415, 418, 419, 421, 422, 423, 425, 426, 429, 440], "parallel": [1, 3, 4, 9, 429], "overview": 2, "quick": [2, 3], "start": [2, 3, 19, 35, 37, 135, 175, 186, 382], "guid": [2, 3], "driver": 2, "interpret": [2, 33, 34, 49, 60, 83, 128, 436], "instal": 2, "exampl": [2, 3, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 76, 78, 79, 80, 81, 82, 83, 84, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 119, 120, 121, 122, 123, 124, 125, 126, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 157, 158, 159, 162, 164, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 254, 263, 268, 272, 276, 277, 285, 289, 291, 301, 303, 304, 305, 306, 307, 308, 309, 312, 313, 314, 315, 316, 317, 318, 321, 322, 323, 324, 326, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 415, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428], "multi": [2, 81, 99, 101, 105, 106, 110, 111, 113, 115, 194, 297, 306, 429], "dimension": [2, 4, 27, 28, 59, 63, 66, 74, 75, 76, 78, 81, 98, 99, 100, 101, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 128, 131, 187, 189, 193, 194, 195, 201, 202, 205, 207, 209, 210, 211, 295, 306, 374, 398, 400, 407, 423, 429], "ndarrai": [2, 3, 6, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 119, 120, 121, 122, 123, 124, 125, 126, 135, 137, 138, 139, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 157, 158, 159, 161, 162, 164, 165, 166, 169, 170, 171, 172, 173, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 303, 304, 305, 306, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 344, 349, 350, 351, 352, 353, 354, 355, 357, 363, 366, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 416, 418, 419, 421, 422, 423, 425, 426, 429], "univers": [2, 429, 436], "ufunc": [2, 429, 436], "routin": [2, 429, 436], "special": [2, 83, 90, 429, 440], "avail": [2, 3, 4, 83, 429, 436], "comparison": [2, 89, 138, 139, 158, 159, 305, 429, 440], "tabl": [2, 9, 170, 429], "cupi": [2, 429], "miscellan": [2, 429, 440], "c": [2, 4, 35, 37, 38, 51, 54, 61, 81, 83, 87, 88, 92, 96, 133, 134, 136, 162, 172, 176, 263, 268, 275, 288, 307, 308, 313, 371, 377, 385, 407, 427, 428], "backend": [2, 136, 325, 327, 328, 338, 343, 359], "The": [3, 4, 13, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 36, 37, 42, 44, 45, 46, 47, 49, 51, 52, 54, 55, 56, 57, 58, 61, 62, 64, 65, 67, 73, 76, 78, 79, 81, 82, 83, 84, 89, 91, 93, 94, 98, 104, 112, 119, 122, 123, 124, 125, 126, 130, 138, 139, 141, 142, 143, 145, 146, 148, 157, 158, 159, 162, 164, 165, 169, 170, 172, 177, 178, 179, 180, 182, 184, 187, 188, 189, 190, 194, 195, 196, 197, 199, 200, 201, 202, 205, 207, 209, 210, 211, 262, 268, 275, 276, 285, 289, 303, 305, 306, 312, 313, 315, 316, 318, 322, 325, 327, 328, 338, 343, 344, 349, 350, 351, 352, 353, 354, 355, 357, 358, 363, 366, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 388, 389, 391, 392, 397, 398, 399, 400, 403, 404, 405, 407, 409, 413, 414, 416, 417, 418, 419, 423, 425, 426, 436, 440], "librari": [3, 4, 436], "implement": [3, 6, 36, 127], "subset": [3, 396, 440], "execut": [3, 4, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 33, 34, 44, 45, 46, 47, 51, 52, 57, 58, 61, 63, 64, 65, 67, 68, 69, 70, 77, 79, 80, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 122, 123, 124, 125, 126, 130, 133, 134, 137, 138, 139, 142, 143, 147, 148, 149, 150, 151, 152, 157, 158, 159, 166, 177, 178, 179, 180, 181, 182, 183, 184, 185, 190, 192, 193, 196, 197, 198, 200, 203, 204, 208, 303, 304, 305, 307, 308, 309, 311, 312, 313, 314, 317, 325, 327, 328, 338, 343, 359, 373, 375, 379, 380, 383, 385, 389, 390, 391, 392, 393, 394, 395, 399, 402, 404, 405, 406, 410, 411, 412, 415, 418, 419, 426, 427, 428], "ani": [3, 6, 14, 15, 36, 48, 49, 78, 81, 83, 116, 141, 205, 207, 263, 322, 366, 394, 436], "drop": [3, 83], "replac": [3, 36, 54, 318, 327, 436], "core": [3, 83, 436], "numer": [3, 4, 61, 83, 303, 312, 440], "being": [3, 83], "develop": [3, 4], "part": [3, 57, 58, 81, 145, 198, 276, 289, 315, 372, 436], "intel": [3, 4], "ai": [3, 318, 403], "analyt": 3, "toolkit": 3, "distribut": [3, 4, 186, 322, 323, 324, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 353, 354, 356, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 440], "also": [3, 61, 83, 93, 199, 360, 436], "anaconda": 3, "cloud": 3, "page": [3, 440], "learn": [3, 4], "Being": 3, "mean": [3, 6, 42, 81, 170, 192, 206, 209, 211, 263, 275, 322, 335, 337, 340, 344, 363, 367, 368, 371, 377, 398, 400, 423, 436], "usag": [3, 4], "veri": [3, 193], "similar": [3, 33, 34, 81, 83, 135, 175, 186, 268, 322, 350], "class": [3, 81, 83, 84, 118, 146, 322, 350, 394, 395, 411, 440], "compat": [3, 27, 28, 42, 81, 187, 189, 191, 195, 201, 202, 205, 206, 207, 209, 210, 211, 263, 374, 377, 398, 400, 423, 440], "altern": [3, 4, 188, 191, 206, 209, 210, 211, 398, 400, 423], "abov": [3, 146, 187, 210, 374, 400, 412], "instanc": [3, 36, 81, 146, 193, 194, 306, 322, 344, 349, 350, 351, 352, 353, 354, 355, 357, 358, 363, 366], "creat": [3, 4, 31, 33, 34, 36, 60, 73, 74, 76, 81, 83, 127, 131, 146, 194, 268, 306, 318, 322, 344, 349, 350, 351, 352, 353, 354, 355, 357, 358, 363, 366, 436, 440], "ident": [3, 6, 83, 173, 361], "one": [3, 4, 31, 36, 39, 40, 41, 42, 54, 59, 62, 63, 81, 83, 87, 89, 94, 98, 100, 103, 104, 108, 109, 112, 114, 120, 121, 133, 141, 143, 146, 170, 177, 178, 179, 180, 193, 194, 203, 268, 275, 278, 306, 308, 315, 341, 382, 396, 397, 413, 416, 427, 436], "kei": [3, 29, 81, 83, 118, 223, 253, 262, 393], "differ": [3, 42, 70, 78, 81, 83, 84, 117, 120, 121, 137, 165, 170, 187, 188, 210, 262, 268, 313, 374, 399, 400, 440], "memori": [3, 33, 34, 35, 37, 51, 54, 61, 81, 83, 92, 273, 275, 297, 377, 385, 429], "default": [3, 11, 12, 13, 14, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 42, 44, 45, 46, 47, 48, 49, 51, 52, 54, 56, 57, 58, 60, 61, 63, 64, 65, 67, 77, 78, 79, 81, 83, 84, 87, 88, 89, 91, 92, 94, 96, 98, 104, 116, 119, 122, 123, 124, 125, 126, 133, 134, 138, 139, 141, 142, 146, 148, 150, 151, 152, 157, 158, 159, 168, 170, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 205, 206, 207, 208, 209, 210, 211, 262, 263, 268, 275, 303, 305, 306, 307, 308, 310, 312, 313, 314, 315, 317, 322, 326, 344, 349, 350, 351, 352, 353, 354, 355, 357, 358, 360, 361, 363, 366, 371, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 394, 395, 397, 398, 399, 400, 402, 404, 405, 408, 409, 413, 416, 418, 419, 423, 425, 427, 428, 436], "system": [3, 4, 173], "integr": [3, 4, 42, 187, 191, 198, 206, 209, 210, 211, 313, 374, 398, 400, 410, 423], "discret": [3, 59, 63, 70, 78, 84, 98, 99, 100, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 137, 322, 429], "otherwis": [3, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 57, 58, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 73, 76, 77, 78, 79, 80, 81, 83, 84, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 122, 123, 124, 125, 126, 133, 134, 137, 138, 139, 142, 143, 147, 148, 149, 150, 151, 152, 157, 158, 159, 166, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 189, 190, 191, 192, 193, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 263, 275, 291, 303, 304, 305, 307, 308, 309, 311, 312, 313, 314, 317, 322, 323, 324, 326, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 362, 363, 364, 365, 366, 367, 368, 369, 370, 373, 374, 375, 377, 379, 380, 383, 385, 389, 390, 391, 392, 393, 394, 395, 396, 398, 399, 400, 402, 404, 405, 406, 410, 411, 412, 415, 418, 419, 422, 423, 426, 427, 428], "host": [3, 4, 36, 146, 194, 306, 322, 344, 349, 350, 351, 352, 353, 354, 355, 357, 363, 366], "do": [3, 4, 83, 324, 382], "have": [3, 4, 27, 28, 32, 39, 40, 41, 42, 49, 51, 55, 56, 61, 82, 83, 92, 117, 141, 176, 187, 189, 191, 195, 201, 202, 205, 206, 207, 209, 210, 211, 341, 374, 384, 385, 397, 398, 400, 407, 423, 425, 436], "most": [3, 4, 78, 83, 396], "manipul": [3, 74, 429, 440], "ar": [3, 4, 11, 12, 13, 14, 15, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 39, 40, 41, 42, 44, 45, 46, 47, 48, 51, 52, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 77, 78, 79, 80, 81, 83, 84, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 137, 138, 139, 142, 145, 147, 148, 149, 150, 151, 152, 157, 158, 159, 160, 164, 165, 168, 170, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 263, 284, 285, 303, 304, 305, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 321, 322, 323, 324, 326, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 344, 345, 347, 348, 350, 353, 354, 356, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 379, 380, 381, 383, 384, 385, 387, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 402, 404, 405, 406, 408, 410, 411, 414, 417, 418, 419, 420, 421, 423, 425, 426, 436], "done": [3, 81, 263], "see": [3, 30, 81, 83, 127, 170, 262, 339, 383, 413, 414, 416, 417, 436], "complet": [3, 4, 382, 436], "list": [3, 6, 9, 39, 40, 41, 48, 56, 81, 82, 83, 141, 262, 378, 384, 387, 397, 409, 425], "support": [3, 9, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 33, 34, 35, 36, 37, 44, 45, 46, 47, 48, 49, 51, 52, 57, 58, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 76, 77, 79, 80, 81, 83, 84, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 137, 138, 139, 142, 143, 145, 147, 148, 149, 150, 151, 152, 157, 158, 159, 161, 164, 166, 171, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 263, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 321, 322, 323, 324, 326, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 375, 377, 379, 380, 383, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 398, 399, 400, 402, 404, 405, 406, 408, 410, 411, 412, 415, 418, 419, 421, 422, 423, 426, 427, 428, 444], "along": [3, 4, 14, 16, 17, 18, 27, 28, 42, 55, 56, 66, 69, 70, 73, 76, 78, 81, 82, 84, 119, 120, 121, 124, 125, 137, 141, 146, 147, 170, 187, 189, 190, 191, 192, 195, 196, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 260, 261, 262, 269, 279, 281, 286, 287, 296, 298, 300, 302, 316, 317, 318, 374, 376, 381, 382, 384, 397, 398, 400, 402, 403, 406, 407, 408, 410, 413, 416, 423, 425, 436], "limit": [3, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 33, 34, 35, 37, 44, 45, 46, 47, 48, 49, 51, 52, 54, 57, 58, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 76, 77, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 137, 138, 139, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 157, 158, 159, 161, 164, 166, 171, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 263, 265, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 321, 322, 323, 324, 326, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 344, 345, 347, 348, 350, 353, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 375, 377, 379, 380, 383, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 398, 399, 400, 402, 404, 405, 406, 408, 410, 411, 412, 415, 418, 419, 421, 422, 423, 426, 427, 428], "To": 4, "program": [4, 122], "beyond": [4, 381], "cpu": [4, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 44, 45, 46, 47, 51, 52, 57, 58, 61, 63, 64, 65, 67, 68, 69, 70, 77, 79, 80, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 122, 123, 124, 125, 126, 133, 134, 137, 138, 139, 142, 143, 147, 148, 149, 150, 151, 152, 157, 158, 159, 166, 177, 178, 179, 180, 181, 182, 183, 184, 185, 190, 192, 193, 196, 197, 198, 200, 203, 204, 208, 303, 304, 305, 307, 308, 309, 311, 312, 313, 314, 317, 373, 375, 379, 380, 383, 385, 389, 390, 391, 392, 393, 394, 395, 399, 402, 404, 405, 406, 410, 411, 412, 415, 418, 419, 426, 427, 428], "you": [4, 403, 436], "need": [4, 81, 136, 262, 403], "appropri": [4, 27, 28, 136, 187, 189, 195, 201, 202, 205, 207, 322, 350, 353, 374, 436], "hardwar": 4, "work": [4, 30, 38, 71, 197, 320, 403, 424, 436], "fine": 4, "laptop": 4, "graphic": 4, "In": [4, 27, 28, 81, 160, 206, 262, 317, 322, 366, 377, 402], "major": [4, 33, 34, 35, 37, 81, 263, 275, 371], "case": [4, 27, 28, 42, 78, 174, 208, 314, 315, 377], "your": 4, "window": 4, "alreadi": [4, 34, 39, 40, 41], "ha": [4, 42, 44, 45, 46, 47, 83, 93, 103, 108, 130, 141, 148, 172, 187, 191, 206, 209, 210, 211, 317, 374, 376, 382, 396, 397, 398, 400, 401, 407, 423, 436], "all": [4, 6, 9, 15, 18, 32, 42, 55, 66, 78, 81, 82, 83, 91, 92, 94, 119, 120, 121, 141, 143, 160, 201, 202, 205, 207, 210, 262, 263, 266, 272, 285, 315, 324, 381, 384, 394, 396, 425, 436], "necessari": [4, 39, 62, 191, 206, 209, 210, 211, 377, 398, 400, 423], "But": [4, 83], "want": [4, 403], "up": [4, 83, 121], "date": [4, 81, 262], "alwai": [4, 33, 81, 209, 211, 263, 377, 398, 423], "updat": 4, "latest": [4, 127], "follow": [4, 42, 83, 93, 117, 144, 436, 440], "instruct": 4, "step": [4, 19, 135, 175, 186], "8": [4, 13, 15, 39, 51, 54, 62, 73, 74, 78, 83, 119, 135, 145, 149, 162, 172, 174, 175, 186, 203, 313, 314, 316, 322, 346, 365, 372, 381, 385, 391, 402, 406, 410, 412, 415, 422, 426], "9": [4, 13, 39, 54, 62, 73, 74, 79, 81, 97, 123, 135, 174, 186, 200, 277, 316, 322, 324, 326, 346, 372, 381, 394, 399, 406, 412, 415, 418, 422, 426], "10": [4, 13, 21, 23, 27, 28, 42, 54, 60, 70, 74, 78, 81, 83, 94, 133, 135, 140, 145, 157, 177, 178, 179, 180, 186, 187, 192, 200, 291, 316, 318, 322, 324, 334, 346, 374, 378, 379, 381, 383, 397, 403, 412, 415, 426], "If": [4, 15, 27, 28, 36, 42, 54, 56, 78, 80, 81, 83, 93, 117, 119, 141, 146, 168, 169, 170, 187, 189, 191, 195, 201, 202, 205, 206, 207, 209, 210, 211, 262, 263, 293, 318, 322, 344, 366, 374, 377, 381, 384, 394, 396, 397, 398, 400, 401, 403, 407, 409, 423, 425, 436], "yet": [4, 6], "easiest": 4, "It": [4, 27, 28, 54, 187, 189, 191, 195, 201, 202, 205, 206, 207, 209, 210, 211, 374, 398, 400, 423], "essenti": 4, "machin": [4, 117, 144], "optim": [4, 86], "includ": [4, 27, 28, 36, 42, 136, 186, 187, 189, 191, 195, 201, 202, 205, 206, 207, 209, 210, 211, 315, 322, 366, 374, 398, 400, 423], "anoth": [4, 62, 81, 127, 268, 287, 317, 382], "vendor": 4, "too": 4, "manual": [4, 83, 407], "shown": 4, "next": [4, 117], "section": [4, 83, 436], "recommend": [4, 304, 407], "org": 4, "channel": 4, "command": 4, "forg": 4, "pip": 4, "http": [4, 127], "pypi": 4, "simpl": [4, 185, 440], "These": [4, 83, 93, 199, 436, 440], "its": [4, 6, 15, 30, 42, 57, 58, 81, 98, 104, 117, 142, 143, 164, 165, 191, 206, 209, 211, 301, 359, 371, 374, 377, 383, 398, 409, 411, 423, 436], "depend": [4, 164, 170, 175, 387, 426], "control": [4, 50, 56, 62, 81, 141, 263, 384, 397, 425], "requir": [4, 6, 31, 35, 37, 81, 83, 146, 263], "compil": [4, 83, 136], "runtim": 4, "onemkl": 4, "befor": [4, 56, 81, 120, 121, 187, 209, 210, 211, 285, 374, 381, 382, 398, 400, 407, 423], "strongli": [4, 407], "advis": 4, "version": [4, 81, 83, 274, 304], "activ": 4, "local": 4, "environ": 4, "env": 4, "And": [4, 74, 81, 263], "sourc": [4, 6, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428], "recip": 4, "finanli": 4, "setuptool": 4, "o": [4, 83], "On": 4, "linux": 4, "cython": 4, "dpcpp_linux": 4, "mkl": 4, "devel": 4, "dpcpp": 4, "tbb": 4, "onedpl": 4, "cmake": 4, "ninja": 4, "pytest": 4, "dpcpp_win": 4, "setup": 4, "py": 4, "g": [4, 81, 83, 297, 322], "dcmake_c_compil": 4, "path": 4, "icx": 4, "dcmake_cxx_compil": 4, "icpx": 4, "script": 4, "build_loc": 4, "suit": 4, "element": [4, 11, 12, 13, 14, 15, 18, 20, 21, 22, 23, 24, 25, 26, 30, 32, 42, 43, 44, 45, 46, 47, 51, 52, 54, 57, 58, 61, 62, 64, 65, 69, 70, 78, 79, 81, 83, 84, 89, 91, 92, 94, 95, 97, 119, 120, 121, 122, 123, 124, 125, 126, 138, 139, 142, 143, 145, 146, 148, 149, 150, 151, 152, 157, 158, 159, 160, 166, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 189, 190, 195, 196, 197, 198, 200, 203, 204, 205, 207, 208, 209, 210, 211, 258, 259, 266, 267, 269, 271, 272, 275, 277, 278, 280, 282, 284, 285, 290, 291, 292, 294, 296, 297, 300, 302, 303, 304, 305, 311, 312, 313, 314, 315, 317, 319, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 398, 399, 400, 402, 404, 405, 407, 412, 415, 418, 419, 420, 423, 426, 436, 440], "asarrai": [4, 6, 33, 38], "y": [4, 35, 37, 39, 48, 60, 67, 68, 80, 81, 83, 93, 130, 137, 193, 194, 198, 268, 291, 301, 306, 394, 410, 426], "locat": [4, 136, 333, 335], "same": [4, 13, 15, 25, 30, 32, 35, 37, 38, 42, 44, 46, 47, 49, 55, 56, 61, 71, 78, 79, 80, 81, 82, 88, 89, 93, 95, 123, 124, 125, 126, 127, 134, 138, 139, 141, 142, 157, 158, 159, 176, 181, 182, 183, 184, 185, 189, 190, 191, 195, 196, 197, 200, 205, 206, 207, 209, 210, 211, 263, 291, 305, 308, 309, 313, 317, 318, 320, 322, 344, 350, 366, 371, 375, 376, 379, 381, 382, 384, 394, 395, 396, 397, 398, 399, 400, 403, 414, 417, 418, 423, 424, 425, 428], "shape": [4, 6, 27, 28, 31, 32, 35, 41, 42, 48, 49, 51, 54, 56, 61, 63, 67, 68, 74, 78, 81, 82, 83, 87, 88, 92, 93, 95, 119, 130, 133, 134, 141, 146, 162, 166, 168, 172, 173, 174, 182, 183, 184, 185, 187, 188, 189, 191, 194, 195, 199, 201, 202, 205, 206, 207, 209, 210, 211, 263, 291, 295, 301, 306, 307, 308, 317, 318, 322, 331, 334, 339, 340, 345, 349, 350, 351, 352, 353, 354, 355, 357, 362, 363, 369, 371, 374, 376, 377, 381, 382, 384, 385, 394, 395, 396, 397, 398, 400, 402, 407, 409, 411, 416, 423, 425, 427, 428, 429, 440], "0": [4, 6, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 39, 40, 41, 42, 43, 50, 52, 54, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 72, 73, 74, 76, 77, 78, 79, 81, 83, 84, 87, 88, 89, 90, 91, 93, 94, 96, 97, 100, 114, 117, 119, 120, 121, 122, 123, 124, 125, 126, 134, 135, 137, 140, 143, 146, 147, 150, 151, 152, 164, 166, 172, 175, 176, 177, 178, 179, 180, 183, 185, 186, 188, 189, 190, 191, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 262, 268, 270, 272, 276, 277, 289, 292, 296, 297, 298, 301, 302, 304, 306, 307, 308, 313, 314, 315, 316, 317, 318, 321, 322, 324, 329, 331, 332, 333, 335, 336, 337, 339, 340, 341, 344, 346, 347, 348, 349, 352, 354, 355, 356, 357, 360, 363, 365, 366, 367, 373, 375, 376, 380, 381, 382, 383, 385, 387, 388, 389, 391, 392, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 423, 426, 427, 428], "expect": [4, 51, 61, 83, 92, 187, 191, 206, 209, 210, 211, 374, 385, 398, 400, 423], "comput": [4, 25, 30, 42, 44, 45, 46, 47, 52, 78, 93, 97, 98, 99, 100, 101, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 122, 123, 140, 146, 147, 148, 161, 162, 163, 165, 169, 170, 171, 172, 182, 183, 184, 185, 187, 189, 191, 192, 195, 197, 205, 206, 207, 209, 210, 211, 374, 375, 380, 383, 385, 398, 400, 405, 406, 419, 423], "empti": [4, 6, 31, 81, 88, 133, 134, 210, 272, 307, 308, 427, 428], "found": [4, 436], "here": [6, 83], "correspond": [6, 27, 28, 36, 54, 56, 81, 146, 164, 194, 271, 306, 322, 344, 349, 350, 351, 352, 353, 354, 355, 357, 358, 363, 366, 381, 388, 398, 409, 423, 436], "column": [6, 33, 34, 35, 37, 55, 56, 81, 82, 120, 121, 141, 164, 169, 263, 275, 371, 384, 397, 413, 416, 425], "v1": 6, "23": [6, 322], "v0": 6, "13": [6, 27, 28, 45, 74, 81, 83, 148, 188, 204, 262], "1dev2": 6, "12": [6, 27, 28, 41, 74, 83, 145, 186, 314, 316, 346, 412, 415], "g5705db33bc": 6, "v9": 6, "397": 6, "232": 6, "299": 6, "56": 6, "35": [6, 332], "47": 6, "20": [6, 146, 157, 318, 324, 339, 403], "15": [6, 27, 28, 70, 74, 178, 346], "16": [6, 44, 74, 83, 135, 137, 200, 313, 404], "18": [6, 83, 84, 186], "51": 6, "48": [6, 203], "49": 6, "total": [6, 66, 81, 282, 398, 423], "542": 6, "348": 6, "429": 6, "ab": [6, 12], "absolut": [6, 11, 97, 172, 209, 211, 315, 398, 423], "add": [6, 83], "add_docstr": 6, "add_newdoc": 6, "add_newdoc_ufunc": 6, "allclos": [6, 32, 149, 173, 174], "alltru": 6, "amax": [6, 189], "amin": [6, 195], "angl": [6, 24, 25, 71, 72, 320, 321, 421], "apply_along_axi": 6, "apply_over_ax": 6, "arcco": [6, 21, 22, 24, 25, 64], "arccosh": [6, 20, 23, 26, 65], "arcsin": [6, 20, 23, 24, 25, 391], "arcsinh": [6, 21, 22, 26, 392], "arctan": [6, 20, 22, 25, 26, 404], "arctan2": [6, 24], "arctanh": [6, 21, 23, 24, 25, 405], "argmax": [6, 28, 81, 201, 318, 403, 436], "argmin": [6, 27, 81, 202, 403, 436], "argpartit": [6, 29, 436], "argsort": [6, 81, 393, 403, 409, 436], "argwher": 6, "around": [6, 81, 135, 292, 317, 383], "array2str": 6, "array_equ": 6, "array_equiv": [6, 32], "array_repr": 6, "array_split": [6, 56], "array_str": 6, "asanyarrai": [6, 34, 37], "asarray_chkfinit": [6, 33, 34], "ascontiguousarrai": [6, 33, 34, 37], "asfarrai": [6, 33, 34], "asfortranarrai": [6, 33, 34, 35], "asmatrix": 6, "atleast_1d": [6, 40, 41, 93], "atleast_2d": [6, 39, 41, 93], "atleast_3d": [6, 39, 40, 93], "averag": [6, 81, 191, 206, 280, 400, 440], "bartlett": 6, "base_repr": 6, "binary_repr": 6, "bincount": 6, "bitwise_and": [6, 45, 46, 47, 148, 182], "bitwise_not": 6, "bitwise_or": [6, 44, 45, 47, 148, 184], "bitwise_xor": [6, 44, 45, 46, 148, 185], "blackman": 6, "block": [6, 56, 82, 141, 384, 397, 425], "bmat": 6, "broadcast_arrai": [6, 49], "broadcast_shap": 6, "broadcast_to": [6, 48, 407], "busday_count": 6, "busday_offset": 6, "byte_bound": 6, "can_cast": [6, 440], "cbrt": [6, 394], "ceil": [6, 30, 122, 123, 380, 383, 419], "choos": [6, 24, 25, 81, 436], "clip": [6, 81, 317, 402, 436], "column_stack": [6, 56, 82, 141, 384, 397, 425], "common_typ": 6, "compare_chararrai": 6, "compress": [6, 402, 436], "concaten": [6, 55, 82, 141, 384, 397, 403, 425], "conj": [6, 81, 145, 315, 372], "conjug": [6, 57, 80, 81, 145, 160, 164, 188, 266, 315, 372], "convolv": [6, 63], "copi": [6, 31, 34, 35, 36, 37, 39, 40, 41, 62, 81, 83, 146, 193, 194, 218, 263, 275, 277, 285, 291, 293, 306, 310, 312, 322, 344, 349, 350, 351, 352, 353, 354, 355, 357, 363, 366, 377, 393, 396, 412, 415, 436], "copysign": [6, 303, 312], "copyto": [6, 81, 268], "corrcoef": [6, 67], "correl": [6, 440], "co": [6, 20, 65, 391, 404], "cosh": [6, 21, 64, 392, 405], "count_nonzero": [6, 304], "cov": [6, 340], "cross": [6, 63], "cumprod": [6, 203, 436], "cumproduct": 6, "cumsum": [6, 78, 81, 204, 400, 436], "datetime_as_str": 6, "datetime_data": 6, "deg2rad": [6, 320, 321, 421], "degre": [6, 71, 209, 211, 320, 321, 364, 398, 421, 423], "delet": 6, "deprec": 6, "deprecate_with_doc": 6, "diag": [6, 76, 120, 121, 143, 174], "diag_indic": [6, 75, 116], "diag_indices_from": [6, 74, 116], "diagflat": [6, 73], "diagon": [6, 73, 74, 75, 76, 81, 96, 116, 143, 160, 408, 411, 412, 413, 414, 415, 416, 417, 436], "diff": [6, 70, 84, 137, 140], "digit": [6, 117], "disp": 6, "divid": [6, 82, 123, 126, 166, 197, 375, 418], "divmod": [6, 436], "dot": [6, 81, 85, 86, 147, 167, 169, 173, 174, 188, 406, 424], "dsplit": [6, 56, 82], "dstack": [6, 55, 56, 141, 384, 397, 425], "ediff1d": [6, 78], "einsum": [6, 86, 147, 188, 309, 406], "einsum_path": [6, 85], "empty_lik": [6, 31, 87, 134, 308, 428], "equal": [6, 14, 15, 18, 32, 42, 56, 63, 67, 81, 123, 135, 138, 139, 141, 149, 154, 158, 159, 166, 175, 186, 285, 305, 322, 332, 366, 375, 384, 393, 396, 397, 413, 416, 425], "exp": [6, 92, 94, 172, 177, 179, 181, 187], "exp2": [6, 91, 94], "expand_dim": [6, 27, 28], "expm1": [6, 91, 92, 179], "extract": [6, 73, 76, 146], "ey": [6, 57, 58, 66, 124, 125, 143, 185, 190, 196, 388], "fab": [6, 11, 12], "fastcopyandtranspos": 6, "fill_diagon": 6, "find_common_typ": 6, "fix": [6, 83, 317], "flatnonzero": [6, 304], "flip": [6, 120, 121, 324], "fliplr": [6, 119, 121], "flipud": [6, 119, 120], "float_pow": 6, "floor": [6, 30, 52, 123, 375, 380, 383, 419], "floor_divid": [6, 126, 197, 375], "fmax": [6, 125, 189, 190, 196, 205, 313], "fmin": [6, 124, 190, 195, 196, 207, 313], "fmod": [6, 124, 125, 197, 313, 375], "format_float_posit": 6, "format_float_scientif": 6, "frexp": 6, "from_dlpack": 6, "frombuff": 6, "fromfil": 6, "fromfunct": [6, 33, 34], "fromit": [6, 33, 34], "frompyfunc": 6, "fromregex": 6, "fromstr": 6, "full": [6, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 164, 166, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 258, 259, 260, 261, 263, 265, 266, 267, 276, 277, 279, 280, 281, 285, 286, 287, 288, 289, 290, 291, 292, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428], "full_lik": [6, 31, 88, 133, 308, 428], "gcd": 6, "genfromtxt": 6, "geomspac": [6, 175, 186], "get_array_wrap": 6, "get_includ": 6, "get_printopt": 6, "getbufs": 6, "geterr": 6, "geterrcal": 6, "geterrobj": 6, "gradient": [6, 78], "greater": [6, 81, 89, 139, 158, 159, 168, 285, 305, 396], "greater_equ": [6, 89, 138, 158, 159, 305], "ham": 6, "han": 6, "heavisid": 6, "histogram": [6, 440], "histogram2d": 6, "histogram_bin_edg": 6, "histogramdd": 6, "hsplit": [6, 56], "hstack": [6, 55, 56, 82, 384, 397, 425], "hypot": [6, 374], "i0": 6, "imag": [6, 81, 372, 436], "in1d": 6, "indic": [6, 27, 28, 29, 74, 75, 81, 83, 116, 194, 201, 202, 260, 261, 262, 284, 287, 300, 304, 317, 318, 377, 386, 389, 390, 402, 403, 409, 413, 414, 416, 417], "info": 6, "inner": [6, 85, 86, 188, 309], "insert": [6, 27, 28, 93, 187, 189, 195, 201, 202, 205, 207, 318, 374, 386, 440], "interp": 6, "intersect1d": 6, "invert": [6, 45], "is_busdai": 6, "isclos": [6, 15], "iscomplex": 6, "iscomplexobj": 6, "isfinit": [6, 151, 152, 205, 207, 210], "isfortran": 6, "isin": 6, "isinf": [6, 150, 152], "isnan": [6, 150, 151, 205, 207, 208, 210], "isnat": [6, 152], "isneginf": [6, 150, 151, 152], "isposinf": [6, 150, 151, 152], "isreal": 6, "isrealobj": 6, "isscalar": 6, "issctyp": 6, "issubclass_": 6, "issubdtyp": 6, "issubsctyp": 6, "iter": [6, 33, 34, 81, 118, 131, 274, 440], "ix_": 6, "kaiser": 6, "kron": 6, "lcm": 6, "ldexp": 6, "left_shift": [6, 379], "less": [6, 89, 138, 139, 159, 305, 389, 390], "less_equ": [6, 89, 138, 139, 158, 305], "lexsort": [6, 29, 81, 262, 393], "linspac": [6, 19, 90, 135, 186, 193, 421], "load": [6, 176], "loadtxt": 6, "log": [6, 94, 135, 172, 175, 178, 179, 180, 181, 186, 187, 337], "log10": [6, 177, 179, 180], "log1p": [6, 92, 94, 177, 178, 180], "log2": [6, 177, 178, 179], "logaddexp": [6, 187], "logaddexp2": 6, "logical_and": [6, 44, 183, 184, 185], "logical_not": [6, 45, 148, 182, 184, 185], "logical_or": [6, 46, 182, 183, 185], "logical_xor": [6, 47, 182, 183, 184], "logspac": [6, 135, 175], "lookfor": 6, "mask_indic": 6, "mat": 6, "matmul": [6, 174], "max": [6, 16, 27, 81, 117, 124, 144, 168, 190, 195, 196, 205, 265, 339, 403, 407, 436], "maximum": [6, 16, 27, 28, 54, 81, 124, 125, 189, 195, 196, 201, 202, 205, 207, 260, 279, 313, 316, 318], "maximum_sctyp": 6, "may_share_memori": 6, "meshgrid": [6, 194, 306], "min": [6, 17, 28, 54, 81, 117, 125, 144, 189, 190, 196, 207, 265, 403, 436], "min_scalar_typ": 6, "minimum": [6, 17, 27, 28, 54, 81, 124, 125, 189, 190, 195, 201, 202, 205, 207, 261, 281, 313, 316], "mintypecod": 6, "mod": [6, 375], "modf": 6, "moveaxi": [6, 381, 382, 409], "msort": 6, "multipli": 6, "nan_to_num": 6, "nanargmax": [6, 27, 202], "nanargmin": [6, 28, 201], "nancumprod": [6, 204], "nancumsum": 6, "nanmax": [6, 124, 189, 190, 196, 207], "nanmean": [6, 191, 209, 211, 398, 423], "nanmedian": 6, "nanmin": [6, 125, 190, 195, 196, 205], "nanpercentil": 6, "nanprod": [6, 314], "nanquantil": 6, "nanstd": [6, 191, 206, 211, 398, 423], "nansum": 6, "nanvar": [6, 191, 206, 209, 398, 423], "ndim": [6, 31, 35, 37, 39, 40, 41, 67, 74, 81, 83, 262, 307, 407, 409, 427], "neg": [6, 14, 18, 43, 61, 93, 119, 150, 151, 152, 205, 207, 210, 312, 313, 341, 394, 402], "nested_it": 6, "nextaft": 6, "nonzero": [6, 66, 81, 426, 436], "not_equ": [6, 89, 138, 139, 158, 159], "obj2sctyp": 6, "ones": [6, 31, 35, 37, 42, 79, 87, 88, 89, 93, 96, 133, 134, 142, 143, 187, 208, 308, 314, 374, 378, 382, 409, 411, 418, 427, 428], "ones_lik": [6, 31, 88, 134, 307, 428], "outer": [6, 85, 86, 156], "packbit": 6, "pad": [6, 83], "partit": [6, 36, 81, 146, 194, 306, 322, 344, 349, 350, 351, 352, 353, 354, 355, 357, 358, 363, 366, 393, 436], "percentil": [6, 192], "piecewis": 6, "place": [6, 54, 56, 93, 146, 191, 206, 209, 210, 211, 306, 317, 359, 377, 381, 397, 398, 400, 423, 436], "poli": 6, "polyadd": 6, "polyd": 6, "polydiv": 6, "polyfit": 6, "polyint": 6, "polymul": 6, "polysub": 6, "polyv": 6, "posit": [6, 14, 18, 33, 34, 51, 61, 81, 93, 117, 150, 151, 152, 160, 199, 205, 207, 210, 285, 303, 313, 315, 324, 348, 381, 382, 385, 394, 395, 409, 411], "power": [6, 92, 167, 395], "printopt": 6, "prod": [6, 81, 208, 436], "product": [6, 68, 69, 80, 85, 86, 147, 156, 167, 169, 173, 188, 200, 203, 208, 309, 314, 406, 424, 440], "promote_typ": 6, "ptp": [6, 436], "put": [6, 81, 318, 403, 436], "put_along_axi": [6, 317, 403], "putmask": [6, 317], "quantil": 6, "rad2deg": [6, 71, 72, 421], "radian": [6, 71, 72, 320, 421], "ravel": [6, 81, 170, 275, 436], "ravel_multi_index": 6, "real": [6, 24, 25, 51, 52, 61, 81, 109, 110, 111, 112, 113, 115, 117, 122, 124, 125, 142, 145, 160, 164, 165, 168, 172, 181, 187, 209, 210, 211, 315, 324, 341, 374, 385, 390, 394, 398, 400, 419, 423, 436, 440], "real_if_clos": 6, "recfromcsv": 6, "recfromtxt": 6, "reciproc": [6, 385, 394], "remaind": [6, 123, 124, 125, 126, 197, 313], "repeat": [6, 81, 164, 165, 407, 436], "resiz": [6, 93, 436], "result_typ": [6, 50, 83, 440], "right_shift": [6, 157], "rint": [6, 30, 383], "roll": [6, 382], "rollaxi": [6, 381], "root": [6, 51, 142, 374, 385, 394, 395], "rot90": 6, "round": [6, 30, 81, 122, 123, 375, 380, 419, 436, 440], "round_": 6, "row_stack": [6, 425], "safe_ev": 6, "save": 6, "savetxt": 6, "savez": 6, "savez_compress": 6, "sctype2char": 6, "searchsort": [6, 393, 436], "select": [6, 62, 396, 429], "set_numeric_op": 6, "set_printopt": 6, "set_string_funct": 6, "setbufs": 6, "setdiff1d": 6, "seterr": 6, "seterrcal": 6, "seterrobj": 6, "setxor1d": 6, "shares_memori": 6, "show_config": 6, "sign": [6, 57, 58, 61, 83, 162, 172, 210, 303, 312, 390, 400], "signbit": [6, 389], "sin": [6, 22, 64, 193, 392, 404], "sinc": 6, "sinh": [6, 23, 65, 391, 405], "sometru": 6, "sort": [6, 29, 81, 262, 285, 386, 403, 409, 429, 436, 440], "sort_complex": 6, "space": [6, 19, 135, 175, 186], "split": [6, 56, 82, 141, 384, 397, 425, 440], "sqrt": [6, 51, 81, 276, 289, 374, 385, 395], "squar": [6, 51, 142, 143, 160, 163, 164, 167, 172, 209, 211, 326, 342, 374, 385, 394, 398, 414, 417, 423], "squeez": [6, 81, 93, 436], "stack": [6, 55, 56, 82, 141, 162, 168, 172, 188, 384, 403, 425], "std": [6, 81, 191, 206, 209, 211, 423, 436], "subtract": 6, "swapax": [6, 81, 199, 436], "take": [6, 55, 81, 318, 377, 403, 436], "take_along_axi": [6, 27, 28, 29, 53, 318, 402], "tan": [6, 24, 25, 64, 391, 405], "tanh": [6, 26, 65, 392, 404], "tensordot": [6, 80, 147, 188], "tile": [6, 376, 440], "trace": [6, 73, 76, 436], "transpos": [6, 81, 160, 199, 213, 436, 440], "trapz": [6, 400], "tri": 6, "tril": [6, 73, 411, 413, 414, 417], "tril_indic": [6, 414, 417], "tril_indices_from": 6, "trim_zero": 6, "triu": [6, 73, 411, 416], "triu_indic": 6, "triu_indices_from": 6, "true_divid": [6, 79], "trunc": [6, 30, 52, 122, 380, 383], "typenam": 6, "union1d": 6, "uniqu": [6, 42, 43, 83, 187, 191, 199, 206, 209, 210, 211, 374, 398, 400, 423], "unpackbit": 6, "unravel_index": [6, 27, 28], "unwrap": [6, 71, 320], "vander": 6, "var": [6, 81, 191, 206, 209, 211, 398, 436], "vdot": [6, 80, 188], "vsplit": [6, 56], "vstack": [6, 55, 56, 82, 141, 384, 397], "where": [6, 11, 12, 13, 14, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 36, 40, 41, 42, 44, 45, 46, 47, 51, 52, 54, 57, 58, 61, 62, 64, 65, 78, 79, 81, 89, 91, 92, 93, 94, 95, 122, 123, 124, 125, 126, 138, 139, 142, 146, 148, 149, 150, 151, 152, 157, 158, 159, 160, 171, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 189, 190, 191, 194, 195, 196, 197, 200, 205, 206, 207, 208, 209, 210, 211, 258, 259, 279, 280, 281, 286, 296, 298, 302, 303, 305, 306, 312, 313, 314, 315, 322, 344, 349, 350, 351, 352, 353, 354, 355, 357, 358, 363, 366, 374, 375, 379, 380, 382, 385, 386, 389, 390, 391, 392, 394, 395, 398, 399, 400, 404, 405, 409, 418, 419, 423], "who": 6, "zero": [6, 14, 18, 27, 28, 31, 66, 74, 78, 81, 87, 88, 96, 102, 107, 122, 133, 134, 143, 168, 174, 187, 189, 191, 195, 199, 201, 202, 205, 206, 207, 209, 210, 211, 284, 304, 307, 308, 313, 315, 322, 324, 352, 354, 355, 357, 374, 389, 390, 398, 400, 411, 412, 415, 423, 428], "zeros_lik": [6, 31, 88, 134, 308, 427], "astyp": [6, 81, 135, 304], "byteswap": 6, "dump": 6, "fill": [6, 31, 81, 87, 88, 116, 133, 134, 268, 307, 308, 402, 411, 427, 428], "flatten": [6, 27, 28, 56, 73, 76, 81, 201, 202, 262, 274, 288, 304, 318, 371, 376, 381, 403], "getfield": [6, 83], "item": [6, 81, 429], "itemset": 6, "newbyteord": [6, 83], "setfield": [6, 83], "setflag": 6, "tobyt": 6, "tofil": [6, 129], "tolist": 6, "tostr": 6, "view": [6, 39, 40, 41, 48, 81, 93, 119, 120, 121, 199, 213, 291, 301, 318, 377, 396, 401, 409], "linalg": [6, 395], "choleski": 6, "cond": 6, "det": [6, 172], "eig": [6, 164, 165], "eigh": 6, "eigval": [6, 164], "eigvalsh": 6, "inv": 6, "lstsq": 6, "matrix_pow": [6, 395], "matrix_rank": 6, "multi_dot": 6, "norm": [6, 98, 99, 101, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 115, 161, 440], "pinv": 6, "qr": 6, "slogdet": [6, 162], "solv": [6, 440], "svd": [6, 168], "tensorinv": 6, "tensorsolv": 6, "fft": [6, 429, 440], "fft2": 6, "fftfreq": 6, "fftn": 6, "fftshift": 6, "hfft": 6, "ifft": 6, "ifft2": 6, "ifftn": 6, "ifftshift": 6, "ihfft": 6, "irfft": 6, "irfft2": 6, "irfftn": 6, "rfft": 6, "rfft2": 6, "rfftfreq": 6, "rfftn": 6, "beta": [6, 333], "binomi": [6, 341], "byte": [6, 81, 83, 263, 278, 282], "chisquar": 6, "choic": [6, 53, 81, 264], "default_rng": 6, "dirichlet": 6, "exponenti": [6, 91, 92, 94, 177, 181, 187, 335, 361], "gamma": [6, 362], "geometr": [6, 135, 175], "get_stat": [6, 322], "gumbel": 6, "hypergeometr": 6, "laplac": 6, "logist": 6, "lognorm": 6, "logseri": 6, "multinomi": 6, "multivariate_norm": 6, "negative_binomi": 6, "noncentral_chisquar": 6, "noncentral_f": 6, "normal": [6, 67, 164, 322, 337, 340, 351, 363], "pareto": 6, "permut": [6, 81, 199, 301, 409, 440], "poisson": 6, "rand": [6, 322, 352, 354, 355, 357], "randint": [6, 81, 277, 322, 353], "randn": [6, 119, 120, 121, 174, 322, 397], "random_integ": [6, 322, 350], "random_sampl": [6, 322, 349, 352, 355, 357], "ranf": 6, "rayleigh": 6, "seed": [6, 81, 277, 322], "set_stat": 6, "shuffl": 6, "standard_cauchi": 6, "standard_exponenti": 6, "standard_gamma": 6, "standard_norm": [6, 322, 351], "standard_t": 6, "triangular": [6, 160, 171], "uniform": [6, 83, 322, 349, 352, 354, 355, 357], "vonmis": 6, "wald": 6, "weibul": [6, 370], "zipf": 6, "show": [9, 83, 142, 185, 193, 205, 207, 210, 360], "constant": [9, 83], "alias": 9, "bool": [9, 14, 18, 27, 28, 36, 42, 50, 62, 81, 83, 89, 98, 104, 112, 138, 139, 150, 151, 152, 158, 159, 168, 170, 187, 189, 191, 195, 201, 202, 205, 206, 207, 209, 210, 211, 263, 304, 305, 374, 377, 398, 400, 423], "complex64": [9, 42, 98, 104], "complex128": [9, 42, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 378], "bool_": 9, "cdoubl": 9, "complex": [9, 11, 12, 24, 25, 50, 57, 58, 80, 81, 83, 90, 117, 145, 164, 165, 172, 174, 187, 188, 209, 210, 211, 266, 267, 315, 372, 374, 389, 394, 398, 400, 423, 436, 440], "cfloat": 9, "csingl": 9, "doubl": [9, 335], "float": [9, 15, 24, 33, 34, 36, 42, 50, 61, 83, 92, 117, 137, 168, 170, 175, 186, 187, 189, 191, 195, 206, 209, 210, 211, 322, 326, 351, 352, 354, 355, 357, 360, 361, 363, 366, 374, 385, 398, 400, 423, 436, 440], "float_": 9, "float16": 9, "int": [9, 27, 28, 36, 42, 43, 49, 56, 74, 78, 81, 83, 89, 93, 96, 117, 119, 135, 137, 144, 146, 187, 189, 191, 195, 199, 201, 202, 205, 206, 207, 209, 210, 211, 262, 263, 310, 314, 318, 322, 350, 353, 374, 376, 377, 381, 382, 383, 388, 396, 397, 398, 400, 401, 403, 407, 409, 411, 413, 414, 416, 417, 423, 436], "int_": 9, "intc": 9, "singl": [9, 49, 55, 81, 169, 295, 322, 341, 350, 351, 352, 353, 354, 355, 357, 363, 436], "singlecomplex": 9, "e": [9, 21, 23, 81, 83, 93, 172, 177, 297, 322, 401], "euler_gamma": 9, "inf": [9, 15, 25, 33, 34, 61, 79, 150, 151, 152, 161, 170, 177, 178, 180, 190, 196, 201, 202, 205, 207, 210, 315, 394, 418], "infin": [9, 14, 18, 122, 123, 150, 151, 152, 205, 207, 210, 375, 419, 440], "infti": 9, "nan": [9, 14, 15, 18, 27, 28, 33, 34, 79, 124, 125, 150, 151, 152, 178, 189, 190, 191, 195, 196, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 313, 314, 315, 394, 398, 418, 423, 440], "ninf": [9, 205, 207, 210], "nzero": 9, "pi": [9, 25, 64, 65, 72, 391, 392, 404, 405, 421], "pinf": 9, "pzero": 9, "out": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 64, 65, 66, 67, 72, 73, 76, 78, 79, 80, 81, 82, 89, 90, 91, 92, 93, 94, 95, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 135, 138, 139, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 157, 158, 159, 169, 173, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 199, 200, 201, 202, 205, 206, 207, 208, 209, 210, 211, 258, 259, 260, 261, 264, 265, 268, 269, 275, 279, 280, 281, 286, 292, 296, 298, 300, 302, 303, 304, 305, 306, 309, 312, 313, 314, 315, 316, 321, 322, 344, 349, 350, 351, 352, 353, 354, 355, 357, 363, 366, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 411, 418, 419, 421, 422, 423, 425], "none": [11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 56, 57, 58, 61, 64, 65, 66, 67, 68, 73, 76, 78, 79, 80, 81, 83, 84, 87, 88, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 119, 122, 123, 124, 125, 126, 133, 134, 135, 138, 139, 140, 141, 142, 143, 146, 148, 150, 151, 152, 157, 158, 159, 161, 168, 169, 170, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 200, 201, 202, 205, 206, 207, 208, 209, 210, 211, 258, 259, 260, 261, 262, 264, 265, 269, 277, 279, 280, 281, 285, 286, 287, 290, 292, 295, 296, 298, 300, 302, 303, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 374, 375, 376, 377, 379, 380, 381, 383, 384, 385, 386, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 402, 403, 404, 405, 408, 409, 410, 411, 413, 416, 418, 419, 422, 423, 425, 426, 427, 428, 436], "order": [11, 12, 13, 20, 21, 22, 23, 24, 25, 26, 29, 31, 33, 34, 35, 37, 38, 44, 45, 46, 47, 51, 52, 54, 57, 58, 60, 61, 64, 65, 79, 81, 83, 85, 86, 87, 88, 89, 91, 92, 94, 96, 119, 120, 121, 122, 123, 133, 134, 138, 139, 142, 148, 150, 151, 152, 157, 158, 159, 164, 165, 170, 177, 178, 179, 180, 181, 182, 183, 184, 185, 188, 190, 196, 197, 199, 200, 218, 262, 263, 268, 275, 285, 288, 303, 305, 307, 308, 310, 312, 313, 315, 371, 375, 377, 379, 380, 385, 386, 389, 390, 391, 392, 394, 395, 399, 404, 405, 409, 418, 419, 427, 428, 440], "k": [11, 12, 13, 20, 21, 22, 23, 24, 25, 26, 31, 44, 45, 46, 47, 51, 52, 54, 57, 58, 60, 61, 64, 65, 73, 76, 79, 81, 89, 91, 92, 94, 96, 122, 123, 138, 139, 142, 148, 150, 151, 152, 157, 158, 159, 173, 177, 178, 179, 180, 181, 182, 183, 184, 185, 188, 190, 196, 197, 200, 218, 263, 268, 275, 303, 305, 312, 313, 315, 375, 379, 380, 385, 389, 390, 391, 392, 394, 395, 399, 404, 405, 411, 412, 413, 414, 415, 416, 417, 418, 419, 444], "subok": [11, 12, 13, 20, 21, 22, 23, 24, 25, 26, 31, 44, 45, 46, 47, 48, 49, 51, 52, 57, 58, 60, 61, 64, 65, 79, 81, 88, 89, 91, 92, 94, 122, 123, 124, 125, 126, 134, 138, 139, 142, 148, 150, 151, 152, 157, 158, 159, 177, 178, 179, 180, 181, 182, 183, 184, 185, 188, 190, 196, 197, 200, 263, 303, 305, 308, 312, 313, 315, 375, 379, 380, 385, 389, 390, 391, 392, 394, 395, 399, 404, 405, 418, 419, 428], "kwarg": [11, 12, 13, 15, 20, 21, 22, 23, 24, 25, 26, 44, 45, 46, 47, 51, 52, 54, 57, 58, 61, 64, 65, 68, 69, 70, 79, 80, 81, 85, 89, 91, 92, 94, 97, 122, 123, 124, 125, 126, 128, 129, 130, 132, 137, 138, 139, 142, 147, 148, 150, 151, 152, 157, 158, 159, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 190, 196, 197, 198, 200, 203, 204, 247, 265, 291, 303, 305, 312, 313, 315, 373, 375, 379, 380, 385, 389, 390, 391, 392, 393, 394, 395, 399, 404, 405, 406, 410, 411, 418, 419, 420, 424], "calcul": [11, 12, 42, 70, 78, 84, 91, 92, 94, 97, 122, 124, 125, 137, 181, 187, 191, 197, 206, 209, 210, 211, 313, 374, 375, 394, 398, 423, 429], "valu": [11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 37, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 77, 78, 79, 81, 83, 84, 87, 88, 89, 91, 92, 94, 95, 96, 97, 98, 104, 116, 117, 118, 122, 123, 124, 125, 126, 130, 133, 134, 138, 139, 142, 143, 146, 148, 150, 151, 152, 157, 158, 159, 160, 165, 168, 170, 172, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 189, 190, 191, 192, 193, 195, 196, 197, 200, 201, 202, 205, 206, 207, 208, 209, 210, 211, 215, 216, 219, 221, 222, 224, 225, 226, 227, 228, 229, 230, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 248, 250, 252, 253, 254, 255, 256, 257, 260, 261, 263, 265, 268, 272, 274, 285, 287, 303, 304, 305, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 322, 332, 349, 350, 366, 374, 375, 376, 377, 379, 380, 381, 383, 385, 386, 387, 389, 390, 391, 392, 394, 395, 398, 399, 400, 402, 403, 404, 405, 406, 408, 418, 419, 421, 423, 427, 428, 436, 440], "wise": [11, 12, 13, 15, 20, 21, 22, 23, 24, 25, 26, 30, 32, 44, 45, 46, 47, 51, 52, 55, 56, 57, 58, 61, 64, 65, 79, 81, 82, 89, 91, 92, 94, 97, 122, 124, 125, 126, 138, 139, 141, 145, 148, 149, 150, 151, 152, 157, 158, 159, 166, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 189, 190, 195, 196, 197, 198, 200, 205, 207, 208, 267, 303, 305, 312, 313, 315, 372, 373, 375, 379, 380, 383, 384, 385, 389, 390, 391, 392, 394, 395, 397, 399, 404, 405, 418, 419, 425, 436], "contain": [11, 12, 14, 18, 19, 27, 28, 44, 45, 46, 47, 54, 62, 81, 83, 127, 136, 146, 148, 157, 164, 187, 189, 191, 195, 201, 202, 205, 206, 207, 209, 210, 211, 291, 322, 374, 379, 394, 398, 400, 409, 413, 416, 423, 436], "paramet": [11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 133, 134, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 157, 158, 159, 160, 161, 162, 164, 165, 167, 168, 169, 170, 171, 172, 173, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 262, 263, 272, 275, 291, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 322, 323, 324, 326, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 423, 425, 426, 427, 428], "onli": [11, 12, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 33, 34, 35, 37, 39, 42, 51, 52, 54, 57, 58, 60, 63, 64, 65, 67, 73, 76, 77, 81, 83, 84, 87, 88, 91, 92, 94, 96, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 122, 128, 129, 130, 131, 132, 133, 134, 145, 146, 150, 151, 152, 157, 160, 175, 176, 177, 178, 179, 180, 183, 189, 191, 192, 193, 195, 201, 202, 205, 206, 207, 208, 209, 211, 263, 303, 307, 308, 310, 312, 314, 315, 317, 322, 344, 350, 366, 372, 377, 379, 380, 383, 385, 386, 387, 389, 390, 391, 392, 398, 402, 403, 404, 405, 406, 408, 411, 412, 415, 419, 422, 423, 426, 427, 428, 436], "either": [11, 12, 13, 14, 15, 18, 20, 21, 22, 23, 24, 25, 26, 30, 37, 42, 44, 45, 46, 47, 51, 52, 57, 58, 61, 64, 65, 66, 79, 80, 83, 89, 91, 92, 94, 95, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 122, 123, 124, 125, 126, 138, 139, 142, 145, 148, 149, 150, 151, 152, 157, 158, 159, 170, 173, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 193, 195, 196, 197, 200, 201, 202, 205, 207, 208, 210, 303, 304, 305, 309, 311, 312, 313, 314, 315, 317, 358, 372, 374, 375, 379, 380, 383, 385, 389, 390, 391, 392, 394, 395, 399, 400, 402, 403, 404, 405, 418, 419, 426], "tensor": [11, 12, 13, 14, 15, 18, 20, 21, 22, 23, 24, 25, 26, 30, 36, 44, 45, 46, 47, 51, 52, 57, 58, 61, 64, 65, 66, 79, 80, 81, 88, 89, 91, 92, 94, 95, 122, 123, 124, 125, 126, 134, 138, 139, 142, 145, 147, 148, 150, 151, 152, 157, 158, 159, 164, 173, 177, 178, 179, 180, 181, 182, 183, 184, 185, 188, 189, 190, 193, 195, 196, 197, 200, 201, 202, 205, 207, 208, 303, 304, 305, 308, 309, 311, 312, 313, 314, 315, 316, 317, 372, 375, 379, 380, 383, 385, 389, 390, 391, 392, 394, 395, 399, 402, 404, 405, 406, 412, 415, 418, 419, 426, 428], "usm_ndarrai": [11, 12, 13, 14, 15, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 36, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 61, 62, 64, 65, 66, 78, 79, 80, 81, 82, 88, 89, 91, 92, 93, 94, 95, 119, 120, 121, 122, 123, 124, 125, 126, 134, 138, 139, 141, 142, 145, 148, 150, 151, 152, 157, 158, 159, 162, 164, 172, 173, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 193, 195, 196, 197, 199, 200, 201, 202, 205, 206, 207, 208, 209, 210, 211, 263, 303, 304, 305, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 409, 412, 415, 418, 419, 423, 425, 426, 428], "keyword": [11, 12, 13, 15, 20, 21, 22, 23, 24, 25, 26, 44, 45, 46, 47, 51, 52, 54, 61, 64, 65, 68, 69, 70, 79, 80, 84, 91, 92, 94, 97, 122, 123, 124, 125, 126, 137, 142, 147, 148, 157, 178, 179, 180, 181, 188, 190, 196, 197, 198, 200, 203, 204, 303, 312, 313, 315, 373, 375, 379, 380, 385, 389, 390, 391, 392, 393, 399, 404, 405, 406, 410, 411, 418, 419, 436], "argument": [11, 12, 13, 15, 20, 21, 22, 23, 24, 25, 26, 44, 45, 46, 47, 50, 51, 52, 54, 56, 61, 64, 65, 68, 69, 70, 79, 80, 81, 83, 84, 90, 91, 92, 94, 97, 122, 123, 124, 125, 126, 137, 142, 145, 147, 148, 154, 155, 157, 166, 169, 178, 179, 180, 181, 188, 190, 196, 197, 198, 200, 203, 204, 262, 291, 303, 312, 313, 315, 372, 373, 375, 378, 379, 380, 385, 389, 390, 391, 392, 393, 397, 399, 404, 405, 406, 410, 411, 418, 419, 436], "unsupport": [11, 12, 13, 15, 20, 21, 22, 23, 24, 25, 26, 44, 45, 46, 47, 51, 52, 54, 61, 64, 65, 68, 69, 70, 79, 80, 91, 92, 94, 97, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 122, 123, 124, 125, 126, 137, 142, 147, 148, 157, 169, 178, 179, 180, 181, 188, 190, 196, 197, 198, 200, 203, 204, 303, 312, 313, 315, 373, 375, 379, 380, 385, 389, 390, 391, 392, 393, 399, 404, 405, 406, 410, 411, 418, 419], "sequenti": [11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 44, 45, 46, 47, 51, 52, 57, 58, 61, 63, 64, 65, 67, 68, 69, 70, 77, 79, 80, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 122, 123, 124, 125, 126, 133, 134, 137, 138, 139, 142, 143, 147, 148, 149, 150, 151, 152, 157, 158, 159, 166, 177, 178, 179, 180, 181, 182, 183, 184, 185, 190, 192, 193, 196, 197, 198, 200, 203, 204, 208, 303, 304, 305, 307, 308, 309, 311, 312, 313, 314, 317, 373, 375, 379, 380, 383, 385, 389, 390, 391, 392, 393, 394, 395, 399, 402, 404, 405, 406, 410, 411, 412, 415, 418, 419, 426, 427, 428], "exclud": [11, 12, 322, 366], "note": [11, 12, 13, 14, 18, 27, 28, 30, 38, 60, 71, 79, 81, 83, 93, 122, 146, 150, 170, 186, 197, 200, 209, 210, 211, 262, 268, 291, 304, 317, 320, 325, 327, 328, 338, 343, 377, 398, 399, 401, 402, 407, 418, 423, 424], "shorthand": [11, 12, 13, 44, 45, 46, 47, 79, 89, 123, 138, 139, 148, 157, 158, 159, 182, 184, 188, 200, 303, 305, 312, 313, 375, 379, 399, 418, 426], "1j": [11, 12, 57, 58, 81, 145, 174, 276, 289, 372, 395], "5620499351813308": [11, 12], "x1": [13, 15, 24, 25, 43, 44, 46, 47, 53, 61, 63, 68, 69, 70, 71, 72, 75, 77, 79, 80, 81, 84, 88, 89, 97, 116, 123, 124, 125, 126, 134, 137, 138, 139, 142, 147, 149, 156, 157, 158, 159, 163, 170, 171, 174, 181, 182, 183, 184, 185, 188, 190, 192, 193, 196, 197, 198, 200, 203, 204, 263, 303, 305, 308, 309, 310, 312, 313, 319, 320, 321, 359, 373, 375, 379, 381, 386, 393, 399, 406, 408, 410, 412, 414, 415, 417, 418, 421, 422, 428], "x2": [13, 14, 15, 18, 24, 25, 31, 44, 46, 47, 61, 63, 68, 79, 80, 89, 123, 124, 125, 126, 138, 139, 142, 147, 149, 156, 157, 158, 159, 181, 182, 183, 184, 185, 188, 190, 193, 196, 197, 200, 303, 304, 305, 309, 312, 313, 375, 379, 381, 386, 394, 399, 406, 418], "scalar": [13, 15, 25, 36, 44, 46, 47, 50, 61, 62, 78, 79, 80, 81, 83, 89, 123, 124, 125, 126, 138, 139, 142, 153, 157, 158, 159, 173, 181, 182, 184, 185, 188, 190, 193, 196, 197, 200, 272, 277, 305, 309, 313, 318, 322, 323, 324, 326, 329, 330, 331, 332, 333, 334, 335, 336, 337, 341, 344, 345, 347, 348, 350, 353, 356, 358, 362, 364, 365, 366, 367, 368, 369, 370, 375, 379, 399, 418, 426, 436], "both": [13, 15, 25, 42, 44, 46, 47, 54, 61, 79, 80, 89, 123, 124, 125, 126, 138, 139, 142, 157, 158, 159, 170, 181, 182, 184, 185, 190, 196, 197, 200, 210, 305, 309, 313, 375, 379, 399, 418], "equival": [13, 14, 16, 17, 18, 27, 28, 30, 42, 60, 79, 81, 82, 93, 187, 200, 218, 258, 259, 291, 301, 312, 321, 322, 350, 374, 377, 383, 388, 399, 400, 409, 418, 436], "term": [13, 79, 200, 399, 418], "broadcast": [13, 42, 48, 49, 54, 62, 79, 124, 125, 142, 170, 182, 184, 185, 187, 188, 190, 191, 196, 200, 206, 209, 210, 211, 313, 317, 318, 374, 376, 398, 399, 400, 403, 407, 418, 423], "b": [13, 15, 27, 28, 44, 47, 55, 56, 62, 69, 70, 80, 82, 83, 84, 89, 126, 138, 139, 141, 147, 158, 159, 162, 172, 173, 174, 182, 184, 188, 189, 195, 203, 204, 305, 309, 313, 323, 384, 397, 406, 407, 410, 425], "7": [13, 15, 19, 39, 52, 54, 62, 66, 70, 73, 74, 78, 79, 81, 84, 91, 119, 122, 135, 137, 149, 174, 192, 200, 204, 277, 304, 315, 316, 322, 346, 372, 375, 378, 380, 381, 399, 400, 401, 402, 406, 412, 415, 418, 419, 426], "oper": [13, 44, 45, 46, 47, 79, 83, 89, 93, 123, 138, 139, 148, 157, 158, 159, 160, 182, 183, 184, 185, 188, 200, 303, 305, 312, 313, 317, 375, 379, 399, 407, 418, 429, 440], "axi": [14, 16, 17, 18, 27, 28, 29, 42, 55, 56, 66, 68, 69, 70, 78, 81, 82, 84, 93, 98, 103, 104, 108, 109, 112, 119, 120, 121, 124, 125, 135, 137, 141, 146, 170, 175, 186, 187, 189, 190, 191, 192, 195, 196, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 258, 259, 260, 261, 262, 269, 279, 280, 281, 285, 286, 287, 290, 295, 296, 298, 300, 302, 310, 314, 316, 317, 318, 371, 374, 376, 377, 381, 382, 384, 396, 397, 398, 400, 401, 402, 403, 407, 409, 410, 423, 425, 436], "keepdim": [14, 16, 17, 18, 27, 28, 42, 66, 81, 170, 187, 189, 191, 192, 195, 201, 202, 205, 206, 207, 208, 209, 210, 211, 258, 259, 260, 261, 279, 280, 281, 286, 296, 298, 302, 314, 316, 318, 374, 398, 400, 403, 423], "fals": [14, 15, 16, 17, 18, 27, 28, 31, 32, 35, 37, 42, 44, 45, 47, 48, 49, 50, 60, 66, 67, 81, 83, 88, 89, 116, 134, 135, 138, 139, 146, 148, 149, 150, 151, 152, 158, 159, 168, 170, 174, 175, 182, 183, 184, 185, 186, 187, 189, 191, 192, 193, 195, 201, 202, 205, 206, 207, 208, 209, 210, 211, 258, 259, 260, 261, 263, 279, 280, 281, 286, 296, 298, 302, 305, 308, 314, 316, 374, 377, 390, 398, 400, 422, 423, 428], "whether": [14, 15, 18, 83, 160, 175, 377], "given": [14, 18, 19, 27, 28, 30, 31, 42, 55, 60, 66, 67, 69, 70, 78, 80, 81, 82, 83, 84, 87, 88, 116, 119, 124, 125, 133, 134, 137, 142, 189, 190, 193, 195, 196, 203, 204, 205, 207, 208, 209, 210, 211, 260, 261, 262, 263, 269, 281, 286, 287, 292, 296, 298, 302, 307, 308, 314, 316, 317, 322, 327, 349, 366, 374, 376, 380, 381, 382, 383, 384, 398, 400, 407, 410, 411, 423, 425, 427, 428, 436], "evalu": [14, 15, 18, 81, 85, 86, 89, 147, 193, 258, 259, 309, 406], "logic": [14, 18, 182, 184, 185, 429, 440], "AND": [14, 44, 45, 46, 47, 148, 182, 183, 184, 185], "reduct": [14, 18], "method": [14, 16, 17, 18, 60, 81, 83, 118, 127, 129, 168, 263, 268, 291, 322, 377, 388, 400, 409, 429], "Not": [14, 18, 81, 150, 203, 205, 207, 208, 210, 262, 314], "number": [14, 18, 19, 30, 42, 43, 48, 49, 57, 58, 66, 78, 81, 83, 93, 117, 122, 123, 135, 144, 150, 161, 168, 170, 172, 175, 176, 186, 203, 205, 207, 208, 209, 210, 211, 283, 292, 293, 294, 304, 314, 315, 322, 324, 334, 358, 375, 376, 380, 381, 382, 383, 389, 390, 398, 401, 407, 409, 419, 423, 440], "becaus": [14, 18], "x3": [14, 18], "rtol": [15, 149], "1e": [15, 94, 149, 178, 179, 181, 340], "05": [15, 149], "atol": [15, 149], "08": [15, 64, 149, 340, 391], "two": [15, 32, 39, 40, 44, 45, 46, 47, 59, 63, 68, 76, 78, 81, 83, 85, 86, 147, 148, 149, 156, 164, 169, 173, 182, 184, 185, 188, 189, 190, 195, 196, 199, 205, 207, 285, 299, 309, 322, 351, 401, 412, 413, 415, 416, 424], "within": [15, 19, 32, 81, 149, 263, 317, 322, 366], "toler": [15, 32, 149], "A": [15, 36, 48, 49, 51, 54, 55, 61, 62, 81, 83, 92, 93, 119, 120, 121, 127, 129, 132, 146, 165, 172, 194, 208, 210, 263, 268, 275, 293, 306, 314, 322, 324, 341, 344, 349, 350, 351, 352, 353, 354, 355, 357, 358, 363, 366, 371, 376, 385, 390, 401, 407, 409], "boolean": [15, 44, 46, 47, 62, 83, 146, 149, 150, 151, 152, 182, 183, 184, 185, 187, 191, 206, 208, 209, 210, 211, 374, 377, 390, 398, 400, 402, 423], "dim": 15, "typeerror": [15, 42, 62, 66, 73, 76, 98, 104, 112, 422], "rais": [15, 31, 33, 34, 35, 37, 48, 49, 53, 54, 60, 62, 66, 73, 76, 81, 92, 98, 104, 112, 167, 187, 189, 191, 195, 201, 202, 205, 206, 207, 209, 210, 211, 263, 264, 293, 313, 374, 377, 395, 396, 398, 400, 422, 423], "integ": [15, 30, 42, 44, 45, 46, 47, 49, 73, 76, 83, 122, 123, 144, 148, 149, 157, 167, 170, 187, 189, 191, 195, 205, 206, 207, 209, 210, 211, 313, 317, 322, 350, 353, 358, 374, 375, 377, 379, 380, 383, 395, 398, 400, 402, 411, 412, 415, 419, 422, 423, 436], "1e10": [15, 149], "00001e10": [15, 149], "initi": [16, 17, 81, 87, 132, 189, 195, 205, 207, 208, 210, 279, 281, 286, 298, 314, 322, 400], "alia": [16, 17, 79, 117, 212, 322, 352, 355, 357, 384, 418, 425], "OR": [18, 44, 45, 46, 47, 148, 182, 183, 184, 185], "stop": [19, 135, 175, 186], "like": [19, 31, 33, 34, 35, 37, 39, 40, 41, 55, 81, 82, 87, 96, 133, 143, 176, 263, 307, 322, 366, 377, 427, 440], "usm_typ": [19, 31, 33, 34, 35, 36, 37, 73, 76, 81, 87, 88, 96, 133, 134, 135, 143, 146, 175, 186, 194, 306, 307, 308, 322, 344, 349, 350, 351, 352, 353, 354, 355, 357, 363, 366, 411, 422, 427, 428], "sycl_queu": [19, 31, 33, 34, 35, 36, 37, 73, 76, 81, 87, 88, 96, 133, 134, 135, 143, 146, 175, 186, 194, 306, 307, 308, 322, 344, 349, 350, 351, 352, 353, 354, 355, 357, 358, 363, 366, 411, 422, 427, 428], "evenli": [19, 135, 175, 186, 380, 383], "interv": [19, 93, 175, 322, 350, 352, 354, 355, 357, 365, 366, 401], "d": [19, 42, 55, 56, 73, 74, 76, 82, 83, 96, 99, 100, 101, 105, 106, 110, 111, 113, 114, 115, 120, 121, 132, 141, 143, 162, 164, 169, 170, 172, 188, 193, 304, 313, 317, 327, 371, 377, 384, 388, 397, 402, 407, 425, 426, 436], "care": 19, "handl": [19, 83, 304, 402, 440], "endpoint": [19, 135, 175, 186], "trigonometr": [20, 21, 22, 23, 24, 25, 26, 64, 65, 391, 392, 404, 405, 440], "invers": [20, 21, 22, 23, 24, 25, 26, 45, 64, 65, 92, 93, 94, 104, 105, 106, 107, 108, 109, 110, 111, 148, 177, 179, 368, 391, 392, 404, 405], "cosin": [20, 21, 22, 23, 24, 25, 26, 64, 65, 391, 392, 404, 405], "tangent": [20, 21, 22, 23, 24, 25, 26, 64, 65, 391, 392, 404, 405], "sine": [20, 21, 22, 23, 24, 25, 26, 64, 65, 391, 392, 404, 405], "hyperbol": [20, 21, 22, 23, 24, 25, 26, 64, 65, 391, 392, 404, 405, 440], "14159265": [20, 25], "65745445": 21, "99322285": 21, "5707963267948966": 22, "72538256": 23, "99822295": 23, "point": [24, 33, 34, 42, 61, 83, 92, 117, 175, 187, 191, 206, 209, 210, 211, 322, 351, 363, 374, 385, 398, 400, 423, 440], "arc": [24, 25], "quadrant": [24, 25], "correctli": [24, 25, 170, 304], "78539816": [24, 25, 421], "57079633": [25, 321, 421], "180": 25, "135": 25, "45": 25, "54930614": 26, "dpnp_arrai": [27, 28, 54, 88, 117, 127, 134, 144, 146, 187, 189, 193, 194, 195, 201, 202, 205, 207, 211, 212, 306, 308, 316, 322, 344, 349, 350, 351, 352, 353, 354, 355, 357, 358, 363, 366, 371, 374, 376, 398, 412, 415, 423, 428, 429], "option": [27, 28, 36, 42, 50, 51, 54, 56, 61, 62, 78, 81, 83, 92, 119, 141, 146, 168, 169, 170, 175, 187, 189, 191, 194, 195, 201, 202, 205, 206, 207, 209, 210, 211, 262, 263, 275, 306, 322, 344, 349, 350, 351, 352, 353, 354, 355, 357, 358, 363, 366, 371, 374, 376, 377, 381, 382, 384, 385, 396, 397, 398, 400, 402, 409, 413, 414, 416, 417, 423, 425], "search": [27, 28, 201, 202, 429, 440], "must": [27, 28, 42, 49, 51, 54, 55, 56, 61, 78, 82, 92, 93, 95, 120, 141, 160, 169, 170, 176, 187, 189, 191, 195, 199, 201, 202, 205, 206, 207, 209, 210, 211, 317, 318, 374, 381, 384, 385, 397, 398, 400, 401, 403, 409, 423, 425], "index": [27, 28, 53, 81, 83, 146, 193, 201, 202, 264, 297, 317, 318, 371, 377, 402, 403, 429, 440], "should": [27, 28, 81, 136, 149, 187, 189, 195, 199, 201, 202, 205, 207, 262, 263, 339, 374, 377, 386, 436], "reduc": [27, 28, 42, 171, 174, 187, 189, 191, 195, 201, 202, 205, 206, 207, 209, 210, 211, 374, 398, 400, 423], "ax": [27, 28, 42, 78, 80, 81, 93, 99, 101, 102, 105, 106, 107, 110, 111, 113, 115, 119, 147, 170, 173, 187, 188, 189, 191, 195, 199, 201, 202, 205, 206, 207, 209, 210, 211, 293, 299, 301, 374, 381, 382, 396, 398, 400, 401, 406, 407, 409, 423], "dimens": [27, 28, 31, 39, 40, 41, 42, 55, 56, 62, 67, 74, 78, 81, 83, 93, 120, 121, 141, 146, 166, 170, 187, 189, 191, 194, 195, 199, 201, 202, 205, 206, 207, 209, 210, 211, 275, 283, 293, 306, 318, 322, 352, 354, 355, 357, 374, 377, 388, 393, 396, 397, 398, 400, 401, 403, 407, 412, 413, 414, 415, 416, 417, 423, 436, 440], "singleton": [27, 28, 42, 93, 187, 189, 191, 195, 201, 202, 205, 206, 207, 209, 210, 211, 374, 396, 398, 400, 423], "accordingli": [27, 28, 189, 195, 201, 202, 205, 207], "first": [27, 28, 42, 55, 56, 61, 81, 83, 92, 119, 154, 155, 169, 189, 195, 201, 202, 262, 313, 371, 377, 381, 384, 395, 401, 403, 425], "occurr": [27, 28, 43, 201, 202], "non": [27, 28, 36, 42, 43, 66, 81, 146, 150, 164, 189, 194, 195, 201, 202, 205, 207, 209, 211, 284, 304, 306, 313, 322, 344, 349, 350, 351, 352, 353, 354, 355, 357, 358, 363, 366, 394], "igonr": [27, 28, 201, 202], "convert": [27, 28, 33, 34, 35, 36, 37, 39, 40, 41, 71, 72, 83, 320, 321, 421], "flat": [27, 28, 81, 118, 275, 376], "tupl": [27, 28, 42, 49, 74, 81, 83, 93, 119, 146, 170, 187, 189, 191, 194, 195, 205, 206, 207, 209, 210, 211, 293, 304, 306, 374, 377, 381, 388, 396, 398, 400, 407, 409, 413, 416, 423, 436], "appli": [27, 28, 29, 42, 50, 182, 184, 185, 378], "index_arrai": [27, 28, 29, 81, 262], "call": [27, 28, 29, 35, 37, 83, 169, 218, 396, 407, 426], "multipl": [27, 28, 29, 42, 56, 81, 83, 141, 164, 165, 187, 189, 191, 195, 205, 206, 207, 209, 210, 211, 262, 374, 384, 393, 397, 398, 400, 423, 425, 429], "11": [27, 28, 42, 65, 74, 81, 137, 291, 341, 350, 383, 392, 412, 415], "14": [27, 28, 44, 45, 74, 80, 148, 406], "24": [27, 28, 69, 84, 314], "re": [27, 28, 43, 140, 381, 420], "in_array1": [29, 90], "kind": [29, 50, 56, 62, 81, 83, 117, 141, 187, 210, 262, 263, 285, 310, 374, 384, 397, 400, 425, 440], "would": [29, 56, 81, 83, 146, 285, 322, 397, 409], "describ": [29, 81, 83, 170, 187, 210, 262, 374, 400, 440], "algorithm": [29, 81, 262], "indirect": [29, 81, 262, 393], "stabl": [29, 81, 262, 393], "partial": [29, 393], "decim": [30, 81, 117, 292, 380, 383], "detail": [30, 127, 383, 413, 414, 416, 417, 436], "nearest": [30, 122, 123, 375, 380, 383, 419], "truncat": [30, 52, 122, 360, 380, 383, 419], "ndmin": 31, "object": [31, 34, 35, 36, 37, 60, 81, 83, 93, 117, 118, 127, 131, 144, 146, 160, 164, 170, 176, 194, 291, 306, 322, 344, 349, 350, 351, 352, 353, 354, 355, 357, 358, 363, 366, 377, 436], "satisfi": [31, 35, 37, 81, 95, 263], "specifi": [31, 35, 42, 49, 50, 56, 73, 76, 77, 81, 119, 135, 147, 170, 175, 186, 187, 191, 192, 206, 208, 209, 210, 211, 262, 270, 314, 322, 335, 345, 363, 371, 374, 381, 382, 397, 398, 400, 406, 409, 423], "valueerror": [31, 33, 34, 35, 37, 60, 201, 202, 377, 396], "new": [31, 48, 49, 55, 56, 81, 82, 83, 87, 88, 93, 127, 131, 132, 133, 134, 141, 143, 199, 208, 263, 291, 301, 307, 308, 314, 377, 381, 382, 384, 397, 407, 409, 425, 427, 428, 436], "uniniti": [31, 88, 133, 307, 427], "than": [31, 81, 117, 120, 121, 141, 168, 285, 389, 390, 396, 397], "a1": 32, "a2": 32, "equal_nan": [32, 149], "consist": [32, 403], "contigu": [33, 34, 35, 37, 81, 275, 288, 371, 377], "check": [33, 34, 50, 160, 173], "construct": [33, 34, 53, 73, 76, 81, 83, 129, 130, 194, 264, 306, 376, 407, 429], "grid": [33, 34, 146, 193, 194, 306], "No": [34, 160], "perform": [34, 54, 78, 119, 160], "match": [34, 56, 62, 78, 83, 317, 318, 397, 402, 403], "pass": [34, 81, 83, 291], "through": [34, 83, 436], "subclass": [34, 155], "content": [35, 81, 359], "flag": [35, 37, 81, 83, 268], "about": [35, 37, 81, 117, 273, 436], "layout": [35, 37, 51, 54, 61, 81, 92, 273, 377, 385, 429], "f_contigu": [35, 37], "make": [35, 37, 55, 83, 193], "now": [35, 37, 74], "c_contigu": [35, 37, 81, 268], "Then": [35, 37], "array_lik": [36, 42, 62, 160, 165, 167, 168, 169, 170, 318, 322, 388, 414, 417], "form": [36, 55, 82, 384, 425], "repres": [36, 42, 81, 83, 127, 146, 172, 211, 293, 322, 436], "usm": [36, 146, 194, 306, 322, 344, 349, 350, 351, 352, 353, 354, 355, 357, 363, 366, 396], "__sycl_usm_array_interface__": 36, "protocol": [36, 83, 127], "buffer": [36, 81, 128, 377], "possibli": 36, "nest": [36, 82, 141, 384, 397, 425], "sequenc": [36, 39, 40, 41, 55, 56, 59, 63, 82, 141, 146, 167, 169, 199, 346, 359, 378, 384, 397, 425], "str": [36, 56, 83, 141, 384, 397, 425], "code": [36, 83], "coerc": 36, "string": [36, 83, 132, 146, 194, 306, 322, 344, 349, 350, 351, 352, 353, 354, 355, 357, 358, 363, 366, 436], "sycldevic": [36, 146, 194, 306, 322, 344, 349, 350, 351, 352, 353, 354, 355, 357, 358, 363, 366], "syclqueu": [36, 146, 194, 306, 322, 344, 349, 350, 351, 352, 353, 354, 355, 357, 358, 363, 366], "concept": [36, 146, 194, 306, 322, 344, 349, 350, 351, 352, 353, 354, 355, 357, 358, 363, 366, 436], "output": [36, 51, 54, 61, 76, 78, 83, 89, 92, 138, 139, 146, 158, 159, 167, 169, 191, 193, 194, 202, 206, 209, 210, 211, 254, 305, 306, 322, 323, 324, 326, 329, 330, 331, 332, 333, 334, 335, 336, 337, 341, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 376, 385, 396, 398, 400, 407, 423, 440], "oneapi": [36, 146, 194, 306, 322, 344, 349, 350, 351, 352, 353, 354, 355, 357, 358, 363, 366], "filter": [36, 146, 194, 306, 322, 344, 349, 350, 351, 352, 353, 354, 355, 357, 358, 363, 366], "selector": [36, 146, 194, 306, 322, 344, 349, 350, 351, 352, 353, 354, 355, 357, 358, 363, 366], "properti": [36, 81, 146, 194, 213, 271, 273, 274, 276, 278, 282, 283, 289, 293, 294, 297, 301, 306, 322, 344, 349, 350, 351, 352, 353, 354, 355, 357, 358, 363, 366, 436], "share": [36, 146, 194, 306, 322, 344, 349, 350, 351, 352, 353, 354, 355, 357, 363, 366], "laid": 37, "fortran": [37, 81, 263, 275, 371, 377], "row": [37, 55, 56, 81, 82, 120, 121, 141, 146, 169, 176, 263, 275, 371, 384, 397, 413, 425], "exactli": [38, 71, 320, 322, 350], "ari": [39, 40, 41], "least": [39, 40, 41, 42, 82, 83, 120, 149, 384, 425], "One": [39, 40, 41, 82, 83, 377], "preserv": [39, 40, 41, 54, 81, 83, 119, 120, 121, 263], "made": [39, 83], "three": [39, 40, 41, 322, 358], "avoid": [40, 41, 81, 262], "possibl": [40, 41, 81, 93, 263, 291, 377, 396, 401, 409], "weight": [42, 43, 67, 140, 191, 206, 400], "over": [42, 80, 118, 119, 130, 170, 175, 187, 188, 189, 191, 193, 195, 203, 205, 206, 207, 208, 209, 210, 211, 314, 322, 349, 354, 365, 366, 374, 398, 400, 423, 440], "entir": [42, 187, 189, 191, 195, 205, 206, 207, 209, 210, 211, 374, 398, 400, 423], "associ": [42, 436], "contribut": 42, "accord": [42, 50, 83, 117, 164, 165, 187, 191, 206, 209, 210, 211, 374, 398, 400, 423], "length": [42, 78, 81, 89, 141, 293, 325, 377, 378, 384, 388, 396, 407, 425], "assum": [42, 168], "avg": 42, "constraint": 42, "sum_of_weight": 42, "taken": [42, 78, 209, 211, 398, 413, 416, 423], "so": [42, 83, 89, 177, 187, 191, 206, 209, 210, 211, 360, 374, 394, 398, 400, 407, 423], "remain": [42, 187, 191, 199, 206, 209, 210, 211, 374, 377, 398, 400, 423], "rule": [42, 50, 62, 187, 188, 191, 206, 209, 210, 211, 374, 378, 398, 400, 410, 423], "when": [42, 60, 62, 81, 83, 170, 186, 205, 207, 262, 263, 382, 402, 411, 426], "second": [42, 61, 81, 83, 92, 141, 155, 189, 195, 262, 313, 395, 401], "gener": [42, 83, 165, 322, 324, 327, 358, 422, 436, 440], "pattern": 42, "lowest": [42, 85, 86, 322, 350], "precis": [42, 83, 117], "capabl": 42, "happen": [42, 81, 263, 324], "previou": 42, "still": 42, "arithmet": [42, 135, 191, 192, 206, 209, 211, 312, 398, 400, 423, 429, 440], "75": [42, 90, 137, 175], "With": [42, 170], "w": [42, 164, 165], "minlength": 43, "count": [43, 66, 83, 119, 131, 167, 304, 324, 429, 440], "find": [43, 168, 386, 393, 420, 440], "bit": [44, 45, 46, 47, 83, 117, 144, 148, 157, 182, 184, 185, 379, 440], "truth": [44, 45, 46, 47, 89, 138, 139, 148, 158, 159, 182, 183, 184, 185, 305, 440], "xor": [44, 45, 46, 47, 148, 182, 183, 184, 185], "255": [44, 46], "NOT": [45, 148, 182, 183, 184, 185], "31": [47, 135], "26": 47, "arg": [48, 85, 322, 424], "against": [48, 49, 54, 136, 170, 318, 403], "other": [48, 49, 78, 81, 83, 122, 143, 169, 199, 215, 216, 219, 221, 222, 224, 225, 226, 227, 228, 229, 230, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 248, 250, 252, 255, 256, 257, 262, 263, 315, 322, 366, 382, 429, 440], "origin": [48, 81, 170, 199, 262, 377, 381], "notimplementederror": [48, 49, 54, 81, 189, 191, 195, 205, 206, 207, 209, 210, 211, 263, 398, 400, 423], "desir": [49, 382, 407], "from_": 50, "cast": [50, 56, 62, 81, 141, 187, 188, 191, 206, 209, 210, 211, 263, 374, 384, 397, 398, 400, 423, 425], "safe": [50, 56, 62, 81, 141, 263, 384, 397, 425], "between": [50, 78, 84, 117, 165, 175, 339, 353, 421], "occur": [50, 56, 62, 81, 141, 263, 275, 384, 397, 425], "target": [50, 81, 263], "equiv": [50, 56, 62, 81, 141, 263, 384, 397, 425], "same_kind": [50, 56, 62, 81, 141, 188, 263, 384, 397, 425], "unsaf": [50, 56, 62, 81, 141, 263, 384, 397, 425], "what": [50, 56, 62, 81, 83, 89, 141, 263, 324, 341, 384, 397, 425], "mai": [50, 54, 56, 62, 81, 83, 93, 141, 164, 186, 206, 209, 211, 263, 318, 384, 397, 407, 425, 436], "promot": [50, 378, 407], "basic": [50, 436, 440], "i8": [50, 83], "f8": [50, 83], "f4": 50, "doe": 50, "1000": [50, 135, 186, 323, 324, 329, 331, 333, 334, 335, 336, 337, 344, 345, 348, 350, 352, 355, 357, 363, 367, 368, 369, 370], "i4": [50, 83], "u4": 50, "cube": [51, 394], "popul": [51, 61, 81, 92, 322, 349, 385], "correct": [51, 56, 61, 92, 173, 385, 397], "newli": [51, 54, 61, 81, 92, 263, 385], "27": [51, 186, 313, 385, 422], "mode": [53, 59, 63, 81, 171, 264, 287, 300, 317, 360, 365, 402], "prefer": [53, 60, 81, 268], "a_min": 54, "a_max": 54, "edg": 54, "right": [54, 120, 121, 142, 157, 163, 164, 365, 374, 379, 386], "hold": [54, 170, 208, 314], "Its": [54, 318], "those": [54, 318], "tup": [55, 82, 141, 384, 425], "them": [55, 436], "just": [55, 83], "turn": 55, "join": [55, 56, 82, 141, 384, 397, 425, 440], "depth": [55, 56, 82, 141, 384, 397, 425], "third": [55, 56, 82, 141, 384, 397, 425], "horizont": [55, 56, 82, 119, 141, 384, 397, 425], "vertic": [55, 56, 82, 119, 120, 141, 384, 397, 425], "exist": [55, 56, 82, 83, 93, 141, 377, 384, 397, 425], "destin": [56, 141, 199, 317, 318, 384, 397, 403, 425], "were": [56, 322, 351, 397], "cannot": [56, 81, 201, 202, 293, 396, 397], "togeth": [56, 83, 397], "sub": [56, 83, 141, 384, 397, 425], "3rd": 56, "assembl": [56, 82, 141, 384, 397, 425], "t": [56, 67, 81, 83, 165, 301, 364], "obtain": [57, 58, 304], "chang": [57, 58, 60, 61, 81, 83, 262, 263, 297, 301, 303, 311, 312, 317, 318, 319, 371, 377, 382, 421, 440], "imaginari": [57, 58, 81, 145, 276, 315, 372], "2j": [57, 58, 145, 164, 188, 372, 389], "j": [57, 58, 145, 146, 164, 180, 315, 318, 372, 395, 403], "v": [59, 73, 76, 83, 164], "linear": [59, 63, 173, 186, 429, 440], "convolut": [59, 63], "ca": 59, "z": [60, 130, 193, 332], "we": [60, 74, 318, 403], "modifi": [60, 359], "dst": 62, "src": 62, "violat": 62, "wherev": 62, "valid": [63, 93, 401, 413, 414, 416, 417], "000000e": [64, 391], "00": [64, 391], "371139e": 64, "5091786": 65, "591953": 65, "coordin": [66, 130, 193], "19": [66, 83], "m": [67, 82, 83, 96, 119, 120, 121, 160, 162, 164, 165, 168, 172, 173, 318, 403, 411, 413, 416], "rowvar": 67, "bia": 67, "ddof": [67, 81, 209, 211, 296, 302, 398, 423], "fweight": 67, "aweight": 67, "estim": [67, 324, 341], "covari": 67, "matrix": [67, 160, 161, 164, 165, 167, 168, 170, 171, 172, 173, 188, 395, 415, 422, 429, 440], "variabl": 67, "axisa": 68, "axisb": 68, "axisc": 68, "vector": [68, 161, 168, 169, 170, 188, 193, 424, 440], "cumul": [69, 70, 78, 81, 203, 204, 269, 400], "120": [69, 72], "720": 69, "th": [70, 78, 84, 137, 192, 409, 412, 415], "21": [70, 83], "remov": [71, 81, 93, 295, 320, 396, 440], "larg": [71, 83, 320], "jump": [71, 320], "wrap": [71, 81, 116, 287, 300, 317, 320, 402], "rad": 72, "30": [72, 318, 321, 403], "60": [72, 318, 403, 426], "90": [72, 426], "150": 72, "upper": [73, 160, 171, 411, 415, 416], "triangl": [73, 142, 374, 411, 412, 413, 414, 415, 416, 417], "lower": [73, 154, 160, 411, 412, 413, 414, 417], "access": [74, 75, 116, 436], "main": [74, 75, 116, 143, 165], "usual": [74, 83, 188], "di": 74, "100": [74, 135, 186, 334, 360], "d3": 74, "offset": [77, 81, 83, 270, 408, 413, 414, 416, 417], "axis1": [77, 81, 270, 299, 401, 408], "axis2": [77, 81, 270, 299, 401, 408], "prepend": [78, 93, 407], "differenc": 78, "last": [78, 119, 169, 371, 377, 381, 396], "prior": 78, "expand": [78, 93], "direct": [78, 120, 121], "smaller": [78, 81, 117, 123, 285, 375], "consecut": [78, 84], "quotient": [79, 197, 375, 418], "dp": [79, 80, 81, 162, 164, 172, 173, 301, 313, 377, 378, 388, 399, 409, 418, 426], "arbitrari": [80, 83, 188, 378], "stride": [81, 263], "wrapper": 81, "compliant": 81, "__getitem__": [81, 83, 118], "self": [81, 83, 118, 214, 215, 216, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 255, 256, 257, 274, 322], "__setitem__": [81, 118], "val": [81, 116, 118, 253, 287, 311, 317], "__len__": [81, 83], "len": [81, 83, 146, 194, 240, 388], "versionchang": [81, 262], "previous": [81, 262], "wa": [81, 83, 187, 189, 195, 205, 207, 209, 211, 262, 322, 363, 374, 398, 423], "error": [81, 90, 187, 262, 374, 396, 429], "At": [81, 262], "some": [81, 83, 93, 95, 122, 262, 436], "futur": [81, 83, 262], "intend": [81, 262], "until": [81, 262, 381, 382], "explicitli": [81, 262], "arr": [81, 83, 262, 304, 319, 346, 414, 417], "futurewarn": [81, 262], "quicksort": [81, 262], "mergesort": [81, 262], "heapsort": [81, 262], "field": [81, 83, 193, 262], "compar": [81, 89, 262], "etc": [81, 83, 262, 341], "word": [81, 122, 262, 322, 366], "yield": [81, 262, 322, 436], "maskedarrai": [81, 262], "inplac": [81, 262], "asnumpi": 81, "style": [81, 263, 275, 371], "keep": [81, 263], "close": [81, 93, 175, 263, 322, 350], "itself": [81, 83, 263, 436], "backward": [81, 263, 381, 382], "convers": [81, 263, 429], "By": [81, 189, 191, 195, 205, 206, 207, 209, 211, 263, 371, 376, 381, 398, 413, 416, 423], "instead": [81, 93, 122, 135, 146, 175, 186, 263, 304], "arr_t": [81, 263], "unless": [81, 170, 208, 263, 314], "condit": [81, 95, 161, 263, 311, 317, 319, 387, 426], "behavior": [81, 268, 407], "assign": [81, 272], "collaps": [81, 275], "get_arrai": 81, "get": [81, 297, 403, 436], "id": [81, 277], "standard": [81, 117, 123, 126, 191, 197, 206, 209, 211, 254, 277, 296, 322, 337, 344, 351, 360, 361, 362, 363, 364, 375, 398, 423, 436, 440], "random": [81, 119, 120, 121, 174, 277, 397, 429, 440], "123": [81, 277], "kth": [81, 285, 310], "introselect": [81, 285, 310], "rearrang": [81, 285, 440], "move": [81, 199, 285, 381, 382, 409], "behind": [81, 285], "undefin": [81, 285], "sh": [81, 291], "unlik": [81, 291], "free": [81, 291], "separ": [81, 83, 291], "entri": [81, 83, 87, 119, 120, 121, 295, 396], "deviat": [81, 191, 206, 209, 211, 296, 322, 337, 344, 398, 423], "interchang": [81, 199, 299, 401], "to_devic": 81, "target_devic": 81, "transfer": 81, "suitabl": [81, 301], "give": [81, 301, 377, 388], "without": [81, 87, 293, 301, 371, 377, 436], "varianc": [81, 191, 206, 209, 211, 302, 398, 423, 440], "__eq__": [81, 83, 118, 322], "__ne__": [81, 83, 118, 322], "__lt__": [81, 83, 118, 322], "__le__": [81, 83, 118, 322], "__gt__": [81, 83, 118, 322], "__ge__": [81, 83, 118, 322], "attribut": [81, 83, 117, 144, 429], "0j": [81, 188, 276, 289, 389], "70710677": [81, 276, 289], "items": [81, 83], "nbyte": 81, "consum": [81, 282], "setter": [81, 293], "involv": [81, 293], "displac": [81, 297], "upon": [81, 297], "unit": [81, 172, 297], "respect": [81, 297], "s1": [81, 83, 297], "s2": [81, 83, 297], "s3": [81, 297], "i1": [81, 83, 297], "i2": [81, 83, 297], "i3": [81, 297], "sycl_context": 81, "sycl_devic": 81, "after": [82, 341, 381], "been": [82, 318, 382, 403], "rebuild": 82, "nd": [82, 141, 384, 397, 425], "align": 83, "homogen": 83, "fundament": 83, "struct": 83, "obj": [83, 127, 153], "dictionari": 83, "comma": 83, "sticki": 83, "isalignedstruct": 83, "built": 83, "int16": 83, "structur": 83, "f1": 83, "unsign": [83, 210, 400], "uint64": 83, "f2": 83, "u8": 83, "s10": 83, "format": [83, 129, 440], "f0": 83, "void": 83, "flexibl": 83, "hello": 83, "world": [83, 324, 341], "v10": 83, "subdivid": 83, "int8": [83, 314], "gender": 83, "ag": 83, "uint8": 83, "u1": 83, "25": [83, 90, 137, 140, 175, 200, 211, 351, 360, 422, 423], "surnam": 83, "s25": 83, "new_ord": 83, "forc": 83, "swap": [83, 401], "opposit": 83, "endian": 83, "littl": 83, "big": 83, "nativ": 83, "ignor": [83, 124, 125, 189, 190, 191, 195, 196, 201, 202, 205, 206, 207, 209, 211, 398, 423], "new_dtyp": 83, "sy": 83, "sys_is_l": 83, "byteord": 83, "native_cod": 83, "swapped_cod": 83, "native_dt": 83, "swapped_dt": 83, "l": [83, 160, 164], "subarrai": [83, 146], "regardless": 83, "subdtyp": 83, "8f": 83, "charact": 83, "applic": 83, "dt": 83, "relev": 83, "ascii": 83, "even": [83, 383], "char": 83, "descr": 83, "__array_interface__": 83, "descript": [83, 187, 210, 374, 400, 436], "warn": [83, 201, 202, 340], "directli": [83, 146, 186, 403], "accur": 83, "reconstruct": [83, 174], "str_": 83, "grade": 83, "u16": 83, "fulli": 83, "titl": 83, "32": [83, 135, 406], "present": [83, 205, 207, 210], "unicod": 83, "meta": 83, "notic": 83, "s16": 83, "mask": [83, 311, 319, 402], "multiarrai": 83, "item_hasobject": 83, "list_pickl": 83, "item_is_point": 83, "needs_init": 83, "needs_pyapi": 83, "use_getitem": 83, "use_setitem": 83, "explan": 83, "thei": [83, 165, 384, 411, 425, 436], "user": 83, "particular": 83, "hasobject": 83, "recal": 83, "actual": [83, 160], "address": 83, "pointer": [83, 210, 400], "distinguish": 83, "won": 83, "maintain": [83, 386, 403], "produc": 83, "isbuiltin": 83, "relat": 83, "read": [83, 129, 371, 377], "machineri": 83, "extend": [83, 436], "field1": 83, "isn": 83, "platform": 83, "anyth": 83, "80": [83, 426], "biufcmmosuv": 83, "identifi": 83, "u": [83, 174], "timedelta": 83, "datetim": 83, "metadata": 83, "readonli": 83, "mappingproxi": 83, "approach": 83, "propag": [83, 124, 125, 189, 190, 195, 196, 205, 207, 208, 210], "although": [83, 407], "guarante": [83, 377], "certain": 83, "project": [83, 315], "featur": 83, "long": 83, "undocu": 83, "well": [83, 129, 324, 341, 360], "aspect": 83, "ad": [83, 162, 172, 440], "datatyp": [83, 168], "dt2": 83, "key2": 83, "value2": 83, "arr2": 83, "clear": 83, "width": 83, "un": 83, "void640": 83, "increas": [83, 93, 422], "walk": 83, "num": [83, 90, 135, 175, 186, 421], "roughli": 83, "typestr": 83, "item_dtyp": 83, "whose": [83, 165, 199, 381, 414, 417], "retriev": 83, "extra": 83, "impli": 83, "tack": 83, "end": [83, 175], "to_end": 84, "to_begin": 84, "einstein": [85, 86, 147, 188, 309, 406], "summat": [85, 86, 147, 188, 309, 406], "convent": [85, 86, 147, 188, 309, 406], "operand": [85, 86, 147, 309, 406], "cost": [85, 86], "contract": [85, 86], "express": [85, 86], "subscript": 86, "greedi": 86, "consid": [86, 150, 168, 322, 350], "intermedi": 86, "scipi": 90, "math": 90, "99532227": 90, "99853728": 90, "99959305": 90, "99989938": 90, "99997791": 90, "718281828": [91, 94], "389056099": [91, 94], "p": [92, 161, 324, 327, 332, 338, 341], "appear": [93, 120, 121], "whenev": [93, 401, 409], "rank": [93, 95, 168, 401], "resid": 93, "henc": 93, "resolv": [93, 187, 210, 374, 400], "newaxi": 93, "minu": [94, 122, 123, 375, 419], "callcul": 94, "00000000005e": 94, "000000082740371e": 94, "elsewher": [96, 143, 411, 426], "fourier": [98, 99, 100, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 429], "transform": [98, 99, 100, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 429], "batch": [99, 101, 105, 106, 110, 111, 113, 115], "sampl": [100, 114, 135, 175, 186, 318, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 353, 356, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 403, 429, 440], "frequenc": [100, 102, 107, 114], "shift": [102, 107, 157, 379, 381], "compon": [102, 107, 117, 145, 315, 372], "center": [102, 107], "spectrum": [102, 107], "signal": [103, 108], "hermitian": [103, 108, 160, 164, 168, 174, 440], "symmetri": [103, 108], "occupi": [117, 144], "ep": [117, 168], "smallest": [117, 144], "represent": [117, 144, 146, 436], "larger": 117, "ieee": 117, "754": 117, "epsneg": 117, "largest": [117, 123, 144, 375], "approxim": 117, "resolut": 117, "tini": 117, "smallest_norm": 117, "finfo_object": 117, "__next__": 118, "__iter__": 118, "revers": [119, 120, 121, 409], "reorder": [119, 199], "left": [120, 121, 157, 170, 365, 379, 386], "down": 121, "toward": [122, 123, 375, 419], "spreadsheet": 122, "definit": [122, 160], "divis": [123, 124, 125, 126, 197, 313, 375], "floordivid": 123, "complementari": [123, 126, 197], "__dlpack__": 127, "dmlc": 127, "github": 127, "io": [127, 176], "dlpack": 127, "__dlpack_device__": 127, "file": [129, 136, 176], "text": [129, 132, 176], "binari": [129, 429, 440], "highli": 129, "effici": [129, 168], "known": [129, 360], "pars": 129, "simpli": 129, "written": 129, "therefor": 130, "fn": 130, "fill_valu": [133, 134], "scale": [135, 175, 186, 322, 329, 331, 333, 334, 335, 336, 344, 356, 361, 368], "progress": [135, 175], "62341325": 135, "6227766": 135, "177": [135, 186], "827941": [135, 186], "63": 135, "127": 135, "directori": 136, "h": [136, 160, 193], "header": 136, "modul": [136, 429], "vararg": 137, "y1": [137, 410], "bin": [140, 360], "densiti": 140, "dataset": 140, "hist": [140, 360], "bin_edg": 140, "4999999999999996": 140, "leg": [142, 374], "hypotenus": [142, 374], "reduce_hypot": 142, "iinfo_object": 144, "4j": [145, 372], "6j": [145, 372], "spars": [146, 193], "vari": [146, 164, 206, 209, 211], "dens": [146, 194], "ith": [146, 306], "col": 146, "straightforward": 146, "finit": [150, 151, 152, 315], "nat": 152, "arg1": [154, 155], "arg2": [154, 155], "typecod": 154, "hierarchi": 154, "determin": [155, 162, 172, 182, 184, 185], "kroneck": 156, "40": [157, 318, 403], "decomposit": [160, 174, 440], "ordinari": 160, "symmetr": [160, 164, 168], "verifi": 160, "addit": [160, 206], "factor": [160, 171], "fro": 161, "logarithm": [162, 172, 175, 177, 178, 179, 180, 181, 187, 338, 440], "bc": [162, 172], "matric": [162, 165, 168, 170, 172, 193], "eigenvalu": [163, 164, 165, 440], "eigenvector": [163, 164, 165], "uplo": 164, "ascend": 164, "17157288": 164, "82842712": 164, "92387953": 164, "38268343": 164, "38268343j": 164, "92387953j": 164, "aren": 165, "necessarili": 165, "nor": [165, 205, 207], "suppli": [167, 169, 322, 351], "tol": [168, 340], "singular": [168, 174], "threshold": 168, "epsilon": 168, "enabl": 168, "treat": [169, 203, 208, 210, 314, 315, 318, 403, 407, 436], "ord": 170, "abl": 170, "eight": 170, "infinit": [170, 315], "under": 170, "q": [171, 192], "orthonorm": 171, "r": 171, "natur": [172, 177, 178, 179, 180, 181, 187], "circl": 172, "logabsdet": 172, "69314718": [172, 179], "09861229": [172, 179], "07944154": 172, "equat": [173, 440], "solut": 173, "full_matric": 174, "compute_uv": 174, "2d": 174, "vh": 174, "smat": 174, "4d": 174, "retstep": 175, "There": 175, "half": [175, 322, 352, 354, 355, 357, 366, 401], "open": [175, 306, 322, 352, 354, 355, 357, 366, 401], "fname": 176, "stringio": 176, "behav": 176, "n2": 176, "plu": [177, 178, 179, 180], "30102999566": 178, "99": [179, 318], "xi": [180, 193], "26618007j": 180, "logsumdexp": 181, "prob1": 181, "50": [181, 186, 318, 403, 406, 426], "prob2": 181, "5e": 181, "prob12": 181, "113": 181, "87649168": 181, "uniformli": [186, 322, 366], "215": 186, "443469": 186, "464": 186, "15888336": 186, "316": 186, "22776602": 186, "562": 186, "34132519": 186, "0396842": 186, "34960421": 186, "98024613": 186, "72075441": 186, "infer": [187, 210, 374, 377, 400], "30258509": 187, "mix": 188, "98": 188, "neither": [188, 205, 207], "3j": 188, "maxima": 189, "while": [191, 206, 209, 211, 304, 381, 398, 423], "overwrite_input": 192, "xy": 193, "xn": 193, "nx": 193, "ny": 193, "xv": 193, "yv": 193, "matplotlib": [193, 360], "pyplot": [193, 360], "plt": [193, 360], "xx": 193, "yy": 193, "contourf": 193, "dpnp_iface_arraycr": [194, 306], "mgridclass": 194, "5j": [194, 306], "minima": 195, "fraction": 198, "slice": [201, 202, 205, 206, 207, 209, 210, 211, 317, 318, 403, 416, 436], "trust": [201, 202], "encount": [205, 207], "runtimewarn": [205, 207], "6666666666666665": 206, "across": [208, 210], "delta": [209, 211, 398, 421, 423], "freedom": [209, 211, 364, 398, 423], "divisor": [209, 211, 398, 423], "nonneg": [209, 211, 398, 423], "247219128924647": 209, "5555555555555554": 211, "repr": 251, "136": 254, "272": 254, "408": 254, "out2": 304, "ogridclass": 306, "expon": [313, 348, 440], "125": [313, 422], "effect": 313, "onto": 315, "riemann": 315, "sphere": 315, "magnitud": 315, "7j": 315, "1d": [317, 318, 403], "contrast": 317, "cyclic": 317, "clamp": [317, 402], "boundari": 317, "44": 317, "55": 317, "22": 317, "ni": [318, 403], "nk": [318, 403], "nj": [318, 403], "had": [318, 403], "everi": [318, 403], "deg": 321, "52359878": 321, "04719755": 321, "0943951": 321, "61799388": 321, "mersenn": 322, "twister": 322, "pseudo": 322, "maximumum": [322, 358], "intern": 322, "state": 322, "get_sycl_queu": 322, "loc": [322, 333, 335, 336, 344, 368], "draw": [322, 323, 324, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 350, 356, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369], "gaussian": [322, 344, 368], "drawn": [322, 323, 324, 326, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 344, 345, 347, 348, 350, 353, 356, 362, 363, 364, 365, 366, 367, 368, 369, 370, 387], "parameter": [322, 344, 366], "58997253": 322, "84288406": 322, "33836967": 322, "16394577": 322, "40882036": 322, "39295758": 322, "48927254": 322, "74921661": 322, "13436424": 322, "56920387": 322, "84743374": 322, "80226506": 322, "76377462": 322, "06310682": 322, "25506903": 322, "1179187": 322, "49543509": 322, "76096244": 322, "low": [322, 350, 353, 366, 436], "high": [322, 350, 353, 366], "inclus": [322, 350, 353], "exclus": [322, 350], "omit": [322, 350, 426], "d0": [322, 349, 351], "d1": [322, 351], "dn": [322, 349, 351], "84401099": 322, "four": [322, 351], "88997253": 322, "54288406": 322, "63836967": 322, "46394577": 322, "70882036": 322, "69295758": 322, "78927254": 322, "04921661": 322, "continu": [322, 354], "stdev": [322, 363], "81715362": 322, "54465213": 322, "18557831": 322, "28352814": 322, "67718303": 322, "11570901": 322, "21968665": 322, "18236388": 322, "08156915": 322, "21941987": 322, "24544512": 322, "63522211": 322, "673174": 322, "54": 322, "48093112": 322, "52928804": 322, "1196081": 322, "6990877": 322, "34074171": 322, "conveni": 322, "accept": 322, "alpha": [323, 328, 329, 345, 348], "trial": 324, "probabl": [324, 332, 341], "coin": 324, "compani": [324, 341], "drill": [324, 341], "wild": [324, 341], "cat": [324, 341], "oil": [324, 341], "explor": [324, 341], "success": [324, 332, 341], "nine": 324, "fail": 324, "let": 324, "000": 324, "model": 324, "20000": 324, "answer": 324, "38885": 324, "38": 324, "fallback": [325, 327, 328, 338, 343, 359], "df": [326, 342, 364, 365], "chi": [326, 342], "89920014": 326, "00867716": 326, "13710533": 326, "62318272": 326, "dfnum": [330, 343], "dfden": [330, 343], "ten": 332, "thousand": 332, "individu": 332, "10000": [332, 347, 356, 366], "mu": [333, 337, 344, 367], "ngood": 334, "nbad": 334, "nsampl": 334, "nsamp": 334, "good": 334, "bad": 334, "decai": 335, "sigma": [337, 344], "seri": 338, "pval": 339, "iinfo": 339, "throw": 339, "dice": 339, "check_valid": 340, "multivari": 340, "100000": 341, "nonc": [342, 343], "noncentr": [342, 343], "todo": 342, "ii": 345, "lomax": 345, "randomli": 346, "lam": 347, "randomst": 350, "1923875335537315": 351, "rese": 358, "legaci": 358, "mt19937": 358, "engin": 358, "cauchi": 360, "lorentz": 360, "plot": 360, "1000000": [360, 362, 364, 365], "3x8000": 361, "8000": 361, "student": 364, "kappa": 367, "von": 367, "mise": 367, "dispers": 367, "pack": [371, 440], "fastest": [371, 377], "back": [371, 377, 382], "slowest": [371, 377], "subtyp": 371, "33": 373, "3003003": 373, "16227766": 374, "fit": 376, "rep": [376, 407], "newshap": 377, "write": 377, "account": 377, "underli": 377, "never": 377, "reus": 377, "unspecifi": 377, "arrays_and_dtyp": 378, "introduc": 381, "restor": 381, "rel": [381, 382], "li": [381, 382], "reposit": 382, "37": 383, "x_i": 385, "35355338": 385, "19245009": 385, "side": 386, "sorter": 386, "condlist": 387, "choicelist": 387, "howev": 389, "742278e": 391, "3012989": 392, "548739": 392, "rsqrt": 394, "traceback": 396, "recent": 396, "118033988749895": 398, "composit": [400, 410], "trapezoid": [400, 410], "bound": 402, "fanci": 402, "trivial": 403, "ai_min": 403, "ai_max": 403, "22460635e": 404, "63317787e": 404, "996272": 405, "917152": 405, "replic": 407, "thu": 407, "dx": 410, "ind": [413, 416], "complement": 421, "phase": 421, "49778714": 421, "28318531": 421, "vandermond": 422, "chosen": 426, "70": 426, "algebra": [429, 440], "mathemat": [429, 440], "statist": [429, 440], "summari": 429, "level": [429, 436], "util": 429, "counterpart": 436, "constructor": 436, "syntax": 436, "reflect": 436, "intrins": 436, "sometim": 436, "expos": 436, "reset": 436, "meaningfulli": 436, "mani": 436, "fashion": 436, "typic": 436, "briefli": 436, "explain": 436, "docstr": 436, "proce": 436, "pow": 436, "short": 436, "unari": 436, "custom": 436, "cover": 440, "elementwis": [440, 444], "helper": 440, "ration": 440, "extrema": 440, "dparrai": 441, "variou": 444}, "objects": {"": [[3, 0, 0, "-", "dpnp"]], "dpnp": [[11, 1, 1, "", "abs"], [12, 1, 1, "", "absolute"], [13, 1, 1, "", "add"], [14, 1, 1, "", "all"], [15, 1, 1, "", "allclose"], [16, 1, 1, "", "amax"], [17, 1, 1, "", "amin"], [18, 1, 1, "", "any"], [19, 1, 1, "", "arange"], [20, 1, 1, "", "arccos"], [21, 1, 1, "", "arccosh"], [22, 1, 1, "", "arcsin"], [23, 1, 1, "", "arcsinh"], [24, 1, 1, "", "arctan"], [25, 1, 1, "", "arctan2"], [26, 1, 1, "", "arctanh"], [27, 1, 1, "", "argmax"], [28, 1, 1, "", "argmin"], [29, 1, 1, "", "argsort"], [30, 1, 1, "", "around"], [31, 1, 1, "", "array"], [32, 1, 1, "", "array_equal"], [33, 1, 1, "", "asanyarray"], [34, 1, 1, "", "asarray"], [35, 1, 1, "", "ascontiguousarray"], [36, 1, 1, "", "asfarray"], [37, 1, 1, "", "asfortranarray"], [38, 1, 1, "", "asnumpy"], [39, 1, 1, "", "atleast_1d"], [40, 1, 1, "", "atleast_2d"], [41, 1, 1, "", "atleast_3d"], [42, 1, 1, "", "average"], [43, 1, 1, "", "bincount"], [44, 1, 1, "", "bitwise_and"], [45, 1, 1, "", "bitwise_not"], [46, 1, 1, "", "bitwise_or"], [47, 1, 1, "", "bitwise_xor"], [48, 1, 1, "", "broadcast_arrays"], [49, 1, 1, "", "broadcast_to"], [50, 1, 1, "", "can_cast"], [51, 1, 1, "", "cbrt"], [52, 1, 1, "", "ceil"], [53, 1, 1, "", "choose"], [54, 1, 1, "", "clip"], [55, 1, 1, "", "column_stack"], [56, 1, 1, "", "concatenate"], [57, 1, 1, "", "conj"], [58, 1, 1, "", "conjugate"], [59, 1, 1, "", "convolve"], [60, 1, 1, "", "copy"], [61, 1, 1, "", "copysign"], [62, 1, 1, "", "copyto"], [63, 1, 1, "", "correlate"], [64, 1, 1, "", "cos"], [65, 1, 1, "", "cosh"], [66, 1, 1, "", "count_nonzero"], [67, 1, 1, "", "cov"], [68, 1, 1, "", "cross"], [69, 1, 1, "", "cumprod"], [70, 1, 1, "", "cumsum"], [71, 1, 1, "", "deg2rad"], [72, 1, 1, "", "degrees"], [73, 1, 1, "", "diag"], [74, 1, 1, "", "diag_indices"], [75, 1, 1, "", "diag_indices_from"], [76, 1, 1, "", "diagflat"], [77, 1, 1, "", "diagonal"], [78, 1, 1, "", "diff"], [79, 1, 1, "", "divide"], [80, 1, 1, "", "dot"], [82, 1, 1, "", "dstack"], [83, 2, 1, "", "dtype"], [84, 1, 1, "", "ediff1d"], [85, 1, 1, "", "einsum"], [86, 1, 1, "", "einsum_path"], [87, 1, 1, "", "empty"], [88, 1, 1, "", "empty_like"], [89, 1, 1, "", "equal"], [90, 1, 1, "", "erf"], [91, 1, 1, "", "exp"], [92, 1, 1, "", "exp2"], [93, 1, 1, "", "expand_dims"], [94, 1, 1, "", "expm1"], [95, 1, 1, "", "extract"], [96, 1, 1, "", "eye"], [97, 1, 1, "", "fabs"], [10, 0, 0, "-", "fft"], [116, 1, 1, "", "fill_diagonal"], [117, 1, 1, "", "finfo"], [118, 2, 1, "", "flatiter"], [119, 1, 1, "", "flip"], [120, 1, 1, "", "fliplr"], [121, 1, 1, "", "flipud"], [122, 1, 1, "", "floor"], [123, 1, 1, "", "floor_divide"], [124, 1, 1, "", "fmax"], [125, 1, 1, "", "fmin"], [126, 1, 1, "", "fmod"], [127, 1, 1, "", "from_dlpack"], [128, 1, 1, "", "frombuffer"], [129, 1, 1, "", "fromfile"], [130, 1, 1, "", "fromfunction"], [131, 1, 1, "", "fromiter"], [132, 1, 1, "", "fromstring"], [133, 1, 1, "", "full"], [134, 1, 1, "", "full_like"], [135, 1, 1, "", "geomspace"], [136, 1, 1, "", "get_include"], [137, 1, 1, "", "gradient"], [138, 1, 1, "", "greater"], [139, 1, 1, "", "greater_equal"], [140, 1, 1, "", "histogram"], [141, 1, 1, "", "hstack"], [142, 1, 1, "", "hypot"], [143, 1, 1, "", "identity"], [144, 1, 1, "", "iinfo"], [145, 1, 1, "", "imag"], [146, 1, 1, "", "indices"], [147, 1, 1, "", "inner"], [148, 1, 1, "", "invert"], [149, 1, 1, "", "isclose"], [150, 1, 1, "", "isfinite"], [151, 1, 1, "", "isinf"], [152, 1, 1, "", "isnan"], [153, 1, 1, "", "isscalar"], [154, 1, 1, "", "issubdtype"], [155, 1, 1, "", "issubsctype"], [156, 1, 1, "", "kron"], [157, 1, 1, "", "left_shift"], [158, 1, 1, "", "less"], [159, 1, 1, "", "less_equal"], [175, 1, 1, "", "linspace"], [176, 1, 1, "", "loadtxt"], [177, 1, 1, "", "log"], [178, 1, 1, "", "log10"], [179, 1, 1, "", "log1p"], [180, 1, 1, "", "log2"], [181, 1, 1, "", "logaddexp"], [182, 1, 1, "", "logical_and"], [183, 1, 1, "", "logical_not"], [184, 1, 1, "", "logical_or"], [185, 1, 1, "", "logical_xor"], [186, 1, 1, "", "logspace"], [187, 1, 1, "", "logsumexp"], [188, 1, 1, "", "matmul"], [189, 1, 1, "", "max"], [190, 1, 1, "", "maximum"], [191, 1, 1, "", "mean"], [192, 1, 1, "", "median"], [193, 1, 1, "", "meshgrid"], [194, 5, 1, "", "mgrid"], [195, 1, 1, "", "min"], [196, 1, 1, "", "minimum"], [197, 1, 1, "", "mod"], [198, 1, 1, "", "modf"], [199, 1, 1, "", "moveaxis"], [200, 1, 1, "", "multiply"], [201, 1, 1, "", "nanargmax"], [202, 1, 1, "", "nanargmin"], [203, 1, 1, "", "nancumprod"], [204, 1, 1, "", "nancumsum"], [205, 1, 1, "", "nanmax"], [206, 1, 1, "", "nanmean"], [207, 1, 1, "", "nanmin"], [208, 1, 1, "", "nanprod"], [209, 1, 1, "", "nanstd"], [210, 1, 1, "", "nansum"], [211, 1, 1, "", "nanvar"], [212, 3, 1, "", "ndarray"], [303, 1, 1, "", "negative"], [304, 1, 1, "", "nonzero"], [305, 1, 1, "", "not_equal"], [306, 5, 1, "", "ogrid"], [307, 1, 1, "", "ones"], [308, 1, 1, "", "ones_like"], [309, 1, 1, "", "outer"], [310, 1, 1, "", "partition"], [311, 1, 1, "", "place"], [312, 1, 1, "", "positive"], [313, 1, 1, "", "power"], [314, 1, 1, "", "prod"], [315, 1, 1, "", "proj"], [316, 1, 1, "", "ptp"], [317, 1, 1, "", "put"], [318, 1, 1, "", "put_along_axis"], [319, 1, 1, "", "putmask"], [320, 1, 1, "", "rad2deg"], [321, 1, 1, "", "radians"], [439, 0, 0, "-", "random"], [371, 1, 1, "", "ravel"], [372, 1, 1, "", "real"], [373, 1, 1, "", "reciprocal"], [374, 1, 1, "", "reduce_hypot"], [375, 1, 1, "", "remainder"], [376, 1, 1, "", "repeat"], [377, 1, 1, "", "reshape"], [378, 1, 1, "", "result_type"], [379, 1, 1, "", "right_shift"], [380, 1, 1, "", "rint"], [381, 1, 1, "", "roll"], [382, 1, 1, "", "rollaxis"], [383, 1, 1, "", "round"], [384, 1, 1, "", "row_stack"], [385, 1, 1, "", "rsqrt"], [386, 1, 1, "", "searchsorted"], [387, 1, 1, "", "select"], [388, 1, 1, "", "shape"], [389, 1, 1, "", "sign"], [390, 1, 1, "", "signbit"], [391, 1, 1, "", "sin"], [392, 1, 1, "", "sinh"], [393, 1, 1, "", "sort"], [394, 1, 1, "", "sqrt"], [395, 1, 1, "", "square"], [396, 1, 1, "", "squeeze"], [397, 1, 1, "", "stack"], [398, 1, 1, "", "std"], [399, 1, 1, "", "subtract"], [400, 1, 1, "", "sum"], [401, 1, 1, "", "swapaxes"], [402, 1, 1, "", "take"], [403, 1, 1, "", "take_along_axis"], [404, 1, 1, "", "tan"], [405, 1, 1, "", "tanh"], [406, 1, 1, "", "tensordot"], [407, 1, 1, "", "tile"], [408, 1, 1, "", "trace"], [409, 1, 1, "", "transpose"], [410, 1, 1, "", "trapz"], [411, 1, 1, "", "tri"], [412, 1, 1, "", "tril"], [413, 1, 1, "", "tril_indices"], [414, 1, 1, "", "tril_indices_from"], [415, 1, 1, "", "triu"], [416, 1, 1, "", "triu_indices"], [417, 1, 1, "", "triu_indices_from"], [418, 1, 1, "", "true_divide"], [419, 1, 1, "", "trunc"], [420, 1, 1, "", "unique"], [421, 1, 1, "", "unwrap"], [422, 1, 1, "", "vander"], [423, 1, 1, "", "var"], [424, 1, 1, "", "vdot"], [425, 1, 1, "", "vstack"], [426, 1, 1, "", "where"], [427, 1, 1, "", "zeros"], [428, 1, 1, "", "zeros_like"]], "dpnp.dpnp_array": [[81, 2, 1, "", "dpnp_array"]], "dpnp.dpnp_array.dpnp_array": [[81, 3, 1, "", "T"], [81, 4, 1, "", "__eq__"], [81, 4, 1, "", "__ge__"], [81, 4, 1, "", "__getitem__"], [81, 4, 1, "", "__gt__"], [81, 4, 1, "", "__le__"], [81, 4, 1, "", "__len__"], [81, 4, 1, "", "__lt__"], [81, 4, 1, "", "__ne__"], [81, 4, 1, "", "__setitem__"], [81, 4, 1, "", "all"], [81, 4, 1, "", "any"], [81, 4, 1, "", "argmax"], [81, 4, 1, "", "argmin"], [81, 4, 1, "", "argsort"], [81, 4, 1, "", "asnumpy"], [81, 4, 1, "", "astype"], [81, 4, 1, "", "choose"], [81, 4, 1, "", "clip"], [81, 4, 1, "", "conj"], [81, 4, 1, "", "conjugate"], [81, 4, 1, "", "copy"], [81, 4, 1, "", "cumsum"], [81, 3, 1, "", "device"], [81, 4, 1, "", "diagonal"], [81, 4, 1, "", "dot"], [81, 3, 1, "", "dtype"], [81, 4, 1, "", "fill"], [81, 3, 1, "", "flags"], [81, 3, 1, "", "flat"], [81, 4, 1, "", "flatten"], [81, 4, 1, "", "get_array"], [81, 3, 1, "", "imag"], [81, 4, 1, "", "item"], [81, 3, 1, "", "itemsize"], [81, 4, 1, "", "max"], [81, 4, 1, "", "mean"], [81, 4, 1, "", "min"], [81, 3, 1, "", "nbytes"], [81, 3, 1, "", "ndim"], [81, 4, 1, "", "nonzero"], [81, 4, 1, "", "partition"], [81, 4, 1, "", "prod"], [81, 4, 1, "", "put"], [81, 4, 1, "", "ravel"], [81, 3, 1, "", "real"], [81, 4, 1, "", "repeat"], [81, 4, 1, "", "reshape"], [81, 4, 1, "", "round"], [81, 3, 1, "", "shape"], [81, 3, 1, "", "size"], [81, 4, 1, "", "squeeze"], [81, 4, 1, "", "std"], [81, 3, 1, "", "strides"], [81, 4, 1, "", "sum"], [81, 4, 1, "", "swapaxes"], [81, 3, 1, "", "sycl_context"], [81, 3, 1, "", "sycl_device"], [81, 3, 1, "", "sycl_queue"], [81, 4, 1, "", "take"], [81, 4, 1, "", "to_device"], [81, 4, 1, "", "transpose"], [81, 3, 1, "", "usm_type"], [81, 4, 1, "", "var"]], "dpnp.dtype": [[83, 4, 1, "", "__eq__"], [83, 4, 1, "", "__ge__"], [83, 4, 1, "", "__getitem__"], [83, 4, 1, "", "__gt__"], [83, 4, 1, "", "__le__"], [83, 4, 1, "", "__len__"], [83, 4, 1, "", "__lt__"], [83, 4, 1, "", "__ne__"], [83, 3, 1, "", "alignment"], [83, 3, 1, "", "base"], [83, 3, 1, "", "byteorder"], [83, 3, 1, "", "char"], [83, 3, 1, "", "descr"], [83, 3, 1, "", "fields"], [83, 3, 1, "", "flags"], [83, 3, 1, "", "hasobject"], [83, 3, 1, "", "isalignedstruct"], [83, 3, 1, "", "isbuiltin"], [83, 3, 1, "", "isnative"], [83, 3, 1, "", "itemsize"], [83, 3, 1, "", "kind"], [83, 3, 1, "", "metadata"], [83, 3, 1, "", "name"], [83, 3, 1, "", "names"], [83, 3, 1, "", "ndim"], [83, 4, 1, "", "newbyteorder"], [83, 3, 1, "", "num"], [83, 3, 1, "", "shape"], [83, 3, 1, "", "str"], [83, 3, 1, "", "subdtype"], [83, 3, 1, "", "type"]], "dpnp.fft": [[98, 1, 1, "", "fft"], [99, 1, 1, "", "fft2"], [100, 1, 1, "", "fftfreq"], [101, 1, 1, "", "fftn"], [102, 1, 1, "", "fftshift"], [103, 1, 1, "", "hfft"], [104, 1, 1, "", "ifft"], [105, 1, 1, "", "ifft2"], [106, 1, 1, "", "ifftn"], [107, 1, 1, "", "ifftshift"], [108, 1, 1, "", "ihfft"], [109, 1, 1, "", "irfft"], [110, 1, 1, "", "irfft2"], [111, 1, 1, "", "irfftn"], [112, 1, 1, "", "rfft"], [113, 1, 1, "", "rfft2"], [114, 1, 1, "", "rfftfreq"], [115, 1, 1, "", "rfftn"]], "dpnp.flatiter": [[118, 4, 1, "", "__eq__"], [118, 4, 1, "", "__ge__"], [118, 4, 1, "", "__getitem__"], [118, 4, 1, "", "__gt__"], [118, 4, 1, "", "__iter__"], [118, 4, 1, "", "__le__"], [118, 4, 1, "", "__lt__"], [118, 4, 1, "", "__ne__"], [118, 4, 1, "", "__next__"], [118, 4, 1, "", "__setitem__"]], "dpnp.linalg": [[160, 1, 1, "", "cholesky"], [161, 1, 1, "", "cond"], [162, 1, 1, "", "det"], [163, 1, 1, "", "eig"], [164, 1, 1, "", "eigh"], [165, 1, 1, "", "eigvals"], [166, 1, 1, "", "inv"], [167, 1, 1, "", "matrix_power"], [168, 1, 1, "", "matrix_rank"], [169, 1, 1, "", "multi_dot"], [170, 1, 1, "", "norm"], [171, 1, 1, "", "qr"], [172, 1, 1, "", "slogdet"], [173, 1, 1, "", "solve"], [174, 1, 1, "", "svd"]], "dpnp.ndarray": [[213, 6, 1, "", "T"], [214, 4, 1, "", "__abs__"], [215, 4, 1, "", "__add__"], [216, 4, 1, "", "__and__"], [217, 4, 1, "", "__complex__"], [218, 4, 1, "", "__copy__"], [219, 4, 1, "", "__eq__"], [220, 4, 1, "", "__float__"], [221, 4, 1, "", "__floordiv__"], [222, 4, 1, "", "__ge__"], [223, 4, 1, "", "__getitem__"], [224, 4, 1, "", "__gt__"], [225, 4, 1, "", "__iadd__"], [226, 4, 1, "", "__iand__"], [227, 4, 1, "", "__ifloordiv__"], [228, 4, 1, "", "__ilshift__"], [229, 4, 1, "", "__imod__"], [230, 4, 1, "", "__imul__"], [231, 4, 1, "", "__int__"], [232, 4, 1, "", "__invert__"], [233, 4, 1, "", "__ior__"], [234, 4, 1, "", "__ipow__"], [235, 4, 1, "", "__irshift__"], [236, 4, 1, "", "__isub__"], [237, 4, 1, "", "__itruediv__"], [238, 4, 1, "", "__ixor__"], [239, 4, 1, "", "__le__"], [240, 4, 1, "", "__len__"], [241, 4, 1, "", "__lshift__"], [242, 4, 1, "", "__lt__"], [243, 4, 1, "", "__mod__"], [244, 4, 1, "", "__mul__"], [245, 4, 1, "", "__ne__"], [246, 4, 1, "", "__neg__"], [247, 4, 1, "", "__new__"], [248, 4, 1, "", "__or__"], [249, 4, 1, "", "__pos__"], [250, 4, 1, "", "__pow__"], [251, 4, 1, "", "__repr__"], [252, 4, 1, "", "__rshift__"], [253, 4, 1, "", "__setitem__"], [254, 4, 1, "", "__str__"], [255, 4, 1, "", "__sub__"], [256, 4, 1, "", "__truediv__"], [257, 4, 1, "", "__xor__"], [258, 4, 1, "", "all"], [259, 4, 1, "", "any"], [260, 4, 1, "", "argmax"], [261, 4, 1, "", "argmin"], [262, 4, 1, "", "argsort"], [263, 4, 1, "", "astype"], [264, 4, 1, "", "choose"], [265, 4, 1, "", "clip"], [266, 4, 1, "", "conj"], [267, 4, 1, "", "conjugate"], [268, 4, 1, "", "copy"], [269, 4, 1, "", "cumsum"], [270, 4, 1, "", "diagonal"], [271, 6, 1, "", "dtype"], [272, 4, 1, "", "fill"], [273, 6, 1, "", "flags"], [274, 6, 1, "", "flat"], [275, 4, 1, "", "flatten"], [276, 6, 1, "", "imag"], [277, 4, 1, "", "item"], [278, 6, 1, "", "itemsize"], [279, 4, 1, "", "max"], [280, 4, 1, "", "mean"], [281, 4, 1, "", "min"], [282, 6, 1, "", "nbytes"], [283, 6, 1, "", "ndim"], [284, 4, 1, "", "nonzero"], [285, 4, 1, "", "partition"], [286, 4, 1, "", "prod"], [287, 4, 1, "", "put"], [288, 4, 1, "", "ravel"], [289, 6, 1, "", "real"], [290, 4, 1, "", "repeat"], [291, 4, 1, "", "reshape"], [292, 4, 1, "", "round"], [293, 6, 1, "", "shape"], [294, 6, 1, "", "size"], [295, 4, 1, "", "squeeze"], [296, 4, 1, "", "std"], [297, 6, 1, "", "strides"], [298, 4, 1, "", "sum"], [299, 4, 1, "", "swapaxes"], [300, 4, 1, "", "take"], [301, 4, 1, "", "transpose"], [302, 4, 1, "", "var"]], "dpnp.random": [[322, 2, 1, "", "RandomState"], [323, 1, 1, "", "beta"], [324, 1, 1, "", "binomial"], [325, 1, 1, "", "bytes"], [326, 1, 1, "", "chisquare"], [327, 1, 1, "", "choice"], [328, 1, 1, "", "dirichlet"], [329, 1, 1, "", "exponential"], [330, 1, 1, "", "f"], [331, 1, 1, "", "gamma"], [332, 1, 1, "", "geometric"], [333, 1, 1, "", "gumbel"], [334, 1, 1, "", "hypergeometric"], [335, 1, 1, "", "laplace"], [336, 1, 1, "", "logistic"], [337, 1, 1, "", "lognormal"], [338, 1, 1, "", "logseries"], [339, 1, 1, "", "multinomial"], [340, 1, 1, "", "multivariate_normal"], [341, 1, 1, "", "negative_binomial"], [342, 1, 1, "", "noncentral_chisquare"], [343, 1, 1, "", "noncentral_f"], [344, 1, 1, "", "normal"], [345, 1, 1, "", "pareto"], [346, 1, 1, "", "permutation"], [347, 1, 1, "", "poisson"], [348, 1, 1, "", "power"], [349, 1, 1, "", "rand"], [350, 1, 1, "", "randint"], [351, 1, 1, "", "randn"], [352, 1, 1, "", "random"], [353, 1, 1, "", "random_integers"], [354, 1, 1, "", "random_sample"], [355, 1, 1, "", "ranf"], [356, 1, 1, "", "rayleigh"], [357, 1, 1, "", "sample"], [358, 1, 1, "", "seed"], [359, 1, 1, "", "shuffle"], [360, 1, 1, "", "standard_cauchy"], [361, 1, 1, "", "standard_exponential"], [362, 1, 1, "", "standard_gamma"], [363, 1, 1, "", "standard_normal"], [364, 1, 1, "", "standard_t"], [365, 1, 1, "", "triangular"], [366, 1, 1, "", "uniform"], [367, 1, 1, "", "vonmises"], [368, 1, 1, "", "wald"], [369, 1, 1, "", "weibull"], [370, 1, 1, "", "zipf"]], "dpnp.random.RandomState": [[322, 4, 1, "", "__eq__"], [322, 4, 1, "", "__ge__"], [322, 4, 1, "", "__gt__"], [322, 4, 1, "", "__le__"], [322, 4, 1, "", "__lt__"], [322, 4, 1, "", "__ne__"], [322, 4, 1, "", "get_state"], [322, 4, 1, "", "get_sycl_device"], [322, 4, 1, "", "get_sycl_queue"], [322, 4, 1, "", "normal"], [322, 4, 1, "", "rand"], [322, 4, 1, "", "randint"], [322, 4, 1, "", "randn"], [322, 4, 1, "", "random_sample"], [322, 4, 1, "", "standard_normal"], [322, 4, 1, "", "uniform"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:attribute", "4": "py:method", "5": "py:data", "6": "py:property"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "method", "Python method"], "5": ["py", "data", "Python data"], "6": ["py", "property", "Python property"]}, "titleterms": {"interplai": 0, "data": [0, 2, 7, 8, 9, 430, 436, 439], "parallel": [0, 2], "control": 0, "librari": 0, "exampl": [0, 4], "c": 1, "backend": 1, "api": [1, 429], "refer": [1, 429], "extens": 2, "numpi": [2, 6], "develop": 2, "inform": [2, 8], "overview": 3, "quick": 4, "start": 4, "guid": 4, "devic": 4, "driver": 4, "python": 4, "interpret": 4, "instal": 4, "packag": [4, 438], "from": [4, 7], "anaconda": 4, "build": 4, "conda": 4, "scikit": 4, "test": [4, 8, 432], "binari": 5, "oper": [5, 430, 432, 433, 434, 436, 444], "elementwis": 5, "bit": [5, 444], "pack": 5, "output": 5, "format": 5, "comparison": [6, 432, 436, 444], "tabl": 6, "dpnp": [6, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 439], "cupi": 6, "summari": 6, "modul": [6, 438], "level": 6, "multi": [6, 436], "dimension": [6, 436], "arrai": [6, 7, 9, 31, 430, 432, 433, 436], "linear": [6, 431], "algebra": [6, 431], "discret": 6, "fourier": 6, "transform": 6, "random": [6, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 439], "sampl": [6, 357, 439], "creation": 7, "routin": [7, 8, 10, 430, 433, 434, 435, 440], "basic": [7, 433, 438], "other": [7, 431, 434, 436], "numer": 7, "rang": 7, "matrix": [7, 431, 436], "The": 7, "class": 7, "type": [8, 9, 432, 436], "creat": 8, "miscellan": [8, 434, 435], "avail": [9, 444], "fft": [10, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115], "function": [10, 432, 434, 442, 443, 444], "standard": 10, "real": [10, 289, 372], "hermitian": 10, "helper": 10, "ab": 11, "absolut": 12, "add": 13, "all": [14, 258], "allclos": 15, "amax": 16, "amin": 17, "ani": [18, 259], "arang": 19, "arcco": 20, "arccosh": 21, "arcsin": 22, "arcsinh": 23, "arctan": 24, "arctan2": 25, "arctanh": 26, "argmax": [27, 260], "argmin": [28, 261], "argsort": [29, 262], "around": 30, "array_equ": 32, "asanyarrai": 33, "asarrai": 34, "ascontiguousarrai": 35, "asfarrai": 36, "asfortranarrai": 37, "asnumpi": 38, "atleast_1d": 39, "atleast_2d": 40, "atleast_3d": 41, "averag": [42, 443], "bincount": 43, "bitwise_and": 44, "bitwise_not": 45, "bitwise_or": 46, "bitwise_xor": 47, "broadcast_arrai": 48, "broadcast_to": 49, "can_cast": 50, "cbrt": 51, "ceil": 52, "choos": [53, 264], "clip": [54, 265], "column_stack": 55, "concaten": 56, "conj": [57, 266], "conjug": [58, 267], "convolv": 59, "copi": [60, 268], "copysign": 61, "copyto": 62, "correl": [63, 443], "co": 64, "cosh": 65, "count_nonzero": 66, "cov": 67, "cross": 68, "cumprod": 69, "cumsum": [70, 269], "deg2rad": 71, "degre": 72, "diag": 73, "diag_indic": 74, "diag_indices_from": 75, "diagflat": 76, "diagon": [77, 270], "diff": 78, "divid": 79, "dot": 80, "dpnp_arrai": 81, "dstack": 82, "dtype": [83, 271], "ediff1d": 84, "einsum": 85, "einsum_path": 86, "empti": 87, "empty_lik": 88, "equal": 89, "erf": 90, "exp": 91, "exp2": 92, "expand_dim": 93, "expm1": 94, "extract": 95, "ey": 96, "fab": 97, "fft2": 99, "fftfreq": 100, "fftn": 101, "fftshift": 102, "hfft": 103, "ifft": 104, "ifft2": 105, "ifftn": 106, "ifftshift": 107, "ihfft": 108, "irfft": 109, "irfft2": 110, "irfftn": 111, "rfft": 112, "rfft2": 113, "rfftfreq": 114, "rfftn": 115, "fill_diagon": 116, "finfo": 117, "flatit": 118, "flip": 119, "fliplr": 120, "flipud": 121, "floor": 122, "floor_divid": 123, "fmax": 124, "fmin": 125, "fmod": 126, "from_dlpack": 127, "frombuff": 128, "fromfil": 129, "fromfunct": 130, "fromit": 131, "fromstr": 132, "full": 133, "full_lik": 134, "geomspac": 135, "get_includ": 136, "gradient": 137, "greater": 138, "greater_equ": 139, "histogram": [140, 443], "hstack": 141, "hypot": 142, "ident": 143, "iinfo": 144, "imag": [145, 276], "indic": 146, "inner": 147, "invert": 148, "isclos": 149, "isfinit": 150, "isinf": 151, "isnan": 152, "isscalar": 153, "issubdtyp": 154, "issubsctyp": 155, "kron": 156, "left_shift": 157, "less": 158, "less_equ": 159, "linalg": [160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174], "choleski": 160, "cond": 161, "det": 162, "eig": 163, "eigh": 164, "eigval": 165, "inv": 166, "matrix_pow": 167, "matrix_rank": 168, "multi_dot": 169, "norm": [170, 431], "qr": 171, "slogdet": 172, "solv": [173, 431], "svd": 174, "linspac": 175, "loadtxt": 176, "log": 177, "log10": 178, "log1p": 179, "log2": 180, "logaddexp": 181, "logical_and": 182, "logical_not": 183, "logical_or": 184, "logical_xor": 185, "logspac": 186, "logsumexp": 187, "matmul": 188, "max": [189, 279], "maximum": 190, "mean": [191, 280], "median": 192, "meshgrid": 193, "mgrid": 194, "min": [195, 281], "minimum": 196, "mod": 197, "modf": 198, "moveaxi": 199, "multipli": 200, "nanargmax": 201, "nanargmin": 202, "nancumprod": 203, "nancumsum": 204, "nanmax": 205, "nanmean": 206, "nanmin": 207, "nanprod": 208, "nanstd": 209, "nansum": 210, "nanvar": 211, "ndarrai": [212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 436], "t": 213, "__abs__": 214, "__add__": 215, "__and__": 216, "__complex__": 217, "__copy__": 218, "__eq__": 219, "__float__": 220, "__floordiv__": 221, "__ge__": 222, "__getitem__": 223, "__gt__": 224, "__iadd__": 225, "__iand__": 226, "__ifloordiv__": 227, "__ilshift__": 228, "__imod__": 229, "__imul__": 230, "__int__": 231, "__invert__": 232, "__ior__": 233, "__ipow__": 234, "__irshift__": 235, "__isub__": 236, "__itruediv__": 237, "__ixor__": 238, "__le__": 239, "__len__": 240, "__lshift__": 241, "__lt__": 242, "__mod__": 243, "__mul__": 244, "__ne__": 245, "__neg__": 246, "__new__": 247, "__or__": 248, "__pos__": 249, "__pow__": 250, "__repr__": 251, "__rshift__": 252, "__setitem__": 253, "__str__": 254, "__sub__": 255, "__truediv__": 256, "__xor__": 257, "astyp": 263, "fill": 272, "flag": 273, "flat": 274, "flatten": 275, "item": [277, 436], "items": 278, "nbyte": 282, "ndim": 283, "nonzero": [284, 304], "partit": [285, 310], "prod": [286, 314], "put": [287, 317], "ravel": [288, 371], "repeat": [290, 376], "reshap": [291, 377], "round": [292, 383, 434], "shape": [293, 388, 433, 436], "size": 294, "squeez": [295, 396], "std": [296, 398], "stride": 297, "sum": [298, 400, 434], "swapax": [299, 401], "take": [300, 402], "transpos": [301, 409, 433], "var": [302, 423], "neg": 303, "not_equ": 305, "ogrid": 306, "ones": 307, "ones_lik": 308, "outer": 309, "place": 311, "posit": 312, "power": [313, 348], "proj": 315, "ptp": 316, "put_along_axi": 318, "putmask": 319, "rad2deg": 320, "radian": 321, "randomst": 322, "beta": 323, "binomi": 324, "byte": 325, "chisquar": 326, "choic": 327, "dirichlet": 328, "exponenti": 329, "f": 330, "gamma": 331, "geometr": 332, "gumbel": 333, "hypergeometr": 334, "laplac": 335, "logist": 336, "lognorm": 337, "logseri": 338, "multinomi": 339, "multivariate_norm": 340, "negative_binomi": 341, "noncentral_chisquar": 342, "noncentral_f": 343, "normal": 344, "pareto": 345, "permut": [346, 439], "poisson": 347, "rand": 349, "randint": 350, "randn": 351, "random_integ": 353, "random_sampl": 354, "ranf": 355, "rayleigh": 356, "seed": 358, "shuffl": 359, "standard_cauchi": 360, "standard_exponenti": 361, "standard_gamma": 362, "standard_norm": 363, "standard_t": 364, "triangular": 365, "uniform": 366, "vonmis": 367, "wald": 368, "weibul": 369, "zipf": 370, "reciproc": 373, "reduce_hypot": 374, "remaind": 375, "result_typ": 378, "right_shift": 379, "rint": 380, "roll": 381, "rollaxi": 382, "row_stack": 384, "rsqrt": 385, "searchsort": 386, "select": [387, 436], "sign": 389, "signbit": 390, "sin": 391, "sinh": 392, "sort": [393, 441], "sqrt": 394, "squar": 395, "stack": 397, "subtract": 399, "take_along_axi": 403, "tan": 404, "tanh": 405, "tensordot": 406, "tile": [407, 433], "trace": 408, "trapz": 410, "tri": 411, "tril": 412, "tril_indic": 413, "tril_indices_from": 414, "triu": 415, "triu_indic": 416, "triu_indices_from": 417, "true_divid": 418, "trunc": 419, "uniqu": 420, "unwrap": 421, "vander": 422, "vdot": 424, "vstack": 425, "where": 426, "zero": 427, "zeros_lik": 428, "index": [430, 436], "gener": [430, 439], "like": [430, 433], "insert": 430, "iter": 430, "over": 430, "vector": 431, "product": [431, 434], "decomposit": 431, "eigenvalu": 431, "number": [431, 433, 434], "equat": 431, "logic": 432, "truth": 432, "valu": 432, "infin": 432, "nan": 432, "manipul": [433, 436], "chang": 433, "dimens": 433, "kind": 433, "join": 433, "split": 433, "ad": 433, "remov": 433, "element": 433, "rearrang": 433, "mathemat": 434, "trigonometr": [434, 444], "hyperbol": 434, "differ": 434, "expon": 434, "logarithm": 434, "special": [434, 436, 442], "float": [434, 444], "point": 434, "ration": 434, "arithmet": [434, 436, 438], "handl": 434, "complex": 434, "extrema": 434, "find": 434, "util": 435, "construct": 436, "attribut": 436, "memori": 436, "layout": 436, "method": 436, "convers": 436, "calcul": 436, "multipl": 436, "pad": 437, "polynomi": 438, "polyutil": 438, "poly1d": 438, "simpl": 439, "distribut": 439, "search": 441, "count": 441, "error": 442, "statist": 443, "order": 443, "varianc": 443, "univers": 444, "ufunc": 444, "math": 444, "twiddl": 444}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1, "sphinx.ext.intersphinx": 1, "sphinx": 60}, "alltitles": {"Interplay with the Data Parallel Control Library": [[0, "interplay-with-the-data-parallel-control-library"]], "Example": [[0, "example"]], "C++ backend API Reference": [[1, "c-backend-api-reference"]], "Data Parallel Extension for NumPy*": [[2, "module-dpnp"]], "Development information": [[2, null]], "Overview": [[3, "id1"]], "Quick Start Guide": [[4, "id1"]], "Device Drivers": [[4, "device-drivers"]], "Python Interpreter": [[4, "python-interpreter"]], "Installation": [[4, "installation"]], "Install Package from Anaconda": [[4, "install-package-from-anaconda"]], "Build and Install Conda Package": [[4, "build-and-install-conda-package"]], "Build and Install with scikit-build": [[4, "build-and-install-with-scikit-build"]], "Testing": [[4, "testing"]], "Examples": [[4, "examples"]], "Binary Operations": [[5, "binary-operations"]], "Elementwise bit operations": [[5, "elementwise-bit-operations"]], "Bit packing": [[5, "bit-packing"]], "Output formatting": [[5, "output-formatting"]], "Comparison Table NumPy/ DPNP/ CuPy": [[6, "comparison-table-numpy-dpnp-cupy"]], "Summary": [[6, "summary"]], "Module-Level": [[6, "module-level"]], "Multi-Dimensional Array": [[6, "multi-dimensional-array"]], "Linear Algebra": [[6, "linear-algebra"], [431, "linear-algebra"]], "Discrete Fourier Transform": [[6, "discrete-fourier-transform"]], "Random Sampling": [[6, "random-sampling"]], "Array Creation Routines": [[7, "array-creation-routines"]], "Basic creation routines": [[7, "basic-creation-routines"]], "Creation from other data": [[7, "creation-from-other-data"]], "Numerical ranges": [[7, "numerical-ranges"]], "Matrix creation": [[7, "matrix-creation"]], "The Matrix class": [[7, "the-matrix-class"]], "Data type routines": [[8, "data-type-routines"]], "Creating data types": [[8, "creating-data-types"]], "Data type information": [[8, "data-type-information"]], "Data type testing": [[8, "data-type-testing"]], "Miscellaneous": [[8, "miscellaneous"], [434, "miscellaneous"]], "Available array data types": [[9, "available-array-data-types"]], "FFT Functions": [[10, "fft-functions"]], "Standard FFTs": [[10, "standard-ffts"]], "Real FFTs": [[10, "real-ffts"]], "Hermitian FFTs": [[10, "hermitian-ffts"]], "Helper routines": [[10, "helper-routines"]], "dpnp.abs": [[11, "dpnp-abs"]], "dpnp.absolute": [[12, "dpnp-absolute"]], "dpnp.add": [[13, "dpnp-add"]], "dpnp.all": [[14, "dpnp-all"]], "dpnp.allclose": [[15, "dpnp-allclose"]], "dpnp.amax": [[16, "dpnp-amax"]], "dpnp.amin": [[17, "dpnp-amin"]], "dpnp.any": [[18, "dpnp-any"]], "dpnp.arange": [[19, "dpnp-arange"]], "dpnp.arccos": [[20, "dpnp-arccos"]], "dpnp.arccosh": [[21, "dpnp-arccosh"]], "dpnp.arcsin": [[22, "dpnp-arcsin"]], "dpnp.arcsinh": [[23, "dpnp-arcsinh"]], "dpnp.arctan": [[24, "dpnp-arctan"]], "dpnp.arctan2": [[25, "dpnp-arctan2"]], "dpnp.arctanh": [[26, "dpnp-arctanh"]], "dpnp.argmax": [[27, "dpnp-argmax"]], "dpnp.argmin": [[28, "dpnp-argmin"]], "dpnp.argsort": [[29, "dpnp-argsort"]], "dpnp.around": [[30, "dpnp-around"]], "dpnp.array": [[31, "dpnp-array"]], "dpnp.array_equal": [[32, "dpnp-array-equal"]], "dpnp.asanyarray": [[33, "dpnp-asanyarray"]], "dpnp.asarray": [[34, "dpnp-asarray"]], "dpnp.ascontiguousarray": [[35, "dpnp-ascontiguousarray"]], "dpnp.asfarray": [[36, "dpnp-asfarray"]], "dpnp.asfortranarray": [[37, "dpnp-asfortranarray"]], "dpnp.asnumpy": [[38, "dpnp-asnumpy"]], "dpnp.atleast_1d": [[39, "dpnp-atleast-1d"]], "dpnp.atleast_2d": [[40, "dpnp-atleast-2d"]], "dpnp.atleast_3d": [[41, "dpnp-atleast-3d"]], "dpnp.average": [[42, "dpnp-average"]], "dpnp.bincount": [[43, "dpnp-bincount"]], "dpnp.bitwise_and": [[44, "dpnp-bitwise-and"]], "dpnp.bitwise_not": [[45, "dpnp-bitwise-not"]], "dpnp.bitwise_or": [[46, "dpnp-bitwise-or"]], "dpnp.bitwise_xor": [[47, "dpnp-bitwise-xor"]], "dpnp.broadcast_arrays": [[48, "dpnp-broadcast-arrays"]], "dpnp.broadcast_to": [[49, "dpnp-broadcast-to"]], "dpnp.can_cast": [[50, "dpnp-can-cast"]], "dpnp.cbrt": [[51, "dpnp-cbrt"]], "dpnp.ceil": [[52, "dpnp-ceil"]], "dpnp.choose": [[53, "dpnp-choose"]], "dpnp.clip": [[54, "dpnp-clip"]], "dpnp.column_stack": [[55, "dpnp-column-stack"]], "dpnp.concatenate": [[56, "dpnp-concatenate"]], "dpnp.conj": [[57, "dpnp-conj"]], "dpnp.conjugate": [[58, "dpnp-conjugate"]], "dpnp.convolve": [[59, "dpnp-convolve"]], "dpnp.copy": [[60, "dpnp-copy"]], "dpnp.copysign": [[61, "dpnp-copysign"]], "dpnp.copyto": [[62, "dpnp-copyto"]], "dpnp.correlate": [[63, "dpnp-correlate"]], "dpnp.cos": [[64, "dpnp-cos"]], "dpnp.cosh": [[65, "dpnp-cosh"]], "dpnp.count_nonzero": [[66, "dpnp-count-nonzero"]], "dpnp.cov": [[67, "dpnp-cov"]], "dpnp.cross": [[68, "dpnp-cross"]], "dpnp.cumprod": [[69, "dpnp-cumprod"]], "dpnp.cumsum": [[70, "dpnp-cumsum"]], "dpnp.deg2rad": [[71, "dpnp-deg2rad"]], "dpnp.degrees": [[72, "dpnp-degrees"]], "dpnp.diag": [[73, "dpnp-diag"]], "dpnp.diag_indices": [[74, "dpnp-diag-indices"]], "dpnp.diag_indices_from": [[75, "dpnp-diag-indices-from"]], "dpnp.diagflat": [[76, "dpnp-diagflat"]], "dpnp.diagonal": [[77, "dpnp-diagonal"]], "dpnp.diff": [[78, "dpnp-diff"]], "dpnp.divide": [[79, "dpnp-divide"]], "dpnp.dot": [[80, "dpnp-dot"]], "dpnp.dpnp_array.dpnp_array": [[81, "dpnp-dpnp-array-dpnp-array"]], "dpnp.dstack": [[82, "dpnp-dstack"]], "dpnp.dtype": [[83, "dpnp-dtype"]], "dpnp.ediff1d": [[84, "dpnp-ediff1d"]], "dpnp.einsum": [[85, "dpnp-einsum"]], "dpnp.einsum_path": [[86, "dpnp-einsum-path"]], "dpnp.empty": [[87, "dpnp-empty"]], "dpnp.empty_like": [[88, "dpnp-empty-like"]], "dpnp.equal": [[89, "dpnp-equal"]], "dpnp.erf": [[90, "dpnp-erf"]], "dpnp.exp": [[91, "dpnp-exp"]], "dpnp.exp2": [[92, "dpnp-exp2"]], "dpnp.expand_dims": [[93, "dpnp-expand-dims"]], "dpnp.expm1": [[94, "dpnp-expm1"]], "dpnp.extract": [[95, "dpnp-extract"]], "dpnp.eye": [[96, "dpnp-eye"]], "dpnp.fabs": [[97, "dpnp-fabs"]], "dpnp.fft.fft": [[98, "dpnp-fft-fft"]], "dpnp.fft.fft2": [[99, "dpnp-fft-fft2"]], "dpnp.fft.fftfreq": [[100, "dpnp-fft-fftfreq"]], "dpnp.fft.fftn": [[101, "dpnp-fft-fftn"]], "dpnp.fft.fftshift": [[102, "dpnp-fft-fftshift"]], "dpnp.fft.hfft": [[103, "dpnp-fft-hfft"]], "dpnp.fft.ifft": [[104, "dpnp-fft-ifft"]], "dpnp.fft.ifft2": [[105, "dpnp-fft-ifft2"]], "dpnp.fft.ifftn": [[106, "dpnp-fft-ifftn"]], "dpnp.fft.ifftshift": [[107, "dpnp-fft-ifftshift"]], "dpnp.fft.ihfft": [[108, "dpnp-fft-ihfft"]], "dpnp.fft.irfft": [[109, "dpnp-fft-irfft"]], "dpnp.fft.irfft2": [[110, "dpnp-fft-irfft2"]], "dpnp.fft.irfftn": [[111, "dpnp-fft-irfftn"]], "dpnp.fft.rfft": [[112, "dpnp-fft-rfft"]], "dpnp.fft.rfft2": [[113, "dpnp-fft-rfft2"]], "dpnp.fft.rfftfreq": [[114, "dpnp-fft-rfftfreq"]], "dpnp.fft.rfftn": [[115, "dpnp-fft-rfftn"]], "dpnp.fill_diagonal": [[116, "dpnp-fill-diagonal"]], "dpnp.finfo": [[117, "dpnp-finfo"]], "dpnp.flatiter": [[118, "dpnp-flatiter"]], "dpnp.flip": [[119, "dpnp-flip"]], "dpnp.fliplr": [[120, "dpnp-fliplr"]], "dpnp.flipud": [[121, "dpnp-flipud"]], "dpnp.floor": [[122, "dpnp-floor"]], "dpnp.floor_divide": [[123, "dpnp-floor-divide"]], "dpnp.fmax": [[124, "dpnp-fmax"]], "dpnp.fmin": [[125, "dpnp-fmin"]], "dpnp.fmod": [[126, "dpnp-fmod"]], "dpnp.from_dlpack": [[127, "dpnp-from-dlpack"]], "dpnp.frombuffer": [[128, "dpnp-frombuffer"]], "dpnp.fromfile": [[129, "dpnp-fromfile"]], "dpnp.fromfunction": [[130, "dpnp-fromfunction"]], "dpnp.fromiter": [[131, "dpnp-fromiter"]], "dpnp.fromstring": [[132, "dpnp-fromstring"]], "dpnp.full": [[133, "dpnp-full"]], "dpnp.full_like": [[134, "dpnp-full-like"]], "dpnp.geomspace": [[135, "dpnp-geomspace"]], "dpnp.get_include": [[136, "dpnp-get-include"]], "dpnp.gradient": [[137, "dpnp-gradient"]], "dpnp.greater": [[138, "dpnp-greater"]], "dpnp.greater_equal": [[139, "dpnp-greater-equal"]], "dpnp.histogram": [[140, "dpnp-histogram"]], "dpnp.hstack": [[141, "dpnp-hstack"]], "dpnp.hypot": [[142, "dpnp-hypot"]], "dpnp.identity": [[143, "dpnp-identity"]], "dpnp.iinfo": [[144, "dpnp-iinfo"]], "dpnp.imag": [[145, "dpnp-imag"]], "dpnp.indices": [[146, "dpnp-indices"]], "dpnp.inner": [[147, "dpnp-inner"]], "dpnp.invert": [[148, "dpnp-invert"]], "dpnp.isclose": [[149, "dpnp-isclose"]], "dpnp.isfinite": [[150, "dpnp-isfinite"]], "dpnp.isinf": [[151, "dpnp-isinf"]], "dpnp.isnan": [[152, "dpnp-isnan"]], "dpnp.isscalar": [[153, "dpnp-isscalar"]], "dpnp.issubdtype": [[154, "dpnp-issubdtype"]], "dpnp.issubsctype": [[155, "dpnp-issubsctype"]], "dpnp.kron": [[156, "dpnp-kron"]], "dpnp.left_shift": [[157, "dpnp-left-shift"]], "dpnp.less": [[158, "dpnp-less"]], "dpnp.less_equal": [[159, "dpnp-less-equal"]], "dpnp.linalg.cholesky": [[160, "dpnp-linalg-cholesky"]], "dpnp.linalg.cond": [[161, "dpnp-linalg-cond"]], "dpnp.linalg.det": [[162, "dpnp-linalg-det"]], "dpnp.linalg.eig": [[163, "dpnp-linalg-eig"]], "dpnp.linalg.eigh": [[164, "dpnp-linalg-eigh"]], "dpnp.linalg.eigvals": [[165, "dpnp-linalg-eigvals"]], "dpnp.linalg.inv": [[166, "dpnp-linalg-inv"]], "dpnp.linalg.matrix_power": [[167, "dpnp-linalg-matrix-power"]], "dpnp.linalg.matrix_rank": [[168, "dpnp-linalg-matrix-rank"]], "dpnp.linalg.multi_dot": [[169, "dpnp-linalg-multi-dot"]], "dpnp.linalg.norm": [[170, "dpnp-linalg-norm"]], "dpnp.linalg.qr": [[171, "dpnp-linalg-qr"]], "dpnp.linalg.slogdet": [[172, "dpnp-linalg-slogdet"]], "dpnp.linalg.solve": [[173, "dpnp-linalg-solve"]], "dpnp.linalg.svd": [[174, "dpnp-linalg-svd"]], "dpnp.linspace": [[175, "dpnp-linspace"]], "dpnp.loadtxt": [[176, "dpnp-loadtxt"]], "dpnp.log": [[177, "dpnp-log"]], "dpnp.log10": [[178, "dpnp-log10"]], "dpnp.log1p": [[179, "dpnp-log1p"]], "dpnp.log2": [[180, "dpnp-log2"]], "dpnp.logaddexp": [[181, "dpnp-logaddexp"]], "dpnp.logical_and": [[182, "dpnp-logical-and"]], "dpnp.logical_not": [[183, "dpnp-logical-not"]], "dpnp.logical_or": [[184, "dpnp-logical-or"]], "dpnp.logical_xor": [[185, "dpnp-logical-xor"]], "dpnp.logspace": [[186, "dpnp-logspace"]], "dpnp.logsumexp": [[187, "dpnp-logsumexp"]], "dpnp.matmul": [[188, "dpnp-matmul"]], "dpnp.max": [[189, "dpnp-max"]], "dpnp.maximum": [[190, "dpnp-maximum"]], "dpnp.mean": [[191, "dpnp-mean"]], "dpnp.median": [[192, "dpnp-median"]], "dpnp.meshgrid": [[193, "dpnp-meshgrid"]], "dpnp.mgrid": [[194, "dpnp-mgrid"]], "dpnp.min": [[195, "dpnp-min"]], "dpnp.minimum": [[196, "dpnp-minimum"]], "dpnp.mod": [[197, "dpnp-mod"]], "dpnp.modf": [[198, "dpnp-modf"]], "dpnp.moveaxis": [[199, "dpnp-moveaxis"]], "dpnp.multiply": [[200, "dpnp-multiply"]], "dpnp.nanargmax": [[201, "dpnp-nanargmax"]], "dpnp.nanargmin": [[202, "dpnp-nanargmin"]], "dpnp.nancumprod": [[203, "dpnp-nancumprod"]], "dpnp.nancumsum": [[204, "dpnp-nancumsum"]], "dpnp.nanmax": [[205, "dpnp-nanmax"]], "dpnp.nanmean": [[206, "dpnp-nanmean"]], "dpnp.nanmin": [[207, "dpnp-nanmin"]], "dpnp.nanprod": [[208, "dpnp-nanprod"]], "dpnp.nanstd": [[209, "dpnp-nanstd"]], "dpnp.nansum": [[210, "dpnp-nansum"]], "dpnp.nanvar": [[211, "dpnp-nanvar"]], "dpnp.ndarray": [[212, "dpnp-ndarray"]], "dpnp.ndarray.T": [[213, "dpnp-ndarray-t"]], "dpnp.ndarray.__abs__": [[214, "dpnp-ndarray-abs"]], "dpnp.ndarray.__add__": [[215, "dpnp-ndarray-add"]], "dpnp.ndarray.__and__": [[216, "dpnp-ndarray-and"]], "dpnp.ndarray.__complex__": [[217, "dpnp-ndarray-complex"]], "dpnp.ndarray.__copy__": [[218, "dpnp-ndarray-copy"]], "dpnp.ndarray.__eq__": [[219, "dpnp-ndarray-eq"]], "dpnp.ndarray.__float__": [[220, "dpnp-ndarray-float"]], "dpnp.ndarray.__floordiv__": [[221, "dpnp-ndarray-floordiv"]], "dpnp.ndarray.__ge__": [[222, "dpnp-ndarray-ge"]], "dpnp.ndarray.__getitem__": [[223, "dpnp-ndarray-getitem"]], "dpnp.ndarray.__gt__": [[224, "dpnp-ndarray-gt"]], "dpnp.ndarray.__iadd__": [[225, "dpnp-ndarray-iadd"]], "dpnp.ndarray.__iand__": [[226, "dpnp-ndarray-iand"]], "dpnp.ndarray.__ifloordiv__": [[227, "dpnp-ndarray-ifloordiv"]], "dpnp.ndarray.__ilshift__": [[228, "dpnp-ndarray-ilshift"]], "dpnp.ndarray.__imod__": [[229, "dpnp-ndarray-imod"]], "dpnp.ndarray.__imul__": [[230, "dpnp-ndarray-imul"]], "dpnp.ndarray.__int__": [[231, "dpnp-ndarray-int"]], "dpnp.ndarray.__invert__": [[232, "dpnp-ndarray-invert"]], "dpnp.ndarray.__ior__": [[233, "dpnp-ndarray-ior"]], "dpnp.ndarray.__ipow__": [[234, "dpnp-ndarray-ipow"]], "dpnp.ndarray.__irshift__": [[235, "dpnp-ndarray-irshift"]], "dpnp.ndarray.__isub__": [[236, "dpnp-ndarray-isub"]], "dpnp.ndarray.__itruediv__": [[237, "dpnp-ndarray-itruediv"]], "dpnp.ndarray.__ixor__": [[238, "dpnp-ndarray-ixor"]], "dpnp.ndarray.__le__": [[239, "dpnp-ndarray-le"]], "dpnp.ndarray.__len__": [[240, "dpnp-ndarray-len"]], "dpnp.ndarray.__lshift__": [[241, "dpnp-ndarray-lshift"]], "dpnp.ndarray.__lt__": [[242, "dpnp-ndarray-lt"]], "dpnp.ndarray.__mod__": [[243, "dpnp-ndarray-mod"]], "dpnp.ndarray.__mul__": [[244, "dpnp-ndarray-mul"]], "dpnp.ndarray.__ne__": [[245, "dpnp-ndarray-ne"]], "dpnp.ndarray.__neg__": [[246, "dpnp-ndarray-neg"]], "dpnp.ndarray.__new__": [[247, "dpnp-ndarray-new"]], "dpnp.ndarray.__or__": [[248, "dpnp-ndarray-or"]], "dpnp.ndarray.__pos__": [[249, "dpnp-ndarray-pos"]], "dpnp.ndarray.__pow__": [[250, "dpnp-ndarray-pow"]], "dpnp.ndarray.__repr__": [[251, "dpnp-ndarray-repr"]], "dpnp.ndarray.__rshift__": [[252, "dpnp-ndarray-rshift"]], "dpnp.ndarray.__setitem__": [[253, "dpnp-ndarray-setitem"]], "dpnp.ndarray.__str__": [[254, "dpnp-ndarray-str"]], "dpnp.ndarray.__sub__": [[255, "dpnp-ndarray-sub"]], "dpnp.ndarray.__truediv__": [[256, "dpnp-ndarray-truediv"]], "dpnp.ndarray.__xor__": [[257, "dpnp-ndarray-xor"]], "dpnp.ndarray.all": [[258, "dpnp-ndarray-all"]], "dpnp.ndarray.any": [[259, "dpnp-ndarray-any"]], "dpnp.ndarray.argmax": [[260, "dpnp-ndarray-argmax"]], "dpnp.ndarray.argmin": [[261, "dpnp-ndarray-argmin"]], "dpnp.ndarray.argsort": [[262, "dpnp-ndarray-argsort"]], "dpnp.ndarray.astype": [[263, "dpnp-ndarray-astype"]], "dpnp.ndarray.choose": [[264, "dpnp-ndarray-choose"]], "dpnp.ndarray.clip": [[265, "dpnp-ndarray-clip"]], "dpnp.ndarray.conj": [[266, "dpnp-ndarray-conj"]], "dpnp.ndarray.conjugate": [[267, "dpnp-ndarray-conjugate"]], "dpnp.ndarray.copy": [[268, "dpnp-ndarray-copy"]], "dpnp.ndarray.cumsum": [[269, "dpnp-ndarray-cumsum"]], "dpnp.ndarray.diagonal": [[270, "dpnp-ndarray-diagonal"]], "dpnp.ndarray.dtype": [[271, "dpnp-ndarray-dtype"]], "dpnp.ndarray.fill": [[272, "dpnp-ndarray-fill"]], "dpnp.ndarray.flags": [[273, "dpnp-ndarray-flags"]], "dpnp.ndarray.flat": [[274, "dpnp-ndarray-flat"]], "dpnp.ndarray.flatten": [[275, "dpnp-ndarray-flatten"]], "dpnp.ndarray.imag": [[276, "dpnp-ndarray-imag"]], "dpnp.ndarray.item": [[277, "dpnp-ndarray-item"]], "dpnp.ndarray.itemsize": [[278, "dpnp-ndarray-itemsize"]], "dpnp.ndarray.max": [[279, "dpnp-ndarray-max"]], "dpnp.ndarray.mean": [[280, "dpnp-ndarray-mean"]], "dpnp.ndarray.min": [[281, "dpnp-ndarray-min"]], "dpnp.ndarray.nbytes": [[282, "dpnp-ndarray-nbytes"]], "dpnp.ndarray.ndim": [[283, "dpnp-ndarray-ndim"]], "dpnp.ndarray.nonzero": [[284, "dpnp-ndarray-nonzero"]], "dpnp.ndarray.partition": [[285, "dpnp-ndarray-partition"]], "dpnp.ndarray.prod": [[286, "dpnp-ndarray-prod"]], "dpnp.ndarray.put": [[287, "dpnp-ndarray-put"]], "dpnp.ndarray.ravel": [[288, "dpnp-ndarray-ravel"]], "dpnp.ndarray.real": [[289, "dpnp-ndarray-real"]], "dpnp.ndarray.repeat": [[290, "dpnp-ndarray-repeat"]], "dpnp.ndarray.reshape": [[291, "dpnp-ndarray-reshape"]], "dpnp.ndarray.round": [[292, "dpnp-ndarray-round"]], "dpnp.ndarray.shape": [[293, "dpnp-ndarray-shape"]], "dpnp.ndarray.size": [[294, "dpnp-ndarray-size"]], "dpnp.ndarray.squeeze": [[295, "dpnp-ndarray-squeeze"]], "dpnp.ndarray.std": [[296, "dpnp-ndarray-std"]], "dpnp.ndarray.strides": [[297, "dpnp-ndarray-strides"]], "dpnp.ndarray.sum": [[298, "dpnp-ndarray-sum"]], "dpnp.ndarray.swapaxes": [[299, "dpnp-ndarray-swapaxes"]], "dpnp.ndarray.take": [[300, "dpnp-ndarray-take"]], "dpnp.ndarray.transpose": [[301, "dpnp-ndarray-transpose"]], "dpnp.ndarray.var": [[302, "dpnp-ndarray-var"]], "dpnp.negative": [[303, "dpnp-negative"]], "dpnp.nonzero": [[304, "dpnp-nonzero"]], "dpnp.not_equal": [[305, "dpnp-not-equal"]], "dpnp.ogrid": [[306, "dpnp-ogrid"]], "dpnp.ones": [[307, "dpnp-ones"]], "dpnp.ones_like": [[308, "dpnp-ones-like"]], "dpnp.outer": [[309, "dpnp-outer"]], "dpnp.partition": [[310, "dpnp-partition"]], "dpnp.place": [[311, "dpnp-place"]], "dpnp.positive": [[312, "dpnp-positive"]], "dpnp.power": [[313, "dpnp-power"]], "dpnp.prod": [[314, "dpnp-prod"]], "dpnp.proj": [[315, "dpnp-proj"]], "dpnp.ptp": [[316, "dpnp-ptp"]], "dpnp.put": [[317, "dpnp-put"]], "dpnp.put_along_axis": [[318, "dpnp-put-along-axis"]], "dpnp.putmask": [[319, "dpnp-putmask"]], "dpnp.rad2deg": [[320, "dpnp-rad2deg"]], "dpnp.radians": [[321, "dpnp-radians"]], "dpnp.random.RandomState": [[322, "dpnp-random-randomstate"]], "dpnp.random.beta": [[323, "dpnp-random-beta"]], "dpnp.random.binomial": [[324, "dpnp-random-binomial"]], "dpnp.random.bytes": [[325, "dpnp-random-bytes"]], "dpnp.random.chisquare": [[326, "dpnp-random-chisquare"]], "dpnp.random.choice": [[327, "dpnp-random-choice"]], "dpnp.random.dirichlet": [[328, "dpnp-random-dirichlet"]], "dpnp.random.exponential": [[329, "dpnp-random-exponential"]], "dpnp.random.f": [[330, "dpnp-random-f"]], "dpnp.random.gamma": [[331, "dpnp-random-gamma"]], "dpnp.random.geometric": [[332, "dpnp-random-geometric"]], "dpnp.random.gumbel": [[333, "dpnp-random-gumbel"]], "dpnp.random.hypergeometric": [[334, "dpnp-random-hypergeometric"]], "dpnp.random.laplace": [[335, "dpnp-random-laplace"]], "dpnp.random.logistic": [[336, "dpnp-random-logistic"]], "dpnp.random.lognormal": [[337, "dpnp-random-lognormal"]], "dpnp.random.logseries": [[338, "dpnp-random-logseries"]], "dpnp.random.multinomial": [[339, "dpnp-random-multinomial"]], "dpnp.random.multivariate_normal": [[340, "dpnp-random-multivariate-normal"]], "dpnp.random.negative_binomial": [[341, "dpnp-random-negative-binomial"]], "dpnp.random.noncentral_chisquare": [[342, "dpnp-random-noncentral-chisquare"]], "dpnp.random.noncentral_f": [[343, "dpnp-random-noncentral-f"]], "dpnp.random.normal": [[344, "dpnp-random-normal"]], "dpnp.random.pareto": [[345, "dpnp-random-pareto"]], "dpnp.random.permutation": [[346, "dpnp-random-permutation"]], "dpnp.random.poisson": [[347, "dpnp-random-poisson"]], "dpnp.random.power": [[348, "dpnp-random-power"]], "dpnp.random.rand": [[349, "dpnp-random-rand"]], "dpnp.random.randint": [[350, "dpnp-random-randint"]], "dpnp.random.randn": [[351, "dpnp-random-randn"]], "dpnp.random.random": [[352, "dpnp-random-random"]], "dpnp.random.random_integers": [[353, "dpnp-random-random-integers"]], "dpnp.random.random_sample": [[354, "dpnp-random-random-sample"]], "dpnp.random.ranf": [[355, "dpnp-random-ranf"]], "dpnp.random.rayleigh": [[356, "dpnp-random-rayleigh"]], "dpnp.random.sample": [[357, "dpnp-random-sample"]], "dpnp.random.seed": [[358, "dpnp-random-seed"]], "dpnp.random.shuffle": [[359, "dpnp-random-shuffle"]], "dpnp.random.standard_cauchy": [[360, "dpnp-random-standard-cauchy"]], "dpnp.random.standard_exponential": [[361, "dpnp-random-standard-exponential"]], "dpnp.random.standard_gamma": [[362, "dpnp-random-standard-gamma"]], "dpnp.random.standard_normal": [[363, "dpnp-random-standard-normal"]], "dpnp.random.standard_t": [[364, "dpnp-random-standard-t"]], "dpnp.random.triangular": [[365, "dpnp-random-triangular"]], "dpnp.random.uniform": [[366, "dpnp-random-uniform"]], "dpnp.random.vonmises": [[367, "dpnp-random-vonmises"]], "dpnp.random.wald": [[368, "dpnp-random-wald"]], "dpnp.random.weibull": [[369, "dpnp-random-weibull"]], "dpnp.random.zipf": [[370, "dpnp-random-zipf"]], "dpnp.ravel": [[371, "dpnp-ravel"]], "dpnp.real": [[372, "dpnp-real"]], "dpnp.reciprocal": [[373, "dpnp-reciprocal"]], "dpnp.reduce_hypot": [[374, "dpnp-reduce-hypot"]], "dpnp.remainder": [[375, "dpnp-remainder"]], "dpnp.repeat": [[376, "dpnp-repeat"]], "dpnp.reshape": [[377, "dpnp-reshape"]], "dpnp.result_type": [[378, "dpnp-result-type"]], "dpnp.right_shift": [[379, "dpnp-right-shift"]], "dpnp.rint": [[380, "dpnp-rint"]], "dpnp.roll": [[381, "dpnp-roll"]], "dpnp.rollaxis": [[382, "dpnp-rollaxis"]], "dpnp.round": [[383, "dpnp-round"]], "dpnp.row_stack": [[384, "dpnp-row-stack"]], "dpnp.rsqrt": [[385, "dpnp-rsqrt"]], "dpnp.searchsorted": [[386, "dpnp-searchsorted"]], "dpnp.select": [[387, "dpnp-select"]], "dpnp.shape": [[388, "dpnp-shape"]], "dpnp.sign": [[389, "dpnp-sign"]], "dpnp.signbit": [[390, "dpnp-signbit"]], "dpnp.sin": [[391, "dpnp-sin"]], "dpnp.sinh": [[392, "dpnp-sinh"]], "dpnp.sort": [[393, "dpnp-sort"]], "dpnp.sqrt": [[394, "dpnp-sqrt"]], "dpnp.square": [[395, "dpnp-square"]], "dpnp.squeeze": [[396, "dpnp-squeeze"]], "dpnp.stack": [[397, "dpnp-stack"]], "dpnp.std": [[398, "dpnp-std"]], "dpnp.subtract": [[399, "dpnp-subtract"]], "dpnp.sum": [[400, "dpnp-sum"]], "dpnp.swapaxes": [[401, "dpnp-swapaxes"]], "dpnp.take": [[402, "dpnp-take"]], "dpnp.take_along_axis": [[403, "dpnp-take-along-axis"]], "dpnp.tan": [[404, "dpnp-tan"]], "dpnp.tanh": [[405, "dpnp-tanh"]], "dpnp.tensordot": [[406, "dpnp-tensordot"]], "dpnp.tile": [[407, "dpnp-tile"]], "dpnp.trace": [[408, "dpnp-trace"]], "dpnp.transpose": [[409, "dpnp-transpose"]], "dpnp.trapz": [[410, "dpnp-trapz"]], "dpnp.tri": [[411, "dpnp-tri"]], "dpnp.tril": [[412, "dpnp-tril"]], "dpnp.tril_indices": [[413, "dpnp-tril-indices"]], "dpnp.tril_indices_from": [[414, "dpnp-tril-indices-from"]], "dpnp.triu": [[415, "dpnp-triu"]], "dpnp.triu_indices": [[416, "dpnp-triu-indices"]], "dpnp.triu_indices_from": [[417, "dpnp-triu-indices-from"]], "dpnp.true_divide": [[418, "dpnp-true-divide"]], "dpnp.trunc": [[419, "dpnp-trunc"]], "dpnp.unique": [[420, "dpnp-unique"]], "dpnp.unwrap": [[421, "dpnp-unwrap"]], "dpnp.vander": [[422, "dpnp-vander"]], "dpnp.var": [[423, "dpnp-var"]], "dpnp.vdot": [[424, "dpnp-vdot"]], "dpnp.vstack": [[425, "dpnp-vstack"]], "dpnp.where": [[426, "dpnp-where"]], "dpnp.zeros": [[427, "dpnp-zeros"]], "dpnp.zeros_like": [[428, "dpnp-zeros-like"]], "API Reference": [[429, "api-reference"]], "Array Indexing Routines": [[430, "array-indexing-routines"]], "Generating index arrays": [[430, "generating-index-arrays"]], "Indexing-like operations": [[430, "indexing-like-operations"]], "Inserting data into arrays": [[430, "inserting-data-into-arrays"]], "Iterating over arrays": [[430, "iterating-over-arrays"]], "Matrix and vector products": [[431, "matrix-and-vector-products"]], "Decompositions": [[431, "decompositions"]], "Matrix eigenvalues": [[431, "matrix-eigenvalues"]], "Norms and other numbers": [[431, "norms-and-other-numbers"]], "Solving linear equations": [[431, "solving-linear-equations"]], "Logic Functions": [[432, "logic-functions"]], "Truth value testing": [[432, "truth-value-testing"]], "Infinities and NaNs": [[432, "infinities-and-nans"]], "Array type testing": [[432, "array-type-testing"]], "Logic operations": [[432, "logic-operations"]], "Comparison": [[432, "comparison"]], "Array Manipulation Routines": [[433, "array-manipulation-routines"]], "Basic operations": [[433, "basic-operations"]], "Changing array shape": [[433, "changing-array-shape"]], "Transpose-like operations": [[433, "transpose-like-operations"]], "Changing number of dimensions": [[433, "changing-number-of-dimensions"]], "Changing kind of array": [[433, "changing-kind-of-array"]], "Joining arrays": [[433, "joining-arrays"]], "Splitting arrays": [[433, "splitting-arrays"]], "Tiling arrays": [[433, "tiling-arrays"]], "Adding and removing elements": [[433, "adding-and-removing-elements"]], "Rearranging elements": [[433, "rearranging-elements"]], "Mathematical Functions": [[434, "mathematical-functions"]], "Trigonometric functions": [[434, "trigonometric-functions"], [444, "trigonometric-functions"]], "Hyperbolic functions": [[434, "hyperbolic-functions"]], "Rounding": [[434, "rounding"]], "Sums, products, differences": [[434, "sums-products-differences"]], "Exponents and logarithms": [[434, "exponents-and-logarithms"]], "Other special functions": [[434, "other-special-functions"]], "Floating point routines": [[434, "floating-point-routines"]], "Rational routines": [[434, "rational-routines"]], "Arithmetic operations": [[434, "arithmetic-operations"]], "Handling complex numbers": [[434, "handling-complex-numbers"]], "Extrema Finding": [[434, "extrema-finding"]], "Miscellaneous routines": [[435, "miscellaneous-routines"]], "Utility": [[435, "utility"]], "Multi-Dimensional Array (ndarray)": [[436, "multi-dimensional-array-ndarray"]], "Constructing arrays": [[436, "constructing-arrays"]], "Indexing arrays": [[436, "indexing-arrays"]], "Array attributes": [[436, "array-attributes"]], "Memory layout": [[436, "memory-layout"]], "Data type": [[436, "data-type"]], "Other attributes": [[436, "other-attributes"]], "Array methods": [[436, "array-methods"]], "Array conversion": [[436, "array-conversion"]], "Shape manipulation": [[436, "shape-manipulation"]], "Item selection and manipulation": [[436, "item-selection-and-manipulation"]], "Calculation": [[436, "calculation"]], "Arithmetic, matrix multiplication, and comparison operations": [[436, "arithmetic-matrix-multiplication-and-comparison-operations"]], "Special methods": [[436, "special-methods"]], "Padding": [[437, "padding"]], "Polynomials": [[438, "polynomials"]], "Polynomial Package": [[438, "polynomial-package"]], "Polynomial Module": [[438, "polynomial-module"]], "Polyutils": [[438, "polyutils"]], "Poly1d": [[438, "poly1d"]], "Basics": [[438, "basics"]], "Arithmetic": [[438, "arithmetic"]], "Random Sampling (dpnp.random)": [[439, "random-sampling-dpnp-random"]], "Simple random data": [[439, "simple-random-data"]], "Permutations": [[439, "permutations"]], "Distributions": [[439, "distributions"]], "Random generator": [[439, "random-generator"]], "Routines": [[440, "routines"]], "Sorting, Searching, and Counting": [[441, "sorting-searching-and-counting"]], "Sorting": [[441, "sorting"]], "Searching": [[441, "searching"]], "Counting": [[441, "counting"]], "Special Functions": [[442, "special-functions"]], "Error Function": [[442, "error-function"]], "Statistical Functions": [[443, "statistical-functions"]], "Order statistics": [[443, "order-statistics"]], "Averages and variances": [[443, "averages-and-variances"]], "Histograms": [[443, "histograms"]], "Correlations": [[443, "correlations"]], "Universal Functions (ufunc)": [[444, "universal-functions-ufunc"]], "Available ufuncs": [[444, "available-ufuncs"]], "Math operations": [[444, "math-operations"]], "Bit-twiddling functions": [[444, "bit-twiddling-functions"]], "Comparison functions": [[444, "comparison-functions"]], "Floating functions": [[444, "floating-functions"]]}, "indexentries": {"dpnp": [[2, "module-dpnp"], [3, "module-dpnp"]], "module": [[2, "module-dpnp"], [3, "module-dpnp"], [10, "module-dpnp.fft"], [439, "module-dpnp.random"]], "dpnp.fft": [[10, "module-dpnp.fft"]], "abs() (in module dpnp)": [[11, "dpnp.abs"]], "absolute() (in module dpnp)": [[12, "dpnp.absolute"]], "add() (in module dpnp)": [[13, "dpnp.add"]], "all() (in module dpnp)": [[14, "dpnp.all"]], "allclose() (in module dpnp)": [[15, "dpnp.allclose"]], "amax() (in module dpnp)": [[16, "dpnp.amax"]], "amin() (in module dpnp)": [[17, "dpnp.amin"]], "any() (in module dpnp)": [[18, "dpnp.any"]], "arange() (in module dpnp)": [[19, "dpnp.arange"]], "arccos() (in module dpnp)": [[20, "dpnp.arccos"]], "arccosh() (in module dpnp)": [[21, "dpnp.arccosh"]], "arcsin() (in module dpnp)": [[22, "dpnp.arcsin"]], "arcsinh() (in module dpnp)": [[23, "dpnp.arcsinh"]], "arctan() (in module dpnp)": [[24, "dpnp.arctan"]], "arctan2() (in module dpnp)": [[25, "dpnp.arctan2"]], "arctanh() (in module dpnp)": [[26, "dpnp.arctanh"]], "argmax() (in module dpnp)": [[27, "dpnp.argmax"]], "argmin() (in module dpnp)": [[28, "dpnp.argmin"]], "argsort() (in module dpnp)": [[29, "dpnp.argsort"]], "around() (in module dpnp)": [[30, "dpnp.around"]], "array() (in module dpnp)": [[31, "dpnp.array"]], "array_equal() (in module dpnp)": [[32, "dpnp.array_equal"]], "asanyarray() (in module dpnp)": [[33, "dpnp.asanyarray"]], "asarray() (in module dpnp)": [[34, "dpnp.asarray"]], "ascontiguousarray() (in module dpnp)": [[35, "dpnp.ascontiguousarray"]], "asfarray() (in module dpnp)": [[36, "dpnp.asfarray"]], "asfortranarray() (in module dpnp)": [[37, "dpnp.asfortranarray"]], "asnumpy() (in module dpnp)": [[38, "dpnp.asnumpy"]], "atleast_1d() (in module dpnp)": [[39, "dpnp.atleast_1d"]], "atleast_2d() (in module dpnp)": [[40, "dpnp.atleast_2d"]], "atleast_3d() (in module dpnp)": [[41, "dpnp.atleast_3d"]], "average() (in module dpnp)": [[42, "dpnp.average"]], "bincount() (in module dpnp)": [[43, "dpnp.bincount"]], "bitwise_and() (in module dpnp)": [[44, "dpnp.bitwise_and"]], "bitwise_not() (in module dpnp)": [[45, "dpnp.bitwise_not"]], "bitwise_or() (in module dpnp)": [[46, "dpnp.bitwise_or"]], "bitwise_xor() (in module dpnp)": [[47, "dpnp.bitwise_xor"]], "broadcast_arrays() (in module dpnp)": [[48, "dpnp.broadcast_arrays"]], "broadcast_to() (in module dpnp)": [[49, "dpnp.broadcast_to"]], "can_cast() (in module dpnp)": [[50, "dpnp.can_cast"]], "cbrt() (in module dpnp)": [[51, "dpnp.cbrt"]], "ceil() (in module dpnp)": [[52, "dpnp.ceil"]], "choose() (in module dpnp)": [[53, "dpnp.choose"]], "clip() (in module dpnp)": [[54, "dpnp.clip"]], "column_stack() (in module dpnp)": [[55, "dpnp.column_stack"]], "concatenate() (in module dpnp)": [[56, "dpnp.concatenate"]], "conj() (in module dpnp)": [[57, "dpnp.conj"]], "conjugate() (in module dpnp)": [[58, "dpnp.conjugate"]], "convolve() (in module dpnp)": [[59, "dpnp.convolve"]], "copy() (in module dpnp)": [[60, "dpnp.copy"]], "copysign() (in module dpnp)": [[61, "dpnp.copysign"]], "copyto() (in module dpnp)": [[62, "dpnp.copyto"]], "correlate() (in module dpnp)": [[63, "dpnp.correlate"]], "cos() (in module dpnp)": [[64, "dpnp.cos"]], "cosh() (in module dpnp)": [[65, "dpnp.cosh"]], "count_nonzero() (in module dpnp)": [[66, "dpnp.count_nonzero"]], "cov() (in module dpnp)": [[67, "dpnp.cov"]], "cross() (in module dpnp)": [[68, "dpnp.cross"]], "cumprod() (in module dpnp)": [[69, "dpnp.cumprod"]], "cumsum() (in module dpnp)": [[70, "dpnp.cumsum"]], "deg2rad() (in module dpnp)": [[71, "dpnp.deg2rad"]], "degrees() (in module dpnp)": [[72, "dpnp.degrees"]], "diag() (in module dpnp)": [[73, "dpnp.diag"]], "diag_indices() (in module dpnp)": [[74, "dpnp.diag_indices"]], "diag_indices_from() (in module dpnp)": [[75, "dpnp.diag_indices_from"]], "diagflat() (in module dpnp)": [[76, "dpnp.diagflat"]], "diagonal() (in module dpnp)": [[77, "dpnp.diagonal"]], "diff() (in module dpnp)": [[78, "dpnp.diff"]], "divide() (in module dpnp)": [[79, "dpnp.divide"]], "dot() (in module dpnp)": [[80, "dpnp.dot"]], "t (dpnp.dpnp_array.dpnp_array attribute)": [[81, "dpnp.dpnp_array.dpnp_array.T"]], "__eq__() (dpnp.dpnp_array.dpnp_array method)": [[81, "dpnp.dpnp_array.dpnp_array.__eq__"]], "__ge__() (dpnp.dpnp_array.dpnp_array method)": [[81, "dpnp.dpnp_array.dpnp_array.__ge__"]], "__getitem__() (dpnp.dpnp_array.dpnp_array method)": [[81, "dpnp.dpnp_array.dpnp_array.__getitem__"]], "__gt__() (dpnp.dpnp_array.dpnp_array method)": [[81, "dpnp.dpnp_array.dpnp_array.__gt__"]], "__le__() (dpnp.dpnp_array.dpnp_array method)": [[81, "dpnp.dpnp_array.dpnp_array.__le__"]], "__len__() (dpnp.dpnp_array.dpnp_array method)": [[81, "dpnp.dpnp_array.dpnp_array.__len__"]], "__lt__() (dpnp.dpnp_array.dpnp_array method)": [[81, "dpnp.dpnp_array.dpnp_array.__lt__"]], "__ne__() (dpnp.dpnp_array.dpnp_array method)": [[81, "dpnp.dpnp_array.dpnp_array.__ne__"]], "__setitem__() (dpnp.dpnp_array.dpnp_array method)": [[81, "dpnp.dpnp_array.dpnp_array.__setitem__"]], "all() (dpnp.dpnp_array.dpnp_array method)": [[81, "dpnp.dpnp_array.dpnp_array.all"]], "any() (dpnp.dpnp_array.dpnp_array method)": [[81, "dpnp.dpnp_array.dpnp_array.any"]], "argmax() (dpnp.dpnp_array.dpnp_array method)": [[81, "dpnp.dpnp_array.dpnp_array.argmax"]], "argmin() (dpnp.dpnp_array.dpnp_array method)": [[81, "dpnp.dpnp_array.dpnp_array.argmin"]], "argsort() (dpnp.dpnp_array.dpnp_array method)": [[81, "dpnp.dpnp_array.dpnp_array.argsort"]], "asnumpy() (dpnp.dpnp_array.dpnp_array method)": [[81, "dpnp.dpnp_array.dpnp_array.asnumpy"]], "astype() (dpnp.dpnp_array.dpnp_array method)": [[81, "dpnp.dpnp_array.dpnp_array.astype"]], "choose() (dpnp.dpnp_array.dpnp_array method)": [[81, "dpnp.dpnp_array.dpnp_array.choose"]], "clip() (dpnp.dpnp_array.dpnp_array method)": [[81, "dpnp.dpnp_array.dpnp_array.clip"]], "conj() (dpnp.dpnp_array.dpnp_array method)": [[81, "dpnp.dpnp_array.dpnp_array.conj"]], "conjugate() (dpnp.dpnp_array.dpnp_array method)": [[81, "dpnp.dpnp_array.dpnp_array.conjugate"]], "copy() (dpnp.dpnp_array.dpnp_array method)": [[81, "dpnp.dpnp_array.dpnp_array.copy"]], "cumsum() (dpnp.dpnp_array.dpnp_array method)": [[81, "dpnp.dpnp_array.dpnp_array.cumsum"]], "device (dpnp.dpnp_array.dpnp_array attribute)": [[81, "dpnp.dpnp_array.dpnp_array.device"]], "diagonal() (dpnp.dpnp_array.dpnp_array method)": [[81, "dpnp.dpnp_array.dpnp_array.diagonal"]], "dot() (dpnp.dpnp_array.dpnp_array method)": [[81, "dpnp.dpnp_array.dpnp_array.dot"]], "dpnp_array (class in dpnp.dpnp_array)": [[81, "dpnp.dpnp_array.dpnp_array"]], "dtype (dpnp.dpnp_array.dpnp_array attribute)": [[81, "dpnp.dpnp_array.dpnp_array.dtype"]], "fill() (dpnp.dpnp_array.dpnp_array method)": [[81, "dpnp.dpnp_array.dpnp_array.fill"]], "flags (dpnp.dpnp_array.dpnp_array attribute)": [[81, "dpnp.dpnp_array.dpnp_array.flags"]], "flat (dpnp.dpnp_array.dpnp_array attribute)": [[81, "dpnp.dpnp_array.dpnp_array.flat"]], "flatten() (dpnp.dpnp_array.dpnp_array method)": [[81, "dpnp.dpnp_array.dpnp_array.flatten"]], "get_array() (dpnp.dpnp_array.dpnp_array method)": [[81, "dpnp.dpnp_array.dpnp_array.get_array"]], "imag (dpnp.dpnp_array.dpnp_array attribute)": [[81, "dpnp.dpnp_array.dpnp_array.imag"]], "item() (dpnp.dpnp_array.dpnp_array method)": [[81, "dpnp.dpnp_array.dpnp_array.item"]], "itemsize (dpnp.dpnp_array.dpnp_array attribute)": [[81, "dpnp.dpnp_array.dpnp_array.itemsize"]], "max() (dpnp.dpnp_array.dpnp_array method)": [[81, "dpnp.dpnp_array.dpnp_array.max"]], "mean() (dpnp.dpnp_array.dpnp_array method)": [[81, "dpnp.dpnp_array.dpnp_array.mean"]], "min() (dpnp.dpnp_array.dpnp_array method)": [[81, "dpnp.dpnp_array.dpnp_array.min"]], "nbytes (dpnp.dpnp_array.dpnp_array attribute)": [[81, "dpnp.dpnp_array.dpnp_array.nbytes"]], "ndim (dpnp.dpnp_array.dpnp_array attribute)": [[81, "dpnp.dpnp_array.dpnp_array.ndim"]], "nonzero() (dpnp.dpnp_array.dpnp_array method)": [[81, "dpnp.dpnp_array.dpnp_array.nonzero"]], "partition() (dpnp.dpnp_array.dpnp_array method)": [[81, "dpnp.dpnp_array.dpnp_array.partition"]], "prod() (dpnp.dpnp_array.dpnp_array method)": [[81, "dpnp.dpnp_array.dpnp_array.prod"]], "put() (dpnp.dpnp_array.dpnp_array method)": [[81, "dpnp.dpnp_array.dpnp_array.put"]], "ravel() (dpnp.dpnp_array.dpnp_array method)": [[81, "dpnp.dpnp_array.dpnp_array.ravel"]], "real (dpnp.dpnp_array.dpnp_array attribute)": [[81, "dpnp.dpnp_array.dpnp_array.real"]], "repeat() (dpnp.dpnp_array.dpnp_array method)": [[81, "dpnp.dpnp_array.dpnp_array.repeat"]], "reshape() (dpnp.dpnp_array.dpnp_array method)": [[81, "dpnp.dpnp_array.dpnp_array.reshape"]], "round() (dpnp.dpnp_array.dpnp_array method)": [[81, "dpnp.dpnp_array.dpnp_array.round"]], "shape (dpnp.dpnp_array.dpnp_array attribute)": [[81, "dpnp.dpnp_array.dpnp_array.shape"]], "size (dpnp.dpnp_array.dpnp_array attribute)": [[81, "dpnp.dpnp_array.dpnp_array.size"]], "squeeze() (dpnp.dpnp_array.dpnp_array method)": [[81, "dpnp.dpnp_array.dpnp_array.squeeze"]], "std() (dpnp.dpnp_array.dpnp_array method)": [[81, "dpnp.dpnp_array.dpnp_array.std"]], "strides (dpnp.dpnp_array.dpnp_array attribute)": [[81, "dpnp.dpnp_array.dpnp_array.strides"]], "sum() (dpnp.dpnp_array.dpnp_array method)": [[81, "dpnp.dpnp_array.dpnp_array.sum"]], "swapaxes() (dpnp.dpnp_array.dpnp_array method)": [[81, "dpnp.dpnp_array.dpnp_array.swapaxes"]], "sycl_context (dpnp.dpnp_array.dpnp_array attribute)": [[81, "dpnp.dpnp_array.dpnp_array.sycl_context"]], "sycl_device (dpnp.dpnp_array.dpnp_array attribute)": [[81, "dpnp.dpnp_array.dpnp_array.sycl_device"]], "sycl_queue (dpnp.dpnp_array.dpnp_array attribute)": [[81, "dpnp.dpnp_array.dpnp_array.sycl_queue"]], "take() (dpnp.dpnp_array.dpnp_array method)": [[81, "dpnp.dpnp_array.dpnp_array.take"]], "to_device() (dpnp.dpnp_array.dpnp_array method)": [[81, "dpnp.dpnp_array.dpnp_array.to_device"]], "transpose() (dpnp.dpnp_array.dpnp_array method)": [[81, "dpnp.dpnp_array.dpnp_array.transpose"]], "usm_type (dpnp.dpnp_array.dpnp_array attribute)": [[81, "dpnp.dpnp_array.dpnp_array.usm_type"]], "var() (dpnp.dpnp_array.dpnp_array method)": [[81, "dpnp.dpnp_array.dpnp_array.var"]], "dstack() (in module dpnp)": [[82, "dpnp.dstack"]], "__eq__() (dpnp.dtype method)": [[83, "dpnp.dtype.__eq__"]], "__ge__() (dpnp.dtype method)": [[83, "dpnp.dtype.__ge__"]], "__getitem__() (dpnp.dtype method)": [[83, "dpnp.dtype.__getitem__"]], "__gt__() (dpnp.dtype method)": [[83, "dpnp.dtype.__gt__"]], "__le__() (dpnp.dtype method)": [[83, "dpnp.dtype.__le__"]], "__len__() (dpnp.dtype method)": [[83, "dpnp.dtype.__len__"]], "__lt__() (dpnp.dtype method)": [[83, "dpnp.dtype.__lt__"]], "__ne__() (dpnp.dtype method)": [[83, "dpnp.dtype.__ne__"]], "alignment (dpnp.dtype attribute)": [[83, "dpnp.dtype.alignment"]], "base (dpnp.dtype attribute)": [[83, "dpnp.dtype.base"]], "byteorder (dpnp.dtype attribute)": [[83, "dpnp.dtype.byteorder"]], "char (dpnp.dtype attribute)": [[83, "dpnp.dtype.char"]], "descr (dpnp.dtype attribute)": [[83, "dpnp.dtype.descr"]], "dtype (class in dpnp)": [[83, "dpnp.dtype"]], "fields (dpnp.dtype attribute)": [[83, "dpnp.dtype.fields"]], "flags (dpnp.dtype attribute)": [[83, "dpnp.dtype.flags"]], "hasobject (dpnp.dtype attribute)": [[83, "dpnp.dtype.hasobject"]], "isalignedstruct (dpnp.dtype attribute)": [[83, "dpnp.dtype.isalignedstruct"]], "isbuiltin (dpnp.dtype attribute)": [[83, "dpnp.dtype.isbuiltin"]], "isnative (dpnp.dtype attribute)": [[83, "dpnp.dtype.isnative"]], "itemsize (dpnp.dtype attribute)": [[83, "dpnp.dtype.itemsize"]], "kind (dpnp.dtype attribute)": [[83, "dpnp.dtype.kind"]], "metadata (dpnp.dtype attribute)": [[83, "dpnp.dtype.metadata"]], "name (dpnp.dtype attribute)": [[83, "dpnp.dtype.name"]], "names (dpnp.dtype attribute)": [[83, "dpnp.dtype.names"]], "ndim (dpnp.dtype attribute)": [[83, "dpnp.dtype.ndim"]], "newbyteorder() (dpnp.dtype method)": [[83, "dpnp.dtype.newbyteorder"]], "num (dpnp.dtype attribute)": [[83, "dpnp.dtype.num"]], "shape (dpnp.dtype attribute)": [[83, "dpnp.dtype.shape"]], "str (dpnp.dtype attribute)": [[83, "dpnp.dtype.str"]], "subdtype (dpnp.dtype attribute)": [[83, "dpnp.dtype.subdtype"]], "type (dpnp.dtype attribute)": [[83, "dpnp.dtype.type"]], "ediff1d() (in module dpnp)": [[84, "dpnp.ediff1d"]], "einsum() (in module dpnp)": [[85, "dpnp.einsum"]], "einsum_path() (in module dpnp)": [[86, "dpnp.einsum_path"]], "empty() (in module dpnp)": [[87, "dpnp.empty"]], "empty_like() (in module dpnp)": [[88, "dpnp.empty_like"]], "equal() (in module dpnp)": [[89, "dpnp.equal"]], "erf() (in module dpnp)": [[90, "dpnp.erf"]], "exp() (in module dpnp)": [[91, "dpnp.exp"]], "exp2() (in module dpnp)": [[92, "dpnp.exp2"]], "expand_dims() (in module dpnp)": [[93, "dpnp.expand_dims"]], "expm1() (in module dpnp)": [[94, "dpnp.expm1"]], "extract() (in module dpnp)": [[95, "dpnp.extract"]], "eye() (in module dpnp)": [[96, "dpnp.eye"]], "fabs() (in module dpnp)": [[97, "dpnp.fabs"]], "fft() (in module dpnp.fft)": [[98, "dpnp.fft.fft"]], "fft2() (in module dpnp.fft)": [[99, "dpnp.fft.fft2"]], "fftfreq() (in module dpnp.fft)": [[100, "dpnp.fft.fftfreq"]], "fftn() (in module dpnp.fft)": [[101, "dpnp.fft.fftn"]], "fftshift() (in module dpnp.fft)": [[102, "dpnp.fft.fftshift"]], "hfft() (in module dpnp.fft)": [[103, "dpnp.fft.hfft"]], "ifft() (in module dpnp.fft)": [[104, "dpnp.fft.ifft"]], "ifft2() (in module dpnp.fft)": [[105, "dpnp.fft.ifft2"]], "ifftn() (in module dpnp.fft)": [[106, "dpnp.fft.ifftn"]], "ifftshift() (in module dpnp.fft)": [[107, "dpnp.fft.ifftshift"]], "ihfft() (in module dpnp.fft)": [[108, "dpnp.fft.ihfft"]], "irfft() (in module dpnp.fft)": [[109, "dpnp.fft.irfft"]], "irfft2() (in module dpnp.fft)": [[110, "dpnp.fft.irfft2"]], "irfftn() (in module dpnp.fft)": [[111, "dpnp.fft.irfftn"]], "rfft() (in module dpnp.fft)": [[112, "dpnp.fft.rfft"]], "rfft2() (in module dpnp.fft)": [[113, "dpnp.fft.rfft2"]], "rfftfreq() (in module dpnp.fft)": [[114, "dpnp.fft.rfftfreq"]], "rfftn() (in module dpnp.fft)": [[115, "dpnp.fft.rfftn"]], "fill_diagonal() (in module dpnp)": [[116, "dpnp.fill_diagonal"]], "finfo() (in module dpnp)": [[117, "dpnp.finfo"]], "__eq__() (dpnp.flatiter method)": [[118, "dpnp.flatiter.__eq__"]], "__ge__() (dpnp.flatiter method)": [[118, "dpnp.flatiter.__ge__"]], "__getitem__() (dpnp.flatiter method)": [[118, "dpnp.flatiter.__getitem__"]], "__gt__() (dpnp.flatiter method)": [[118, "dpnp.flatiter.__gt__"]], "__iter__() (dpnp.flatiter method)": [[118, "dpnp.flatiter.__iter__"]], "__le__() (dpnp.flatiter method)": [[118, "dpnp.flatiter.__le__"]], "__lt__() (dpnp.flatiter method)": [[118, "dpnp.flatiter.__lt__"]], "__ne__() (dpnp.flatiter method)": [[118, "dpnp.flatiter.__ne__"]], "__next__() (dpnp.flatiter method)": [[118, "dpnp.flatiter.__next__"]], "__setitem__() (dpnp.flatiter method)": [[118, "dpnp.flatiter.__setitem__"]], "flatiter (class in dpnp)": [[118, "dpnp.flatiter"]], "flip() (in module dpnp)": [[119, "dpnp.flip"]], "fliplr() (in module dpnp)": [[120, "dpnp.fliplr"]], "flipud() (in module dpnp)": [[121, "dpnp.flipud"]], "floor() (in module dpnp)": [[122, "dpnp.floor"]], "floor_divide() (in module dpnp)": [[123, "dpnp.floor_divide"]], "fmax() (in module dpnp)": [[124, "dpnp.fmax"]], "fmin() (in module dpnp)": [[125, "dpnp.fmin"]], "fmod() (in module dpnp)": [[126, "dpnp.fmod"]], "from_dlpack() (in module dpnp)": [[127, "dpnp.from_dlpack"]], "frombuffer() (in module dpnp)": [[128, "dpnp.frombuffer"]], "fromfile() (in module dpnp)": [[129, "dpnp.fromfile"]], "fromfunction() (in module dpnp)": [[130, "dpnp.fromfunction"]], "fromiter() (in module dpnp)": [[131, "dpnp.fromiter"]], "fromstring() (in module dpnp)": [[132, "dpnp.fromstring"]], "full() (in module dpnp)": [[133, "dpnp.full"]], "full_like() (in module dpnp)": [[134, "dpnp.full_like"]], "geomspace() (in module dpnp)": [[135, "dpnp.geomspace"]], "get_include() (in module dpnp)": [[136, "dpnp.get_include"]], "gradient() (in module dpnp)": [[137, "dpnp.gradient"]], "greater() (in module dpnp)": [[138, "dpnp.greater"]], "greater_equal() (in module dpnp)": [[139, "dpnp.greater_equal"]], "histogram() (in module dpnp)": [[140, "dpnp.histogram"]], "hstack() (in module dpnp)": [[141, "dpnp.hstack"]], "hypot() (in module dpnp)": [[142, "dpnp.hypot"]], "identity() (in module dpnp)": [[143, "dpnp.identity"]], "iinfo() (in module dpnp)": [[144, "dpnp.iinfo"]], "imag() (in module dpnp)": [[145, "dpnp.imag"]], "indices() (in module dpnp)": [[146, "dpnp.indices"]], "inner() (in module dpnp)": [[147, "dpnp.inner"]], "invert() (in module dpnp)": [[148, "dpnp.invert"]], "isclose() (in module dpnp)": [[149, "dpnp.isclose"]], "isfinite() (in module dpnp)": [[150, "dpnp.isfinite"]], "isinf() (in module dpnp)": [[151, "dpnp.isinf"]], "isnan() (in module dpnp)": [[152, "dpnp.isnan"]], "isscalar() (in module dpnp)": [[153, "dpnp.isscalar"]], "issubdtype() (in module dpnp)": [[154, "dpnp.issubdtype"]], "issubsctype() (in module dpnp)": [[155, "dpnp.issubsctype"]], "kron() (in module dpnp)": [[156, "dpnp.kron"]], "left_shift() (in module dpnp)": [[157, "dpnp.left_shift"]], "less() (in module dpnp)": [[158, "dpnp.less"]], "less_equal() (in module dpnp)": [[159, "dpnp.less_equal"]], "cholesky() (in module dpnp.linalg)": [[160, "dpnp.linalg.cholesky"]], "cond() (in module dpnp.linalg)": [[161, "dpnp.linalg.cond"]], "det() (in module dpnp.linalg)": [[162, "dpnp.linalg.det"]], "eig() (in module dpnp.linalg)": [[163, "dpnp.linalg.eig"]], "eigh() (in module dpnp.linalg)": [[164, "dpnp.linalg.eigh"]], "eigvals() (in module dpnp.linalg)": [[165, "dpnp.linalg.eigvals"]], "inv() (in module dpnp.linalg)": [[166, "dpnp.linalg.inv"]], "matrix_power() (in module dpnp.linalg)": [[167, "dpnp.linalg.matrix_power"]], "matrix_rank() (in module dpnp.linalg)": [[168, "dpnp.linalg.matrix_rank"]], "multi_dot() (in module dpnp.linalg)": [[169, "dpnp.linalg.multi_dot"]], "norm() (in module dpnp.linalg)": [[170, "dpnp.linalg.norm"]], "qr() (in module dpnp.linalg)": [[171, "dpnp.linalg.qr"]], "slogdet() (in module dpnp.linalg)": [[172, "dpnp.linalg.slogdet"]], "solve() (in module dpnp.linalg)": [[173, "dpnp.linalg.solve"]], "svd() (in module dpnp.linalg)": [[174, "dpnp.linalg.svd"]], "linspace() (in module dpnp)": [[175, "dpnp.linspace"]], "loadtxt() (in module dpnp)": [[176, "dpnp.loadtxt"]], "log() (in module dpnp)": [[177, "dpnp.log"]], "log10() (in module dpnp)": [[178, "dpnp.log10"]], "log1p() (in module dpnp)": [[179, "dpnp.log1p"]], "log2() (in module dpnp)": [[180, "dpnp.log2"]], "logaddexp() (in module dpnp)": [[181, "dpnp.logaddexp"]], "logical_and() (in module dpnp)": [[182, "dpnp.logical_and"]], "logical_not() (in module dpnp)": [[183, "dpnp.logical_not"]], "logical_or() (in module dpnp)": [[184, "dpnp.logical_or"]], "logical_xor() (in module dpnp)": [[185, "dpnp.logical_xor"]], "logspace() (in module dpnp)": [[186, "dpnp.logspace"]], "logsumexp() (in module dpnp)": [[187, "dpnp.logsumexp"]], "matmul() (in module dpnp)": [[188, "dpnp.matmul"]], "max() (in module dpnp)": [[189, "dpnp.max"]], "maximum() (in module dpnp)": [[190, "dpnp.maximum"]], "mean() (in module dpnp)": [[191, "dpnp.mean"]], "median() (in module dpnp)": [[192, "dpnp.median"]], "meshgrid() (in module dpnp)": [[193, "dpnp.meshgrid"]], "mgrid (in module dpnp)": [[194, "dpnp.mgrid"]], "min() (in module dpnp)": [[195, "dpnp.min"]], "minimum() (in module dpnp)": [[196, "dpnp.minimum"]], "mod() (in module dpnp)": [[197, "dpnp.mod"]], "modf() (in module dpnp)": [[198, "dpnp.modf"]], "moveaxis() (in module dpnp)": [[199, "dpnp.moveaxis"]], "multiply() (in module dpnp)": [[200, "dpnp.multiply"]], "nanargmax() (in module dpnp)": [[201, "dpnp.nanargmax"]], "nanargmin() (in module dpnp)": [[202, "dpnp.nanargmin"]], "nancumprod() (in module dpnp)": [[203, "dpnp.nancumprod"]], "nancumsum() (in module dpnp)": [[204, "dpnp.nancumsum"]], "nanmax() (in module dpnp)": [[205, "dpnp.nanmax"]], "nanmean() (in module dpnp)": [[206, "dpnp.nanmean"]], "nanmin() (in module dpnp)": [[207, "dpnp.nanmin"]], "nanprod() (in module dpnp)": [[208, "dpnp.nanprod"]], "nanstd() (in module dpnp)": [[209, "dpnp.nanstd"]], "nansum() (in module dpnp)": [[210, "dpnp.nansum"]], "nanvar() (in module dpnp)": [[211, "dpnp.nanvar"]], "ndarray (in module dpnp)": [[212, "dpnp.ndarray"]], "t (dpnp.ndarray property)": [[213, "dpnp.ndarray.T"]], "__abs__() (dpnp.ndarray method)": [[214, "dpnp.ndarray.__abs__"]], "__add__() (dpnp.ndarray method)": [[215, "dpnp.ndarray.__add__"]], "__and__() (dpnp.ndarray method)": [[216, "dpnp.ndarray.__and__"]], "__complex__() (dpnp.ndarray method)": [[217, "dpnp.ndarray.__complex__"]], "__copy__() (dpnp.ndarray method)": [[218, "dpnp.ndarray.__copy__"]], "__eq__() (dpnp.ndarray method)": [[219, "dpnp.ndarray.__eq__"]], "__float__() (dpnp.ndarray method)": [[220, "dpnp.ndarray.__float__"]], "__floordiv__() (dpnp.ndarray method)": [[221, "dpnp.ndarray.__floordiv__"]], "__ge__() (dpnp.ndarray method)": [[222, "dpnp.ndarray.__ge__"]], "__getitem__() (dpnp.ndarray method)": [[223, "dpnp.ndarray.__getitem__"]], "__gt__() (dpnp.ndarray method)": [[224, "dpnp.ndarray.__gt__"]], "__iadd__() (dpnp.ndarray method)": [[225, "dpnp.ndarray.__iadd__"]], "__iand__() (dpnp.ndarray method)": [[226, "dpnp.ndarray.__iand__"]], "__ifloordiv__() (dpnp.ndarray method)": [[227, "dpnp.ndarray.__ifloordiv__"]], "__ilshift__() (dpnp.ndarray method)": [[228, "dpnp.ndarray.__ilshift__"]], "__imod__() (dpnp.ndarray method)": [[229, "dpnp.ndarray.__imod__"]], "__imul__() (dpnp.ndarray method)": [[230, "dpnp.ndarray.__imul__"]], "__int__() (dpnp.ndarray method)": [[231, "dpnp.ndarray.__int__"]], "__invert__() (dpnp.ndarray method)": [[232, "dpnp.ndarray.__invert__"]], "__ior__() (dpnp.ndarray method)": [[233, "dpnp.ndarray.__ior__"]], "__ipow__() (dpnp.ndarray method)": [[234, "dpnp.ndarray.__ipow__"]], "__irshift__() (dpnp.ndarray method)": [[235, "dpnp.ndarray.__irshift__"]], "__isub__() (dpnp.ndarray method)": [[236, "dpnp.ndarray.__isub__"]], "__itruediv__() (dpnp.ndarray method)": [[237, "dpnp.ndarray.__itruediv__"]], "__ixor__() (dpnp.ndarray method)": [[238, "dpnp.ndarray.__ixor__"]], "__le__() (dpnp.ndarray method)": [[239, "dpnp.ndarray.__le__"]], "__len__() (dpnp.ndarray method)": [[240, "dpnp.ndarray.__len__"]], "__lshift__() (dpnp.ndarray method)": [[241, "dpnp.ndarray.__lshift__"]], "__lt__() (dpnp.ndarray method)": [[242, "dpnp.ndarray.__lt__"]], "__mod__() (dpnp.ndarray method)": [[243, "dpnp.ndarray.__mod__"]], "__mul__() (dpnp.ndarray method)": [[244, "dpnp.ndarray.__mul__"]], "__ne__() (dpnp.ndarray method)": [[245, "dpnp.ndarray.__ne__"]], "__neg__() (dpnp.ndarray method)": [[246, "dpnp.ndarray.__neg__"]], "__new__() (dpnp.ndarray method)": [[247, "dpnp.ndarray.__new__"]], "__or__() (dpnp.ndarray method)": [[248, "dpnp.ndarray.__or__"]], "__pos__() (dpnp.ndarray method)": [[249, "dpnp.ndarray.__pos__"]], "__pow__() (dpnp.ndarray method)": [[250, "dpnp.ndarray.__pow__"]], "__repr__() (dpnp.ndarray method)": [[251, "dpnp.ndarray.__repr__"]], "__rshift__() (dpnp.ndarray method)": [[252, "dpnp.ndarray.__rshift__"]], "__setitem__() (dpnp.ndarray method)": [[253, "dpnp.ndarray.__setitem__"]], "__str__() (dpnp.ndarray method)": [[254, "dpnp.ndarray.__str__"]], "__sub__() (dpnp.ndarray method)": [[255, "dpnp.ndarray.__sub__"]], "__truediv__() (dpnp.ndarray method)": [[256, "dpnp.ndarray.__truediv__"]], "__xor__() (dpnp.ndarray method)": [[257, "dpnp.ndarray.__xor__"]], "all() (dpnp.ndarray method)": [[258, "dpnp.ndarray.all"]], "any() (dpnp.ndarray method)": [[259, "dpnp.ndarray.any"]], "argmax() (dpnp.ndarray method)": [[260, "dpnp.ndarray.argmax"]], "argmin() (dpnp.ndarray method)": [[261, "dpnp.ndarray.argmin"]], "argsort() (dpnp.ndarray method)": [[262, "dpnp.ndarray.argsort"]], "astype() (dpnp.ndarray method)": [[263, "dpnp.ndarray.astype"]], "choose() (dpnp.ndarray method)": [[264, "dpnp.ndarray.choose"]], "clip() (dpnp.ndarray method)": [[265, "dpnp.ndarray.clip"]], "conj() (dpnp.ndarray method)": [[266, "dpnp.ndarray.conj"]], "conjugate() (dpnp.ndarray method)": [[267, "dpnp.ndarray.conjugate"]], "copy() (dpnp.ndarray method)": [[268, "dpnp.ndarray.copy"]], "cumsum() (dpnp.ndarray method)": [[269, "dpnp.ndarray.cumsum"]], "diagonal() (dpnp.ndarray method)": [[270, "dpnp.ndarray.diagonal"]], "dtype (dpnp.ndarray property)": [[271, "dpnp.ndarray.dtype"]], "fill() (dpnp.ndarray method)": [[272, "dpnp.ndarray.fill"]], "flags (dpnp.ndarray property)": [[273, "dpnp.ndarray.flags"]], "flat (dpnp.ndarray property)": [[274, "dpnp.ndarray.flat"]], "flatten() (dpnp.ndarray method)": [[275, "dpnp.ndarray.flatten"]], "imag (dpnp.ndarray property)": [[276, "dpnp.ndarray.imag"]], "item() (dpnp.ndarray method)": [[277, "dpnp.ndarray.item"]], "itemsize (dpnp.ndarray property)": [[278, "dpnp.ndarray.itemsize"]], "max() (dpnp.ndarray method)": [[279, "dpnp.ndarray.max"]], "mean() (dpnp.ndarray method)": [[280, "dpnp.ndarray.mean"]], "min() (dpnp.ndarray method)": [[281, "dpnp.ndarray.min"]], "nbytes (dpnp.ndarray property)": [[282, "dpnp.ndarray.nbytes"]], "ndim (dpnp.ndarray property)": [[283, "dpnp.ndarray.ndim"]], "nonzero() (dpnp.ndarray method)": [[284, "dpnp.ndarray.nonzero"]], "partition() (dpnp.ndarray method)": [[285, "dpnp.ndarray.partition"]], "prod() (dpnp.ndarray method)": [[286, "dpnp.ndarray.prod"]], "put() (dpnp.ndarray method)": [[287, "dpnp.ndarray.put"]], "ravel() (dpnp.ndarray method)": [[288, "dpnp.ndarray.ravel"]], "real (dpnp.ndarray property)": [[289, "dpnp.ndarray.real"]], "repeat() (dpnp.ndarray method)": [[290, "dpnp.ndarray.repeat"]], "reshape() (dpnp.ndarray method)": [[291, "dpnp.ndarray.reshape"]], "round() (dpnp.ndarray method)": [[292, "dpnp.ndarray.round"]], "shape (dpnp.ndarray property)": [[293, "dpnp.ndarray.shape"]], "size (dpnp.ndarray property)": [[294, "dpnp.ndarray.size"]], "squeeze() (dpnp.ndarray method)": [[295, "dpnp.ndarray.squeeze"]], "std() (dpnp.ndarray method)": [[296, "dpnp.ndarray.std"]], "strides (dpnp.ndarray property)": [[297, "dpnp.ndarray.strides"]], "sum() (dpnp.ndarray method)": [[298, "dpnp.ndarray.sum"]], "swapaxes() (dpnp.ndarray method)": [[299, "dpnp.ndarray.swapaxes"]], "take() (dpnp.ndarray method)": [[300, "dpnp.ndarray.take"]], "transpose() (dpnp.ndarray method)": [[301, "dpnp.ndarray.transpose"]], "var() (dpnp.ndarray method)": [[302, "dpnp.ndarray.var"]], "negative() (in module dpnp)": [[303, "dpnp.negative"]], "nonzero() (in module dpnp)": [[304, "dpnp.nonzero"]], "not_equal() (in module dpnp)": [[305, "dpnp.not_equal"]], "ogrid (in module dpnp)": [[306, "dpnp.ogrid"]], "ones() (in module dpnp)": [[307, "dpnp.ones"]], "ones_like() (in module dpnp)": [[308, "dpnp.ones_like"]], "outer() (in module dpnp)": [[309, "dpnp.outer"]], "partition() (in module dpnp)": [[310, "dpnp.partition"]], "place() (in module dpnp)": [[311, "dpnp.place"]], "positive() (in module dpnp)": [[312, "dpnp.positive"]], "power() (in module dpnp)": [[313, "dpnp.power"]], "prod() (in module dpnp)": [[314, "dpnp.prod"]], "proj() (in module dpnp)": [[315, "dpnp.proj"]], "ptp() (in module dpnp)": [[316, "dpnp.ptp"]], "put() (in module dpnp)": [[317, "dpnp.put"]], "put_along_axis() (in module dpnp)": [[318, "dpnp.put_along_axis"]], "putmask() (in module dpnp)": [[319, "dpnp.putmask"]], "rad2deg() (in module dpnp)": [[320, "dpnp.rad2deg"]], "radians() (in module dpnp)": [[321, "dpnp.radians"]], "randomstate (class in dpnp.random)": [[322, "dpnp.random.RandomState"]], "__eq__() (dpnp.random.randomstate method)": [[322, "dpnp.random.RandomState.__eq__"]], "__ge__() (dpnp.random.randomstate method)": [[322, "dpnp.random.RandomState.__ge__"]], "__gt__() (dpnp.random.randomstate method)": [[322, "dpnp.random.RandomState.__gt__"]], "__le__() (dpnp.random.randomstate method)": [[322, "dpnp.random.RandomState.__le__"]], "__lt__() (dpnp.random.randomstate method)": [[322, "dpnp.random.RandomState.__lt__"]], "__ne__() (dpnp.random.randomstate method)": [[322, "dpnp.random.RandomState.__ne__"]], "get_state() (dpnp.random.randomstate method)": [[322, "dpnp.random.RandomState.get_state"]], "get_sycl_device() (dpnp.random.randomstate method)": [[322, "dpnp.random.RandomState.get_sycl_device"]], "get_sycl_queue() (dpnp.random.randomstate method)": [[322, "dpnp.random.RandomState.get_sycl_queue"]], "normal() (dpnp.random.randomstate method)": [[322, "dpnp.random.RandomState.normal"]], "rand() (dpnp.random.randomstate method)": [[322, "dpnp.random.RandomState.rand"]], "randint() (dpnp.random.randomstate method)": [[322, "dpnp.random.RandomState.randint"]], "randn() (dpnp.random.randomstate method)": [[322, "dpnp.random.RandomState.randn"]], "random_sample() (dpnp.random.randomstate method)": [[322, "dpnp.random.RandomState.random_sample"]], "standard_normal() (dpnp.random.randomstate method)": [[322, "dpnp.random.RandomState.standard_normal"]], "uniform() (dpnp.random.randomstate method)": [[322, "dpnp.random.RandomState.uniform"]], "beta() (in module dpnp.random)": [[323, "dpnp.random.beta"]], "binomial() (in module dpnp.random)": [[324, "dpnp.random.binomial"]], "bytes() (in module dpnp.random)": [[325, "dpnp.random.bytes"]], "chisquare() (in module dpnp.random)": [[326, "dpnp.random.chisquare"]], "choice() (in module dpnp.random)": [[327, "dpnp.random.choice"]], "dirichlet() (in module dpnp.random)": [[328, "dpnp.random.dirichlet"]], "exponential() (in module dpnp.random)": [[329, "dpnp.random.exponential"]], "f() (in module dpnp.random)": [[330, "dpnp.random.f"]], "gamma() (in module dpnp.random)": [[331, "dpnp.random.gamma"]], "geometric() (in module dpnp.random)": [[332, "dpnp.random.geometric"]], "gumbel() (in module dpnp.random)": [[333, "dpnp.random.gumbel"]], "hypergeometric() (in module dpnp.random)": [[334, "dpnp.random.hypergeometric"]], "laplace() (in module dpnp.random)": [[335, "dpnp.random.laplace"]], "logistic() (in module dpnp.random)": [[336, "dpnp.random.logistic"]], "lognormal() (in module dpnp.random)": [[337, "dpnp.random.lognormal"]], "logseries() (in module dpnp.random)": [[338, "dpnp.random.logseries"]], "multinomial() (in module dpnp.random)": [[339, "dpnp.random.multinomial"]], "multivariate_normal() (in module dpnp.random)": [[340, "dpnp.random.multivariate_normal"]], "negative_binomial() (in module dpnp.random)": [[341, "dpnp.random.negative_binomial"]], "noncentral_chisquare() (in module dpnp.random)": [[342, "dpnp.random.noncentral_chisquare"]], "noncentral_f() (in module dpnp.random)": [[343, "dpnp.random.noncentral_f"]], "normal() (in module dpnp.random)": [[344, "dpnp.random.normal"]], "pareto() (in module dpnp.random)": [[345, "dpnp.random.pareto"]], "permutation() (in module dpnp.random)": [[346, "dpnp.random.permutation"]], "poisson() (in module dpnp.random)": [[347, "dpnp.random.poisson"]], "power() (in module dpnp.random)": [[348, "dpnp.random.power"]], "rand() (in module dpnp.random)": [[349, "dpnp.random.rand"]], "randint() (in module dpnp.random)": [[350, "dpnp.random.randint"]], "randn() (in module dpnp.random)": [[351, "dpnp.random.randn"]], "random() (in module dpnp.random)": [[352, "dpnp.random.random"]], "random_integers() (in module dpnp.random)": [[353, "dpnp.random.random_integers"]], "random_sample() (in module dpnp.random)": [[354, "dpnp.random.random_sample"]], "ranf() (in module dpnp.random)": [[355, "dpnp.random.ranf"]], "rayleigh() (in module dpnp.random)": [[356, "dpnp.random.rayleigh"]], "sample() (in module dpnp.random)": [[357, "dpnp.random.sample"]], "seed() (in module dpnp.random)": [[358, "dpnp.random.seed"]], "shuffle() (in module dpnp.random)": [[359, "dpnp.random.shuffle"]], "standard_cauchy() (in module dpnp.random)": [[360, "dpnp.random.standard_cauchy"]], "standard_exponential() (in module dpnp.random)": [[361, "dpnp.random.standard_exponential"]], "standard_gamma() (in module dpnp.random)": [[362, "dpnp.random.standard_gamma"]], "standard_normal() (in module dpnp.random)": [[363, "dpnp.random.standard_normal"]], "standard_t() (in module dpnp.random)": [[364, "dpnp.random.standard_t"]], "triangular() (in module dpnp.random)": [[365, "dpnp.random.triangular"]], "uniform() (in module dpnp.random)": [[366, "dpnp.random.uniform"]], "vonmises() (in module dpnp.random)": [[367, "dpnp.random.vonmises"]], "wald() (in module dpnp.random)": [[368, "dpnp.random.wald"]], "weibull() (in module dpnp.random)": [[369, "dpnp.random.weibull"]], "zipf() (in module dpnp.random)": [[370, "dpnp.random.zipf"]], "ravel() (in module dpnp)": [[371, "dpnp.ravel"]], "real() (in module dpnp)": [[372, "dpnp.real"]], "reciprocal() (in module dpnp)": [[373, "dpnp.reciprocal"]], "reduce_hypot() (in module dpnp)": [[374, "dpnp.reduce_hypot"]], "remainder() (in module dpnp)": [[375, "dpnp.remainder"]], "repeat() (in module dpnp)": [[376, "dpnp.repeat"]], "reshape() (in module dpnp)": [[377, "dpnp.reshape"]], "result_type() (in module dpnp)": [[378, "dpnp.result_type"]], "right_shift() (in module dpnp)": [[379, "dpnp.right_shift"]], "rint() (in module dpnp)": [[380, "dpnp.rint"]], "roll() (in module dpnp)": [[381, "dpnp.roll"]], "rollaxis() (in module dpnp)": [[382, "dpnp.rollaxis"]], "round() (in module dpnp)": [[383, "dpnp.round"]], "row_stack() (in module dpnp)": [[384, "dpnp.row_stack"]], "rsqrt() (in module dpnp)": [[385, "dpnp.rsqrt"]], "searchsorted() (in module dpnp)": [[386, "dpnp.searchsorted"]], "select() (in module dpnp)": [[387, "dpnp.select"]], "shape() (in module dpnp)": [[388, "dpnp.shape"]], "sign() (in module dpnp)": [[389, "dpnp.sign"]], "signbit() (in module dpnp)": [[390, "dpnp.signbit"]], "sin() (in module dpnp)": [[391, "dpnp.sin"]], "sinh() (in module dpnp)": [[392, "dpnp.sinh"]], "sort() (in module dpnp)": [[393, "dpnp.sort"]], "sqrt() (in module dpnp)": [[394, "dpnp.sqrt"]], "square() (in module dpnp)": [[395, "dpnp.square"]], "squeeze() (in module dpnp)": [[396, "dpnp.squeeze"]], "stack() (in module dpnp)": [[397, "dpnp.stack"]], "std() (in module dpnp)": [[398, "dpnp.std"]], "subtract() (in module dpnp)": [[399, "dpnp.subtract"]], "sum() (in module dpnp)": [[400, "dpnp.sum"]], "swapaxes() (in module dpnp)": [[401, "dpnp.swapaxes"]], "take() (in module dpnp)": [[402, "dpnp.take"]], "take_along_axis() (in module dpnp)": [[403, "dpnp.take_along_axis"]], "tan() (in module dpnp)": [[404, "dpnp.tan"]], "tanh() (in module dpnp)": [[405, "dpnp.tanh"]], "tensordot() (in module dpnp)": [[406, "dpnp.tensordot"]], "tile() (in module dpnp)": [[407, "dpnp.tile"]], "trace() (in module dpnp)": [[408, "dpnp.trace"]], "transpose() (in module dpnp)": [[409, "dpnp.transpose"]], "trapz() (in module dpnp)": [[410, "dpnp.trapz"]], "tri() (in module dpnp)": [[411, "dpnp.tri"]], "tril() (in module dpnp)": [[412, "dpnp.tril"]], "tril_indices() (in module dpnp)": [[413, "dpnp.tril_indices"]], "tril_indices_from() (in module dpnp)": [[414, "dpnp.tril_indices_from"]], "triu() (in module dpnp)": [[415, "dpnp.triu"]], "triu_indices() (in module dpnp)": [[416, "dpnp.triu_indices"]], "triu_indices_from() (in module dpnp)": [[417, "dpnp.triu_indices_from"]], "true_divide() (in module dpnp)": [[418, "dpnp.true_divide"]], "trunc() (in module dpnp)": [[419, "dpnp.trunc"]], "unique() (in module dpnp)": [[420, "dpnp.unique"]], "unwrap() (in module dpnp)": [[421, "dpnp.unwrap"]], "vander() (in module dpnp)": [[422, "dpnp.vander"]], "var() (in module dpnp)": [[423, "dpnp.var"]], "vdot() (in module dpnp)": [[424, "dpnp.vdot"]], "vstack() (in module dpnp)": [[425, "dpnp.vstack"]], "where() (in module dpnp)": [[426, "dpnp.where"]], "zeros() (in module dpnp)": [[427, "dpnp.zeros"]], "zeros_like() (in module dpnp)": [[428, "dpnp.zeros_like"]], "dpnp.random": [[439, "module-dpnp.random"]]}})