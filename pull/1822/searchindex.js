Search.setIndex({"alltitles": {"API Reference": [[442, "api-reference"]], "Adding and removing elements": [[446, "adding-and-removing-elements"]], "Arithmetic": [[451, "arithmetic"]], "Arithmetic operations": [[447, "arithmetic-operations"]], "Arithmetic, matrix multiplication, and comparison operations": [[449, "arithmetic-matrix-multiplication-and-comparison-operations"]], "Array Indexing Routines": [[443, "array-indexing-routines"]], "Array Manipulation Routines": [[446, "array-manipulation-routines"]], "Array attributes": [[449, "array-attributes"]], "Array conversion": [[449, "array-conversion"]], "Array creation routines": [[7, "array-creation-routines"]], "Array methods": [[449, "array-methods"]], "Array type testing": [[445, "array-type-testing"]], "Available array data types": [[9, "available-array-data-types"]], "Available ufuncs": [[457, "available-ufuncs"]], "Averages and variances": [[456, "averages-and-variances"]], "Basic operations": [[446, "basic-operations"]], "Basics": [[451, "basics"]], "Binary Operations": [[5, "binary-operations"]], "Bit packing": [[5, "bit-packing"]], "Bit-twiddling functions": [[457, "bit-twiddling-functions"]], "Build and Install Conda Package": [[4, "build-and-install-conda-package"]], "Build and Install with scikit-build": [[4, "build-and-install-with-scikit-build"]], "Building matrices": [[7, "building-matrices"]], "C++ backend API Reference": [[1, "c-backend-api-reference"]], "Calculation": [[449, "calculation"]], "Changing array shape": [[446, "changing-array-shape"]], "Changing kind of array": [[446, "changing-kind-of-array"]], "Changing number of dimensions": [[446, "changing-number-of-dimensions"]], "Comparison": [[445, "comparison"]], "Comparison Table NumPy/ DPNP/ CuPy": [[6, "comparison-table-numpy-dpnp-cupy"]], "Comparison functions": [[457, "comparison-functions"]], "Constructing arrays": [[449, "constructing-arrays"]], "Correlations": [[456, "correlations"]], "Counting": [[454, "counting"]], "Creating data types": [[8, "creating-data-types"]], "Data Parallel Extension for NumPy*": [[2, "data-parallel-extension-for-numpy"]], "Data type": [[449, "data-type"]], "Data type information": [[8, "data-type-information"]], "Data type routines": [[8, "data-type-routines"]], "Data type testing": [[8, "data-type-testing"]], "Decompositions": [[444, "decompositions"]], "Development information": [[2, null]], "Device Drivers": [[4, "device-drivers"]], "Discrete Fourier Transform": [[6, "discrete-fourier-transform"]], "Distributions": [[452, "distributions"]], "Element-wise bit operations": [[5, "element-wise-bit-operations"]], "Error Function": [[455, "error-function"]], "Example": [[0, "example"]], "Examples": [[4, "examples"]], "Exponents and logarithms": [[447, "exponents-and-logarithms"]], "Extrema Finding": [[447, "extrema-finding"]], "FFT Functions": [[10, "fft-functions"]], "Floating functions": [[457, "floating-functions"]], "Floating point routines": [[447, "floating-point-routines"]], "From existing data": [[7, "from-existing-data"]], "From shape or value": [[7, "from-shape-or-value"]], "Generating index arrays": [[443, "generating-index-arrays"]], "Handling complex numbers": [[447, "handling-complex-numbers"]], "Helper routines": [[10, "helper-routines"]], "Hermitian FFTs": [[10, "hermitian-ffts"]], "Histograms": [[456, "histograms"]], "Hyperbolic functions": [[447, "hyperbolic-functions"]], "Indexing arrays": [[449, "indexing-arrays"]], "Indexing-like operations": [[443, "indexing-like-operations"]], "Infinities and NaNs": [[445, "infinities-and-nans"]], "Inserting data into arrays": [[443, "inserting-data-into-arrays"]], "Install Package from Anaconda": [[4, "install-package-from-anaconda"]], "Installation": [[4, "installation"]], "Interplay with the Data Parallel Control Library": [[0, "interplay-with-the-data-parallel-control-library"]], "Item selection and manipulation": [[449, "item-selection-and-manipulation"]], "Iterating over arrays": [[443, "iterating-over-arrays"]], "Joining arrays": [[446, "joining-arrays"]], "Linear Algebra": [[6, "linear-algebra"], [444, "linear-algebra"]], "Logic Functions": [[445, "logic-functions"]], "Logic operations": [[445, "logic-operations"]], "Math operations": [[457, "math-operations"]], "Mathematical Functions": [[447, "mathematical-functions"]], "Matrix and vector products": [[444, "matrix-and-vector-products"]], "Matrix eigenvalues": [[444, "matrix-eigenvalues"]], "Memory layout": [[449, "memory-layout"]], "Miscellaneous": [[8, "miscellaneous"], [447, "miscellaneous"]], "Miscellaneous routines": [[448, "miscellaneous-routines"]], "Module-Level": [[6, "module-level"]], "Multi-Dimensional Array": [[6, "multi-dimensional-array"]], "Multi-Dimensional Array (ndarray)": [[449, "multi-dimensional-array-ndarray"]], "Norms and other numbers": [[444, "norms-and-other-numbers"]], "Numerical ranges": [[7, "numerical-ranges"]], "Order statistics": [[456, "order-statistics"]], "Other attributes": [[449, "other-attributes"]], "Other special functions": [[447, "other-special-functions"]], "Output formatting": [[5, "output-formatting"]], "Overview": [[3, "id1"]], "Padding": [[450, "padding"]], "Permutations": [[452, "permutations"]], "Poly1d": [[451, "poly1d"]], "Polynomial Module": [[451, "polynomial-module"]], "Polynomial Package": [[451, "polynomial-package"]], "Polynomials": [[451, "polynomials"]], "Polyutils": [[451, "polyutils"]], "Python Interpreter": [[4, "python-interpreter"]], "Quick Start Guide": [[4, "id1"]], "Random Sampling": [[6, "random-sampling"]], "Random Sampling (dpnp.random)": [[452, "random-sampling-dpnp-random"]], "Random generator": [[452, "random-generator"]], "Rational routines": [[447, "rational-routines"]], "Real FFTs": [[10, "real-ffts"]], "Rearranging elements": [[446, "rearranging-elements"]], "Rounding": [[447, "rounding"]], "Routines": [[453, "routines"]], "Searching": [[454, "searching"]], "Shape manipulation": [[449, "shape-manipulation"]], "Simple random data": [[452, "simple-random-data"]], "Solving linear equations": [[444, "solving-linear-equations"]], "Sorting": [[454, "sorting"]], "Sorting, Searching, and Counting": [[454, "sorting-searching-and-counting"]], "Special Functions": [[455, "special-functions"]], "Special methods": [[449, "special-methods"]], "Splitting arrays": [[446, "splitting-arrays"]], "Standard FFTs": [[10, "standard-ffts"]], "Statistical Functions": [[456, "statistical-functions"]], "Summary": [[6, "summary"]], "Sums, products, differences": [[447, "sums-products-differences"]], "Testing": [[4, "testing"]], "The Matrix class": [[7, "the-matrix-class"]], "Tiling arrays": [[446, "tiling-arrays"]], "Transpose-like operations": [[446, "transpose-like-operations"]], "Trigonometric functions": [[447, "trigonometric-functions"], [457, "trigonometric-functions"]], "Truth value testing": [[445, "truth-value-testing"]], "Universal Functions (ufunc)": [[457, "universal-functions-ufunc"]], "Utility": [[448, "utility"]], "dpnp.abs": [[11, "dpnp-abs"]], "dpnp.absolute": [[12, "dpnp-absolute"]], "dpnp.add": [[13, "dpnp-add"]], "dpnp.all": [[14, "dpnp-all"]], "dpnp.allclose": [[15, "dpnp-allclose"]], "dpnp.amax": [[16, "dpnp-amax"]], "dpnp.amin": [[17, "dpnp-amin"]], "dpnp.angle": [[18, "dpnp-angle"]], "dpnp.any": [[19, "dpnp-any"]], "dpnp.arange": [[20, "dpnp-arange"]], "dpnp.arccos": [[21, "dpnp-arccos"]], "dpnp.arccosh": [[22, "dpnp-arccosh"]], "dpnp.arcsin": [[23, "dpnp-arcsin"]], "dpnp.arcsinh": [[24, "dpnp-arcsinh"]], "dpnp.arctan": [[25, "dpnp-arctan"]], "dpnp.arctan2": [[26, "dpnp-arctan2"]], "dpnp.arctanh": [[27, "dpnp-arctanh"]], "dpnp.argmax": [[28, "dpnp-argmax"]], "dpnp.argmin": [[29, "dpnp-argmin"]], "dpnp.argsort": [[30, "dpnp-argsort"]], "dpnp.around": [[31, "dpnp-around"]], "dpnp.array": [[32, "dpnp-array"]], "dpnp.array_equal": [[33, "dpnp-array-equal"]], "dpnp.asanyarray": [[34, "dpnp-asanyarray"]], "dpnp.asarray": [[35, "dpnp-asarray"]], "dpnp.ascontiguousarray": [[36, "dpnp-ascontiguousarray"]], "dpnp.asfarray": [[37, "dpnp-asfarray"]], "dpnp.asfortranarray": [[38, "dpnp-asfortranarray"]], "dpnp.asnumpy": [[39, "dpnp-asnumpy"]], "dpnp.astype": [[40, "dpnp-astype"]], "dpnp.atleast_1d": [[41, "dpnp-atleast-1d"]], "dpnp.atleast_2d": [[42, "dpnp-atleast-2d"]], "dpnp.atleast_3d": [[43, "dpnp-atleast-3d"]], "dpnp.average": [[44, "dpnp-average"]], "dpnp.bincount": [[45, "dpnp-bincount"]], "dpnp.bitwise_and": [[46, "dpnp-bitwise-and"]], "dpnp.bitwise_not": [[47, "dpnp-bitwise-not"]], "dpnp.bitwise_or": [[48, "dpnp-bitwise-or"]], "dpnp.bitwise_xor": [[49, "dpnp-bitwise-xor"]], "dpnp.broadcast_arrays": [[50, "dpnp-broadcast-arrays"]], "dpnp.broadcast_to": [[51, "dpnp-broadcast-to"]], "dpnp.can_cast": [[52, "dpnp-can-cast"]], "dpnp.cbrt": [[53, "dpnp-cbrt"]], "dpnp.ceil": [[54, "dpnp-ceil"]], "dpnp.choose": [[55, "dpnp-choose"]], "dpnp.clip": [[56, "dpnp-clip"]], "dpnp.column_stack": [[57, "dpnp-column-stack"]], "dpnp.concatenate": [[58, "dpnp-concatenate"]], "dpnp.conj": [[59, "dpnp-conj"]], "dpnp.conjugate": [[60, "dpnp-conjugate"]], "dpnp.convolve": [[61, "dpnp-convolve"]], "dpnp.copy": [[62, "dpnp-copy"]], "dpnp.copysign": [[63, "dpnp-copysign"]], "dpnp.copyto": [[64, "dpnp-copyto"]], "dpnp.correlate": [[65, "dpnp-correlate"]], "dpnp.cos": [[66, "dpnp-cos"]], "dpnp.cosh": [[67, "dpnp-cosh"]], "dpnp.count_nonzero": [[68, "dpnp-count-nonzero"]], "dpnp.cov": [[69, "dpnp-cov"]], "dpnp.cross": [[70, "dpnp-cross"]], "dpnp.cumlogsumexp": [[71, "dpnp-cumlogsumexp"]], "dpnp.cumprod": [[72, "dpnp-cumprod"]], "dpnp.cumsum": [[73, "dpnp-cumsum"]], "dpnp.deg2rad": [[74, "dpnp-deg2rad"]], "dpnp.degrees": [[75, "dpnp-degrees"]], "dpnp.diag": [[76, "dpnp-diag"]], "dpnp.diag_indices": [[77, "dpnp-diag-indices"]], "dpnp.diag_indices_from": [[78, "dpnp-diag-indices-from"]], "dpnp.diagflat": [[79, "dpnp-diagflat"]], "dpnp.diagonal": [[80, "dpnp-diagonal"]], "dpnp.diff": [[81, "dpnp-diff"]], "dpnp.divide": [[82, "dpnp-divide"]], "dpnp.dot": [[83, "dpnp-dot"]], "dpnp.dpnp_array.dpnp_array": [[84, "dpnp-dpnp-array-dpnp-array"]], "dpnp.dstack": [[85, "dpnp-dstack"]], "dpnp.dtype": [[86, "dpnp-dtype"]], "dpnp.ediff1d": [[87, "dpnp-ediff1d"]], "dpnp.einsum": [[88, "dpnp-einsum"]], "dpnp.einsum_path": [[89, "dpnp-einsum-path"]], "dpnp.empty": [[90, "dpnp-empty"]], "dpnp.empty_like": [[91, "dpnp-empty-like"]], "dpnp.equal": [[92, "dpnp-equal"]], "dpnp.erf": [[93, "dpnp-erf"]], "dpnp.exp": [[94, "dpnp-exp"]], "dpnp.exp2": [[95, "dpnp-exp2"]], "dpnp.expand_dims": [[96, "dpnp-expand-dims"]], "dpnp.expm1": [[97, "dpnp-expm1"]], "dpnp.extract": [[98, "dpnp-extract"]], "dpnp.eye": [[99, "dpnp-eye"]], "dpnp.fabs": [[100, "dpnp-fabs"]], "dpnp.fft.fft": [[101, "dpnp-fft-fft"]], "dpnp.fft.fft2": [[102, "dpnp-fft-fft2"]], "dpnp.fft.fftfreq": [[103, "dpnp-fft-fftfreq"]], "dpnp.fft.fftn": [[104, "dpnp-fft-fftn"]], "dpnp.fft.fftshift": [[105, "dpnp-fft-fftshift"]], "dpnp.fft.hfft": [[106, "dpnp-fft-hfft"]], "dpnp.fft.ifft": [[107, "dpnp-fft-ifft"]], "dpnp.fft.ifft2": [[108, "dpnp-fft-ifft2"]], "dpnp.fft.ifftn": [[109, "dpnp-fft-ifftn"]], "dpnp.fft.ifftshift": [[110, "dpnp-fft-ifftshift"]], "dpnp.fft.ihfft": [[111, "dpnp-fft-ihfft"]], "dpnp.fft.irfft": [[112, "dpnp-fft-irfft"]], "dpnp.fft.irfft2": [[113, "dpnp-fft-irfft2"]], "dpnp.fft.irfftn": [[114, "dpnp-fft-irfftn"]], "dpnp.fft.rfft": [[115, "dpnp-fft-rfft"]], "dpnp.fft.rfft2": [[116, "dpnp-fft-rfft2"]], "dpnp.fft.rfftfreq": [[117, "dpnp-fft-rfftfreq"]], "dpnp.fft.rfftn": [[118, "dpnp-fft-rfftn"]], "dpnp.fill_diagonal": [[119, "dpnp-fill-diagonal"]], "dpnp.finfo": [[120, "dpnp-finfo"]], "dpnp.flatiter": [[121, "dpnp-flatiter"]], "dpnp.flip": [[122, "dpnp-flip"]], "dpnp.fliplr": [[123, "dpnp-fliplr"]], "dpnp.flipud": [[124, "dpnp-flipud"]], "dpnp.floor": [[125, "dpnp-floor"]], "dpnp.floor_divide": [[126, "dpnp-floor-divide"]], "dpnp.fmax": [[127, "dpnp-fmax"]], "dpnp.fmin": [[128, "dpnp-fmin"]], "dpnp.fmod": [[129, "dpnp-fmod"]], "dpnp.from_dlpack": [[130, "dpnp-from-dlpack"]], "dpnp.frombuffer": [[131, "dpnp-frombuffer"]], "dpnp.fromfile": [[132, "dpnp-fromfile"]], "dpnp.fromfunction": [[133, "dpnp-fromfunction"]], "dpnp.fromiter": [[134, "dpnp-fromiter"]], "dpnp.fromstring": [[135, "dpnp-fromstring"]], "dpnp.full": [[136, "dpnp-full"]], "dpnp.full_like": [[137, "dpnp-full-like"]], "dpnp.geomspace": [[138, "dpnp-geomspace"]], "dpnp.get_include": [[139, "dpnp-get-include"]], "dpnp.gradient": [[140, "dpnp-gradient"]], "dpnp.greater": [[141, "dpnp-greater"]], "dpnp.greater_equal": [[142, "dpnp-greater-equal"]], "dpnp.histogram": [[143, "dpnp-histogram"]], "dpnp.hstack": [[144, "dpnp-hstack"]], "dpnp.hypot": [[145, "dpnp-hypot"]], "dpnp.identity": [[146, "dpnp-identity"]], "dpnp.iinfo": [[147, "dpnp-iinfo"]], "dpnp.imag": [[148, "dpnp-imag"]], "dpnp.indices": [[149, "dpnp-indices"]], "dpnp.inner": [[150, "dpnp-inner"]], "dpnp.invert": [[151, "dpnp-invert"]], "dpnp.isclose": [[152, "dpnp-isclose"]], "dpnp.isfinite": [[153, "dpnp-isfinite"]], "dpnp.isinf": [[154, "dpnp-isinf"]], "dpnp.isnan": [[155, "dpnp-isnan"]], "dpnp.isscalar": [[156, "dpnp-isscalar"]], "dpnp.issubdtype": [[157, "dpnp-issubdtype"]], "dpnp.issubsctype": [[158, "dpnp-issubsctype"]], "dpnp.kron": [[159, "dpnp-kron"]], "dpnp.left_shift": [[160, "dpnp-left-shift"]], "dpnp.less": [[161, "dpnp-less"]], "dpnp.less_equal": [[162, "dpnp-less-equal"]], "dpnp.linalg.cholesky": [[163, "dpnp-linalg-cholesky"]], "dpnp.linalg.cond": [[164, "dpnp-linalg-cond"]], "dpnp.linalg.det": [[165, "dpnp-linalg-det"]], "dpnp.linalg.eig": [[166, "dpnp-linalg-eig"]], "dpnp.linalg.eigh": [[167, "dpnp-linalg-eigh"]], "dpnp.linalg.eigvals": [[168, "dpnp-linalg-eigvals"]], "dpnp.linalg.eigvalsh": [[169, "dpnp-linalg-eigvalsh"]], "dpnp.linalg.inv": [[170, "dpnp-linalg-inv"]], "dpnp.linalg.lstsq": [[171, "dpnp-linalg-lstsq"]], "dpnp.linalg.matrix_power": [[172, "dpnp-linalg-matrix-power"]], "dpnp.linalg.matrix_rank": [[173, "dpnp-linalg-matrix-rank"]], "dpnp.linalg.multi_dot": [[174, "dpnp-linalg-multi-dot"]], "dpnp.linalg.norm": [[175, "dpnp-linalg-norm"]], "dpnp.linalg.pinv": [[176, "dpnp-linalg-pinv"]], "dpnp.linalg.qr": [[177, "dpnp-linalg-qr"]], "dpnp.linalg.slogdet": [[178, "dpnp-linalg-slogdet"]], "dpnp.linalg.solve": [[179, "dpnp-linalg-solve"]], "dpnp.linalg.svd": [[180, "dpnp-linalg-svd"]], "dpnp.linalg.tensorinv": [[181, "dpnp-linalg-tensorinv"]], "dpnp.linalg.tensorsolve": [[182, "dpnp-linalg-tensorsolve"]], "dpnp.linspace": [[183, "dpnp-linspace"]], "dpnp.loadtxt": [[184, "dpnp-loadtxt"]], "dpnp.log": [[185, "dpnp-log"]], "dpnp.log10": [[186, "dpnp-log10"]], "dpnp.log1p": [[187, "dpnp-log1p"]], "dpnp.log2": [[188, "dpnp-log2"]], "dpnp.logaddexp": [[189, "dpnp-logaddexp"]], "dpnp.logical_and": [[190, "dpnp-logical-and"]], "dpnp.logical_not": [[191, "dpnp-logical-not"]], "dpnp.logical_or": [[192, "dpnp-logical-or"]], "dpnp.logical_xor": [[193, "dpnp-logical-xor"]], "dpnp.logspace": [[194, "dpnp-logspace"]], "dpnp.logsumexp": [[195, "dpnp-logsumexp"]], "dpnp.matmul": [[196, "dpnp-matmul"]], "dpnp.max": [[197, "dpnp-max"]], "dpnp.maximum": [[198, "dpnp-maximum"]], "dpnp.mean": [[199, "dpnp-mean"]], "dpnp.median": [[200, "dpnp-median"]], "dpnp.meshgrid": [[201, "dpnp-meshgrid"]], "dpnp.mgrid": [[202, "dpnp-mgrid"]], "dpnp.min": [[203, "dpnp-min"]], "dpnp.minimum": [[204, "dpnp-minimum"]], "dpnp.mod": [[205, "dpnp-mod"]], "dpnp.modf": [[206, "dpnp-modf"]], "dpnp.moveaxis": [[207, "dpnp-moveaxis"]], "dpnp.multiply": [[208, "dpnp-multiply"]], "dpnp.nanargmax": [[209, "dpnp-nanargmax"]], "dpnp.nanargmin": [[210, "dpnp-nanargmin"]], "dpnp.nancumprod": [[211, "dpnp-nancumprod"]], "dpnp.nancumsum": [[212, "dpnp-nancumsum"]], "dpnp.nanmax": [[213, "dpnp-nanmax"]], "dpnp.nanmean": [[214, "dpnp-nanmean"]], "dpnp.nanmin": [[215, "dpnp-nanmin"]], "dpnp.nanprod": [[216, "dpnp-nanprod"]], "dpnp.nanstd": [[217, "dpnp-nanstd"]], "dpnp.nansum": [[218, "dpnp-nansum"]], "dpnp.nanvar": [[219, "dpnp-nanvar"]], "dpnp.ndarray": [[220, "dpnp-ndarray"]], "dpnp.ndarray.T": [[221, "dpnp-ndarray-t"]], "dpnp.ndarray.__abs__": [[222, "dpnp-ndarray-abs"]], "dpnp.ndarray.__add__": [[223, "dpnp-ndarray-add"]], "dpnp.ndarray.__and__": [[224, "dpnp-ndarray-and"]], "dpnp.ndarray.__bool__": [[225, "dpnp-ndarray-bool"]], "dpnp.ndarray.__complex__": [[226, "dpnp-ndarray-complex"]], "dpnp.ndarray.__copy__": [[227, "dpnp-ndarray-copy"]], "dpnp.ndarray.__eq__": [[228, "dpnp-ndarray-eq"]], "dpnp.ndarray.__float__": [[229, "dpnp-ndarray-float"]], "dpnp.ndarray.__floordiv__": [[230, "dpnp-ndarray-floordiv"]], "dpnp.ndarray.__ge__": [[231, "dpnp-ndarray-ge"]], "dpnp.ndarray.__getitem__": [[232, "dpnp-ndarray-getitem"]], "dpnp.ndarray.__gt__": [[233, "dpnp-ndarray-gt"]], "dpnp.ndarray.__iadd__": [[234, "dpnp-ndarray-iadd"]], "dpnp.ndarray.__iand__": [[235, "dpnp-ndarray-iand"]], "dpnp.ndarray.__ifloordiv__": [[236, "dpnp-ndarray-ifloordiv"]], "dpnp.ndarray.__ilshift__": [[237, "dpnp-ndarray-ilshift"]], "dpnp.ndarray.__imod__": [[238, "dpnp-ndarray-imod"]], "dpnp.ndarray.__imul__": [[239, "dpnp-ndarray-imul"]], "dpnp.ndarray.__int__": [[240, "dpnp-ndarray-int"]], "dpnp.ndarray.__invert__": [[241, "dpnp-ndarray-invert"]], "dpnp.ndarray.__ior__": [[242, "dpnp-ndarray-ior"]], "dpnp.ndarray.__ipow__": [[243, "dpnp-ndarray-ipow"]], "dpnp.ndarray.__irshift__": [[244, "dpnp-ndarray-irshift"]], "dpnp.ndarray.__isub__": [[245, "dpnp-ndarray-isub"]], "dpnp.ndarray.__itruediv__": [[246, "dpnp-ndarray-itruediv"]], "dpnp.ndarray.__ixor__": [[247, "dpnp-ndarray-ixor"]], "dpnp.ndarray.__le__": [[248, "dpnp-ndarray-le"]], "dpnp.ndarray.__len__": [[249, "dpnp-ndarray-len"]], "dpnp.ndarray.__lshift__": [[250, "dpnp-ndarray-lshift"]], "dpnp.ndarray.__lt__": [[251, "dpnp-ndarray-lt"]], "dpnp.ndarray.__matmul__": [[252, "dpnp-ndarray-matmul"]], "dpnp.ndarray.__mod__": [[253, "dpnp-ndarray-mod"]], "dpnp.ndarray.__mul__": [[254, "dpnp-ndarray-mul"]], "dpnp.ndarray.__ne__": [[255, "dpnp-ndarray-ne"]], "dpnp.ndarray.__neg__": [[256, "dpnp-ndarray-neg"]], "dpnp.ndarray.__new__": [[257, "dpnp-ndarray-new"]], "dpnp.ndarray.__or__": [[258, "dpnp-ndarray-or"]], "dpnp.ndarray.__pos__": [[259, "dpnp-ndarray-pos"]], "dpnp.ndarray.__pow__": [[260, "dpnp-ndarray-pow"]], "dpnp.ndarray.__repr__": [[261, "dpnp-ndarray-repr"]], "dpnp.ndarray.__rshift__": [[262, "dpnp-ndarray-rshift"]], "dpnp.ndarray.__setitem__": [[263, "dpnp-ndarray-setitem"]], "dpnp.ndarray.__str__": [[264, "dpnp-ndarray-str"]], "dpnp.ndarray.__sub__": [[265, "dpnp-ndarray-sub"]], "dpnp.ndarray.__truediv__": [[266, "dpnp-ndarray-truediv"]], "dpnp.ndarray.__xor__": [[267, "dpnp-ndarray-xor"]], "dpnp.ndarray.all": [[268, "dpnp-ndarray-all"]], "dpnp.ndarray.any": [[269, "dpnp-ndarray-any"]], "dpnp.ndarray.argmax": [[270, "dpnp-ndarray-argmax"]], "dpnp.ndarray.argmin": [[271, "dpnp-ndarray-argmin"]], "dpnp.ndarray.argsort": [[272, "dpnp-ndarray-argsort"]], "dpnp.ndarray.astype": [[273, "dpnp-ndarray-astype"]], "dpnp.ndarray.choose": [[274, "dpnp-ndarray-choose"]], "dpnp.ndarray.clip": [[275, "dpnp-ndarray-clip"]], "dpnp.ndarray.conj": [[276, "dpnp-ndarray-conj"]], "dpnp.ndarray.conjugate": [[277, "dpnp-ndarray-conjugate"]], "dpnp.ndarray.copy": [[278, "dpnp-ndarray-copy"]], "dpnp.ndarray.cumprod": [[279, "dpnp-ndarray-cumprod"]], "dpnp.ndarray.cumsum": [[280, "dpnp-ndarray-cumsum"]], "dpnp.ndarray.diagonal": [[281, "dpnp-ndarray-diagonal"]], "dpnp.ndarray.dtype": [[282, "dpnp-ndarray-dtype"]], "dpnp.ndarray.fill": [[283, "dpnp-ndarray-fill"]], "dpnp.ndarray.flags": [[284, "dpnp-ndarray-flags"]], "dpnp.ndarray.flat": [[285, "dpnp-ndarray-flat"]], "dpnp.ndarray.flatten": [[286, "dpnp-ndarray-flatten"]], "dpnp.ndarray.imag": [[287, "dpnp-ndarray-imag"]], "dpnp.ndarray.item": [[288, "dpnp-ndarray-item"]], "dpnp.ndarray.itemsize": [[289, "dpnp-ndarray-itemsize"]], "dpnp.ndarray.max": [[290, "dpnp-ndarray-max"]], "dpnp.ndarray.mean": [[291, "dpnp-ndarray-mean"]], "dpnp.ndarray.min": [[292, "dpnp-ndarray-min"]], "dpnp.ndarray.nbytes": [[293, "dpnp-ndarray-nbytes"]], "dpnp.ndarray.ndim": [[294, "dpnp-ndarray-ndim"]], "dpnp.ndarray.nonzero": [[295, "dpnp-ndarray-nonzero"]], "dpnp.ndarray.partition": [[296, "dpnp-ndarray-partition"]], "dpnp.ndarray.prod": [[297, "dpnp-ndarray-prod"]], "dpnp.ndarray.put": [[298, "dpnp-ndarray-put"]], "dpnp.ndarray.ravel": [[299, "dpnp-ndarray-ravel"]], "dpnp.ndarray.real": [[300, "dpnp-ndarray-real"]], "dpnp.ndarray.repeat": [[301, "dpnp-ndarray-repeat"]], "dpnp.ndarray.reshape": [[302, "dpnp-ndarray-reshape"]], "dpnp.ndarray.round": [[303, "dpnp-ndarray-round"]], "dpnp.ndarray.searchsorted": [[304, "dpnp-ndarray-searchsorted"]], "dpnp.ndarray.shape": [[305, "dpnp-ndarray-shape"]], "dpnp.ndarray.size": [[306, "dpnp-ndarray-size"]], "dpnp.ndarray.sort": [[307, "dpnp-ndarray-sort"]], "dpnp.ndarray.squeeze": [[308, "dpnp-ndarray-squeeze"]], "dpnp.ndarray.std": [[309, "dpnp-ndarray-std"]], "dpnp.ndarray.strides": [[310, "dpnp-ndarray-strides"]], "dpnp.ndarray.sum": [[311, "dpnp-ndarray-sum"]], "dpnp.ndarray.swapaxes": [[312, "dpnp-ndarray-swapaxes"]], "dpnp.ndarray.take": [[313, "dpnp-ndarray-take"]], "dpnp.ndarray.transpose": [[314, "dpnp-ndarray-transpose"]], "dpnp.ndarray.var": [[315, "dpnp-ndarray-var"]], "dpnp.negative": [[316, "dpnp-negative"]], "dpnp.nonzero": [[317, "dpnp-nonzero"]], "dpnp.not_equal": [[318, "dpnp-not-equal"]], "dpnp.ogrid": [[319, "dpnp-ogrid"]], "dpnp.ones": [[320, "dpnp-ones"]], "dpnp.ones_like": [[321, "dpnp-ones-like"]], "dpnp.outer": [[322, "dpnp-outer"]], "dpnp.partition": [[323, "dpnp-partition"]], "dpnp.place": [[324, "dpnp-place"]], "dpnp.positive": [[325, "dpnp-positive"]], "dpnp.power": [[326, "dpnp-power"]], "dpnp.prod": [[327, "dpnp-prod"]], "dpnp.proj": [[328, "dpnp-proj"]], "dpnp.ptp": [[329, "dpnp-ptp"]], "dpnp.put": [[330, "dpnp-put"]], "dpnp.put_along_axis": [[331, "dpnp-put-along-axis"]], "dpnp.putmask": [[332, "dpnp-putmask"]], "dpnp.rad2deg": [[333, "dpnp-rad2deg"]], "dpnp.radians": [[334, "dpnp-radians"]], "dpnp.random.RandomState": [[335, "dpnp-random-randomstate"]], "dpnp.random.beta": [[336, "dpnp-random-beta"]], "dpnp.random.binomial": [[337, "dpnp-random-binomial"]], "dpnp.random.bytes": [[338, "dpnp-random-bytes"]], "dpnp.random.chisquare": [[339, "dpnp-random-chisquare"]], "dpnp.random.choice": [[340, "dpnp-random-choice"]], "dpnp.random.dirichlet": [[341, "dpnp-random-dirichlet"]], "dpnp.random.exponential": [[342, "dpnp-random-exponential"]], "dpnp.random.f": [[343, "dpnp-random-f"]], "dpnp.random.gamma": [[344, "dpnp-random-gamma"]], "dpnp.random.geometric": [[345, "dpnp-random-geometric"]], "dpnp.random.gumbel": [[346, "dpnp-random-gumbel"]], "dpnp.random.hypergeometric": [[347, "dpnp-random-hypergeometric"]], "dpnp.random.laplace": [[348, "dpnp-random-laplace"]], "dpnp.random.logistic": [[349, "dpnp-random-logistic"]], "dpnp.random.lognormal": [[350, "dpnp-random-lognormal"]], "dpnp.random.logseries": [[351, "dpnp-random-logseries"]], "dpnp.random.multinomial": [[352, "dpnp-random-multinomial"]], "dpnp.random.multivariate_normal": [[353, "dpnp-random-multivariate-normal"]], "dpnp.random.negative_binomial": [[354, "dpnp-random-negative-binomial"]], "dpnp.random.noncentral_chisquare": [[355, "dpnp-random-noncentral-chisquare"]], "dpnp.random.noncentral_f": [[356, "dpnp-random-noncentral-f"]], "dpnp.random.normal": [[357, "dpnp-random-normal"]], "dpnp.random.pareto": [[358, "dpnp-random-pareto"]], "dpnp.random.permutation": [[359, "dpnp-random-permutation"]], "dpnp.random.poisson": [[360, "dpnp-random-poisson"]], "dpnp.random.power": [[361, "dpnp-random-power"]], "dpnp.random.rand": [[362, "dpnp-random-rand"]], "dpnp.random.randint": [[363, "dpnp-random-randint"]], "dpnp.random.randn": [[364, "dpnp-random-randn"]], "dpnp.random.random": [[365, "dpnp-random-random"]], "dpnp.random.random_integers": [[366, "dpnp-random-random-integers"]], "dpnp.random.random_sample": [[367, "dpnp-random-random-sample"]], "dpnp.random.ranf": [[368, "dpnp-random-ranf"]], "dpnp.random.rayleigh": [[369, "dpnp-random-rayleigh"]], "dpnp.random.sample": [[370, "dpnp-random-sample"]], "dpnp.random.seed": [[371, "dpnp-random-seed"]], "dpnp.random.shuffle": [[372, "dpnp-random-shuffle"]], "dpnp.random.standard_cauchy": [[373, "dpnp-random-standard-cauchy"]], "dpnp.random.standard_exponential": [[374, "dpnp-random-standard-exponential"]], "dpnp.random.standard_gamma": [[375, "dpnp-random-standard-gamma"]], "dpnp.random.standard_normal": [[376, "dpnp-random-standard-normal"]], "dpnp.random.standard_t": [[377, "dpnp-random-standard-t"]], "dpnp.random.triangular": [[378, "dpnp-random-triangular"]], "dpnp.random.uniform": [[379, "dpnp-random-uniform"]], "dpnp.random.vonmises": [[380, "dpnp-random-vonmises"]], "dpnp.random.wald": [[381, "dpnp-random-wald"]], "dpnp.random.weibull": [[382, "dpnp-random-weibull"]], "dpnp.random.zipf": [[383, "dpnp-random-zipf"]], "dpnp.ravel": [[384, "dpnp-ravel"]], "dpnp.real": [[385, "dpnp-real"]], "dpnp.reciprocal": [[386, "dpnp-reciprocal"]], "dpnp.reduce_hypot": [[387, "dpnp-reduce-hypot"]], "dpnp.remainder": [[388, "dpnp-remainder"]], "dpnp.repeat": [[389, "dpnp-repeat"]], "dpnp.reshape": [[390, "dpnp-reshape"]], "dpnp.result_type": [[391, "dpnp-result-type"]], "dpnp.right_shift": [[392, "dpnp-right-shift"]], "dpnp.rint": [[393, "dpnp-rint"]], "dpnp.roll": [[394, "dpnp-roll"]], "dpnp.rollaxis": [[395, "dpnp-rollaxis"]], "dpnp.round": [[396, "dpnp-round"]], "dpnp.row_stack": [[397, "dpnp-row-stack"]], "dpnp.rsqrt": [[398, "dpnp-rsqrt"]], "dpnp.searchsorted": [[399, "dpnp-searchsorted"]], "dpnp.select": [[400, "dpnp-select"]], "dpnp.shape": [[401, "dpnp-shape"]], "dpnp.sign": [[402, "dpnp-sign"]], "dpnp.signbit": [[403, "dpnp-signbit"]], "dpnp.sin": [[404, "dpnp-sin"]], "dpnp.sinh": [[405, "dpnp-sinh"]], "dpnp.sort": [[406, "dpnp-sort"]], "dpnp.sqrt": [[407, "dpnp-sqrt"]], "dpnp.square": [[408, "dpnp-square"]], "dpnp.squeeze": [[409, "dpnp-squeeze"]], "dpnp.stack": [[410, "dpnp-stack"]], "dpnp.std": [[411, "dpnp-std"]], "dpnp.subtract": [[412, "dpnp-subtract"]], "dpnp.sum": [[413, "dpnp-sum"]], "dpnp.swapaxes": [[414, "dpnp-swapaxes"]], "dpnp.take": [[415, "dpnp-take"]], "dpnp.take_along_axis": [[416, "dpnp-take-along-axis"]], "dpnp.tan": [[417, "dpnp-tan"]], "dpnp.tanh": [[418, "dpnp-tanh"]], "dpnp.tensordot": [[419, "dpnp-tensordot"]], "dpnp.tile": [[420, "dpnp-tile"]], "dpnp.trace": [[421, "dpnp-trace"]], "dpnp.transpose": [[422, "dpnp-transpose"]], "dpnp.trapz": [[423, "dpnp-trapz"]], "dpnp.tri": [[424, "dpnp-tri"]], "dpnp.tril": [[425, "dpnp-tril"]], "dpnp.tril_indices": [[426, "dpnp-tril-indices"]], "dpnp.tril_indices_from": [[427, "dpnp-tril-indices-from"]], "dpnp.triu": [[428, "dpnp-triu"]], "dpnp.triu_indices": [[429, "dpnp-triu-indices"]], "dpnp.triu_indices_from": [[430, "dpnp-triu-indices-from"]], "dpnp.true_divide": [[431, "dpnp-true-divide"]], "dpnp.trunc": [[432, "dpnp-trunc"]], "dpnp.unique": [[433, "dpnp-unique"]], "dpnp.unwrap": [[434, "dpnp-unwrap"]], "dpnp.vander": [[435, "dpnp-vander"]], "dpnp.var": [[436, "dpnp-var"]], "dpnp.vdot": [[437, "dpnp-vdot"]], "dpnp.vstack": [[438, "dpnp-vstack"]], "dpnp.where": [[439, "dpnp-where"]], "dpnp.zeros": [[440, "dpnp-zeros"]], "dpnp.zeros_like": [[441, "dpnp-zeros-like"]]}, "docnames": ["dpctl", "dpnp_backend_api", "index", "overview", "quick_start_guide", "reference/binary", "reference/comparison", "reference/creation", "reference/dtype", "reference/dtypes_table", "reference/fft", "reference/generated/dpnp.abs", "reference/generated/dpnp.absolute", "reference/generated/dpnp.add", "reference/generated/dpnp.all", "reference/generated/dpnp.allclose", "reference/generated/dpnp.amax", "reference/generated/dpnp.amin", "reference/generated/dpnp.angle", "reference/generated/dpnp.any", "reference/generated/dpnp.arange", "reference/generated/dpnp.arccos", "reference/generated/dpnp.arccosh", "reference/generated/dpnp.arcsin", "reference/generated/dpnp.arcsinh", "reference/generated/dpnp.arctan", "reference/generated/dpnp.arctan2", "reference/generated/dpnp.arctanh", "reference/generated/dpnp.argmax", "reference/generated/dpnp.argmin", "reference/generated/dpnp.argsort", "reference/generated/dpnp.around", "reference/generated/dpnp.array", "reference/generated/dpnp.array_equal", "reference/generated/dpnp.asanyarray", "reference/generated/dpnp.asarray", "reference/generated/dpnp.ascontiguousarray", "reference/generated/dpnp.asfarray", "reference/generated/dpnp.asfortranarray", "reference/generated/dpnp.asnumpy", "reference/generated/dpnp.astype", "reference/generated/dpnp.atleast_1d", "reference/generated/dpnp.atleast_2d", "reference/generated/dpnp.atleast_3d", "reference/generated/dpnp.average", "reference/generated/dpnp.bincount", "reference/generated/dpnp.bitwise_and", "reference/generated/dpnp.bitwise_not", "reference/generated/dpnp.bitwise_or", "reference/generated/dpnp.bitwise_xor", "reference/generated/dpnp.broadcast_arrays", "reference/generated/dpnp.broadcast_to", "reference/generated/dpnp.can_cast", "reference/generated/dpnp.cbrt", "reference/generated/dpnp.ceil", "reference/generated/dpnp.choose", "reference/generated/dpnp.clip", "reference/generated/dpnp.column_stack", "reference/generated/dpnp.concatenate", "reference/generated/dpnp.conj", "reference/generated/dpnp.conjugate", "reference/generated/dpnp.convolve", "reference/generated/dpnp.copy", "reference/generated/dpnp.copysign", "reference/generated/dpnp.copyto", "reference/generated/dpnp.correlate", "reference/generated/dpnp.cos", "reference/generated/dpnp.cosh", "reference/generated/dpnp.count_nonzero", "reference/generated/dpnp.cov", "reference/generated/dpnp.cross", "reference/generated/dpnp.cumlogsumexp", "reference/generated/dpnp.cumprod", "reference/generated/dpnp.cumsum", "reference/generated/dpnp.deg2rad", "reference/generated/dpnp.degrees", "reference/generated/dpnp.diag", "reference/generated/dpnp.diag_indices", "reference/generated/dpnp.diag_indices_from", "reference/generated/dpnp.diagflat", "reference/generated/dpnp.diagonal", "reference/generated/dpnp.diff", "reference/generated/dpnp.divide", "reference/generated/dpnp.dot", "reference/generated/dpnp.dpnp_array.dpnp_array", "reference/generated/dpnp.dstack", "reference/generated/dpnp.dtype", "reference/generated/dpnp.ediff1d", "reference/generated/dpnp.einsum", "reference/generated/dpnp.einsum_path", "reference/generated/dpnp.empty", "reference/generated/dpnp.empty_like", "reference/generated/dpnp.equal", "reference/generated/dpnp.erf", "reference/generated/dpnp.exp", "reference/generated/dpnp.exp2", "reference/generated/dpnp.expand_dims", "reference/generated/dpnp.expm1", "reference/generated/dpnp.extract", "reference/generated/dpnp.eye", "reference/generated/dpnp.fabs", "reference/generated/dpnp.fft.fft", "reference/generated/dpnp.fft.fft2", "reference/generated/dpnp.fft.fftfreq", "reference/generated/dpnp.fft.fftn", "reference/generated/dpnp.fft.fftshift", "reference/generated/dpnp.fft.hfft", "reference/generated/dpnp.fft.ifft", "reference/generated/dpnp.fft.ifft2", "reference/generated/dpnp.fft.ifftn", "reference/generated/dpnp.fft.ifftshift", "reference/generated/dpnp.fft.ihfft", "reference/generated/dpnp.fft.irfft", "reference/generated/dpnp.fft.irfft2", "reference/generated/dpnp.fft.irfftn", "reference/generated/dpnp.fft.rfft", "reference/generated/dpnp.fft.rfft2", "reference/generated/dpnp.fft.rfftfreq", "reference/generated/dpnp.fft.rfftn", "reference/generated/dpnp.fill_diagonal", "reference/generated/dpnp.finfo", "reference/generated/dpnp.flatiter", "reference/generated/dpnp.flip", "reference/generated/dpnp.fliplr", "reference/generated/dpnp.flipud", "reference/generated/dpnp.floor", "reference/generated/dpnp.floor_divide", "reference/generated/dpnp.fmax", "reference/generated/dpnp.fmin", "reference/generated/dpnp.fmod", "reference/generated/dpnp.from_dlpack", "reference/generated/dpnp.frombuffer", "reference/generated/dpnp.fromfile", "reference/generated/dpnp.fromfunction", "reference/generated/dpnp.fromiter", "reference/generated/dpnp.fromstring", "reference/generated/dpnp.full", "reference/generated/dpnp.full_like", "reference/generated/dpnp.geomspace", "reference/generated/dpnp.get_include", "reference/generated/dpnp.gradient", "reference/generated/dpnp.greater", "reference/generated/dpnp.greater_equal", "reference/generated/dpnp.histogram", "reference/generated/dpnp.hstack", "reference/generated/dpnp.hypot", "reference/generated/dpnp.identity", "reference/generated/dpnp.iinfo", "reference/generated/dpnp.imag", "reference/generated/dpnp.indices", "reference/generated/dpnp.inner", "reference/generated/dpnp.invert", "reference/generated/dpnp.isclose", "reference/generated/dpnp.isfinite", "reference/generated/dpnp.isinf", "reference/generated/dpnp.isnan", "reference/generated/dpnp.isscalar", "reference/generated/dpnp.issubdtype", "reference/generated/dpnp.issubsctype", "reference/generated/dpnp.kron", "reference/generated/dpnp.left_shift", "reference/generated/dpnp.less", "reference/generated/dpnp.less_equal", "reference/generated/dpnp.linalg.cholesky", "reference/generated/dpnp.linalg.cond", "reference/generated/dpnp.linalg.det", "reference/generated/dpnp.linalg.eig", "reference/generated/dpnp.linalg.eigh", "reference/generated/dpnp.linalg.eigvals", "reference/generated/dpnp.linalg.eigvalsh", "reference/generated/dpnp.linalg.inv", "reference/generated/dpnp.linalg.lstsq", "reference/generated/dpnp.linalg.matrix_power", "reference/generated/dpnp.linalg.matrix_rank", "reference/generated/dpnp.linalg.multi_dot", "reference/generated/dpnp.linalg.norm", "reference/generated/dpnp.linalg.pinv", "reference/generated/dpnp.linalg.qr", "reference/generated/dpnp.linalg.slogdet", "reference/generated/dpnp.linalg.solve", "reference/generated/dpnp.linalg.svd", "reference/generated/dpnp.linalg.tensorinv", "reference/generated/dpnp.linalg.tensorsolve", "reference/generated/dpnp.linspace", "reference/generated/dpnp.loadtxt", "reference/generated/dpnp.log", "reference/generated/dpnp.log10", "reference/generated/dpnp.log1p", "reference/generated/dpnp.log2", "reference/generated/dpnp.logaddexp", "reference/generated/dpnp.logical_and", "reference/generated/dpnp.logical_not", "reference/generated/dpnp.logical_or", "reference/generated/dpnp.logical_xor", "reference/generated/dpnp.logspace", "reference/generated/dpnp.logsumexp", "reference/generated/dpnp.matmul", "reference/generated/dpnp.max", "reference/generated/dpnp.maximum", "reference/generated/dpnp.mean", "reference/generated/dpnp.median", "reference/generated/dpnp.meshgrid", "reference/generated/dpnp.mgrid", "reference/generated/dpnp.min", "reference/generated/dpnp.minimum", "reference/generated/dpnp.mod", "reference/generated/dpnp.modf", "reference/generated/dpnp.moveaxis", "reference/generated/dpnp.multiply", "reference/generated/dpnp.nanargmax", "reference/generated/dpnp.nanargmin", "reference/generated/dpnp.nancumprod", "reference/generated/dpnp.nancumsum", "reference/generated/dpnp.nanmax", "reference/generated/dpnp.nanmean", "reference/generated/dpnp.nanmin", "reference/generated/dpnp.nanprod", "reference/generated/dpnp.nanstd", "reference/generated/dpnp.nansum", "reference/generated/dpnp.nanvar", "reference/generated/dpnp.ndarray", "reference/generated/dpnp.ndarray.T", "reference/generated/dpnp.ndarray.__abs__", "reference/generated/dpnp.ndarray.__add__", "reference/generated/dpnp.ndarray.__and__", "reference/generated/dpnp.ndarray.__bool__", "reference/generated/dpnp.ndarray.__complex__", "reference/generated/dpnp.ndarray.__copy__", "reference/generated/dpnp.ndarray.__eq__", "reference/generated/dpnp.ndarray.__float__", "reference/generated/dpnp.ndarray.__floordiv__", "reference/generated/dpnp.ndarray.__ge__", "reference/generated/dpnp.ndarray.__getitem__", "reference/generated/dpnp.ndarray.__gt__", "reference/generated/dpnp.ndarray.__iadd__", "reference/generated/dpnp.ndarray.__iand__", "reference/generated/dpnp.ndarray.__ifloordiv__", "reference/generated/dpnp.ndarray.__ilshift__", "reference/generated/dpnp.ndarray.__imod__", "reference/generated/dpnp.ndarray.__imul__", "reference/generated/dpnp.ndarray.__int__", "reference/generated/dpnp.ndarray.__invert__", "reference/generated/dpnp.ndarray.__ior__", "reference/generated/dpnp.ndarray.__ipow__", "reference/generated/dpnp.ndarray.__irshift__", "reference/generated/dpnp.ndarray.__isub__", "reference/generated/dpnp.ndarray.__itruediv__", "reference/generated/dpnp.ndarray.__ixor__", "reference/generated/dpnp.ndarray.__le__", "reference/generated/dpnp.ndarray.__len__", "reference/generated/dpnp.ndarray.__lshift__", "reference/generated/dpnp.ndarray.__lt__", "reference/generated/dpnp.ndarray.__matmul__", "reference/generated/dpnp.ndarray.__mod__", "reference/generated/dpnp.ndarray.__mul__", "reference/generated/dpnp.ndarray.__ne__", "reference/generated/dpnp.ndarray.__neg__", "reference/generated/dpnp.ndarray.__new__", "reference/generated/dpnp.ndarray.__or__", "reference/generated/dpnp.ndarray.__pos__", "reference/generated/dpnp.ndarray.__pow__", "reference/generated/dpnp.ndarray.__repr__", "reference/generated/dpnp.ndarray.__rshift__", "reference/generated/dpnp.ndarray.__setitem__", "reference/generated/dpnp.ndarray.__str__", "reference/generated/dpnp.ndarray.__sub__", "reference/generated/dpnp.ndarray.__truediv__", "reference/generated/dpnp.ndarray.__xor__", "reference/generated/dpnp.ndarray.all", "reference/generated/dpnp.ndarray.any", "reference/generated/dpnp.ndarray.argmax", "reference/generated/dpnp.ndarray.argmin", "reference/generated/dpnp.ndarray.argsort", "reference/generated/dpnp.ndarray.astype", "reference/generated/dpnp.ndarray.choose", "reference/generated/dpnp.ndarray.clip", "reference/generated/dpnp.ndarray.conj", "reference/generated/dpnp.ndarray.conjugate", "reference/generated/dpnp.ndarray.copy", "reference/generated/dpnp.ndarray.cumprod", "reference/generated/dpnp.ndarray.cumsum", "reference/generated/dpnp.ndarray.diagonal", "reference/generated/dpnp.ndarray.dtype", "reference/generated/dpnp.ndarray.fill", "reference/generated/dpnp.ndarray.flags", "reference/generated/dpnp.ndarray.flat", "reference/generated/dpnp.ndarray.flatten", "reference/generated/dpnp.ndarray.imag", "reference/generated/dpnp.ndarray.item", "reference/generated/dpnp.ndarray.itemsize", "reference/generated/dpnp.ndarray.max", "reference/generated/dpnp.ndarray.mean", "reference/generated/dpnp.ndarray.min", "reference/generated/dpnp.ndarray.nbytes", "reference/generated/dpnp.ndarray.ndim", "reference/generated/dpnp.ndarray.nonzero", "reference/generated/dpnp.ndarray.partition", "reference/generated/dpnp.ndarray.prod", "reference/generated/dpnp.ndarray.put", "reference/generated/dpnp.ndarray.ravel", "reference/generated/dpnp.ndarray.real", "reference/generated/dpnp.ndarray.repeat", "reference/generated/dpnp.ndarray.reshape", "reference/generated/dpnp.ndarray.round", "reference/generated/dpnp.ndarray.searchsorted", "reference/generated/dpnp.ndarray.shape", "reference/generated/dpnp.ndarray.size", "reference/generated/dpnp.ndarray.sort", "reference/generated/dpnp.ndarray.squeeze", "reference/generated/dpnp.ndarray.std", "reference/generated/dpnp.ndarray.strides", "reference/generated/dpnp.ndarray.sum", "reference/generated/dpnp.ndarray.swapaxes", "reference/generated/dpnp.ndarray.take", "reference/generated/dpnp.ndarray.transpose", "reference/generated/dpnp.ndarray.var", "reference/generated/dpnp.negative", "reference/generated/dpnp.nonzero", "reference/generated/dpnp.not_equal", "reference/generated/dpnp.ogrid", "reference/generated/dpnp.ones", "reference/generated/dpnp.ones_like", "reference/generated/dpnp.outer", "reference/generated/dpnp.partition", "reference/generated/dpnp.place", "reference/generated/dpnp.positive", "reference/generated/dpnp.power", "reference/generated/dpnp.prod", "reference/generated/dpnp.proj", "reference/generated/dpnp.ptp", "reference/generated/dpnp.put", "reference/generated/dpnp.put_along_axis", "reference/generated/dpnp.putmask", "reference/generated/dpnp.rad2deg", "reference/generated/dpnp.radians", "reference/generated/dpnp.random.RandomState", "reference/generated/dpnp.random.beta", "reference/generated/dpnp.random.binomial", "reference/generated/dpnp.random.bytes", "reference/generated/dpnp.random.chisquare", "reference/generated/dpnp.random.choice", "reference/generated/dpnp.random.dirichlet", "reference/generated/dpnp.random.exponential", "reference/generated/dpnp.random.f", "reference/generated/dpnp.random.gamma", "reference/generated/dpnp.random.geometric", "reference/generated/dpnp.random.gumbel", "reference/generated/dpnp.random.hypergeometric", "reference/generated/dpnp.random.laplace", "reference/generated/dpnp.random.logistic", "reference/generated/dpnp.random.lognormal", "reference/generated/dpnp.random.logseries", "reference/generated/dpnp.random.multinomial", "reference/generated/dpnp.random.multivariate_normal", "reference/generated/dpnp.random.negative_binomial", "reference/generated/dpnp.random.noncentral_chisquare", "reference/generated/dpnp.random.noncentral_f", "reference/generated/dpnp.random.normal", "reference/generated/dpnp.random.pareto", "reference/generated/dpnp.random.permutation", "reference/generated/dpnp.random.poisson", "reference/generated/dpnp.random.power", "reference/generated/dpnp.random.rand", "reference/generated/dpnp.random.randint", "reference/generated/dpnp.random.randn", "reference/generated/dpnp.random.random", "reference/generated/dpnp.random.random_integers", "reference/generated/dpnp.random.random_sample", "reference/generated/dpnp.random.ranf", "reference/generated/dpnp.random.rayleigh", "reference/generated/dpnp.random.sample", "reference/generated/dpnp.random.seed", "reference/generated/dpnp.random.shuffle", "reference/generated/dpnp.random.standard_cauchy", "reference/generated/dpnp.random.standard_exponential", "reference/generated/dpnp.random.standard_gamma", "reference/generated/dpnp.random.standard_normal", "reference/generated/dpnp.random.standard_t", "reference/generated/dpnp.random.triangular", "reference/generated/dpnp.random.uniform", "reference/generated/dpnp.random.vonmises", "reference/generated/dpnp.random.wald", "reference/generated/dpnp.random.weibull", "reference/generated/dpnp.random.zipf", "reference/generated/dpnp.ravel", "reference/generated/dpnp.real", "reference/generated/dpnp.reciprocal", "reference/generated/dpnp.reduce_hypot", "reference/generated/dpnp.remainder", "reference/generated/dpnp.repeat", "reference/generated/dpnp.reshape", "reference/generated/dpnp.result_type", "reference/generated/dpnp.right_shift", "reference/generated/dpnp.rint", "reference/generated/dpnp.roll", "reference/generated/dpnp.rollaxis", "reference/generated/dpnp.round", "reference/generated/dpnp.row_stack", "reference/generated/dpnp.rsqrt", "reference/generated/dpnp.searchsorted", "reference/generated/dpnp.select", "reference/generated/dpnp.shape", "reference/generated/dpnp.sign", "reference/generated/dpnp.signbit", "reference/generated/dpnp.sin", "reference/generated/dpnp.sinh", "reference/generated/dpnp.sort", "reference/generated/dpnp.sqrt", "reference/generated/dpnp.square", "reference/generated/dpnp.squeeze", "reference/generated/dpnp.stack", "reference/generated/dpnp.std", "reference/generated/dpnp.subtract", "reference/generated/dpnp.sum", "reference/generated/dpnp.swapaxes", "reference/generated/dpnp.take", "reference/generated/dpnp.take_along_axis", "reference/generated/dpnp.tan", "reference/generated/dpnp.tanh", "reference/generated/dpnp.tensordot", "reference/generated/dpnp.tile", "reference/generated/dpnp.trace", "reference/generated/dpnp.transpose", "reference/generated/dpnp.trapz", "reference/generated/dpnp.tri", "reference/generated/dpnp.tril", "reference/generated/dpnp.tril_indices", "reference/generated/dpnp.tril_indices_from", "reference/generated/dpnp.triu", "reference/generated/dpnp.triu_indices", "reference/generated/dpnp.triu_indices_from", "reference/generated/dpnp.true_divide", "reference/generated/dpnp.trunc", "reference/generated/dpnp.unique", "reference/generated/dpnp.unwrap", "reference/generated/dpnp.vander", "reference/generated/dpnp.var", "reference/generated/dpnp.vdot", "reference/generated/dpnp.vstack", "reference/generated/dpnp.where", "reference/generated/dpnp.zeros", "reference/generated/dpnp.zeros_like", "reference/index", "reference/indexing", "reference/linalg", "reference/logic", "reference/manipulation", "reference/math", "reference/misc", "reference/ndarray", "reference/pad", "reference/polynomials", "reference/random", "reference/routines", "reference/sorting", "reference/special", "reference/statistics", "reference/ufunc"], "envversion": {"sphinx": 61, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1}, "filenames": ["dpctl.rst", "dpnp_backend_api.rst", "index.rst", "overview.rst", "quick_start_guide.rst", "reference/binary.rst", "reference/comparison.rst", "reference/creation.rst", "reference/dtype.rst", "reference/dtypes_table.rst", "reference/fft.rst", "reference/generated/dpnp.abs.rst", "reference/generated/dpnp.absolute.rst", "reference/generated/dpnp.add.rst", "reference/generated/dpnp.all.rst", "reference/generated/dpnp.allclose.rst", "reference/generated/dpnp.amax.rst", "reference/generated/dpnp.amin.rst", "reference/generated/dpnp.angle.rst", "reference/generated/dpnp.any.rst", "reference/generated/dpnp.arange.rst", "reference/generated/dpnp.arccos.rst", "reference/generated/dpnp.arccosh.rst", "reference/generated/dpnp.arcsin.rst", "reference/generated/dpnp.arcsinh.rst", "reference/generated/dpnp.arctan.rst", "reference/generated/dpnp.arctan2.rst", "reference/generated/dpnp.arctanh.rst", "reference/generated/dpnp.argmax.rst", "reference/generated/dpnp.argmin.rst", "reference/generated/dpnp.argsort.rst", "reference/generated/dpnp.around.rst", "reference/generated/dpnp.array.rst", "reference/generated/dpnp.array_equal.rst", "reference/generated/dpnp.asanyarray.rst", "reference/generated/dpnp.asarray.rst", "reference/generated/dpnp.ascontiguousarray.rst", "reference/generated/dpnp.asfarray.rst", "reference/generated/dpnp.asfortranarray.rst", "reference/generated/dpnp.asnumpy.rst", "reference/generated/dpnp.astype.rst", "reference/generated/dpnp.atleast_1d.rst", "reference/generated/dpnp.atleast_2d.rst", "reference/generated/dpnp.atleast_3d.rst", "reference/generated/dpnp.average.rst", "reference/generated/dpnp.bincount.rst", "reference/generated/dpnp.bitwise_and.rst", "reference/generated/dpnp.bitwise_not.rst", "reference/generated/dpnp.bitwise_or.rst", "reference/generated/dpnp.bitwise_xor.rst", "reference/generated/dpnp.broadcast_arrays.rst", "reference/generated/dpnp.broadcast_to.rst", "reference/generated/dpnp.can_cast.rst", "reference/generated/dpnp.cbrt.rst", "reference/generated/dpnp.ceil.rst", "reference/generated/dpnp.choose.rst", "reference/generated/dpnp.clip.rst", "reference/generated/dpnp.column_stack.rst", "reference/generated/dpnp.concatenate.rst", "reference/generated/dpnp.conj.rst", "reference/generated/dpnp.conjugate.rst", "reference/generated/dpnp.convolve.rst", "reference/generated/dpnp.copy.rst", "reference/generated/dpnp.copysign.rst", "reference/generated/dpnp.copyto.rst", "reference/generated/dpnp.correlate.rst", "reference/generated/dpnp.cos.rst", "reference/generated/dpnp.cosh.rst", "reference/generated/dpnp.count_nonzero.rst", "reference/generated/dpnp.cov.rst", "reference/generated/dpnp.cross.rst", "reference/generated/dpnp.cumlogsumexp.rst", "reference/generated/dpnp.cumprod.rst", "reference/generated/dpnp.cumsum.rst", "reference/generated/dpnp.deg2rad.rst", "reference/generated/dpnp.degrees.rst", "reference/generated/dpnp.diag.rst", "reference/generated/dpnp.diag_indices.rst", "reference/generated/dpnp.diag_indices_from.rst", "reference/generated/dpnp.diagflat.rst", "reference/generated/dpnp.diagonal.rst", "reference/generated/dpnp.diff.rst", "reference/generated/dpnp.divide.rst", "reference/generated/dpnp.dot.rst", "reference/generated/dpnp.dpnp_array.dpnp_array.rst", "reference/generated/dpnp.dstack.rst", "reference/generated/dpnp.dtype.rst", "reference/generated/dpnp.ediff1d.rst", "reference/generated/dpnp.einsum.rst", "reference/generated/dpnp.einsum_path.rst", "reference/generated/dpnp.empty.rst", "reference/generated/dpnp.empty_like.rst", "reference/generated/dpnp.equal.rst", "reference/generated/dpnp.erf.rst", "reference/generated/dpnp.exp.rst", "reference/generated/dpnp.exp2.rst", "reference/generated/dpnp.expand_dims.rst", "reference/generated/dpnp.expm1.rst", "reference/generated/dpnp.extract.rst", "reference/generated/dpnp.eye.rst", "reference/generated/dpnp.fabs.rst", "reference/generated/dpnp.fft.fft.rst", "reference/generated/dpnp.fft.fft2.rst", "reference/generated/dpnp.fft.fftfreq.rst", "reference/generated/dpnp.fft.fftn.rst", "reference/generated/dpnp.fft.fftshift.rst", "reference/generated/dpnp.fft.hfft.rst", "reference/generated/dpnp.fft.ifft.rst", "reference/generated/dpnp.fft.ifft2.rst", "reference/generated/dpnp.fft.ifftn.rst", "reference/generated/dpnp.fft.ifftshift.rst", "reference/generated/dpnp.fft.ihfft.rst", "reference/generated/dpnp.fft.irfft.rst", "reference/generated/dpnp.fft.irfft2.rst", "reference/generated/dpnp.fft.irfftn.rst", "reference/generated/dpnp.fft.rfft.rst", "reference/generated/dpnp.fft.rfft2.rst", "reference/generated/dpnp.fft.rfftfreq.rst", "reference/generated/dpnp.fft.rfftn.rst", "reference/generated/dpnp.fill_diagonal.rst", "reference/generated/dpnp.finfo.rst", "reference/generated/dpnp.flatiter.rst", "reference/generated/dpnp.flip.rst", "reference/generated/dpnp.fliplr.rst", "reference/generated/dpnp.flipud.rst", "reference/generated/dpnp.floor.rst", "reference/generated/dpnp.floor_divide.rst", "reference/generated/dpnp.fmax.rst", "reference/generated/dpnp.fmin.rst", "reference/generated/dpnp.fmod.rst", "reference/generated/dpnp.from_dlpack.rst", "reference/generated/dpnp.frombuffer.rst", "reference/generated/dpnp.fromfile.rst", "reference/generated/dpnp.fromfunction.rst", "reference/generated/dpnp.fromiter.rst", "reference/generated/dpnp.fromstring.rst", "reference/generated/dpnp.full.rst", "reference/generated/dpnp.full_like.rst", "reference/generated/dpnp.geomspace.rst", "reference/generated/dpnp.get_include.rst", "reference/generated/dpnp.gradient.rst", "reference/generated/dpnp.greater.rst", "reference/generated/dpnp.greater_equal.rst", "reference/generated/dpnp.histogram.rst", "reference/generated/dpnp.hstack.rst", "reference/generated/dpnp.hypot.rst", "reference/generated/dpnp.identity.rst", "reference/generated/dpnp.iinfo.rst", "reference/generated/dpnp.imag.rst", "reference/generated/dpnp.indices.rst", "reference/generated/dpnp.inner.rst", "reference/generated/dpnp.invert.rst", "reference/generated/dpnp.isclose.rst", "reference/generated/dpnp.isfinite.rst", "reference/generated/dpnp.isinf.rst", "reference/generated/dpnp.isnan.rst", "reference/generated/dpnp.isscalar.rst", "reference/generated/dpnp.issubdtype.rst", "reference/generated/dpnp.issubsctype.rst", "reference/generated/dpnp.kron.rst", "reference/generated/dpnp.left_shift.rst", "reference/generated/dpnp.less.rst", "reference/generated/dpnp.less_equal.rst", "reference/generated/dpnp.linalg.cholesky.rst", "reference/generated/dpnp.linalg.cond.rst", "reference/generated/dpnp.linalg.det.rst", "reference/generated/dpnp.linalg.eig.rst", "reference/generated/dpnp.linalg.eigh.rst", "reference/generated/dpnp.linalg.eigvals.rst", "reference/generated/dpnp.linalg.eigvalsh.rst", "reference/generated/dpnp.linalg.inv.rst", "reference/generated/dpnp.linalg.lstsq.rst", "reference/generated/dpnp.linalg.matrix_power.rst", "reference/generated/dpnp.linalg.matrix_rank.rst", "reference/generated/dpnp.linalg.multi_dot.rst", "reference/generated/dpnp.linalg.norm.rst", "reference/generated/dpnp.linalg.pinv.rst", "reference/generated/dpnp.linalg.qr.rst", "reference/generated/dpnp.linalg.slogdet.rst", "reference/generated/dpnp.linalg.solve.rst", "reference/generated/dpnp.linalg.svd.rst", "reference/generated/dpnp.linalg.tensorinv.rst", "reference/generated/dpnp.linalg.tensorsolve.rst", "reference/generated/dpnp.linspace.rst", "reference/generated/dpnp.loadtxt.rst", "reference/generated/dpnp.log.rst", "reference/generated/dpnp.log10.rst", "reference/generated/dpnp.log1p.rst", "reference/generated/dpnp.log2.rst", "reference/generated/dpnp.logaddexp.rst", "reference/generated/dpnp.logical_and.rst", "reference/generated/dpnp.logical_not.rst", "reference/generated/dpnp.logical_or.rst", "reference/generated/dpnp.logical_xor.rst", "reference/generated/dpnp.logspace.rst", "reference/generated/dpnp.logsumexp.rst", "reference/generated/dpnp.matmul.rst", "reference/generated/dpnp.max.rst", "reference/generated/dpnp.maximum.rst", "reference/generated/dpnp.mean.rst", "reference/generated/dpnp.median.rst", "reference/generated/dpnp.meshgrid.rst", "reference/generated/dpnp.mgrid.rst", "reference/generated/dpnp.min.rst", "reference/generated/dpnp.minimum.rst", "reference/generated/dpnp.mod.rst", "reference/generated/dpnp.modf.rst", "reference/generated/dpnp.moveaxis.rst", "reference/generated/dpnp.multiply.rst", "reference/generated/dpnp.nanargmax.rst", "reference/generated/dpnp.nanargmin.rst", "reference/generated/dpnp.nancumprod.rst", "reference/generated/dpnp.nancumsum.rst", "reference/generated/dpnp.nanmax.rst", "reference/generated/dpnp.nanmean.rst", "reference/generated/dpnp.nanmin.rst", "reference/generated/dpnp.nanprod.rst", "reference/generated/dpnp.nanstd.rst", "reference/generated/dpnp.nansum.rst", "reference/generated/dpnp.nanvar.rst", "reference/generated/dpnp.ndarray.rst", "reference/generated/dpnp.ndarray.T.rst", "reference/generated/dpnp.ndarray.__abs__.rst", "reference/generated/dpnp.ndarray.__add__.rst", "reference/generated/dpnp.ndarray.__and__.rst", "reference/generated/dpnp.ndarray.__bool__.rst", "reference/generated/dpnp.ndarray.__complex__.rst", "reference/generated/dpnp.ndarray.__copy__.rst", "reference/generated/dpnp.ndarray.__eq__.rst", "reference/generated/dpnp.ndarray.__float__.rst", "reference/generated/dpnp.ndarray.__floordiv__.rst", "reference/generated/dpnp.ndarray.__ge__.rst", "reference/generated/dpnp.ndarray.__getitem__.rst", "reference/generated/dpnp.ndarray.__gt__.rst", "reference/generated/dpnp.ndarray.__iadd__.rst", "reference/generated/dpnp.ndarray.__iand__.rst", "reference/generated/dpnp.ndarray.__ifloordiv__.rst", "reference/generated/dpnp.ndarray.__ilshift__.rst", "reference/generated/dpnp.ndarray.__imod__.rst", "reference/generated/dpnp.ndarray.__imul__.rst", "reference/generated/dpnp.ndarray.__int__.rst", "reference/generated/dpnp.ndarray.__invert__.rst", "reference/generated/dpnp.ndarray.__ior__.rst", "reference/generated/dpnp.ndarray.__ipow__.rst", "reference/generated/dpnp.ndarray.__irshift__.rst", "reference/generated/dpnp.ndarray.__isub__.rst", "reference/generated/dpnp.ndarray.__itruediv__.rst", "reference/generated/dpnp.ndarray.__ixor__.rst", "reference/generated/dpnp.ndarray.__le__.rst", "reference/generated/dpnp.ndarray.__len__.rst", "reference/generated/dpnp.ndarray.__lshift__.rst", "reference/generated/dpnp.ndarray.__lt__.rst", "reference/generated/dpnp.ndarray.__matmul__.rst", "reference/generated/dpnp.ndarray.__mod__.rst", "reference/generated/dpnp.ndarray.__mul__.rst", "reference/generated/dpnp.ndarray.__ne__.rst", "reference/generated/dpnp.ndarray.__neg__.rst", "reference/generated/dpnp.ndarray.__new__.rst", "reference/generated/dpnp.ndarray.__or__.rst", "reference/generated/dpnp.ndarray.__pos__.rst", "reference/generated/dpnp.ndarray.__pow__.rst", "reference/generated/dpnp.ndarray.__repr__.rst", "reference/generated/dpnp.ndarray.__rshift__.rst", "reference/generated/dpnp.ndarray.__setitem__.rst", "reference/generated/dpnp.ndarray.__str__.rst", "reference/generated/dpnp.ndarray.__sub__.rst", "reference/generated/dpnp.ndarray.__truediv__.rst", "reference/generated/dpnp.ndarray.__xor__.rst", "reference/generated/dpnp.ndarray.all.rst", "reference/generated/dpnp.ndarray.any.rst", "reference/generated/dpnp.ndarray.argmax.rst", "reference/generated/dpnp.ndarray.argmin.rst", "reference/generated/dpnp.ndarray.argsort.rst", "reference/generated/dpnp.ndarray.astype.rst", "reference/generated/dpnp.ndarray.choose.rst", "reference/generated/dpnp.ndarray.clip.rst", "reference/generated/dpnp.ndarray.conj.rst", "reference/generated/dpnp.ndarray.conjugate.rst", "reference/generated/dpnp.ndarray.copy.rst", "reference/generated/dpnp.ndarray.cumprod.rst", "reference/generated/dpnp.ndarray.cumsum.rst", "reference/generated/dpnp.ndarray.diagonal.rst", "reference/generated/dpnp.ndarray.dtype.rst", "reference/generated/dpnp.ndarray.fill.rst", "reference/generated/dpnp.ndarray.flags.rst", "reference/generated/dpnp.ndarray.flat.rst", "reference/generated/dpnp.ndarray.flatten.rst", "reference/generated/dpnp.ndarray.imag.rst", "reference/generated/dpnp.ndarray.item.rst", "reference/generated/dpnp.ndarray.itemsize.rst", "reference/generated/dpnp.ndarray.max.rst", "reference/generated/dpnp.ndarray.mean.rst", "reference/generated/dpnp.ndarray.min.rst", "reference/generated/dpnp.ndarray.nbytes.rst", "reference/generated/dpnp.ndarray.ndim.rst", "reference/generated/dpnp.ndarray.nonzero.rst", "reference/generated/dpnp.ndarray.partition.rst", "reference/generated/dpnp.ndarray.prod.rst", "reference/generated/dpnp.ndarray.put.rst", "reference/generated/dpnp.ndarray.ravel.rst", "reference/generated/dpnp.ndarray.real.rst", "reference/generated/dpnp.ndarray.repeat.rst", "reference/generated/dpnp.ndarray.reshape.rst", "reference/generated/dpnp.ndarray.round.rst", "reference/generated/dpnp.ndarray.searchsorted.rst", "reference/generated/dpnp.ndarray.shape.rst", "reference/generated/dpnp.ndarray.size.rst", "reference/generated/dpnp.ndarray.sort.rst", "reference/generated/dpnp.ndarray.squeeze.rst", "reference/generated/dpnp.ndarray.std.rst", "reference/generated/dpnp.ndarray.strides.rst", "reference/generated/dpnp.ndarray.sum.rst", "reference/generated/dpnp.ndarray.swapaxes.rst", "reference/generated/dpnp.ndarray.take.rst", "reference/generated/dpnp.ndarray.transpose.rst", "reference/generated/dpnp.ndarray.var.rst", "reference/generated/dpnp.negative.rst", "reference/generated/dpnp.nonzero.rst", "reference/generated/dpnp.not_equal.rst", "reference/generated/dpnp.ogrid.rst", "reference/generated/dpnp.ones.rst", "reference/generated/dpnp.ones_like.rst", "reference/generated/dpnp.outer.rst", "reference/generated/dpnp.partition.rst", "reference/generated/dpnp.place.rst", "reference/generated/dpnp.positive.rst", "reference/generated/dpnp.power.rst", "reference/generated/dpnp.prod.rst", "reference/generated/dpnp.proj.rst", "reference/generated/dpnp.ptp.rst", "reference/generated/dpnp.put.rst", "reference/generated/dpnp.put_along_axis.rst", "reference/generated/dpnp.putmask.rst", "reference/generated/dpnp.rad2deg.rst", "reference/generated/dpnp.radians.rst", "reference/generated/dpnp.random.RandomState.rst", "reference/generated/dpnp.random.beta.rst", "reference/generated/dpnp.random.binomial.rst", "reference/generated/dpnp.random.bytes.rst", "reference/generated/dpnp.random.chisquare.rst", "reference/generated/dpnp.random.choice.rst", "reference/generated/dpnp.random.dirichlet.rst", "reference/generated/dpnp.random.exponential.rst", "reference/generated/dpnp.random.f.rst", "reference/generated/dpnp.random.gamma.rst", "reference/generated/dpnp.random.geometric.rst", "reference/generated/dpnp.random.gumbel.rst", "reference/generated/dpnp.random.hypergeometric.rst", "reference/generated/dpnp.random.laplace.rst", "reference/generated/dpnp.random.logistic.rst", "reference/generated/dpnp.random.lognormal.rst", "reference/generated/dpnp.random.logseries.rst", "reference/generated/dpnp.random.multinomial.rst", "reference/generated/dpnp.random.multivariate_normal.rst", "reference/generated/dpnp.random.negative_binomial.rst", "reference/generated/dpnp.random.noncentral_chisquare.rst", "reference/generated/dpnp.random.noncentral_f.rst", "reference/generated/dpnp.random.normal.rst", "reference/generated/dpnp.random.pareto.rst", "reference/generated/dpnp.random.permutation.rst", "reference/generated/dpnp.random.poisson.rst", "reference/generated/dpnp.random.power.rst", "reference/generated/dpnp.random.rand.rst", "reference/generated/dpnp.random.randint.rst", "reference/generated/dpnp.random.randn.rst", "reference/generated/dpnp.random.random.rst", "reference/generated/dpnp.random.random_integers.rst", "reference/generated/dpnp.random.random_sample.rst", "reference/generated/dpnp.random.ranf.rst", "reference/generated/dpnp.random.rayleigh.rst", "reference/generated/dpnp.random.sample.rst", "reference/generated/dpnp.random.seed.rst", "reference/generated/dpnp.random.shuffle.rst", "reference/generated/dpnp.random.standard_cauchy.rst", "reference/generated/dpnp.random.standard_exponential.rst", "reference/generated/dpnp.random.standard_gamma.rst", "reference/generated/dpnp.random.standard_normal.rst", "reference/generated/dpnp.random.standard_t.rst", "reference/generated/dpnp.random.triangular.rst", "reference/generated/dpnp.random.uniform.rst", "reference/generated/dpnp.random.vonmises.rst", "reference/generated/dpnp.random.wald.rst", "reference/generated/dpnp.random.weibull.rst", "reference/generated/dpnp.random.zipf.rst", "reference/generated/dpnp.ravel.rst", "reference/generated/dpnp.real.rst", "reference/generated/dpnp.reciprocal.rst", "reference/generated/dpnp.reduce_hypot.rst", "reference/generated/dpnp.remainder.rst", "reference/generated/dpnp.repeat.rst", "reference/generated/dpnp.reshape.rst", "reference/generated/dpnp.result_type.rst", "reference/generated/dpnp.right_shift.rst", "reference/generated/dpnp.rint.rst", "reference/generated/dpnp.roll.rst", "reference/generated/dpnp.rollaxis.rst", "reference/generated/dpnp.round.rst", "reference/generated/dpnp.row_stack.rst", "reference/generated/dpnp.rsqrt.rst", "reference/generated/dpnp.searchsorted.rst", "reference/generated/dpnp.select.rst", "reference/generated/dpnp.shape.rst", "reference/generated/dpnp.sign.rst", "reference/generated/dpnp.signbit.rst", "reference/generated/dpnp.sin.rst", "reference/generated/dpnp.sinh.rst", "reference/generated/dpnp.sort.rst", "reference/generated/dpnp.sqrt.rst", "reference/generated/dpnp.square.rst", "reference/generated/dpnp.squeeze.rst", "reference/generated/dpnp.stack.rst", "reference/generated/dpnp.std.rst", "reference/generated/dpnp.subtract.rst", "reference/generated/dpnp.sum.rst", "reference/generated/dpnp.swapaxes.rst", "reference/generated/dpnp.take.rst", "reference/generated/dpnp.take_along_axis.rst", "reference/generated/dpnp.tan.rst", "reference/generated/dpnp.tanh.rst", "reference/generated/dpnp.tensordot.rst", "reference/generated/dpnp.tile.rst", "reference/generated/dpnp.trace.rst", "reference/generated/dpnp.transpose.rst", "reference/generated/dpnp.trapz.rst", "reference/generated/dpnp.tri.rst", "reference/generated/dpnp.tril.rst", "reference/generated/dpnp.tril_indices.rst", "reference/generated/dpnp.tril_indices_from.rst", "reference/generated/dpnp.triu.rst", "reference/generated/dpnp.triu_indices.rst", "reference/generated/dpnp.triu_indices_from.rst", "reference/generated/dpnp.true_divide.rst", "reference/generated/dpnp.trunc.rst", "reference/generated/dpnp.unique.rst", "reference/generated/dpnp.unwrap.rst", "reference/generated/dpnp.vander.rst", "reference/generated/dpnp.var.rst", "reference/generated/dpnp.vdot.rst", "reference/generated/dpnp.vstack.rst", "reference/generated/dpnp.where.rst", "reference/generated/dpnp.zeros.rst", "reference/generated/dpnp.zeros_like.rst", "reference/index.rst", "reference/indexing.rst", "reference/linalg.rst", "reference/logic.rst", "reference/manipulation.rst", "reference/math.rst", "reference/misc.rst", "reference/ndarray.rst", "reference/pad.rst", "reference/polynomials.rst", "reference/random.rst", "reference/routines.rst", "reference/sorting.rst", "reference/special.rst", "reference/statistics.rst", "reference/ufunc.rst"], "indexentries": {"__abs__() (dpnp.ndarray method)": [[222, "dpnp.ndarray.__abs__", false]], "__add__() (dpnp.ndarray method)": [[223, "dpnp.ndarray.__add__", false]], "__and__() (dpnp.ndarray method)": [[224, "dpnp.ndarray.__and__", false]], "__bool__() (dpnp.ndarray method)": [[225, "dpnp.ndarray.__bool__", false]], "__complex__() (dpnp.ndarray method)": [[226, "dpnp.ndarray.__complex__", false]], "__copy__() (dpnp.ndarray method)": [[227, "dpnp.ndarray.__copy__", false]], "__eq__() (dpnp.dpnp_array.dpnp_array method)": [[84, "dpnp.dpnp_array.dpnp_array.__eq__", false]], "__eq__() (dpnp.dtype method)": [[86, "dpnp.dtype.__eq__", false]], "__eq__() (dpnp.flatiter method)": [[121, "dpnp.flatiter.__eq__", false]], "__eq__() (dpnp.ndarray method)": [[228, "dpnp.ndarray.__eq__", false]], "__eq__() (dpnp.random.randomstate method)": [[335, "dpnp.random.RandomState.__eq__", false]], "__float__() (dpnp.ndarray method)": [[229, "dpnp.ndarray.__float__", false]], "__floordiv__() (dpnp.ndarray method)": [[230, "dpnp.ndarray.__floordiv__", false]], "__ge__() (dpnp.dpnp_array.dpnp_array method)": [[84, "dpnp.dpnp_array.dpnp_array.__ge__", false]], "__ge__() (dpnp.dtype method)": [[86, "dpnp.dtype.__ge__", false]], "__ge__() (dpnp.flatiter method)": [[121, "dpnp.flatiter.__ge__", false]], "__ge__() (dpnp.ndarray method)": [[231, "dpnp.ndarray.__ge__", false]], "__ge__() (dpnp.random.randomstate method)": [[335, "dpnp.random.RandomState.__ge__", false]], "__getitem__() (dpnp.dpnp_array.dpnp_array method)": [[84, "dpnp.dpnp_array.dpnp_array.__getitem__", false]], "__getitem__() (dpnp.dtype method)": [[86, "dpnp.dtype.__getitem__", false]], "__getitem__() (dpnp.flatiter method)": [[121, "dpnp.flatiter.__getitem__", false]], "__getitem__() (dpnp.ndarray method)": [[232, "dpnp.ndarray.__getitem__", false]], "__gt__() (dpnp.dpnp_array.dpnp_array method)": [[84, "dpnp.dpnp_array.dpnp_array.__gt__", false]], "__gt__() (dpnp.dtype method)": [[86, "dpnp.dtype.__gt__", false]], "__gt__() (dpnp.flatiter method)": [[121, "dpnp.flatiter.__gt__", false]], "__gt__() (dpnp.ndarray method)": [[233, "dpnp.ndarray.__gt__", false]], "__gt__() (dpnp.random.randomstate method)": [[335, "dpnp.random.RandomState.__gt__", false]], "__iadd__() (dpnp.ndarray method)": [[234, "dpnp.ndarray.__iadd__", false]], "__iand__() (dpnp.ndarray method)": [[235, "dpnp.ndarray.__iand__", false]], "__ifloordiv__() (dpnp.ndarray method)": [[236, "dpnp.ndarray.__ifloordiv__", false]], "__ilshift__() (dpnp.ndarray method)": [[237, "dpnp.ndarray.__ilshift__", false]], "__imod__() (dpnp.ndarray method)": [[238, "dpnp.ndarray.__imod__", false]], "__imul__() (dpnp.ndarray method)": [[239, "dpnp.ndarray.__imul__", false]], "__int__() (dpnp.ndarray method)": [[240, "dpnp.ndarray.__int__", false]], "__invert__() (dpnp.ndarray method)": [[241, "dpnp.ndarray.__invert__", false]], "__ior__() (dpnp.ndarray method)": [[242, "dpnp.ndarray.__ior__", false]], "__ipow__() (dpnp.ndarray method)": [[243, "dpnp.ndarray.__ipow__", false]], "__irshift__() (dpnp.ndarray method)": [[244, "dpnp.ndarray.__irshift__", false]], "__isub__() (dpnp.ndarray method)": [[245, "dpnp.ndarray.__isub__", false]], "__iter__() (dpnp.flatiter method)": [[121, "dpnp.flatiter.__iter__", false]], "__itruediv__() (dpnp.ndarray method)": [[246, "dpnp.ndarray.__itruediv__", false]], "__ixor__() (dpnp.ndarray method)": [[247, "dpnp.ndarray.__ixor__", false]], "__le__() (dpnp.dpnp_array.dpnp_array method)": [[84, "dpnp.dpnp_array.dpnp_array.__le__", false]], "__le__() (dpnp.dtype method)": [[86, "dpnp.dtype.__le__", false]], "__le__() (dpnp.flatiter method)": [[121, "dpnp.flatiter.__le__", false]], "__le__() (dpnp.ndarray method)": [[248, "dpnp.ndarray.__le__", false]], "__le__() (dpnp.random.randomstate method)": [[335, "dpnp.random.RandomState.__le__", false]], "__len__() (dpnp.dpnp_array.dpnp_array method)": [[84, "dpnp.dpnp_array.dpnp_array.__len__", false]], "__len__() (dpnp.dtype method)": [[86, "dpnp.dtype.__len__", false]], "__len__() (dpnp.ndarray method)": [[249, "dpnp.ndarray.__len__", false]], "__lshift__() (dpnp.ndarray method)": [[250, "dpnp.ndarray.__lshift__", false]], "__lt__() (dpnp.dpnp_array.dpnp_array method)": [[84, "dpnp.dpnp_array.dpnp_array.__lt__", false]], "__lt__() (dpnp.dtype method)": [[86, "dpnp.dtype.__lt__", false]], "__lt__() (dpnp.flatiter method)": [[121, "dpnp.flatiter.__lt__", false]], "__lt__() (dpnp.ndarray method)": [[251, "dpnp.ndarray.__lt__", false]], "__lt__() (dpnp.random.randomstate method)": [[335, "dpnp.random.RandomState.__lt__", false]], "__matmul__() (dpnp.ndarray method)": [[252, "dpnp.ndarray.__matmul__", false]], "__mod__() (dpnp.ndarray method)": [[253, "dpnp.ndarray.__mod__", false]], "__mul__() (dpnp.ndarray method)": [[254, "dpnp.ndarray.__mul__", false]], "__ne__() (dpnp.dpnp_array.dpnp_array method)": [[84, "dpnp.dpnp_array.dpnp_array.__ne__", false]], "__ne__() (dpnp.dtype method)": [[86, "dpnp.dtype.__ne__", false]], "__ne__() (dpnp.flatiter method)": [[121, "dpnp.flatiter.__ne__", false]], "__ne__() (dpnp.ndarray method)": [[255, "dpnp.ndarray.__ne__", false]], "__ne__() (dpnp.random.randomstate method)": [[335, "dpnp.random.RandomState.__ne__", false]], "__neg__() (dpnp.ndarray method)": [[256, "dpnp.ndarray.__neg__", false]], "__new__() (dpnp.ndarray method)": [[257, "dpnp.ndarray.__new__", false]], "__next__() (dpnp.flatiter method)": [[121, "dpnp.flatiter.__next__", false]], "__or__() (dpnp.ndarray method)": [[258, "dpnp.ndarray.__or__", false]], "__pos__() (dpnp.ndarray method)": [[259, "dpnp.ndarray.__pos__", false]], "__pow__() (dpnp.ndarray method)": [[260, "dpnp.ndarray.__pow__", false]], "__repr__() (dpnp.ndarray method)": [[261, "dpnp.ndarray.__repr__", false]], "__rshift__() (dpnp.ndarray method)": [[262, "dpnp.ndarray.__rshift__", false]], "__setitem__() (dpnp.dpnp_array.dpnp_array method)": [[84, "dpnp.dpnp_array.dpnp_array.__setitem__", false]], "__setitem__() (dpnp.flatiter method)": [[121, "dpnp.flatiter.__setitem__", false]], "__setitem__() (dpnp.ndarray method)": [[263, "dpnp.ndarray.__setitem__", false]], "__str__() (dpnp.ndarray method)": [[264, "dpnp.ndarray.__str__", false]], "__sub__() (dpnp.ndarray method)": [[265, "dpnp.ndarray.__sub__", false]], "__truediv__() (dpnp.ndarray method)": [[266, "dpnp.ndarray.__truediv__", false]], "__xor__() (dpnp.ndarray method)": [[267, "dpnp.ndarray.__xor__", false]], "abs() (in module dpnp)": [[11, "dpnp.abs", false]], "absolute() (in module dpnp)": [[12, "dpnp.absolute", false]], "add() (in module dpnp)": [[13, "dpnp.add", false]], "alignment (dpnp.dtype attribute)": [[86, "dpnp.dtype.alignment", false]], "all() (dpnp.dpnp_array.dpnp_array method)": [[84, "dpnp.dpnp_array.dpnp_array.all", false]], "all() (dpnp.ndarray method)": [[268, "dpnp.ndarray.all", false]], "all() (in module dpnp)": [[14, "dpnp.all", false]], "allclose() (in module dpnp)": [[15, "dpnp.allclose", false]], "amax() (in module dpnp)": [[16, "dpnp.amax", false]], "amin() (in module dpnp)": [[17, "dpnp.amin", false]], "angle() (in module dpnp)": [[18, "dpnp.angle", false]], "any() (dpnp.dpnp_array.dpnp_array method)": [[84, "dpnp.dpnp_array.dpnp_array.any", false]], "any() (dpnp.ndarray method)": [[269, "dpnp.ndarray.any", false]], "any() (in module dpnp)": [[19, "dpnp.any", false]], "arange() (in module dpnp)": [[20, "dpnp.arange", false]], "arccos() (in module dpnp)": [[21, "dpnp.arccos", false]], "arccosh() (in module dpnp)": [[22, "dpnp.arccosh", false]], "arcsin() (in module dpnp)": [[23, "dpnp.arcsin", false]], "arcsinh() (in module dpnp)": [[24, "dpnp.arcsinh", false]], "arctan() (in module dpnp)": [[25, "dpnp.arctan", false]], "arctan2() (in module dpnp)": [[26, "dpnp.arctan2", false]], "arctanh() (in module dpnp)": [[27, "dpnp.arctanh", false]], "argmax() (dpnp.dpnp_array.dpnp_array method)": [[84, "dpnp.dpnp_array.dpnp_array.argmax", false]], "argmax() (dpnp.ndarray method)": [[270, "dpnp.ndarray.argmax", false]], "argmax() (in module dpnp)": [[28, "dpnp.argmax", false]], "argmin() (dpnp.dpnp_array.dpnp_array method)": [[84, "dpnp.dpnp_array.dpnp_array.argmin", false]], "argmin() (dpnp.ndarray method)": [[271, "dpnp.ndarray.argmin", false]], "argmin() (in module dpnp)": [[29, "dpnp.argmin", false]], "argsort() (dpnp.dpnp_array.dpnp_array method)": [[84, "dpnp.dpnp_array.dpnp_array.argsort", false]], "argsort() (dpnp.ndarray method)": [[272, "dpnp.ndarray.argsort", false]], "argsort() (in module dpnp)": [[30, "dpnp.argsort", false]], "around() (in module dpnp)": [[31, "dpnp.around", false]], "array() (in module dpnp)": [[32, "dpnp.array", false]], "array_equal() (in module dpnp)": [[33, "dpnp.array_equal", false]], "asanyarray() (in module dpnp)": [[34, "dpnp.asanyarray", false]], "asarray() (in module dpnp)": [[35, "dpnp.asarray", false]], "ascontiguousarray() (in module dpnp)": [[36, "dpnp.ascontiguousarray", false]], "asfarray() (in module dpnp)": [[37, "dpnp.asfarray", false]], "asfortranarray() (in module dpnp)": [[38, "dpnp.asfortranarray", false]], "asnumpy() (dpnp.dpnp_array.dpnp_array method)": [[84, "dpnp.dpnp_array.dpnp_array.asnumpy", false]], "asnumpy() (in module dpnp)": [[39, "dpnp.asnumpy", false]], "astype() (dpnp.dpnp_array.dpnp_array method)": [[84, "dpnp.dpnp_array.dpnp_array.astype", false]], "astype() (dpnp.ndarray method)": [[273, "dpnp.ndarray.astype", false]], "astype() (in module dpnp)": [[40, "dpnp.astype", false]], "atleast_1d() (in module dpnp)": [[41, "dpnp.atleast_1d", false]], "atleast_2d() (in module dpnp)": [[42, "dpnp.atleast_2d", false]], "atleast_3d() (in module dpnp)": [[43, "dpnp.atleast_3d", false]], "average() (in module dpnp)": [[44, "dpnp.average", false]], "base (dpnp.dtype attribute)": [[86, "dpnp.dtype.base", false]], "beta() (in module dpnp.random)": [[336, "dpnp.random.beta", false]], "bincount() (in module dpnp)": [[45, "dpnp.bincount", false]], "binomial() (in module dpnp.random)": [[337, "dpnp.random.binomial", false]], "bitwise_and() (in module dpnp)": [[46, "dpnp.bitwise_and", false]], "bitwise_not() (in module dpnp)": [[47, "dpnp.bitwise_not", false]], "bitwise_or() (in module dpnp)": [[48, "dpnp.bitwise_or", false]], "bitwise_xor() (in module dpnp)": [[49, "dpnp.bitwise_xor", false]], "broadcast_arrays() (in module dpnp)": [[50, "dpnp.broadcast_arrays", false]], "broadcast_to() (in module dpnp)": [[51, "dpnp.broadcast_to", false]], "byteorder (dpnp.dtype attribute)": [[86, "dpnp.dtype.byteorder", false]], "bytes() (in module dpnp.random)": [[338, "dpnp.random.bytes", false]], "can_cast() (in module dpnp)": [[52, "dpnp.can_cast", false]], "cbrt() (in module dpnp)": [[53, "dpnp.cbrt", false]], "ceil() (in module dpnp)": [[54, "dpnp.ceil", false]], "char (dpnp.dtype attribute)": [[86, "dpnp.dtype.char", false]], "chisquare() (in module dpnp.random)": [[339, "dpnp.random.chisquare", false]], "choice() (in module dpnp.random)": [[340, "dpnp.random.choice", false]], "cholesky() (in module dpnp.linalg)": [[163, "dpnp.linalg.cholesky", false]], "choose() (dpnp.dpnp_array.dpnp_array method)": [[84, "dpnp.dpnp_array.dpnp_array.choose", false]], "choose() (dpnp.ndarray method)": [[274, "dpnp.ndarray.choose", false]], "choose() (in module dpnp)": [[55, "dpnp.choose", false]], "clip() (dpnp.dpnp_array.dpnp_array method)": [[84, "dpnp.dpnp_array.dpnp_array.clip", false]], "clip() (dpnp.ndarray method)": [[275, "dpnp.ndarray.clip", false]], "clip() (in module dpnp)": [[56, "dpnp.clip", false]], "column_stack() (in module dpnp)": [[57, "dpnp.column_stack", false]], "concatenate() (in module dpnp)": [[58, "dpnp.concatenate", false]], "cond() (in module dpnp.linalg)": [[164, "dpnp.linalg.cond", false]], "conj() (dpnp.dpnp_array.dpnp_array method)": [[84, "dpnp.dpnp_array.dpnp_array.conj", false]], "conj() (dpnp.ndarray method)": [[276, "dpnp.ndarray.conj", false]], "conj() (in module dpnp)": [[59, "dpnp.conj", false]], "conjugate() (dpnp.dpnp_array.dpnp_array method)": [[84, "dpnp.dpnp_array.dpnp_array.conjugate", false]], "conjugate() (dpnp.ndarray method)": [[277, "dpnp.ndarray.conjugate", false]], "conjugate() (in module dpnp)": [[60, "dpnp.conjugate", false]], "convolve() (in module dpnp)": [[61, "dpnp.convolve", false]], "copy() (dpnp.dpnp_array.dpnp_array method)": [[84, "dpnp.dpnp_array.dpnp_array.copy", false]], "copy() (dpnp.ndarray method)": [[278, "dpnp.ndarray.copy", false]], "copy() (in module dpnp)": [[62, "dpnp.copy", false]], "copysign() (in module dpnp)": [[63, "dpnp.copysign", false]], "copyto() (in module dpnp)": [[64, "dpnp.copyto", false]], "correlate() (in module dpnp)": [[65, "dpnp.correlate", false]], "cos() (in module dpnp)": [[66, "dpnp.cos", false]], "cosh() (in module dpnp)": [[67, "dpnp.cosh", false]], "count_nonzero() (in module dpnp)": [[68, "dpnp.count_nonzero", false]], "cov() (in module dpnp)": [[69, "dpnp.cov", false]], "cross() (in module dpnp)": [[70, "dpnp.cross", false]], "cumlogsumexp() (in module dpnp)": [[71, "dpnp.cumlogsumexp", false]], "cumprod() (dpnp.dpnp_array.dpnp_array method)": [[84, "dpnp.dpnp_array.dpnp_array.cumprod", false]], "cumprod() (dpnp.ndarray method)": [[279, "dpnp.ndarray.cumprod", false]], "cumprod() (in module dpnp)": [[72, "dpnp.cumprod", false]], "cumsum() (dpnp.dpnp_array.dpnp_array method)": [[84, "dpnp.dpnp_array.dpnp_array.cumsum", false]], "cumsum() (dpnp.ndarray method)": [[280, "dpnp.ndarray.cumsum", false]], "cumsum() (in module dpnp)": [[73, "dpnp.cumsum", false]], "deg2rad() (in module dpnp)": [[74, "dpnp.deg2rad", false]], "degrees() (in module dpnp)": [[75, "dpnp.degrees", false]], "descr (dpnp.dtype attribute)": [[86, "dpnp.dtype.descr", false]], "det() (in module dpnp.linalg)": [[165, "dpnp.linalg.det", false]], "device (dpnp.dpnp_array.dpnp_array attribute)": [[84, "dpnp.dpnp_array.dpnp_array.device", false]], "diag() (in module dpnp)": [[76, "dpnp.diag", false]], "diag_indices() (in module dpnp)": [[77, "dpnp.diag_indices", false]], "diag_indices_from() (in module dpnp)": [[78, "dpnp.diag_indices_from", false]], "diagflat() (in module dpnp)": [[79, "dpnp.diagflat", false]], "diagonal() (dpnp.dpnp_array.dpnp_array method)": [[84, "dpnp.dpnp_array.dpnp_array.diagonal", false]], "diagonal() (dpnp.ndarray method)": [[281, "dpnp.ndarray.diagonal", false]], "diagonal() (in module dpnp)": [[80, "dpnp.diagonal", false]], "diff() (in module dpnp)": [[81, "dpnp.diff", false]], "dirichlet() (in module dpnp.random)": [[341, "dpnp.random.dirichlet", false]], "divide() (in module dpnp)": [[82, "dpnp.divide", false]], "dot() (dpnp.dpnp_array.dpnp_array method)": [[84, "dpnp.dpnp_array.dpnp_array.dot", false]], "dot() (in module dpnp)": [[83, "dpnp.dot", false]], "dpnp": [[3, "module-dpnp", false]], "dpnp.fft": [[10, "module-dpnp.fft", false]], "dpnp.random": [[452, "module-dpnp.random", false]], "dpnp_array (class in dpnp.dpnp_array)": [[84, "dpnp.dpnp_array.dpnp_array", false]], "dstack() (in module dpnp)": [[85, "dpnp.dstack", false]], "dtype (class in dpnp)": [[86, "dpnp.dtype", false]], "dtype (dpnp.dpnp_array.dpnp_array attribute)": [[84, "dpnp.dpnp_array.dpnp_array.dtype", false]], "dtype (dpnp.ndarray property)": [[282, "dpnp.ndarray.dtype", false]], "ediff1d() (in module dpnp)": [[87, "dpnp.ediff1d", false]], "eig() (in module dpnp.linalg)": [[166, "dpnp.linalg.eig", false]], "eigh() (in module dpnp.linalg)": [[167, "dpnp.linalg.eigh", false]], "eigvals() (in module dpnp.linalg)": [[168, "dpnp.linalg.eigvals", false]], "eigvalsh() (in module dpnp.linalg)": [[169, "dpnp.linalg.eigvalsh", false]], "einsum() (in module dpnp)": [[88, "dpnp.einsum", false]], "einsum_path() (in module dpnp)": [[89, "dpnp.einsum_path", false]], "empty() (in module dpnp)": [[90, "dpnp.empty", false]], "empty_like() (in module dpnp)": [[91, "dpnp.empty_like", false]], "equal() (in module dpnp)": [[92, "dpnp.equal", false]], "erf() (in module dpnp)": [[93, "dpnp.erf", false]], "exp() (in module dpnp)": [[94, "dpnp.exp", false]], "exp2() (in module dpnp)": [[95, "dpnp.exp2", false]], "expand_dims() (in module dpnp)": [[96, "dpnp.expand_dims", false]], "expm1() (in module dpnp)": [[97, "dpnp.expm1", false]], "exponential() (in module dpnp.random)": [[342, "dpnp.random.exponential", false]], "extract() (in module dpnp)": [[98, "dpnp.extract", false]], "eye() (in module dpnp)": [[99, "dpnp.eye", false]], "f() (in module dpnp.random)": [[343, "dpnp.random.f", false]], "fabs() (in module dpnp)": [[100, "dpnp.fabs", false]], "fft() (in module dpnp.fft)": [[101, "dpnp.fft.fft", false]], "fft2() (in module dpnp.fft)": [[102, "dpnp.fft.fft2", false]], "fftfreq() (in module dpnp.fft)": [[103, "dpnp.fft.fftfreq", false]], "fftn() (in module dpnp.fft)": [[104, "dpnp.fft.fftn", false]], "fftshift() (in module dpnp.fft)": [[105, "dpnp.fft.fftshift", false]], "fields (dpnp.dtype attribute)": [[86, "dpnp.dtype.fields", false]], "fill() (dpnp.dpnp_array.dpnp_array method)": [[84, "dpnp.dpnp_array.dpnp_array.fill", false]], "fill() (dpnp.ndarray method)": [[283, "dpnp.ndarray.fill", false]], "fill_diagonal() (in module dpnp)": [[119, "dpnp.fill_diagonal", false]], "finfo() (in module dpnp)": [[120, "dpnp.finfo", false]], "flags (dpnp.dpnp_array.dpnp_array attribute)": [[84, "dpnp.dpnp_array.dpnp_array.flags", false]], "flags (dpnp.dtype attribute)": [[86, "dpnp.dtype.flags", false]], "flags (dpnp.ndarray property)": [[284, "dpnp.ndarray.flags", false]], "flat (dpnp.dpnp_array.dpnp_array attribute)": [[84, "dpnp.dpnp_array.dpnp_array.flat", false]], "flat (dpnp.ndarray property)": [[285, "dpnp.ndarray.flat", false]], "flatiter (class in dpnp)": [[121, "dpnp.flatiter", false]], "flatten() (dpnp.dpnp_array.dpnp_array method)": [[84, "dpnp.dpnp_array.dpnp_array.flatten", false]], "flatten() (dpnp.ndarray method)": [[286, "dpnp.ndarray.flatten", false]], "flip() (in module dpnp)": [[122, "dpnp.flip", false]], "fliplr() (in module dpnp)": [[123, "dpnp.fliplr", false]], "flipud() (in module dpnp)": [[124, "dpnp.flipud", false]], "floor() (in module dpnp)": [[125, "dpnp.floor", false]], "floor_divide() (in module dpnp)": [[126, "dpnp.floor_divide", false]], "fmax() (in module dpnp)": [[127, "dpnp.fmax", false]], "fmin() (in module dpnp)": [[128, "dpnp.fmin", false]], "fmod() (in module dpnp)": [[129, "dpnp.fmod", false]], "from_dlpack() (in module dpnp)": [[130, "dpnp.from_dlpack", false]], "frombuffer() (in module dpnp)": [[131, "dpnp.frombuffer", false]], "fromfile() (in module dpnp)": [[132, "dpnp.fromfile", false]], "fromfunction() (in module dpnp)": [[133, "dpnp.fromfunction", false]], "fromiter() (in module dpnp)": [[134, "dpnp.fromiter", false]], "fromstring() (in module dpnp)": [[135, "dpnp.fromstring", false]], "full() (in module dpnp)": [[136, "dpnp.full", false]], "full_like() (in module dpnp)": [[137, "dpnp.full_like", false]], "gamma() (in module dpnp.random)": [[344, "dpnp.random.gamma", false]], "geometric() (in module dpnp.random)": [[345, "dpnp.random.geometric", false]], "geomspace() (in module dpnp)": [[138, "dpnp.geomspace", false]], "get_array() (dpnp.dpnp_array.dpnp_array method)": [[84, "dpnp.dpnp_array.dpnp_array.get_array", false]], "get_include() (in module dpnp)": [[139, "dpnp.get_include", false]], "get_state() (dpnp.random.randomstate method)": [[335, "dpnp.random.RandomState.get_state", false]], "get_sycl_device() (dpnp.random.randomstate method)": [[335, "dpnp.random.RandomState.get_sycl_device", false]], "get_sycl_queue() (dpnp.random.randomstate method)": [[335, "dpnp.random.RandomState.get_sycl_queue", false]], "gradient() (in module dpnp)": [[140, "dpnp.gradient", false]], "greater() (in module dpnp)": [[141, "dpnp.greater", false]], "greater_equal() (in module dpnp)": [[142, "dpnp.greater_equal", false]], "gumbel() (in module dpnp.random)": [[346, "dpnp.random.gumbel", false]], "hasobject (dpnp.dtype attribute)": [[86, "dpnp.dtype.hasobject", false]], "hfft() (in module dpnp.fft)": [[106, "dpnp.fft.hfft", false]], "histogram() (in module dpnp)": [[143, "dpnp.histogram", false]], "hstack() (in module dpnp)": [[144, "dpnp.hstack", false]], "hypergeometric() (in module dpnp.random)": [[347, "dpnp.random.hypergeometric", false]], "hypot() (in module dpnp)": [[145, "dpnp.hypot", false]], "identity() (in module dpnp)": [[146, "dpnp.identity", false]], "ifft() (in module dpnp.fft)": [[107, "dpnp.fft.ifft", false]], "ifft2() (in module dpnp.fft)": [[108, "dpnp.fft.ifft2", false]], "ifftn() (in module dpnp.fft)": [[109, "dpnp.fft.ifftn", false]], "ifftshift() (in module dpnp.fft)": [[110, "dpnp.fft.ifftshift", false]], "ihfft() (in module dpnp.fft)": [[111, "dpnp.fft.ihfft", false]], "iinfo() (in module dpnp)": [[147, "dpnp.iinfo", false]], "imag (dpnp.dpnp_array.dpnp_array attribute)": [[84, "dpnp.dpnp_array.dpnp_array.imag", false]], "imag (dpnp.ndarray property)": [[287, "dpnp.ndarray.imag", false]], "imag() (in module dpnp)": [[148, "dpnp.imag", false]], "indices() (in module dpnp)": [[149, "dpnp.indices", false]], "inner() (in module dpnp)": [[150, "dpnp.inner", false]], "inv() (in module dpnp.linalg)": [[170, "dpnp.linalg.inv", false]], "invert() (in module dpnp)": [[151, "dpnp.invert", false]], "irfft() (in module dpnp.fft)": [[112, "dpnp.fft.irfft", false]], "irfft2() (in module dpnp.fft)": [[113, "dpnp.fft.irfft2", false]], "irfftn() (in module dpnp.fft)": [[114, "dpnp.fft.irfftn", false]], "isalignedstruct (dpnp.dtype attribute)": [[86, "dpnp.dtype.isalignedstruct", false]], "isbuiltin (dpnp.dtype attribute)": [[86, "dpnp.dtype.isbuiltin", false]], "isclose() (in module dpnp)": [[152, "dpnp.isclose", false]], "isfinite() (in module dpnp)": [[153, "dpnp.isfinite", false]], "isinf() (in module dpnp)": [[154, "dpnp.isinf", false]], "isnan() (in module dpnp)": [[155, "dpnp.isnan", false]], "isnative (dpnp.dtype attribute)": [[86, "dpnp.dtype.isnative", false]], "isscalar() (in module dpnp)": [[156, "dpnp.isscalar", false]], "issubdtype() (in module dpnp)": [[157, "dpnp.issubdtype", false]], "issubsctype() (in module dpnp)": [[158, "dpnp.issubsctype", false]], "item() (dpnp.dpnp_array.dpnp_array method)": [[84, "dpnp.dpnp_array.dpnp_array.item", false]], "item() (dpnp.ndarray method)": [[288, "dpnp.ndarray.item", false]], "itemsize (dpnp.dpnp_array.dpnp_array attribute)": [[84, "dpnp.dpnp_array.dpnp_array.itemsize", false]], "itemsize (dpnp.dtype attribute)": [[86, "dpnp.dtype.itemsize", false]], "itemsize (dpnp.ndarray property)": [[289, "dpnp.ndarray.itemsize", false]], "kind (dpnp.dtype attribute)": [[86, "dpnp.dtype.kind", false]], "kron() (in module dpnp)": [[159, "dpnp.kron", false]], "laplace() (in module dpnp.random)": [[348, "dpnp.random.laplace", false]], "left_shift() (in module dpnp)": [[160, "dpnp.left_shift", false]], "less() (in module dpnp)": [[161, "dpnp.less", false]], "less_equal() (in module dpnp)": [[162, "dpnp.less_equal", false]], "linspace() (in module dpnp)": [[183, "dpnp.linspace", false]], "loadtxt() (in module dpnp)": [[184, "dpnp.loadtxt", false]], "log() (in module dpnp)": [[185, "dpnp.log", false]], "log10() (in module dpnp)": [[186, "dpnp.log10", false]], "log1p() (in module dpnp)": [[187, "dpnp.log1p", false]], "log2() (in module dpnp)": [[188, "dpnp.log2", false]], "logaddexp() (in module dpnp)": [[189, "dpnp.logaddexp", false]], "logical_and() (in module dpnp)": [[190, "dpnp.logical_and", false]], "logical_not() (in module dpnp)": [[191, "dpnp.logical_not", false]], "logical_or() (in module dpnp)": [[192, "dpnp.logical_or", false]], "logical_xor() (in module dpnp)": [[193, "dpnp.logical_xor", false]], "logistic() (in module dpnp.random)": [[349, "dpnp.random.logistic", false]], "lognormal() (in module dpnp.random)": [[350, "dpnp.random.lognormal", false]], "logseries() (in module dpnp.random)": [[351, "dpnp.random.logseries", false]], "logspace() (in module dpnp)": [[194, "dpnp.logspace", false]], "logsumexp() (in module dpnp)": [[195, "dpnp.logsumexp", false]], "lstsq() (in module dpnp.linalg)": [[171, "dpnp.linalg.lstsq", false]], "matmul() (in module dpnp)": [[196, "dpnp.matmul", false]], "matrix_power() (in module dpnp.linalg)": [[172, "dpnp.linalg.matrix_power", false]], "matrix_rank() (in module dpnp.linalg)": [[173, "dpnp.linalg.matrix_rank", false]], "max() (dpnp.dpnp_array.dpnp_array method)": [[84, "dpnp.dpnp_array.dpnp_array.max", false]], "max() (dpnp.ndarray method)": [[290, "dpnp.ndarray.max", false]], "max() (in module dpnp)": [[197, "dpnp.max", false]], "maximum() (in module dpnp)": [[198, "dpnp.maximum", false]], "mean() (dpnp.dpnp_array.dpnp_array method)": [[84, "dpnp.dpnp_array.dpnp_array.mean", false]], "mean() (dpnp.ndarray method)": [[291, "dpnp.ndarray.mean", false]], "mean() (in module dpnp)": [[199, "dpnp.mean", false]], "median() (in module dpnp)": [[200, "dpnp.median", false]], "meshgrid() (in module dpnp)": [[201, "dpnp.meshgrid", false]], "metadata (dpnp.dtype attribute)": [[86, "dpnp.dtype.metadata", false]], "mgrid (in module dpnp)": [[202, "dpnp.mgrid", false]], "min() (dpnp.dpnp_array.dpnp_array method)": [[84, "dpnp.dpnp_array.dpnp_array.min", false]], "min() (dpnp.ndarray method)": [[292, "dpnp.ndarray.min", false]], "min() (in module dpnp)": [[203, "dpnp.min", false]], "minimum() (in module dpnp)": [[204, "dpnp.minimum", false]], "mod() (in module dpnp)": [[205, "dpnp.mod", false]], "modf() (in module dpnp)": [[206, "dpnp.modf", false]], "module": [[3, "module-dpnp", false], [10, "module-dpnp.fft", false], [452, "module-dpnp.random", false]], "moveaxis() (in module dpnp)": [[207, "dpnp.moveaxis", false]], "multi_dot() (in module dpnp.linalg)": [[174, "dpnp.linalg.multi_dot", false]], "multinomial() (in module dpnp.random)": [[352, "dpnp.random.multinomial", false]], "multiply() (in module dpnp)": [[208, "dpnp.multiply", false]], "multivariate_normal() (in module dpnp.random)": [[353, "dpnp.random.multivariate_normal", false]], "name (dpnp.dtype attribute)": [[86, "dpnp.dtype.name", false]], "names (dpnp.dtype attribute)": [[86, "dpnp.dtype.names", false]], "nanargmax() (in module dpnp)": [[209, "dpnp.nanargmax", false]], "nanargmin() (in module dpnp)": [[210, "dpnp.nanargmin", false]], "nancumprod() (in module dpnp)": [[211, "dpnp.nancumprod", false]], "nancumsum() (in module dpnp)": [[212, "dpnp.nancumsum", false]], "nanmax() (in module dpnp)": [[213, "dpnp.nanmax", false]], "nanmean() (in module dpnp)": [[214, "dpnp.nanmean", false]], "nanmin() (in module dpnp)": [[215, "dpnp.nanmin", false]], "nanprod() (in module dpnp)": [[216, "dpnp.nanprod", false]], "nanstd() (in module dpnp)": [[217, "dpnp.nanstd", false]], "nansum() (in module dpnp)": [[218, "dpnp.nansum", false]], "nanvar() (in module dpnp)": [[219, "dpnp.nanvar", false]], "nbytes (dpnp.dpnp_array.dpnp_array attribute)": [[84, "dpnp.dpnp_array.dpnp_array.nbytes", false]], "nbytes (dpnp.ndarray property)": [[293, "dpnp.ndarray.nbytes", false]], "ndarray (in module dpnp)": [[220, "dpnp.ndarray", false]], "ndim (dpnp.dpnp_array.dpnp_array attribute)": [[84, "dpnp.dpnp_array.dpnp_array.ndim", false]], "ndim (dpnp.dtype attribute)": [[86, "dpnp.dtype.ndim", false]], "ndim (dpnp.ndarray property)": [[294, "dpnp.ndarray.ndim", false]], "negative() (in module dpnp)": [[316, "dpnp.negative", false]], "negative_binomial() (in module dpnp.random)": [[354, "dpnp.random.negative_binomial", false]], "newbyteorder() (dpnp.dtype method)": [[86, "dpnp.dtype.newbyteorder", false]], "noncentral_chisquare() (in module dpnp.random)": [[355, "dpnp.random.noncentral_chisquare", false]], "noncentral_f() (in module dpnp.random)": [[356, "dpnp.random.noncentral_f", false]], "nonzero() (dpnp.dpnp_array.dpnp_array method)": [[84, "dpnp.dpnp_array.dpnp_array.nonzero", false]], "nonzero() (dpnp.ndarray method)": [[295, "dpnp.ndarray.nonzero", false]], "nonzero() (in module dpnp)": [[317, "dpnp.nonzero", false]], "norm() (in module dpnp.linalg)": [[175, "dpnp.linalg.norm", false]], "normal() (dpnp.random.randomstate method)": [[335, "dpnp.random.RandomState.normal", false]], "normal() (in module dpnp.random)": [[357, "dpnp.random.normal", false]], "not_equal() (in module dpnp)": [[318, "dpnp.not_equal", false]], "num (dpnp.dtype attribute)": [[86, "dpnp.dtype.num", false]], "ogrid (in module dpnp)": [[319, "dpnp.ogrid", false]], "ones() (in module dpnp)": [[320, "dpnp.ones", false]], "ones_like() (in module dpnp)": [[321, "dpnp.ones_like", false]], "outer() (in module dpnp)": [[322, "dpnp.outer", false]], "pareto() (in module dpnp.random)": [[358, "dpnp.random.pareto", false]], "partition() (dpnp.dpnp_array.dpnp_array method)": [[84, "dpnp.dpnp_array.dpnp_array.partition", false]], "partition() (dpnp.ndarray method)": [[296, "dpnp.ndarray.partition", false]], "partition() (in module dpnp)": [[323, "dpnp.partition", false]], "permutation() (in module dpnp.random)": [[359, "dpnp.random.permutation", false]], "pinv() (in module dpnp.linalg)": [[176, "dpnp.linalg.pinv", false]], "place() (in module dpnp)": [[324, "dpnp.place", false]], "poisson() (in module dpnp.random)": [[360, "dpnp.random.poisson", false]], "positive() (in module dpnp)": [[325, "dpnp.positive", false]], "power() (in module dpnp)": [[326, "dpnp.power", false]], "power() (in module dpnp.random)": [[361, "dpnp.random.power", false]], "prod() (dpnp.dpnp_array.dpnp_array method)": [[84, "dpnp.dpnp_array.dpnp_array.prod", false]], "prod() (dpnp.ndarray method)": [[297, "dpnp.ndarray.prod", false]], "prod() (in module dpnp)": [[327, "dpnp.prod", false]], "proj() (in module dpnp)": [[328, "dpnp.proj", false]], "ptp() (in module dpnp)": [[329, "dpnp.ptp", false]], "put() (dpnp.dpnp_array.dpnp_array method)": [[84, "dpnp.dpnp_array.dpnp_array.put", false]], "put() (dpnp.ndarray method)": [[298, "dpnp.ndarray.put", false]], "put() (in module dpnp)": [[330, "dpnp.put", false]], "put_along_axis() (in module dpnp)": [[331, "dpnp.put_along_axis", false]], "putmask() (in module dpnp)": [[332, "dpnp.putmask", false]], "qr() (in module dpnp.linalg)": [[177, "dpnp.linalg.qr", false]], "rad2deg() (in module dpnp)": [[333, "dpnp.rad2deg", false]], "radians() (in module dpnp)": [[334, "dpnp.radians", false]], "rand() (dpnp.random.randomstate method)": [[335, "dpnp.random.RandomState.rand", false]], "rand() (in module dpnp.random)": [[362, "dpnp.random.rand", false]], "randint() (dpnp.random.randomstate method)": [[335, "dpnp.random.RandomState.randint", false]], "randint() (in module dpnp.random)": [[363, "dpnp.random.randint", false]], "randn() (dpnp.random.randomstate method)": [[335, "dpnp.random.RandomState.randn", false]], "randn() (in module dpnp.random)": [[364, "dpnp.random.randn", false]], "random() (in module dpnp.random)": [[365, "dpnp.random.random", false]], "random_integers() (in module dpnp.random)": [[366, "dpnp.random.random_integers", false]], "random_sample() (dpnp.random.randomstate method)": [[335, "dpnp.random.RandomState.random_sample", false]], "random_sample() (in module dpnp.random)": [[367, "dpnp.random.random_sample", false]], "randomstate (class in dpnp.random)": [[335, "dpnp.random.RandomState", false]], "ranf() (in module dpnp.random)": [[368, "dpnp.random.ranf", false]], "ravel() (dpnp.dpnp_array.dpnp_array method)": [[84, "dpnp.dpnp_array.dpnp_array.ravel", false]], "ravel() (dpnp.ndarray method)": [[299, "dpnp.ndarray.ravel", false]], "ravel() (in module dpnp)": [[384, "dpnp.ravel", false]], "rayleigh() (in module dpnp.random)": [[369, "dpnp.random.rayleigh", false]], "real (dpnp.dpnp_array.dpnp_array attribute)": [[84, "dpnp.dpnp_array.dpnp_array.real", false]], "real (dpnp.ndarray property)": [[300, "dpnp.ndarray.real", false]], "real() (in module dpnp)": [[385, "dpnp.real", false]], "reciprocal() (in module dpnp)": [[386, "dpnp.reciprocal", false]], "reduce_hypot() (in module dpnp)": [[387, "dpnp.reduce_hypot", false]], "remainder() (in module dpnp)": [[388, "dpnp.remainder", false]], "repeat() (dpnp.dpnp_array.dpnp_array method)": [[84, "dpnp.dpnp_array.dpnp_array.repeat", false]], "repeat() (dpnp.ndarray method)": [[301, "dpnp.ndarray.repeat", false]], "repeat() (in module dpnp)": [[389, "dpnp.repeat", false]], "reshape() (dpnp.dpnp_array.dpnp_array method)": [[84, "dpnp.dpnp_array.dpnp_array.reshape", false]], "reshape() (dpnp.ndarray method)": [[302, "dpnp.ndarray.reshape", false]], "reshape() (in module dpnp)": [[390, "dpnp.reshape", false]], "result_type() (in module dpnp)": [[391, "dpnp.result_type", false]], "rfft() (in module dpnp.fft)": [[115, "dpnp.fft.rfft", false]], "rfft2() (in module dpnp.fft)": [[116, "dpnp.fft.rfft2", false]], "rfftfreq() (in module dpnp.fft)": [[117, "dpnp.fft.rfftfreq", false]], "rfftn() (in module dpnp.fft)": [[118, "dpnp.fft.rfftn", false]], "right_shift() (in module dpnp)": [[392, "dpnp.right_shift", false]], "rint() (in module dpnp)": [[393, "dpnp.rint", false]], "roll() (in module dpnp)": [[394, "dpnp.roll", false]], "rollaxis() (in module dpnp)": [[395, "dpnp.rollaxis", false]], "round() (dpnp.dpnp_array.dpnp_array method)": [[84, "dpnp.dpnp_array.dpnp_array.round", false]], "round() (dpnp.ndarray method)": [[303, "dpnp.ndarray.round", false]], "round() (in module dpnp)": [[396, "dpnp.round", false]], "row_stack() (in module dpnp)": [[397, "dpnp.row_stack", false]], "rsqrt() (in module dpnp)": [[398, "dpnp.rsqrt", false]], "sample() (in module dpnp.random)": [[370, "dpnp.random.sample", false]], "searchsorted() (dpnp.dpnp_array.dpnp_array method)": [[84, "dpnp.dpnp_array.dpnp_array.searchsorted", false]], "searchsorted() (dpnp.ndarray method)": [[304, "dpnp.ndarray.searchsorted", false]], "searchsorted() (in module dpnp)": [[399, "dpnp.searchsorted", false]], "seed() (in module dpnp.random)": [[371, "dpnp.random.seed", false]], "select() (in module dpnp)": [[400, "dpnp.select", false]], "shape (dpnp.dpnp_array.dpnp_array attribute)": [[84, "dpnp.dpnp_array.dpnp_array.shape", false]], "shape (dpnp.dtype attribute)": [[86, "dpnp.dtype.shape", false]], "shape (dpnp.ndarray property)": [[305, "dpnp.ndarray.shape", false]], "shape() (in module dpnp)": [[401, "dpnp.shape", false]], "shuffle() (in module dpnp.random)": [[372, "dpnp.random.shuffle", false]], "sign() (in module dpnp)": [[402, "dpnp.sign", false]], "signbit() (in module dpnp)": [[403, "dpnp.signbit", false]], "sin() (in module dpnp)": [[404, "dpnp.sin", false]], "sinh() (in module dpnp)": [[405, "dpnp.sinh", false]], "size (dpnp.dpnp_array.dpnp_array attribute)": [[84, "dpnp.dpnp_array.dpnp_array.size", false]], "size (dpnp.ndarray property)": [[306, "dpnp.ndarray.size", false]], "slogdet() (in module dpnp.linalg)": [[178, "dpnp.linalg.slogdet", false]], "solve() (in module dpnp.linalg)": [[179, "dpnp.linalg.solve", false]], "sort() (dpnp.dpnp_array.dpnp_array method)": [[84, "dpnp.dpnp_array.dpnp_array.sort", false]], "sort() (dpnp.ndarray method)": [[307, "dpnp.ndarray.sort", false]], "sort() (in module dpnp)": [[406, "dpnp.sort", false]], "sqrt() (in module dpnp)": [[407, "dpnp.sqrt", false]], "square() (in module dpnp)": [[408, "dpnp.square", false]], "squeeze() (dpnp.dpnp_array.dpnp_array method)": [[84, "dpnp.dpnp_array.dpnp_array.squeeze", false]], "squeeze() (dpnp.ndarray method)": [[308, "dpnp.ndarray.squeeze", false]], "squeeze() (in module dpnp)": [[409, "dpnp.squeeze", false]], "stack() (in module dpnp)": [[410, "dpnp.stack", false]], "standard_cauchy() (in module dpnp.random)": [[373, "dpnp.random.standard_cauchy", false]], "standard_exponential() (in module dpnp.random)": [[374, "dpnp.random.standard_exponential", false]], "standard_gamma() (in module dpnp.random)": [[375, "dpnp.random.standard_gamma", false]], "standard_normal() (dpnp.random.randomstate method)": [[335, "dpnp.random.RandomState.standard_normal", false]], "standard_normal() (in module dpnp.random)": [[376, "dpnp.random.standard_normal", false]], "standard_t() (in module dpnp.random)": [[377, "dpnp.random.standard_t", false]], "std() (dpnp.dpnp_array.dpnp_array method)": [[84, "dpnp.dpnp_array.dpnp_array.std", false]], "std() (dpnp.ndarray method)": [[309, "dpnp.ndarray.std", false]], "std() (in module dpnp)": [[411, "dpnp.std", false]], "str (dpnp.dtype attribute)": [[86, "dpnp.dtype.str", false]], "strides (dpnp.dpnp_array.dpnp_array attribute)": [[84, "dpnp.dpnp_array.dpnp_array.strides", false]], "strides (dpnp.ndarray property)": [[310, "dpnp.ndarray.strides", false]], "subdtype (dpnp.dtype attribute)": [[86, "dpnp.dtype.subdtype", false]], "subtract() (in module dpnp)": [[412, "dpnp.subtract", false]], "sum() (dpnp.dpnp_array.dpnp_array method)": [[84, "dpnp.dpnp_array.dpnp_array.sum", false]], "sum() (dpnp.ndarray method)": [[311, "dpnp.ndarray.sum", false]], "sum() (in module dpnp)": [[413, "dpnp.sum", false]], "svd() (in module dpnp.linalg)": [[180, "dpnp.linalg.svd", false]], "swapaxes() (dpnp.dpnp_array.dpnp_array method)": [[84, "dpnp.dpnp_array.dpnp_array.swapaxes", false]], "swapaxes() (dpnp.ndarray method)": [[312, "dpnp.ndarray.swapaxes", false]], "swapaxes() (in module dpnp)": [[414, "dpnp.swapaxes", false]], "sycl_context (dpnp.dpnp_array.dpnp_array attribute)": [[84, "dpnp.dpnp_array.dpnp_array.sycl_context", false]], "sycl_device (dpnp.dpnp_array.dpnp_array attribute)": [[84, "dpnp.dpnp_array.dpnp_array.sycl_device", false]], "sycl_queue (dpnp.dpnp_array.dpnp_array attribute)": [[84, "dpnp.dpnp_array.dpnp_array.sycl_queue", false]], "t (dpnp.dpnp_array.dpnp_array attribute)": [[84, "dpnp.dpnp_array.dpnp_array.T", false]], "t (dpnp.ndarray property)": [[221, "dpnp.ndarray.T", false]], "take() (dpnp.dpnp_array.dpnp_array method)": [[84, "dpnp.dpnp_array.dpnp_array.take", false]], "take() (dpnp.ndarray method)": [[313, "dpnp.ndarray.take", false]], "take() (in module dpnp)": [[415, "dpnp.take", false]], "take_along_axis() (in module dpnp)": [[416, "dpnp.take_along_axis", false]], "tan() (in module dpnp)": [[417, "dpnp.tan", false]], "tanh() (in module dpnp)": [[418, "dpnp.tanh", false]], "tensordot() (in module dpnp)": [[419, "dpnp.tensordot", false]], "tensorinv() (in module dpnp.linalg)": [[181, "dpnp.linalg.tensorinv", false]], "tensorsolve() (in module dpnp.linalg)": [[182, "dpnp.linalg.tensorsolve", false]], "tile() (in module dpnp)": [[420, "dpnp.tile", false]], "to_device() (dpnp.dpnp_array.dpnp_array method)": [[84, "dpnp.dpnp_array.dpnp_array.to_device", false]], "trace() (in module dpnp)": [[421, "dpnp.trace", false]], "transpose() (dpnp.dpnp_array.dpnp_array method)": [[84, "dpnp.dpnp_array.dpnp_array.transpose", false]], "transpose() (dpnp.ndarray method)": [[314, "dpnp.ndarray.transpose", false]], "transpose() (in module dpnp)": [[422, "dpnp.transpose", false]], "trapz() (in module dpnp)": [[423, "dpnp.trapz", false]], "tri() (in module dpnp)": [[424, "dpnp.tri", false]], "triangular() (in module dpnp.random)": [[378, "dpnp.random.triangular", false]], "tril() (in module dpnp)": [[425, "dpnp.tril", false]], "tril_indices() (in module dpnp)": [[426, "dpnp.tril_indices", false]], "tril_indices_from() (in module dpnp)": [[427, "dpnp.tril_indices_from", false]], "triu() (in module dpnp)": [[428, "dpnp.triu", false]], "triu_indices() (in module dpnp)": [[429, "dpnp.triu_indices", false]], "triu_indices_from() (in module dpnp)": [[430, "dpnp.triu_indices_from", false]], "true_divide() (in module dpnp)": [[431, "dpnp.true_divide", false]], "trunc() (in module dpnp)": [[432, "dpnp.trunc", false]], "type (dpnp.dtype attribute)": [[86, "dpnp.dtype.type", false]], "uniform() (dpnp.random.randomstate method)": [[335, "dpnp.random.RandomState.uniform", false]], "uniform() (in module dpnp.random)": [[379, "dpnp.random.uniform", false]], "unique() (in module dpnp)": [[433, "dpnp.unique", false]], "unwrap() (in module dpnp)": [[434, "dpnp.unwrap", false]], "usm_type (dpnp.dpnp_array.dpnp_array attribute)": [[84, "dpnp.dpnp_array.dpnp_array.usm_type", false]], "vander() (in module dpnp)": [[435, "dpnp.vander", false]], "var() (dpnp.dpnp_array.dpnp_array method)": [[84, "dpnp.dpnp_array.dpnp_array.var", false]], "var() (dpnp.ndarray method)": [[315, "dpnp.ndarray.var", false]], "var() (in module dpnp)": [[436, "dpnp.var", false]], "vdot() (in module dpnp)": [[437, "dpnp.vdot", false]], "vonmises() (in module dpnp.random)": [[380, "dpnp.random.vonmises", false]], "vstack() (in module dpnp)": [[438, "dpnp.vstack", false]], "wald() (in module dpnp.random)": [[381, "dpnp.random.wald", false]], "weibull() (in module dpnp.random)": [[382, "dpnp.random.weibull", false]], "where() (in module dpnp)": [[439, "dpnp.where", false]], "zeros() (in module dpnp)": [[440, "dpnp.zeros", false]], "zeros_like() (in module dpnp)": [[441, "dpnp.zeros_like", false]], "zipf() (in module dpnp.random)": [[383, "dpnp.random.zipf", false]]}, "objects": {"": [[3, 0, 0, "-", "dpnp"]], "dpnp": [[11, 1, 1, "", "abs"], [12, 1, 1, "", "absolute"], [13, 1, 1, "", "add"], [14, 1, 1, "", "all"], [15, 1, 1, "", "allclose"], [16, 1, 1, "", "amax"], [17, 1, 1, "", "amin"], [18, 1, 1, "", "angle"], [19, 1, 1, "", "any"], [20, 1, 1, "", "arange"], [21, 1, 1, "", "arccos"], [22, 1, 1, "", "arccosh"], [23, 1, 1, "", "arcsin"], [24, 1, 1, "", "arcsinh"], [25, 1, 1, "", "arctan"], [26, 1, 1, "", "arctan2"], [27, 1, 1, "", "arctanh"], [28, 1, 1, "", "argmax"], [29, 1, 1, "", "argmin"], [30, 1, 1, "", "argsort"], [31, 1, 1, "", "around"], [32, 1, 1, "", "array"], [33, 1, 1, "", "array_equal"], [34, 1, 1, "", "asanyarray"], [35, 1, 1, "", "asarray"], [36, 1, 1, "", "ascontiguousarray"], [37, 1, 1, "", "asfarray"], [38, 1, 1, "", "asfortranarray"], [39, 1, 1, "", "asnumpy"], [40, 1, 1, "", "astype"], [41, 1, 1, "", "atleast_1d"], [42, 1, 1, "", "atleast_2d"], [43, 1, 1, "", "atleast_3d"], [44, 1, 1, "", "average"], [45, 1, 1, "", "bincount"], [46, 1, 1, "", "bitwise_and"], [47, 1, 1, "", "bitwise_not"], [48, 1, 1, "", "bitwise_or"], [49, 1, 1, "", "bitwise_xor"], [50, 1, 1, "", "broadcast_arrays"], [51, 1, 1, "", "broadcast_to"], [52, 1, 1, "", "can_cast"], [53, 1, 1, "", "cbrt"], [54, 1, 1, "", "ceil"], [55, 1, 1, "", "choose"], [56, 1, 1, "", "clip"], [57, 1, 1, "", "column_stack"], [58, 1, 1, "", "concatenate"], [59, 1, 1, "", "conj"], [60, 1, 1, "", "conjugate"], [61, 1, 1, "", "convolve"], [62, 1, 1, "", "copy"], [63, 1, 1, "", "copysign"], [64, 1, 1, "", "copyto"], [65, 1, 1, "", "correlate"], [66, 1, 1, "", "cos"], [67, 1, 1, "", "cosh"], [68, 1, 1, "", "count_nonzero"], [69, 1, 1, "", "cov"], [70, 1, 1, "", "cross"], [71, 1, 1, "", "cumlogsumexp"], [72, 1, 1, "", "cumprod"], [73, 1, 1, "", "cumsum"], [74, 1, 1, "", "deg2rad"], [75, 1, 1, "", "degrees"], [76, 1, 1, "", "diag"], [77, 1, 1, "", "diag_indices"], [78, 1, 1, "", "diag_indices_from"], [79, 1, 1, "", "diagflat"], [80, 1, 1, "", "diagonal"], [81, 1, 1, "", "diff"], [82, 1, 1, "", "divide"], [83, 1, 1, "", "dot"], [85, 1, 1, "", "dstack"], [86, 2, 1, "", "dtype"], [87, 1, 1, "", "ediff1d"], [88, 1, 1, "", "einsum"], [89, 1, 1, "", "einsum_path"], [90, 1, 1, "", "empty"], [91, 1, 1, "", "empty_like"], [92, 1, 1, "", "equal"], [93, 1, 1, "", "erf"], [94, 1, 1, "", "exp"], [95, 1, 1, "", "exp2"], [96, 1, 1, "", "expand_dims"], [97, 1, 1, "", "expm1"], [98, 1, 1, "", "extract"], [99, 1, 1, "", "eye"], [100, 1, 1, "", "fabs"], [10, 0, 0, "-", "fft"], [119, 1, 1, "", "fill_diagonal"], [120, 1, 1, "", "finfo"], [121, 2, 1, "", "flatiter"], [122, 1, 1, "", "flip"], [123, 1, 1, "", "fliplr"], [124, 1, 1, "", "flipud"], [125, 1, 1, "", "floor"], [126, 1, 1, "", "floor_divide"], [127, 1, 1, "", "fmax"], [128, 1, 1, "", "fmin"], [129, 1, 1, "", "fmod"], [130, 1, 1, "", "from_dlpack"], [131, 1, 1, "", "frombuffer"], [132, 1, 1, "", "fromfile"], [133, 1, 1, "", "fromfunction"], [134, 1, 1, "", "fromiter"], [135, 1, 1, "", "fromstring"], [136, 1, 1, "", "full"], [137, 1, 1, "", "full_like"], [138, 1, 1, "", "geomspace"], [139, 1, 1, "", "get_include"], [140, 1, 1, "", "gradient"], [141, 1, 1, "", "greater"], [142, 1, 1, "", "greater_equal"], [143, 1, 1, "", "histogram"], [144, 1, 1, "", "hstack"], [145, 1, 1, "", "hypot"], [146, 1, 1, "", "identity"], [147, 1, 1, "", "iinfo"], [148, 1, 1, "", "imag"], [149, 1, 1, "", "indices"], [150, 1, 1, "", "inner"], [151, 1, 1, "", "invert"], [152, 1, 1, "", "isclose"], [153, 1, 1, "", "isfinite"], [154, 1, 1, "", "isinf"], [155, 1, 1, "", "isnan"], [156, 1, 1, "", "isscalar"], [157, 1, 1, "", "issubdtype"], [158, 1, 1, "", "issubsctype"], [159, 1, 1, "", "kron"], [160, 1, 1, "", "left_shift"], [161, 1, 1, "", "less"], [162, 1, 1, "", "less_equal"], [183, 1, 1, "", "linspace"], [184, 1, 1, "", "loadtxt"], [185, 1, 1, "", "log"], [186, 1, 1, "", "log10"], [187, 1, 1, "", "log1p"], [188, 1, 1, "", "log2"], [189, 1, 1, "", "logaddexp"], [190, 1, 1, "", "logical_and"], [191, 1, 1, "", "logical_not"], [192, 1, 1, "", "logical_or"], [193, 1, 1, "", "logical_xor"], [194, 1, 1, "", "logspace"], [195, 1, 1, "", "logsumexp"], [196, 1, 1, "", "matmul"], [197, 1, 1, "", "max"], [198, 1, 1, "", "maximum"], [199, 1, 1, "", "mean"], [200, 1, 1, "", "median"], [201, 1, 1, "", "meshgrid"], [202, 5, 1, "", "mgrid"], [203, 1, 1, "", "min"], [204, 1, 1, "", "minimum"], [205, 1, 1, "", "mod"], [206, 1, 1, "", "modf"], [207, 1, 1, "", "moveaxis"], [208, 1, 1, "", "multiply"], [209, 1, 1, "", "nanargmax"], [210, 1, 1, "", "nanargmin"], [211, 1, 1, "", "nancumprod"], [212, 1, 1, "", "nancumsum"], [213, 1, 1, "", "nanmax"], [214, 1, 1, "", "nanmean"], [215, 1, 1, "", "nanmin"], [216, 1, 1, "", "nanprod"], [217, 1, 1, "", "nanstd"], [218, 1, 1, "", "nansum"], [219, 1, 1, "", "nanvar"], [220, 3, 1, "", "ndarray"], [316, 1, 1, "", "negative"], [317, 1, 1, "", "nonzero"], [318, 1, 1, "", "not_equal"], [319, 5, 1, "", "ogrid"], [320, 1, 1, "", "ones"], [321, 1, 1, "", "ones_like"], [322, 1, 1, "", "outer"], [323, 1, 1, "", "partition"], [324, 1, 1, "", "place"], [325, 1, 1, "", "positive"], [326, 1, 1, "", "power"], [327, 1, 1, "", "prod"], [328, 1, 1, "", "proj"], [329, 1, 1, "", "ptp"], [330, 1, 1, "", "put"], [331, 1, 1, "", "put_along_axis"], [332, 1, 1, "", "putmask"], [333, 1, 1, "", "rad2deg"], [334, 1, 1, "", "radians"], [452, 0, 0, "-", "random"], [384, 1, 1, "", "ravel"], [385, 1, 1, "", "real"], [386, 1, 1, "", "reciprocal"], [387, 1, 1, "", "reduce_hypot"], [388, 1, 1, "", "remainder"], [389, 1, 1, "", "repeat"], [390, 1, 1, "", "reshape"], [391, 1, 1, "", "result_type"], [392, 1, 1, "", "right_shift"], [393, 1, 1, "", "rint"], [394, 1, 1, "", "roll"], [395, 1, 1, "", "rollaxis"], [396, 1, 1, "", "round"], [397, 1, 1, "", "row_stack"], [398, 1, 1, "", "rsqrt"], [399, 1, 1, "", "searchsorted"], [400, 1, 1, "", "select"], [401, 1, 1, "", "shape"], [402, 1, 1, "", "sign"], [403, 1, 1, "", "signbit"], [404, 1, 1, "", "sin"], [405, 1, 1, "", "sinh"], [406, 1, 1, "", "sort"], [407, 1, 1, "", "sqrt"], [408, 1, 1, "", "square"], [409, 1, 1, "", "squeeze"], [410, 1, 1, "", "stack"], [411, 1, 1, "", "std"], [412, 1, 1, "", "subtract"], [413, 1, 1, "", "sum"], [414, 1, 1, "", "swapaxes"], [415, 1, 1, "", "take"], [416, 1, 1, "", "take_along_axis"], [417, 1, 1, "", "tan"], [418, 1, 1, "", "tanh"], [419, 1, 1, "", "tensordot"], [420, 1, 1, "", "tile"], [421, 1, 1, "", "trace"], [422, 1, 1, "", "transpose"], [423, 1, 1, "", "trapz"], [424, 1, 1, "", "tri"], [425, 1, 1, "", "tril"], [426, 1, 1, "", "tril_indices"], [427, 1, 1, "", "tril_indices_from"], [428, 1, 1, "", "triu"], [429, 1, 1, "", "triu_indices"], [430, 1, 1, "", "triu_indices_from"], [431, 1, 1, "", "true_divide"], [432, 1, 1, "", "trunc"], [433, 1, 1, "", "unique"], [434, 1, 1, "", "unwrap"], [435, 1, 1, "", "vander"], [436, 1, 1, "", "var"], [437, 1, 1, "", "vdot"], [438, 1, 1, "", "vstack"], [439, 1, 1, "", "where"], [440, 1, 1, "", "zeros"], [441, 1, 1, "", "zeros_like"]], "dpnp.dpnp_array": [[84, 2, 1, "", "dpnp_array"]], "dpnp.dpnp_array.dpnp_array": [[84, 3, 1, "", "T"], [84, 4, 1, "", "__eq__"], [84, 4, 1, "", "__ge__"], [84, 4, 1, "", "__getitem__"], [84, 4, 1, "", "__gt__"], [84, 4, 1, "", "__le__"], [84, 4, 1, "", "__len__"], [84, 4, 1, "", "__lt__"], [84, 4, 1, "", "__ne__"], [84, 4, 1, "", "__setitem__"], [84, 4, 1, "", "all"], [84, 4, 1, "", "any"], [84, 4, 1, "", "argmax"], [84, 4, 1, "", "argmin"], [84, 4, 1, "", "argsort"], [84, 4, 1, "", "asnumpy"], [84, 4, 1, "", "astype"], [84, 4, 1, "", "choose"], [84, 4, 1, "", "clip"], [84, 4, 1, "", "conj"], [84, 4, 1, "", "conjugate"], [84, 4, 1, "", "copy"], [84, 4, 1, "", "cumprod"], [84, 4, 1, "", "cumsum"], [84, 3, 1, "", "device"], [84, 4, 1, "", "diagonal"], [84, 4, 1, "", "dot"], [84, 3, 1, "", "dtype"], [84, 4, 1, "", "fill"], [84, 3, 1, "", "flags"], [84, 3, 1, "", "flat"], [84, 4, 1, "", "flatten"], [84, 4, 1, "", "get_array"], [84, 3, 1, "", "imag"], [84, 4, 1, "", "item"], [84, 3, 1, "", "itemsize"], [84, 4, 1, "", "max"], [84, 4, 1, "", "mean"], [84, 4, 1, "", "min"], [84, 3, 1, "", "nbytes"], [84, 3, 1, "", "ndim"], [84, 4, 1, "", "nonzero"], [84, 4, 1, "", "partition"], [84, 4, 1, "", "prod"], [84, 4, 1, "", "put"], [84, 4, 1, "", "ravel"], [84, 3, 1, "", "real"], [84, 4, 1, "", "repeat"], [84, 4, 1, "", "reshape"], [84, 4, 1, "", "round"], [84, 4, 1, "", "searchsorted"], [84, 3, 1, "", "shape"], [84, 3, 1, "", "size"], [84, 4, 1, "", "sort"], [84, 4, 1, "", "squeeze"], [84, 4, 1, "", "std"], [84, 3, 1, "", "strides"], [84, 4, 1, "", "sum"], [84, 4, 1, "", "swapaxes"], [84, 3, 1, "", "sycl_context"], [84, 3, 1, "", "sycl_device"], [84, 3, 1, "", "sycl_queue"], [84, 4, 1, "", "take"], [84, 4, 1, "", "to_device"], [84, 4, 1, "", "transpose"], [84, 3, 1, "", "usm_type"], [84, 4, 1, "", "var"]], "dpnp.dtype": [[86, 4, 1, "", "__eq__"], [86, 4, 1, "", "__ge__"], [86, 4, 1, "", "__getitem__"], [86, 4, 1, "", "__gt__"], [86, 4, 1, "", "__le__"], [86, 4, 1, "", "__len__"], [86, 4, 1, "", "__lt__"], [86, 4, 1, "", "__ne__"], [86, 3, 1, "", "alignment"], [86, 3, 1, "", "base"], [86, 3, 1, "", "byteorder"], [86, 3, 1, "", "char"], [86, 3, 1, "", "descr"], [86, 3, 1, "", "fields"], [86, 3, 1, "", "flags"], [86, 3, 1, "", "hasobject"], [86, 3, 1, "", "isalignedstruct"], [86, 3, 1, "", "isbuiltin"], [86, 3, 1, "", "isnative"], [86, 3, 1, "", "itemsize"], [86, 3, 1, "", "kind"], [86, 3, 1, "", "metadata"], [86, 3, 1, "", "name"], [86, 3, 1, "", "names"], [86, 3, 1, "", "ndim"], [86, 4, 1, "", "newbyteorder"], [86, 3, 1, "", "num"], [86, 3, 1, "", "shape"], [86, 3, 1, "", "str"], [86, 3, 1, "", "subdtype"], [86, 3, 1, "", "type"]], "dpnp.fft": [[101, 1, 1, "", "fft"], [102, 1, 1, "", "fft2"], [103, 1, 1, "", "fftfreq"], [104, 1, 1, "", "fftn"], [105, 1, 1, "", "fftshift"], [106, 1, 1, "", "hfft"], [107, 1, 1, "", "ifft"], [108, 1, 1, "", "ifft2"], [109, 1, 1, "", "ifftn"], [110, 1, 1, "", "ifftshift"], [111, 1, 1, "", "ihfft"], [112, 1, 1, "", "irfft"], [113, 1, 1, "", "irfft2"], [114, 1, 1, "", "irfftn"], [115, 1, 1, "", "rfft"], [116, 1, 1, "", "rfft2"], [117, 1, 1, "", "rfftfreq"], [118, 1, 1, "", "rfftn"]], "dpnp.flatiter": [[121, 4, 1, "", "__eq__"], [121, 4, 1, "", "__ge__"], [121, 4, 1, "", "__getitem__"], [121, 4, 1, "", "__gt__"], [121, 4, 1, "", "__iter__"], [121, 4, 1, "", "__le__"], [121, 4, 1, "", "__lt__"], [121, 4, 1, "", "__ne__"], [121, 4, 1, "", "__next__"], [121, 4, 1, "", "__setitem__"]], "dpnp.linalg": [[163, 1, 1, "", "cholesky"], [164, 1, 1, "", "cond"], [165, 1, 1, "", "det"], [166, 1, 1, "", "eig"], [167, 1, 1, "", "eigh"], [168, 1, 1, "", "eigvals"], [169, 1, 1, "", "eigvalsh"], [170, 1, 1, "", "inv"], [171, 1, 1, "", "lstsq"], [172, 1, 1, "", "matrix_power"], [173, 1, 1, "", "matrix_rank"], [174, 1, 1, "", "multi_dot"], [175, 1, 1, "", "norm"], [176, 1, 1, "", "pinv"], [177, 1, 1, "", "qr"], [178, 1, 1, "", "slogdet"], [179, 1, 1, "", "solve"], [180, 1, 1, "", "svd"], [181, 1, 1, "", "tensorinv"], [182, 1, 1, "", "tensorsolve"]], "dpnp.ndarray": [[221, 6, 1, "", "T"], [222, 4, 1, "", "__abs__"], [223, 4, 1, "", "__add__"], [224, 4, 1, "", "__and__"], [225, 4, 1, "", "__bool__"], [226, 4, 1, "", "__complex__"], [227, 4, 1, "", "__copy__"], [228, 4, 1, "", "__eq__"], [229, 4, 1, "", "__float__"], [230, 4, 1, "", "__floordiv__"], [231, 4, 1, "", "__ge__"], [232, 4, 1, "", "__getitem__"], [233, 4, 1, "", "__gt__"], [234, 4, 1, "", "__iadd__"], [235, 4, 1, "", "__iand__"], [236, 4, 1, "", "__ifloordiv__"], [237, 4, 1, "", "__ilshift__"], [238, 4, 1, "", "__imod__"], [239, 4, 1, "", "__imul__"], [240, 4, 1, "", "__int__"], [241, 4, 1, "", "__invert__"], [242, 4, 1, "", "__ior__"], [243, 4, 1, "", "__ipow__"], [244, 4, 1, "", "__irshift__"], [245, 4, 1, "", "__isub__"], [246, 4, 1, "", "__itruediv__"], [247, 4, 1, "", "__ixor__"], [248, 4, 1, "", "__le__"], [249, 4, 1, "", "__len__"], [250, 4, 1, "", "__lshift__"], [251, 4, 1, "", "__lt__"], [252, 4, 1, "", "__matmul__"], [253, 4, 1, "", "__mod__"], [254, 4, 1, "", "__mul__"], [255, 4, 1, "", "__ne__"], [256, 4, 1, "", "__neg__"], [257, 4, 1, "", "__new__"], [258, 4, 1, "", "__or__"], [259, 4, 1, "", "__pos__"], [260, 4, 1, "", "__pow__"], [261, 4, 1, "", "__repr__"], [262, 4, 1, "", "__rshift__"], [263, 4, 1, "", "__setitem__"], [264, 4, 1, "", "__str__"], [265, 4, 1, "", "__sub__"], [266, 4, 1, "", "__truediv__"], [267, 4, 1, "", "__xor__"], [268, 4, 1, "", "all"], [269, 4, 1, "", "any"], [270, 4, 1, "", "argmax"], [271, 4, 1, "", "argmin"], [272, 4, 1, "", "argsort"], [273, 4, 1, "", "astype"], [274, 4, 1, "", "choose"], [275, 4, 1, "", "clip"], [276, 4, 1, "", "conj"], [277, 4, 1, "", "conjugate"], [278, 4, 1, "", "copy"], [279, 4, 1, "", "cumprod"], [280, 4, 1, "", "cumsum"], [281, 4, 1, "", "diagonal"], [282, 6, 1, "", "dtype"], [283, 4, 1, "", "fill"], [284, 6, 1, "", "flags"], [285, 6, 1, "", "flat"], [286, 4, 1, "", "flatten"], [287, 6, 1, "", "imag"], [288, 4, 1, "", "item"], [289, 6, 1, "", "itemsize"], [290, 4, 1, "", "max"], [291, 4, 1, "", "mean"], [292, 4, 1, "", "min"], [293, 6, 1, "", "nbytes"], [294, 6, 1, "", "ndim"], [295, 4, 1, "", "nonzero"], [296, 4, 1, "", "partition"], [297, 4, 1, "", "prod"], [298, 4, 1, "", "put"], [299, 4, 1, "", "ravel"], [300, 6, 1, "", "real"], [301, 4, 1, "", "repeat"], [302, 4, 1, "", "reshape"], [303, 4, 1, "", "round"], [304, 4, 1, "", "searchsorted"], [305, 6, 1, "", "shape"], [306, 6, 1, "", "size"], [307, 4, 1, "", "sort"], [308, 4, 1, "", "squeeze"], [309, 4, 1, "", "std"], [310, 6, 1, "", "strides"], [311, 4, 1, "", "sum"], [312, 4, 1, "", "swapaxes"], [313, 4, 1, "", "take"], [314, 4, 1, "", "transpose"], [315, 4, 1, "", "var"]], "dpnp.random": [[335, 2, 1, "", "RandomState"], [336, 1, 1, "", "beta"], [337, 1, 1, "", "binomial"], [338, 1, 1, "", "bytes"], [339, 1, 1, "", "chisquare"], [340, 1, 1, "", "choice"], [341, 1, 1, "", "dirichlet"], [342, 1, 1, "", "exponential"], [343, 1, 1, "", "f"], [344, 1, 1, "", "gamma"], [345, 1, 1, "", "geometric"], [346, 1, 1, "", "gumbel"], [347, 1, 1, "", "hypergeometric"], [348, 1, 1, "", "laplace"], [349, 1, 1, "", "logistic"], [350, 1, 1, "", "lognormal"], [351, 1, 1, "", "logseries"], [352, 1, 1, "", "multinomial"], [353, 1, 1, "", "multivariate_normal"], [354, 1, 1, "", "negative_binomial"], [355, 1, 1, "", "noncentral_chisquare"], [356, 1, 1, "", "noncentral_f"], [357, 1, 1, "", "normal"], [358, 1, 1, "", "pareto"], [359, 1, 1, "", "permutation"], [360, 1, 1, "", "poisson"], [361, 1, 1, "", "power"], [362, 1, 1, "", "rand"], [363, 1, 1, "", "randint"], [364, 1, 1, "", "randn"], [365, 1, 1, "", "random"], [366, 1, 1, "", "random_integers"], [367, 1, 1, "", "random_sample"], [368, 1, 1, "", "ranf"], [369, 1, 1, "", "rayleigh"], [370, 1, 1, "", "sample"], [371, 1, 1, "", "seed"], [372, 1, 1, "", "shuffle"], [373, 1, 1, "", "standard_cauchy"], [374, 1, 1, "", "standard_exponential"], [375, 1, 1, "", "standard_gamma"], [376, 1, 1, "", "standard_normal"], [377, 1, 1, "", "standard_t"], [378, 1, 1, "", "triangular"], [379, 1, 1, "", "uniform"], [380, 1, 1, "", "vonmises"], [381, 1, 1, "", "wald"], [382, 1, 1, "", "weibull"], [383, 1, 1, "", "zipf"]], "dpnp.random.RandomState": [[335, 4, 1, "", "__eq__"], [335, 4, 1, "", "__ge__"], [335, 4, 1, "", "__gt__"], [335, 4, 1, "", "__le__"], [335, 4, 1, "", "__lt__"], [335, 4, 1, "", "__ne__"], [335, 4, 1, "", "get_state"], [335, 4, 1, "", "get_sycl_device"], [335, 4, 1, "", "get_sycl_queue"], [335, 4, 1, "", "normal"], [335, 4, 1, "", "rand"], [335, 4, 1, "", "randint"], [335, 4, 1, "", "randn"], [335, 4, 1, "", "random_sample"], [335, 4, 1, "", "standard_normal"], [335, 4, 1, "", "uniform"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "method", "Python method"], "5": ["py", "data", "Python data"], "6": ["py", "property", "Python property"]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:attribute", "4": "py:method", "5": "py:data", "6": "py:property"}, "terms": {"": [0, 3, 4, 70, 73, 84, 86, 102, 104, 108, 109, 113, 114, 116, 118, 131, 132, 171, 173, 175, 180, 282, 314, 335, 336, 337, 342, 343, 344, 346, 347, 348, 349, 350, 352, 354, 357, 358, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 420, 449], "0": [0, 4, 6, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 38, 41, 42, 43, 44, 45, 52, 54, 56, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 72, 73, 75, 76, 77, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 99, 100, 103, 117, 120, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 136, 137, 138, 140, 143, 146, 149, 150, 153, 154, 155, 159, 160, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 175, 178, 183, 184, 185, 186, 187, 188, 191, 193, 194, 196, 197, 198, 199, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 278, 281, 283, 287, 288, 300, 303, 307, 309, 314, 315, 317, 319, 320, 321, 326, 327, 328, 329, 330, 331, 334, 335, 337, 342, 344, 345, 346, 348, 349, 350, 352, 353, 354, 357, 359, 360, 361, 362, 365, 367, 368, 369, 370, 373, 376, 378, 379, 380, 386, 388, 389, 392, 393, 394, 395, 396, 398, 399, 400, 401, 402, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 439, 440, 441, 449], "00": [66, 89, 404], "000": 337, "00000000005e": 97, "000000082740371e": 97, "000000e": [66, 404], "00001e10": [15, 152], "000e": 89, "00867716": 339, "01": 89, "02": 89, "03088525e": 90, "0396842": 194, "04": 89, "04719755": 334, "04921661": 335, "05": [15, 89, 152], "06310682": 335, "07944154": [71, 178], "08": [15, 66, 89, 152, 353, 404], "08156915": 335, "0943951": 334, "09861229": [71, 178, 187], "0dev1": 6, "0j": [18, 83, 84, 196, 287, 300, 402], "0th": 419, "1": [0, 3, 4, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 32, 34, 35, 36, 38, 41, 42, 43, 44, 45, 50, 51, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 120, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 137, 138, 140, 142, 143, 144, 146, 148, 149, 150, 152, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 181, 183, 184, 185, 187, 188, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 272, 273, 278, 281, 283, 287, 288, 296, 300, 307, 314, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 334, 335, 337, 339, 340, 342, 344, 346, 348, 349, 350, 352, 353, 354, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 374, 376, 379, 384, 386, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 449], "10": [0, 4, 13, 22, 24, 28, 29, 44, 56, 62, 71, 72, 73, 77, 81, 84, 86, 88, 89, 97, 136, 138, 143, 148, 159, 160, 185, 186, 187, 188, 194, 195, 200, 208, 302, 329, 331, 335, 337, 347, 359, 387, 391, 392, 394, 396, 399, 410, 416, 425, 428, 439], "100": [77, 138, 159, 174, 194, 347, 373], "1000": [52, 138, 174, 194, 336, 337, 342, 344, 346, 347, 348, 349, 350, 357, 358, 361, 363, 365, 368, 370, 376, 380, 381, 382, 383], "10000": [73, 174, 345, 360, 369, 379], "100000": 354, "1000000": [373, 375, 377, 378], "1024": 0, "105": 89, "11": [28, 29, 44, 67, 77, 84, 140, 175, 302, 354, 363, 396, 399, 405, 425, 428, 439], "110": [88, 150], "113": 189, "11570901": 335, "1179187": 335, "118033988749895": 411, "119": 88, "1196081": 335, "12": [28, 29, 43, 70, 77, 86, 88, 148, 194, 327, 329, 359, 399, 425, 428, 439], "120": [72, 75], "123": [84, 89, 288], "125": [326, 435], "127": 138, "128": [0, 138], "12th": 88, "13": [28, 29, 47, 77, 83, 86, 88, 151, 196, 399], "130": 88, "134": 150, "13436424": 335, "135": 26, "13710533": 339, "14": [28, 29, 46, 47, 77, 83, 150, 151, 399, 419], "14159265": [21, 26], "15": [6, 28, 29, 73, 77, 88, 176, 186, 359, 399], "150": 75, "15888336": 194, "16": [6, 46, 77, 86, 134, 138, 140, 208, 326, 417], "16227766": [164, 387], "16394577": 335, "17157288": [167, 169], "177": [138, 194], "18": [6, 72, 86, 87, 88, 175, 194], "180": [26, 88], "18236388": 335, "18557831": 335, "19": [68, 86], "1923875335537315": 364, "19245009": 398, "19722458": 71, "1d": [330, 331, 416], "1e": [15, 97, 152, 166, 176, 186, 187, 189, 353], "1e10": [15, 152], "1j": [11, 12, 18, 59, 60, 84, 148, 166, 180, 287, 300, 408], "1th": 419, "2": [0, 3, 4, 11, 12, 13, 20, 21, 22, 23, 24, 25, 28, 29, 30, 32, 34, 35, 36, 37, 38, 41, 42, 44, 46, 48, 50, 51, 53, 54, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 102, 108, 113, 116, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 135, 136, 138, 140, 141, 142, 143, 144, 146, 148, 149, 150, 159, 160, 161, 162, 163, 164, 165, 166, 167, 170, 171, 172, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 273, 278, 281, 283, 288, 296, 314, 317, 318, 319, 320, 321, 322, 326, 327, 328, 329, 330, 334, 335, 339, 343, 347, 353, 359, 362, 364, 375, 377, 378, 381, 383, 384, 386, 388, 389, 390, 392, 393, 394, 395, 396, 397, 399, 401, 403, 404, 405, 407, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 422, 423, 424, 425, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441], "20": [6, 72, 88, 149, 159, 160, 175, 331, 337, 352, 399, 416], "20000": 337, "200e": 89, "2048": 0, "21": [73, 86], "215": 194, "21941987": 335, "21968665": 335, "22": 330, "22460635e": 417, "22497216": 175, "22776602": 194, "23": [6, 335], "230": 88, "233": 6, "23606798": 175, "24": [28, 29, 70, 72, 87, 88, 150, 159, 181, 327, 419], "24264069": 175, "24544512": 335, "247219128924647": 217, "25": [86, 88, 93, 140, 143, 170, 183, 208, 219, 364, 373, 435, 436], "255": [46, 48], "25506903": 335, "256": [0, 138], "26": [49, 88], "26618007j": 188, "27": [53, 194, 326, 398, 435], "28": 88, "28318531": 434, "28352814": 335, "299": 6, "2d": [180, 196], "2e": 73, "2f": 0, "2j": [59, 60, 83, 148, 167, 169, 196, 402, 437], "3": [0, 3, 4, 13, 20, 21, 26, 28, 29, 30, 32, 34, 35, 36, 37, 38, 41, 42, 43, 44, 46, 49, 50, 51, 53, 56, 57, 58, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 99, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 136, 138, 140, 143, 144, 145, 146, 148, 149, 150, 159, 160, 164, 165, 166, 170, 171, 172, 173, 175, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 189, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 278, 281, 288, 296, 307, 314, 317, 318, 319, 320, 321, 322, 326, 327, 328, 330, 335, 339, 343, 350, 353, 359, 362, 363, 364, 374, 378, 381, 384, 386, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 399, 401, 403, 406, 407, 409, 410, 411, 412, 414, 415, 419, 420, 422, 423, 424, 425, 428, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441], "30": [70, 75, 88, 331, 334, 416, 437], "3003003": 386, "30102999566": 186, "3012989": 405, "30258509": [71, 195], "31": [49, 138], "312": 90, "316": 194, "32": [86, 88, 138, 216, 218, 419], "33": 386, "333": 174, "33836967": 335, "34074171": 335, "34132519": 194, "34846923": 175, "34960421": 194, "35": [88, 345], "35106603e": 175, "35355338": 398, "357": 6, "36": 70, "37": 396, "371139e": 66, "38": [6, 150, 337], "38268343": 167, "38268343j": 167, "38629436": 71, "38885": 337, "389056099": [94, 97], "39295758": 335, "397": 6, "3e": [0, 73], "3j": [83, 196], "3rd": 58, "3x8000": 374, "4": [0, 13, 14, 20, 28, 29, 32, 41, 43, 44, 46, 48, 50, 56, 57, 58, 61, 64, 66, 68, 70, 72, 73, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 95, 122, 126, 127, 128, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 148, 149, 150, 159, 162, 165, 170, 172, 173, 175, 178, 181, 182, 183, 188, 190, 194, 196, 197, 198, 199, 200, 202, 203, 204, 207, 208, 209, 210, 212, 214, 217, 219, 278, 281, 296, 307, 314, 317, 319, 321, 326, 327, 329, 330, 335, 336, 339, 359, 364, 380, 384, 388, 389, 390, 394, 395, 396, 397, 402, 406, 407, 410, 411, 412, 414, 415, 419, 420, 422, 423, 425, 428, 431, 435, 436, 437, 438, 439, 441], "40": [88, 160, 331, 416], "40882036": 335, "4096": 0, "41421356": [164, 175], "429": 6, "44": 330, "4400": [88, 419], "443469": 194, "45": [18, 26], "4532": [88, 419], "46": 88, "46394577": 335, "464": 194, "4664": [88, 419], "47": 6, "4730": [88, 419], "4796": [88, 419], "48": [6, 70], "48093112": 335, "4874": [88, 419], "48927254": 335, "49": 6, "4928": [88, 419], "49543509": 335, "49778714": 434, "499128": 83, "4d": 180, "4j": [148, 437], "5": [0, 6, 13, 14, 20, 27, 28, 41, 44, 45, 46, 48, 49, 50, 54, 56, 58, 61, 64, 65, 68, 70, 72, 73, 76, 77, 80, 81, 82, 83, 84, 87, 88, 89, 93, 122, 123, 124, 125, 126, 127, 128, 129, 134, 138, 140, 143, 144, 145, 148, 149, 150, 159, 160, 163, 167, 169, 170, 174, 175, 179, 183, 190, 191, 192, 193, 194, 197, 198, 199, 200, 201, 202, 203, 204, 207, 208, 214, 217, 273, 278, 317, 319, 320, 321, 326, 329, 330, 335, 336, 337, 339, 342, 354, 358, 359, 360, 361, 364, 367, 382, 384, 386, 388, 390, 392, 393, 394, 395, 396, 397, 399, 402, 410, 411, 413, 414, 415, 419, 420, 422, 424, 425, 428, 431, 432, 434, 435, 437, 438, 439, 440, 441], "50": [138, 159, 189, 194, 331, 416, 419, 439], "500": 159, "5018": [88, 419], "5091786": 67, "51": 6, "512": 0, "5162": [88, 419], "52359878": 334, "52928804": 335, "5306": [88, 419], "54": 335, "542": 6, "54288406": 335, "54465213": 335, "548739": 405, "54930614": 27, "55": 330, "5555555555555554": 219, "56": 6, "562": 194, "5620499351813308": [11, 12], "56920387": 335, "5707963267948966": 23, "57079633": [18, 26, 334, 434], "58997253": 335, "591953": 67, "5e": 189, "5j": [202, 319], "6": [0, 4, 6, 13, 20, 28, 29, 41, 44, 48, 49, 56, 58, 64, 70, 72, 73, 75, 76, 77, 80, 81, 82, 83, 84, 86, 87, 88, 92, 97, 100, 122, 137, 144, 148, 149, 150, 159, 175, 176, 177, 180, 181, 183, 194, 211, 212, 216, 278, 288, 317, 321, 326, 329, 334, 335, 352, 354, 359, 364, 384, 390, 394, 395, 396, 397, 410, 412, 413, 414, 415, 419, 423, 425, 428, 431, 434, 437, 438, 439, 441], "60": [70, 75, 88, 331, 416, 419, 439], "600": 159, "60943791": 71, "61799388": 334, "62": 150, "6227766": 138, "62318272": 339, "62341325": 138, "624": 89, "63": 138, "63317787e": 417, "63522211": 335, "63836967": 335, "64": [0, 4, 6, 88, 138, 216, 218, 326, 396], "64000": 88, "65745445": 22, "6666666666666665": 214, "67": 88, "67305985": 131, "673174": 335, "67718303": 335, "69295758": 335, "69314718": [71, 178, 187], "6990877": 335, "6j": [148, 437], "7": [13, 15, 20, 41, 54, 56, 64, 68, 70, 73, 76, 77, 80, 81, 82, 84, 87, 94, 122, 125, 138, 140, 150, 152, 159, 175, 180, 200, 208, 288, 317, 328, 329, 335, 359, 388, 391, 393, 394, 412, 413, 414, 415, 419, 425, 428, 431, 432, 437, 439], "70": [159, 437, 439], "700": 159, "700e": 89, "70710677": [84, 287, 300], "70710678": [164, 166], "70710678j": 166, "70882036": 335, "718281828": [94, 97], "72": 70, "720": 72, "72075441": 194, "72538256": 24, "74165739": 175, "742278e": 404, "74596669": 175, "74921661": 335, "75": [44, 93, 140, 170, 183], "754": 120, "76096244": 335, "76377462": 335, "78539816": [18, 25, 26, 434], "78927254": 335, "79175947": 71, "7j": 328, "8": [4, 13, 15, 41, 53, 56, 64, 70, 76, 77, 80, 81, 84, 86, 88, 89, 122, 138, 148, 152, 165, 175, 178, 180, 181, 183, 194, 317, 326, 327, 329, 335, 359, 378, 394, 398, 404, 415, 419, 423, 425, 428, 435, 439], "80": [86, 88, 439], "8000": 374, "80226506": 335, "81715362": 335, "827941": [138, 194], "82842712": [167, 169], "84288406": 335, "84401099": 335, "84743374": 335, "84803548": 175, "85": 88, "86": 150, "87649168": 189, "88997253": 335, "89920014": 339, "8f": 86, "8j": 437, "9": [4, 13, 41, 56, 64, 70, 73, 76, 77, 80, 82, 84, 88, 90, 100, 126, 134, 138, 166, 171, 175, 176, 177, 180, 194, 208, 288, 317, 329, 335, 337, 339, 359, 394, 407, 412, 419, 425, 428, 431, 435, 439], "90": [18, 75, 439], "917152": 418, "92387953": 167, "92387953j": 167, "94": 88, "94591015": 71, "95": 171, "98": 196, "98024613": 194, "99": [187, 331], "99322285": 22, "99532227": 93, "996272": 418, "99822295": 24, "99853728": 93, "999": 89, "99959305": 93, "99989938": 93, "99997791": 93, "A": [11, 12, 13, 15, 18, 20, 21, 22, 23, 24, 25, 26, 27, 32, 34, 35, 36, 37, 38, 39, 40, 46, 47, 48, 49, 50, 51, 53, 54, 56, 57, 59, 60, 62, 63, 64, 66, 67, 71, 72, 73, 76, 79, 80, 82, 84, 86, 88, 89, 90, 91, 92, 94, 95, 96, 97, 99, 122, 123, 124, 125, 126, 130, 131, 132, 133, 134, 135, 136, 137, 138, 141, 142, 145, 146, 148, 149, 151, 153, 154, 155, 160, 161, 162, 163, 167, 168, 169, 171, 173, 174, 177, 178, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 198, 202, 204, 208, 211, 212, 216, 218, 273, 278, 286, 305, 316, 317, 318, 319, 320, 321, 325, 326, 328, 335, 337, 354, 357, 362, 363, 364, 365, 366, 367, 368, 370, 371, 376, 379, 384, 386, 388, 389, 392, 393, 398, 402, 403, 404, 405, 407, 408, 412, 414, 417, 418, 419, 420, 422, 424, 431, 432, 435, 439, 440, 441], "AND": [14, 46, 47, 48, 49, 151, 190, 191, 192, 193], "And": [4, 39, 40, 77, 84, 273], "Be": 166, "Being": 3, "But": [4, 86], "By": [28, 29, 40, 70, 84, 138, 171, 183, 194, 196, 197, 199, 203, 209, 210, 213, 214, 215, 216, 217, 218, 219, 273, 384, 389, 394, 411, 424, 426, 429, 436], "For": [0, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 287, 288, 300, 302, 310, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 428, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 449], "If": [4, 11, 12, 15, 20, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 40, 44, 56, 58, 70, 71, 72, 73, 76, 80, 81, 83, 84, 86, 88, 89, 96, 99, 120, 122, 135, 138, 143, 144, 148, 149, 150, 163, 171, 172, 173, 174, 175, 176, 177, 180, 182, 183, 184, 194, 195, 197, 199, 201, 203, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 273, 305, 307, 327, 331, 335, 357, 379, 385, 387, 390, 394, 396, 397, 399, 406, 409, 410, 411, 413, 414, 416, 419, 420, 422, 435, 436, 437, 438, 439, 449], "In": [4, 28, 29, 72, 73, 89, 163, 168, 174, 177, 194, 211, 212, 214, 216, 218, 327, 330, 335, 379, 390, 413, 415, 432], "It": [4, 28, 29, 56, 72, 73, 83, 167, 169, 196, 199, 209, 210, 211, 212, 213, 214, 215, 217, 219, 327, 411, 413, 436], "Its": [56, 181, 331], "NOT": [47, 151, 190, 191, 192, 193], "No": [35, 88, 163], "Not": [14, 19, 153, 211, 212, 213, 215, 216, 218, 327], "OR": [19, 46, 47, 48, 49, 151, 190, 191, 192, 193], "On": 4, "One": [41, 42, 43, 70, 85, 86, 390], "The": [3, 4, 13, 15, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 44, 46, 47, 48, 49, 51, 53, 56, 57, 58, 62, 63, 64, 66, 67, 69, 70, 71, 72, 73, 76, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 99, 101, 107, 115, 122, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 151, 153, 154, 155, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 278, 286, 287, 296, 300, 316, 317, 318, 319, 320, 321, 325, 326, 327, 329, 331, 335, 338, 340, 341, 351, 356, 357, 362, 363, 364, 365, 366, 367, 368, 370, 371, 376, 379, 384, 386, 387, 388, 389, 390, 391, 392, 394, 395, 397, 398, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 416, 417, 418, 419, 420, 422, 424, 426, 427, 429, 430, 431, 432, 435, 436, 438, 439, 440, 441, 449, 453], "Then": [36, 38], "There": 183, "These": [4, 86, 88, 89, 96, 207, 449, 453], "To": 4, "With": [28, 29, 44, 175, 197, 203, 209, 210, 216, 218, 327, 413], "_": [0, 410], "__array_interface__": 86, "__bool__": 449, "__dlpack__": 130, "__dlpack_device__": 130, "__eq__": [84, 86, 121, 335], "__ge__": [84, 86, 121, 335], "__getitem__": [84, 86, 121], "__gt__": [84, 86, 121, 335], "__iter__": 121, "__le__": [84, 86, 121, 335], "__len__": [84, 86], "__lt__": [84, 86, 121, 335], "__main__": 0, "__name__": 0, "__ne__": [84, 86, 121, 335], "__next__": 121, "__setitem__": [84, 121], "__sycl_usm_array_interface__": 37, "_dtypes_list": 0, "a1": 33, "a2": 33, "a_max": 56, "a_min": 56, "ab": [6, 12, 15], "abc": 88, "abcd": 89, "about": [36, 38, 84, 120, 166, 284, 449], "abov": [3, 71, 76, 79, 149, 177, 195, 387, 424, 425, 428], "absolut": [6, 11, 15, 18, 100, 178, 217, 219, 328, 411, 436], "accept": [30, 88, 335, 406], "access": [77, 78, 119, 449], "accord": [44, 52, 86, 120, 166, 167, 168, 169, 195, 199, 214, 217, 219, 387, 392, 411, 436], "accordingli": [213, 215], "account": 390, "accumul": [71, 72, 73, 88, 143, 211, 212, 216, 218, 327, 413], "accur": [86, 97, 187, 189], "achiev": 88, "across": [80, 211, 212, 216, 218], "activ": 4, "actual": [86, 143, 163, 174], "ad": [15, 86, 89, 96, 165, 178, 453], "add": [6, 86], "add_docstr": 6, "add_newdoc": 6, "add_newdoc_ufunc": 6, "addit": [71, 163, 214], "address": 86, "advanc": 88, "advers": 88, "advis": 4, "affect": [20, 88, 143], "after": [85, 354, 394], "ag": 86, "against": [15, 28, 29, 50, 51, 56, 139, 175, 176, 197, 203, 209, 210, 216, 218, 327, 331, 413, 416], "ai": [3, 331, 416], "ai_max": 416, "ai_min": 416, "ainv": [170, 181], "algebra": [442, 453], "algorithm": [88, 89], "alia": [16, 17, 82, 120, 220, 335, 365, 368, 370, 397, 431, 438], "alias": 9, "align": 86, "all": [4, 6, 9, 15, 19, 33, 40, 44, 57, 68, 81, 84, 85, 86, 88, 89, 94, 95, 97, 99, 122, 123, 124, 131, 132, 134, 138, 144, 146, 163, 173, 176, 183, 194, 197, 203, 209, 210, 213, 215, 273, 276, 283, 296, 327, 337, 394, 397, 409, 413, 438, 449], "allclos": [6, 33, 152, 170, 176, 177, 179, 180, 182], "alloc": [3, 4, 20, 32, 34, 35, 36, 37, 38, 40, 44, 62, 71, 76, 79, 84, 90, 91, 99, 131, 132, 133, 134, 135, 136, 137, 138, 146, 149, 183, 184, 194, 195, 199, 202, 214, 217, 219, 273, 319, 320, 321, 335, 357, 362, 363, 364, 365, 366, 367, 368, 370, 376, 379, 387, 409, 411, 424, 435, 436, 440, 441], "allow": [40, 84, 88, 143, 273, 302, 449], "alltru": 6, "almost": 166, "along": [3, 4, 14, 16, 17, 19, 28, 29, 30, 44, 57, 58, 68, 71, 72, 73, 76, 79, 80, 81, 84, 85, 87, 122, 123, 124, 127, 128, 133, 138, 140, 144, 149, 175, 177, 181, 182, 183, 194, 195, 197, 198, 199, 200, 201, 203, 204, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 270, 271, 272, 279, 280, 290, 292, 297, 298, 309, 311, 313, 315, 327, 329, 330, 331, 387, 389, 394, 395, 397, 406, 410, 411, 413, 415, 416, 419, 420, 421, 423, 426, 429, 436, 438, 449], "alpha": [336, 341, 342, 358, 361], "alreadi": [4, 35, 41, 42, 43], "also": [3, 13, 18, 20, 26, 46, 48, 49, 63, 82, 86, 88, 92, 96, 126, 133, 135, 141, 142, 143, 145, 160, 161, 162, 163, 189, 198, 204, 207, 208, 317, 318, 326, 373, 388, 392, 412, 431, 449], "altern": [3, 4, 72, 73, 83, 84, 196, 197, 199, 203, 211, 212, 214, 216, 217, 218, 219, 314, 327, 411, 413, 436], "although": [18, 86, 420], "alwai": [4, 30, 34, 40, 84, 167, 169, 217, 219, 273, 317, 390, 411, 436], "amax": [6, 197], "ambigu": 449, "amin": [6, 203], "an": [0, 3, 4, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 66, 67, 71, 72, 73, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 119, 120, 122, 123, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 160, 161, 162, 165, 168, 171, 173, 174, 175, 177, 178, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 227, 272, 274, 275, 278, 288, 290, 296, 298, 301, 302, 305, 307, 308, 312, 313, 314, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 335, 337, 342, 343, 345, 354, 357, 362, 363, 364, 365, 366, 367, 368, 370, 371, 376, 379, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 424, 425, 426, 428, 429, 431, 432, 433, 435, 436, 438, 439, 440, 441, 449], "anaconda": 3, "analyt": 3, "angl": [6, 25, 26, 74, 75, 333, 334, 434], "ani": [3, 6, 14, 15, 30, 32, 34, 35, 36, 37, 38, 40, 50, 51, 62, 76, 79, 81, 84, 86, 88, 89, 119, 136, 137, 138, 144, 172, 182, 183, 194, 213, 215, 273, 335, 379, 406, 435, 449], "anoth": [4, 64, 84, 130, 278, 298, 330, 395], "answer": 337, "anti": 80, "anyth": 86, "ap": 171, "api": [0, 2, 3, 6, 20, 32, 34, 35, 36, 37, 38, 62, 76, 79, 86, 90, 91, 99, 131, 132, 133, 134, 135, 136, 137, 138, 146, 149, 183, 184, 194, 202, 319, 320, 321, 335, 357, 362, 363, 364, 365, 366, 367, 368, 370, 371, 376, 379, 424, 435, 440, 441], "appear": [96, 123, 124], "append": [0, 6, 81, 89, 96, 160], "appli": [28, 29, 30, 44, 52, 88, 391, 419], "applic": 86, "apply_along_axi": 6, "apply_over_ax": 6, "approach": 86, "appropri": [4, 28, 29, 139, 182, 209, 210, 213, 215, 335, 363, 366, 449], "approxim": 120, "ar": [3, 4, 11, 12, 13, 14, 15, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 53, 54, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 75, 76, 80, 81, 82, 83, 84, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 122, 123, 124, 125, 126, 127, 128, 129, 133, 138, 140, 141, 142, 143, 145, 150, 151, 152, 153, 154, 155, 160, 161, 162, 163, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 273, 295, 296, 316, 317, 318, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 334, 335, 336, 337, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 357, 358, 360, 361, 363, 366, 367, 369, 375, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 392, 393, 394, 396, 397, 398, 399, 400, 402, 403, 404, 406, 407, 408, 410, 411, 412, 413, 415, 417, 418, 419, 421, 423, 427, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 449], "arang": [0, 6, 13, 28, 29, 41, 42, 43, 44, 45, 56, 63, 75, 76, 77, 80, 82, 83, 84, 88, 92, 94, 95, 97, 122, 129, 137, 138, 143, 149, 150, 159, 175, 183, 186, 187, 190, 191, 192, 193, 194, 196, 197, 201, 203, 208, 281, 318, 321, 326, 330, 334, 359, 388, 391, 394, 412, 419, 431, 439, 441], "arbitrari": [39, 83, 86, 88, 150, 196, 391], "arbitrarili": 88, "arc": [18, 25], "arcco": [6, 22, 23, 25, 26, 66], "arccosh": [6, 21, 24, 27, 67], "arcsin": [6, 21, 24, 25, 26, 404], "arcsinh": [6, 22, 23, 27, 405], "arctan": [6, 18, 21, 23, 26, 27, 417], "arctan2": [6, 18, 25], "arctanh": [6, 22, 24, 25, 26, 418], "arg": [50, 335], "arg1": [157, 158], "arg2": [157, 158], "argmax": [0, 6, 29, 84, 209, 331, 416, 449], "argmin": [6, 28, 84, 210, 416, 449], "argpartit": [6, 30, 449], "argsort": [6, 84, 399, 406, 416, 422, 449], "argument": [0, 11, 12, 13, 15, 18, 20, 21, 22, 23, 24, 25, 26, 27, 46, 47, 48, 49, 52, 53, 54, 56, 58, 63, 66, 67, 82, 83, 84, 86, 87, 89, 93, 94, 95, 97, 100, 125, 126, 127, 128, 129, 140, 145, 148, 151, 157, 158, 160, 174, 175, 186, 187, 188, 189, 196, 198, 204, 205, 206, 208, 302, 314, 316, 325, 326, 328, 386, 388, 391, 392, 393, 398, 402, 403, 404, 405, 410, 412, 417, 418, 419, 423, 431, 432, 449], "argwher": 6, "ari": [41, 42, 43], "arithmet": [44, 138, 199, 200, 214, 217, 219, 325, 411, 413, 436, 442, 453], "around": [6, 84, 138, 330, 396], "arr": [86, 332, 359, 427, 430], "arr2": 86, "arr_t": [40, 84, 273], "arra": 439, "arrai": [0, 2, 3, 4, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 104, 108, 109, 113, 114, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 227, 270, 271, 272, 273, 274, 275, 278, 281, 282, 283, 284, 286, 287, 288, 289, 291, 293, 294, 296, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 354, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 453], "array2str": 6, "array_equ": 6, "array_equiv": [6, 33], "array_lik": [32, 34, 35, 36, 37, 38, 39, 44, 62, 64, 76, 79, 136, 137, 138, 183, 194, 331, 335, 401, 419, 427, 430, 435], "array_of_diagon": 80, "array_repr": 6, "array_split": [6, 58], "array_str": 6, "arrays_and_dtyp": 391, "asanyarrai": [6, 35, 38], "asarrai": [4, 6, 34, 36, 38, 39], "asarray_chkfinit": [6, 34, 35], "ascend": [167, 169, 399], "ascii": 86, "ascontiguousarrai": [6, 34, 35, 38], "asfarrai": [6, 34, 35], "asfortranarrai": [6, 34, 35, 36], "asmatrix": 6, "asnumpi": 84, "aspect": 86, "assembl": [58, 85, 144, 397, 410, 438], "assign": [84, 283], "associ": [44, 143, 449], "assum": [44, 89, 173, 176, 180], "astyp": [6, 84, 138, 317], "atleast_1d": [6, 42, 43, 96], "atleast_2d": [6, 41, 43, 96], "atleast_3d": [6, 41, 42, 96], "atol": [15, 152], "attain": 0, "attempt": [83, 174], "attribut": [84, 86, 91, 120, 137, 147, 177, 321, 441, 442], "automat": 143, "avail": [2, 3, 4, 14, 15, 19, 65, 68, 69, 75, 86, 87, 93, 100, 129, 140, 152, 200, 205, 206, 209, 210, 213, 215, 216, 322, 334, 423, 434, 442, 449], "averag": [6, 84, 199, 214, 291, 413, 453], "avg": 44, "avoid": [42, 43], "aweight": 69, "ax": [28, 29, 44, 71, 81, 83, 84, 88, 96, 102, 104, 105, 108, 109, 110, 113, 114, 116, 118, 122, 150, 175, 179, 181, 182, 195, 196, 197, 199, 203, 207, 209, 210, 213, 214, 215, 216, 217, 218, 219, 305, 312, 314, 327, 387, 394, 395, 409, 411, 413, 414, 419, 420, 422, 436], "axi": [14, 16, 17, 19, 28, 29, 30, 44, 57, 58, 68, 70, 71, 72, 73, 80, 81, 84, 85, 87, 88, 96, 101, 106, 107, 111, 112, 115, 122, 123, 124, 127, 128, 133, 138, 140, 144, 149, 171, 175, 183, 194, 195, 196, 197, 198, 199, 200, 203, 204, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 268, 269, 270, 271, 272, 279, 280, 290, 291, 292, 296, 297, 298, 301, 307, 308, 309, 311, 313, 314, 315, 323, 327, 329, 330, 331, 384, 387, 389, 390, 394, 395, 397, 406, 409, 410, 411, 413, 414, 415, 416, 419, 420, 422, 423, 436, 438, 449], "axis1": [80, 84, 281, 312, 414, 421], "axis2": [80, 84, 281, 312, 414, 421], "axisa": 70, "axisb": 70, "axisc": 70, "axiserror": [30, 406], "b": [13, 15, 28, 29, 46, 49, 57, 58, 64, 70, 73, 83, 84, 85, 86, 87, 88, 89, 92, 129, 131, 132, 141, 142, 144, 150, 159, 161, 162, 165, 171, 174, 175, 176, 178, 179, 180, 181, 182, 190, 192, 196, 197, 203, 318, 322, 326, 336, 391, 397, 410, 419, 420, 423, 437, 438], "back": [133, 384, 390, 395], "backend": [2, 139, 338, 340, 341, 351, 356, 372], "backward": [40, 84, 273, 394, 395], "bad": 347, "bartlett": 6, "base": [0, 4, 86, 88, 95, 138, 143, 180, 185, 186, 187, 188, 194, 196, 324, 326, 330, 332], "base_repr": 6, "basic": [52, 88, 449, 453], "batch": [102, 104, 108, 109, 113, 114, 116, 118], "bc": [165, 178], "bcde": 89, "becaus": [14, 19, 449], "becom": [84, 143, 314], "been": [85, 331, 395, 416], "befor": [4, 30, 58, 71, 84, 123, 124, 182, 195, 197, 203, 217, 219, 296, 307, 327, 387, 394, 395, 406, 411, 413, 420, 436, 437], "begin": [89, 138, 183, 194], "behav": 184, "behavior": [84, 278, 420], "behind": [84, 296], "being": [3, 86], "belong": 143, "below": [0, 4, 9, 76, 79, 86, 173, 424, 425, 428, 449], "best": 89, "beta": [6, 346], "between": [15, 20, 52, 81, 87, 120, 132, 135, 150, 183, 194, 352, 366, 412, 434], "beyond": [4, 394], "bia": 69, "big": 86, "bin": [143, 373], "bin_edg": 143, "binari": [46, 48, 49, 131, 132, 134, 135, 442, 453], "binary_repr": 6, "bincount": [6, 143], "binomi": [6, 354], "bit": [46, 47, 48, 49, 86, 120, 147, 151, 160, 190, 192, 193, 216, 218, 392, 403, 453], "bitwis": [46, 48, 49], "bitwise_and": [6, 47, 48, 49, 151, 190], "bitwise_not": 6, "bitwise_or": [6, 46, 47, 49, 151, 192], "bitwise_xor": [6, 46, 47, 48, 151, 193], "biufcmmosuv": 86, "blackman": 6, "block": [6, 58, 85, 144, 159, 397, 410, 438], "bmat": 6, "bool": [9, 14, 19, 28, 29, 32, 37, 40, 44, 52, 64, 71, 84, 86, 89, 92, 101, 107, 115, 138, 141, 142, 143, 153, 154, 155, 161, 162, 163, 173, 175, 176, 180, 183, 194, 195, 197, 199, 201, 203, 209, 210, 213, 214, 215, 216, 217, 218, 219, 273, 317, 318, 327, 387, 390, 403, 411, 413, 435, 436, 449], "bool_": 9, "boolean": [46, 47, 48, 49, 64, 71, 86, 149, 151, 152, 153, 154, 155, 190, 192, 195, 199, 214, 216, 217, 219, 317, 387, 390, 411, 415, 436], "both": [15, 44, 56, 70, 83, 127, 128, 129, 150, 159, 175, 196, 205, 218, 322, 419, 437, 439], "bound": [399, 415], "boundari": 330, "briefli": 449, "broadcast": [13, 28, 29, 44, 50, 51, 56, 64, 82, 88, 127, 128, 145, 175, 176, 193, 195, 196, 197, 198, 199, 203, 204, 208, 209, 210, 214, 216, 217, 218, 219, 326, 327, 330, 331, 387, 389, 411, 412, 413, 416, 420, 431, 436, 439], "broadcast_arrai": [6, 51], "broadcast_shap": 6, "broadcast_to": [6, 50, 420], "buffer": [37, 72, 73, 84, 131, 132, 134, 135, 184, 197, 203, 211, 212, 390], "buffer_lik": 131, "build": 453, "build_loc": 4, "built": 86, "busday_count": 6, "busday_offset": 6, "byte": [6, 40, 84, 86, 88, 131, 132, 184, 273, 289, 293], "byte_bound": 6, "byteord": 86, "byteswap": 6, "bz2": 184, "c": [2, 4, 11, 12, 13, 18, 21, 22, 23, 24, 25, 26, 27, 32, 34, 35, 36, 38, 39, 40, 46, 47, 48, 49, 53, 54, 56, 59, 60, 62, 63, 66, 67, 70, 82, 83, 84, 86, 88, 89, 90, 91, 92, 94, 95, 97, 99, 125, 126, 136, 137, 139, 141, 142, 145, 148, 150, 151, 153, 154, 155, 159, 160, 161, 162, 165, 171, 174, 175, 178, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 198, 204, 208, 273, 278, 286, 299, 316, 317, 318, 320, 321, 325, 326, 328, 384, 386, 388, 390, 392, 393, 398, 402, 403, 404, 405, 407, 408, 412, 417, 418, 419, 420, 431, 432, 439, 440, 441], "c_contigu": [36, 38, 84, 278], "ca": 61, "calcul": [11, 12, 13, 18, 26, 44, 71, 73, 81, 82, 87, 88, 92, 94, 95, 97, 100, 125, 126, 127, 128, 140, 143, 145, 166, 167, 168, 169, 171, 176, 187, 189, 195, 196, 199, 205, 208, 214, 217, 219, 318, 326, 327, 387, 388, 411, 412, 431, 436, 437, 442], "call": [18, 28, 29, 30, 36, 38, 86, 133, 166, 168, 174, 227, 317, 409, 420], "callabl": 133, "can": [0, 3, 4, 13, 15, 20, 30, 32, 34, 35, 36, 37, 38, 39, 40, 44, 46, 47, 48, 49, 52, 62, 70, 76, 77, 79, 80, 82, 83, 84, 86, 88, 89, 90, 91, 92, 99, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 141, 142, 144, 146, 149, 150, 151, 159, 160, 161, 162, 163, 170, 171, 172, 182, 183, 184, 190, 192, 194, 196, 202, 205, 208, 216, 218, 273, 307, 316, 317, 318, 319, 320, 321, 322, 325, 326, 331, 335, 357, 362, 363, 364, 365, 366, 367, 368, 370, 371, 376, 379, 388, 390, 392, 406, 412, 415, 416, 419, 424, 429, 431, 435, 437, 439, 440, 441, 449], "can_cast": [6, 453], "cannot": [58, 84, 209, 210, 305, 409, 410], "capabl": [20, 32, 34, 35, 36, 38, 44, 138, 183, 194, 196], "care": [20, 166], "cartesian": 201, "case": [4, 20, 28, 29, 32, 34, 35, 36, 38, 44, 62, 72, 73, 76, 79, 81, 89, 90, 91, 99, 131, 132, 133, 134, 136, 137, 138, 146, 166, 177, 180, 183, 184, 194, 202, 211, 212, 216, 218, 319, 320, 321, 327, 390, 413, 419, 424, 435, 440, 441, 449], "cast": [40, 52, 58, 64, 71, 72, 73, 84, 88, 144, 166, 195, 196, 199, 211, 212, 214, 216, 217, 218, 219, 273, 327, 387, 397, 410, 411, 413, 436, 438], "cat": [337, 354], "cauchi": 373, "cbrt": [6, 407], "cdef": 89, "cdot": 419, "cdoubl": 9, "ceil": [6, 31, 125, 126, 393, 396, 432], "center": [105, 110], "central": [355, 356], "certain": 86, "cfloat": 9, "chain": [83, 84, 88, 89], "chang": [40, 62, 70, 84, 86, 88, 211, 212, 273, 310, 314, 316, 324, 325, 330, 331, 332, 384, 390, 395, 434, 453], "channel": 4, "char": 86, "charact": [86, 132], "check": [34, 35, 52, 163, 176, 179], "check_valid": 353, "chi": [339, 355], "chisquar": 6, "choic": [6, 55, 84, 167, 169, 274], "choicelist": 400, "choleski": 6, "choos": [6, 18, 25, 84, 89, 439, 449], "chosen": [143, 439], "circl": 178, "clamp": [330, 415], "class": [3, 84, 86, 87, 121, 131, 132, 133, 135, 149, 184, 335, 363, 424, 453], "classic": 88, "clear": [86, 449], "clip": [6, 84, 330, 415, 449], "close": [21, 22, 23, 25, 39, 40, 84, 88, 96, 183, 273, 335, 363, 393, 396], "closer": 432, "cloud": 3, "cmake": 4, "co": [6, 21, 67, 168, 404, 417], "code": [37, 86, 157], "coeffici": [171, 179, 182], "coerc": [37, 131, 132, 133, 134, 135, 184], "coin": 337, "col": 149, "collaps": [84, 286], "column": [6, 34, 35, 36, 38, 39, 40, 57, 58, 72, 73, 80, 84, 85, 99, 123, 124, 144, 146, 166, 167, 171, 174, 177, 180, 273, 286, 384, 397, 410, 424, 426, 429, 435, 438], "column_stack": [6, 58, 85, 144, 397, 410, 438], "combin": [0, 86, 96], "combinatori": 89, "comma": [86, 88], "command": 4, "common": [317, 419], "common_typ": 6, "compani": [337, 354], "compar": [15, 92, 198, 204], "compare_chararrai": 6, "comparison": [2, 92, 141, 142, 161, 162, 318, 442, 453], "compat": [3, 40, 44, 84, 195, 199, 213, 214, 215, 217, 219, 273, 387, 390, 411, 436, 453], "compil": [4, 86, 139], "complement": 434, "complementari": [126, 129, 205], "complet": [3, 4, 89, 132, 133, 177, 395, 449], "complex": [9, 11, 12, 18, 25, 26, 52, 71, 83, 84, 86, 89, 93, 120, 148, 166, 167, 168, 169, 177, 178, 180, 195, 196, 217, 219, 276, 277, 328, 385, 387, 411, 436, 437, 449, 453], "complex128": [9, 44, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 391], "complex64": [9, 44, 101, 107], "compliant": 84, "complic": 88, "compon": [105, 110, 120, 148, 385], "compos": 63, "composit": [159, 413, 423], "compress": [6, 415, 449], "comput": [4, 18, 21, 22, 23, 24, 25, 26, 27, 31, 44, 46, 47, 48, 49, 53, 59, 60, 66, 67, 71, 72, 73, 81, 88, 94, 95, 96, 97, 100, 101, 102, 103, 104, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 125, 141, 142, 143, 148, 149, 151, 159, 161, 162, 164, 165, 166, 167, 168, 169, 170, 174, 175, 176, 177, 178, 180, 181, 182, 185, 186, 187, 188, 190, 191, 192, 193, 195, 196, 199, 200, 205, 211, 212, 213, 214, 215, 216, 217, 218, 219, 316, 325, 328, 385, 386, 387, 388, 393, 396, 398, 402, 403, 404, 405, 407, 411, 413, 417, 418, 419, 436], "compute_uv": [164, 180], "concaten": [6, 57, 85, 144, 397, 410, 416, 438], "concept": [20, 32, 34, 35, 36, 37, 38, 62, 76, 79, 90, 91, 99, 131, 132, 133, 134, 135, 136, 137, 138, 146, 149, 183, 184, 194, 202, 319, 320, 321, 335, 357, 362, 363, 364, 365, 366, 367, 368, 370, 371, 376, 379, 424, 435, 440, 441, 449], "cond": [6, 170], "condit": [40, 83, 84, 98, 164, 170, 174, 273, 317, 324, 330, 332, 400, 439], "condlist": 400, "conj": [6, 60, 84, 148, 163, 166, 328], "conjug": [6, 59, 83, 84, 148, 163, 166, 167, 168, 169, 196, 276, 328, 437], "consecut": [81, 87], "conserv": 201, "consid": [20, 32, 34, 35, 36, 38, 89, 138, 153, 167, 169, 173, 183, 194, 196, 335, 363], "consist": [33, 132, 182, 183, 416, 419], "constant": [9, 86], "constraint": 44, "construct": [34, 35, 55, 76, 79, 80, 84, 86, 99, 131, 132, 133, 134, 135, 146, 184, 202, 274, 319, 389, 420, 439, 442], "constructor": 449, "consum": [84, 293], "contain": [11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 46, 47, 48, 49, 53, 54, 56, 59, 60, 63, 64, 66, 67, 70, 71, 80, 82, 84, 86, 92, 94, 95, 97, 125, 126, 130, 135, 139, 141, 142, 143, 145, 148, 149, 151, 160, 161, 162, 167, 177, 180, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 198, 199, 204, 208, 209, 210, 213, 214, 215, 217, 219, 302, 316, 317, 318, 325, 326, 328, 335, 385, 386, 387, 388, 392, 393, 396, 398, 402, 403, 404, 405, 407, 408, 411, 412, 417, 418, 422, 426, 429, 431, 432, 436, 449], "content": [36, 84, 372], "contigu": [34, 35, 36, 38, 83, 84, 88, 174, 286, 299, 384, 390], "continu": [335, 367], "contourf": 201, "contract": [88, 89, 419], "contrast": 330, "contribut": [44, 143], "control": [4, 40, 52, 58, 64, 84, 88, 144, 196, 273, 397, 410, 438], "conveni": [84, 314, 335], "convent": [83, 88, 89, 150, 182, 196, 322, 419], "convers": [40, 84, 88, 273, 442], "convert": [28, 29, 32, 34, 35, 36, 37, 38, 39, 41, 42, 43, 62, 74, 75, 76, 79, 86, 89, 96, 136, 137, 138, 183, 194, 333, 334, 434, 435], "convolut": [61, 65], "convolv": [6, 65], "coordin": [68, 133, 201], "copi": [6, 20, 30, 32, 34, 35, 36, 37, 38, 40, 41, 42, 43, 64, 76, 79, 84, 86, 90, 91, 99, 131, 132, 133, 134, 135, 136, 137, 138, 146, 149, 183, 184, 194, 201, 202, 227, 273, 286, 288, 296, 302, 305, 319, 320, 321, 323, 325, 335, 357, 362, 363, 364, 365, 366, 367, 368, 370, 376, 379, 390, 399, 406, 409, 424, 425, 428, 435, 440, 441, 449], "copysign": [6, 316, 325], "copyto": [6, 84, 278], "core": [3, 86, 88, 449], "corrcoef": [6, 69], "correct": [11, 12, 13, 18, 21, 22, 23, 24, 25, 26, 27, 31, 46, 47, 48, 49, 53, 54, 58, 59, 60, 63, 66, 67, 82, 92, 94, 95, 97, 125, 126, 141, 142, 145, 148, 151, 153, 154, 155, 160, 161, 162, 179, 185, 186, 187, 188, 189, 190, 191, 192, 193, 198, 204, 208, 316, 318, 325, 326, 328, 386, 388, 392, 393, 396, 398, 402, 403, 404, 405, 407, 408, 410, 412, 417, 418, 431, 432], "correctli": [18, 25, 28, 29, 175, 197, 203, 209, 210, 216, 218, 317, 327, 413], "correl": [6, 453], "correspond": [6, 20, 28, 29, 32, 34, 35, 36, 37, 38, 56, 58, 62, 76, 79, 80, 84, 90, 91, 99, 131, 132, 133, 134, 135, 136, 137, 138, 146, 149, 166, 167, 183, 184, 194, 196, 202, 282, 319, 320, 321, 335, 357, 362, 363, 364, 365, 366, 367, 368, 370, 371, 376, 379, 394, 401, 411, 419, 422, 424, 435, 436, 440, 441, 449], "cosh": [6, 22, 66, 405, 418], "cosin": [21, 22, 23, 24, 25, 26, 27, 66, 67, 404, 405, 417, 418], "cost": [88, 89], "costli": 89, "could": [84, 307], "count": [45, 68, 86, 89, 122, 131, 132, 134, 135, 143, 317, 327, 337, 413, 442, 453], "count_nonzero": [6, 317], "counterpart": 449, "cov": [6, 353], "covari": 69, "cover": 453, "cpu": [4, 14, 15, 19, 20, 32, 34, 35, 36, 38, 62, 65, 69, 76, 79, 87, 90, 91, 93, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 127, 128, 129, 131, 132, 133, 134, 136, 137, 138, 140, 146, 152, 183, 184, 194, 200, 202, 205, 206, 216, 319, 320, 321, 322, 324, 330, 415, 423, 424, 435, 440, 441], "creat": [3, 4, 20, 32, 34, 35, 36, 37, 38, 62, 76, 77, 79, 80, 84, 86, 89, 90, 91, 99, 130, 131, 132, 133, 134, 135, 136, 137, 138, 146, 149, 183, 184, 194, 202, 278, 319, 320, 321, 331, 335, 357, 362, 363, 364, 365, 366, 367, 368, 370, 371, 376, 379, 424, 435, 440, 441, 449, 453], "creation": [86, 89, 442, 449, 453], "cross": [6, 65], "csingl": 9, "cube": [53, 407], "cubic": 89, "cumprod": [6, 84, 211, 449], "cumproduct": 6, "cumsum": [6, 81, 84, 212, 413, 449], "cumul": [71, 72, 73, 81, 84, 211, 212, 279, 280, 413], "cupi": [2, 442], "current": [11, 12, 13, 15, 21, 22, 23, 24, 25, 26, 27, 46, 47, 48, 49, 53, 54, 56, 63, 66, 67, 82, 86, 87, 89, 94, 95, 97, 100, 125, 126, 127, 128, 129, 132, 140, 145, 146, 151, 160, 186, 187, 188, 189, 198, 204, 205, 206, 208, 316, 325, 326, 328, 386, 388, 392, 393, 398, 402, 403, 404, 405, 412, 417, 418, 423, 431, 432], "custom": 449, "cut": 171, "cutoff": 176, "cyclic": 330, "cython": 4, "d": [0, 20, 44, 57, 58, 72, 73, 76, 77, 79, 80, 83, 85, 86, 99, 102, 103, 104, 108, 109, 113, 114, 116, 117, 118, 123, 124, 135, 144, 146, 150, 165, 167, 168, 174, 175, 178, 196, 201, 211, 212, 218, 317, 326, 327, 330, 340, 384, 390, 397, 399, 401, 410, 413, 415, 419, 420, 435, 438, 449], "d0": [335, 362, 364], "d1": [335, 364], "d3": 77, "data": [1, 3, 4, 11, 12, 13, 14, 15, 18, 19, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 44, 46, 47, 48, 49, 51, 52, 53, 54, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 71, 75, 76, 79, 82, 83, 84, 86, 87, 88, 90, 91, 92, 93, 94, 95, 97, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 120, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 160, 161, 162, 171, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 204, 205, 206, 208, 209, 210, 213, 214, 215, 216, 217, 219, 273, 302, 314, 316, 318, 320, 321, 322, 325, 326, 328, 330, 331, 334, 335, 336, 337, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 354, 357, 358, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 390, 392, 393, 394, 395, 396, 397, 398, 399, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 415, 416, 417, 418, 423, 424, 431, 432, 434, 436, 438, 439, 440, 441, 442, 453], "datatyp": [86, 173], "date": 4, "datetim": 86, "datetime_as_str": 6, "datetime_data": 6, "dcmake_c_compil": 4, "dcmake_cxx_compil": 4, "ddof": [69, 84, 217, 219, 309, 315, 411, 436], "decai": 348, "decim": [31, 84, 120, 303, 393, 396], "decomposit": [163, 170, 173, 176, 180, 453], "decompress": 184, "def": 0, "default": [3, 11, 12, 13, 14, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 40, 44, 46, 47, 48, 49, 50, 51, 53, 54, 56, 58, 59, 60, 62, 63, 65, 66, 67, 69, 70, 71, 72, 73, 76, 79, 80, 81, 82, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 97, 99, 101, 107, 119, 122, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 148, 149, 151, 153, 154, 155, 160, 161, 162, 163, 164, 167, 169, 171, 173, 175, 176, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 273, 278, 286, 316, 318, 319, 320, 321, 323, 325, 326, 327, 328, 330, 335, 339, 357, 362, 363, 364, 365, 366, 367, 368, 370, 371, 373, 374, 376, 379, 384, 386, 387, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 415, 417, 418, 419, 421, 422, 424, 425, 426, 428, 429, 431, 432, 435, 436, 438, 439, 440, 441, 449], "default_rng": 6, "defg": 89, "defici": 173, "defin": [70, 86, 91, 137, 143, 321, 325, 441, 449], "definit": [70, 125, 163], "deg": [18, 334], "deg2rad": [6, 333, 334, 434], "degre": [6, 18, 74, 217, 219, 333, 334, 377, 411, 434, 436], "delet": 6, "delta": [217, 219, 411, 434, 436], "demonstr": [0, 4, 86], "dens": [149, 202], "densiti": 143, "depend": [4, 80, 167, 171, 177, 179, 180, 183, 216, 218, 400, 439], "deprec": 6, "deprecate_with_doc": 6, "depth": [57, 58, 85, 144, 397, 410, 438], "descend": 180, "descr": 86, "describ": [71, 86, 195, 387, 453], "descript": [71, 86, 143, 195, 387, 449], "desir": [20, 32, 34, 35, 36, 38, 39, 51, 90, 91, 99, 136, 137, 138, 146, 183, 194, 320, 321, 420, 424, 440, 441], "destin": [58, 144, 207, 330, 331, 397, 410, 416, 438], "det": [6, 178], "detail": [31, 130, 396, 426, 427, 429, 430, 449], "determin": [13, 18, 21, 22, 23, 24, 25, 26, 27, 46, 48, 49, 53, 63, 66, 67, 82, 94, 95, 97, 126, 132, 133, 135, 145, 158, 160, 165, 171, 177, 178, 185, 186, 187, 188, 189, 196, 198, 204, 208, 326, 386, 388, 392, 398, 402, 404, 405, 407, 408, 412, 417, 418, 431, 432], "devel": 4, "develop": [3, 4], "deviat": [84, 199, 214, 217, 219, 309, 335, 350, 357, 411, 436], "devic": [0, 2, 3, 20, 32, 34, 35, 36, 37, 38, 44, 62, 71, 76, 79, 84, 90, 91, 99, 130, 131, 132, 133, 134, 135, 136, 137, 138, 146, 149, 183, 184, 194, 195, 196, 199, 202, 214, 217, 219, 319, 320, 321, 335, 357, 362, 363, 364, 365, 366, 367, 368, 370, 371, 376, 379, 387, 409, 411, 424, 435, 436, 440, 441], "df": [339, 355, 377, 378], "dfden": [343, 356], "dfnum": [343, 356], "di": 77, "diag": [6, 79, 80, 88, 99, 123, 124, 146, 166, 168, 180], "diag_indic": [6, 78, 119], "diag_indices_from": [6, 77, 119], "diagflat": [6, 76, 80], "diagon": [6, 76, 77, 78, 79, 84, 88, 99, 119, 146, 163, 167, 168, 169, 421, 424, 425, 426, 427, 428, 429, 430, 449], "dice": 352, "dictionari": 86, "diff": [6, 73, 87, 140, 143], "differ": [3, 15, 20, 32, 34, 35, 36, 38, 44, 62, 71, 73, 76, 79, 81, 84, 86, 87, 90, 91, 99, 120, 123, 124, 131, 132, 133, 134, 136, 137, 138, 140, 146, 169, 183, 184, 194, 195, 196, 202, 278, 319, 320, 321, 326, 387, 412, 424, 435, 440, 441, 453], "digit": [6, 120, 143], "dim": 15, "dimens": [28, 29, 32, 41, 42, 43, 44, 57, 58, 64, 69, 70, 77, 80, 81, 84, 86, 96, 123, 124, 144, 149, 150, 173, 175, 177, 195, 197, 199, 201, 202, 203, 207, 209, 210, 213, 214, 215, 216, 217, 218, 219, 286, 294, 305, 317, 319, 327, 331, 335, 365, 367, 368, 370, 387, 390, 401, 409, 410, 411, 413, 414, 416, 420, 426, 427, 429, 430, 436, 449, 453], "dimension": [2, 4, 30, 61, 65, 68, 71, 77, 78, 79, 80, 81, 84, 88, 101, 102, 103, 104, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 131, 132, 134, 171, 177, 181, 182, 195, 197, 201, 202, 203, 209, 210, 213, 215, 217, 219, 308, 319, 327, 387, 406, 411, 413, 420, 436, 437, 442], "direct": [70, 81, 123, 124], "directli": [86, 133, 149, 194, 317, 416], "directori": 139, "dirichlet": 6, "discard": 432, "discret": [3, 61, 65, 73, 81, 87, 101, 102, 103, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 140, 335, 442], "disp": 6, "dispers": 380, "displac": [84, 310], "distinguish": 86, "distribut": [3, 4, 194, 335, 336, 337, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 366, 367, 369, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 453], "divid": [6, 85, 126, 129, 205, 388, 431], "divis": [82, 126, 127, 128, 129, 205, 326, 388, 431, 432], "divisor": [217, 219, 411, 436], "divmod": [6, 449], "dlpack": 130, "dmlc": 130, "dn": [335, 362, 364], "do": [3, 4, 86, 337, 395], "docstr": 449, "document": [0, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 287, 288, 290, 291, 292, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 428, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 449], "doe": [20, 52, 177, 211, 212], "done": [3, 40, 84, 88, 182, 273], "dot": [6, 84, 88, 89, 150, 163, 168, 170, 174, 176, 177, 179, 180, 181, 182, 196, 419, 437], "doubl": [9, 348, 419], "down": 124, "dp": [82, 165, 167, 178, 179, 326, 390, 391, 401, 412, 431], "dparrai": 454, "dpcpp": 4, "dpcpp_linux": 4, "dpcpp_win": 4, "dpctl": [0, 4, 14, 15, 19, 20, 32, 34, 35, 36, 37, 38, 62, 68, 76, 79, 84, 90, 91, 98, 99, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 146, 149, 183, 184, 194, 202, 205, 209, 210, 213, 215, 216, 319, 320, 321, 322, 324, 329, 330, 335, 357, 362, 363, 364, 365, 366, 367, 368, 370, 371, 376, 379, 415, 424, 435, 440, 441], "dpnp": [0, 2, 3, 4, 442, 449, 453, 454, 457], "dpnp_arrai": [20, 32, 34, 35, 36, 38, 62, 76, 79, 90, 91, 99, 120, 130, 131, 132, 133, 134, 135, 136, 137, 138, 146, 147, 149, 183, 184, 194, 202, 220, 319, 320, 321, 335, 357, 362, 363, 364, 365, 366, 367, 368, 370, 371, 376, 379, 424, 425, 428, 435, 440, 441, 442], "dpnp_iface_arraycr": [202, 319], "draw": [335, 336, 337, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 361, 363, 369, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382], "drawn": [335, 336, 337, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 357, 358, 360, 361, 363, 366, 369, 375, 376, 377, 378, 379, 380, 381, 382, 383, 400], "drill": [337, 354], "driver": 2, "drop": [3, 86], "dsplit": [6, 58, 85], "dst": 64, "dstack": [6, 57, 58, 144, 397, 410, 438], "dt": 86, "dt2": 86, "dtype": [0, 9, 11, 12, 13, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 34, 35, 36, 37, 38, 40, 44, 46, 47, 48, 49, 52, 53, 54, 58, 59, 60, 63, 66, 67, 69, 71, 72, 73, 77, 82, 84, 88, 90, 91, 92, 94, 95, 97, 99, 120, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 153, 154, 155, 160, 161, 162, 174, 180, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 203, 204, 205, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 273, 279, 280, 291, 297, 309, 311, 315, 316, 318, 320, 321, 325, 326, 327, 328, 335, 357, 363, 379, 386, 387, 388, 391, 392, 393, 396, 397, 398, 402, 403, 404, 405, 407, 408, 410, 411, 412, 413, 417, 418, 421, 424, 425, 428, 431, 432, 436, 438, 440, 441, 449], "dump": 6, "dx": 423, "e": [9, 22, 24, 71, 72, 86, 90, 91, 96, 99, 132, 136, 137, 146, 160, 166, 178, 181, 185, 320, 321, 335, 414, 424, 440, 441], "ea": 89, "each": [0, 11, 12, 13, 18, 21, 22, 23, 24, 25, 26, 27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 59, 60, 63, 66, 67, 72, 73, 80, 82, 84, 86, 89, 92, 94, 95, 97, 123, 124, 125, 126, 133, 141, 142, 143, 148, 151, 153, 154, 155, 160, 161, 162, 166, 167, 168, 169, 171, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 207, 208, 303, 305, 316, 317, 318, 325, 326, 328, 331, 337, 354, 385, 386, 388, 389, 392, 393, 394, 396, 398, 402, 403, 404, 405, 407, 408, 410, 412, 416, 417, 418, 420, 426, 429, 431, 432, 449], "easiest": 4, "easili": 0, "edg": [56, 143], "ediff1d": [6, 81], "effect": [89, 326], "effici": [132, 173, 176, 180], "efgh": 89, "eig": [6, 167, 168, 169], "eigenvalu": [166, 167, 168, 169, 453], "eigenvector": [166, 167, 168, 169], "eigh": [6, 166, 168, 169], "eigval": [6, 166, 167, 169], "eigvalsh": [6, 166, 167, 168], "einstein": [83, 88, 89, 150, 182, 196, 322, 419], "einsum": [6, 83, 89, 150, 182, 196, 322, 419], "einsum_path": [6, 88], "either": [14, 15, 19, 38, 44, 68, 71, 80, 86, 98, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 127, 128, 129, 150, 152, 167, 169, 175, 177, 195, 205, 209, 210, 213, 215, 216, 218, 322, 324, 330, 387, 399, 415, 416], "element": [4, 11, 12, 13, 14, 15, 18, 19, 21, 22, 23, 24, 25, 26, 27, 30, 31, 33, 44, 45, 46, 47, 48, 49, 53, 54, 56, 59, 60, 63, 64, 66, 67, 71, 72, 73, 80, 81, 82, 84, 86, 87, 89, 92, 94, 95, 97, 98, 99, 100, 122, 123, 124, 125, 126, 127, 128, 129, 135, 141, 142, 143, 145, 146, 148, 149, 151, 152, 153, 154, 155, 160, 161, 162, 163, 168, 172, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 203, 204, 205, 206, 208, 211, 212, 213, 215, 216, 217, 218, 219, 268, 269, 276, 277, 279, 280, 282, 283, 286, 288, 289, 291, 293, 295, 296, 301, 302, 303, 304, 306, 309, 310, 313, 315, 316, 317, 318, 324, 325, 326, 327, 328, 330, 332, 384, 385, 386, 387, 388, 389, 390, 392, 393, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 411, 412, 413, 415, 417, 418, 419, 420, 425, 428, 431, 432, 433, 436, 439, 449, 453, 457], "ellipsi": 88, "els": [0, 178, 225], "elsewher": [99, 146, 424, 439], "empti": [4, 6, 32, 84, 91, 132, 136, 137, 171, 283, 320, 321, 440, 441], "empty_lik": [6, 32, 90, 137, 321, 441], "enabl": [173, 176, 180], "encount": [211, 212, 213, 215], "end": [20, 80, 86, 89, 138, 183, 194], "end_tim": 0, "endian": 86, "endpoint": [20, 138, 183, 194], "engin": 371, "enough": 143, "entir": [44, 71, 143, 195, 199, 213, 214, 215, 217, 219, 387, 411, 436], "entri": [84, 86, 90, 122, 123, 124, 308, 409], "env": 4, "environ": 4, "ep": [120, 173], "epsilon": 173, "epsneg": 120, "equal": [6, 14, 15, 19, 33, 44, 58, 65, 69, 73, 84, 99, 138, 141, 142, 143, 144, 152, 157, 160, 161, 162, 172, 176, 177, 182, 183, 194, 296, 318, 335, 345, 379, 388, 392, 393, 396, 397, 402, 409, 410, 424, 426, 429, 438], "equal_nan": [33, 152], "equat": [171, 179, 181, 182, 453], "equiv": [40, 52, 58, 64, 84, 88, 144, 172, 196, 273, 397, 410, 438], "equival": [13, 14, 16, 17, 19, 28, 29, 30, 31, 44, 62, 70, 71, 82, 83, 84, 85, 89, 96, 181, 195, 208, 227, 268, 269, 281, 302, 314, 317, 325, 334, 335, 363, 387, 388, 390, 396, 401, 406, 412, 413, 419, 422, 431, 449], "error": [71, 93, 166, 195, 387, 409, 442, 449], "essenti": 4, "estim": [69, 337, 354], "etc": [86, 354], "euclidean": 171, "euler_gamma": 9, "evalu": [14, 15, 19, 84, 88, 89, 92, 182, 201, 268, 269, 322, 419, 449], "even": [86, 393, 396], "evenli": [20, 138, 183, 194, 393], "everi": [331, 416], "exact": 174, "exactli": [39, 74, 135, 333, 335, 363], "examin": 171, "exampl": [2, 3, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 273, 278, 281, 283, 287, 288, 296, 300, 302, 307, 310, 314, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 334, 335, 336, 337, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441], "except": [4, 11, 12, 13, 15, 20, 21, 22, 23, 24, 25, 26, 27, 30, 32, 34, 35, 36, 38, 46, 47, 48, 49, 50, 51, 53, 54, 56, 58, 59, 60, 62, 63, 66, 67, 68, 81, 82, 83, 84, 90, 91, 92, 94, 95, 97, 99, 101, 107, 115, 125, 126, 131, 132, 133, 134, 135, 136, 137, 141, 142, 144, 145, 146, 151, 153, 154, 155, 160, 161, 162, 174, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 203, 204, 208, 213, 214, 215, 216, 217, 218, 219, 273, 305, 316, 318, 320, 321, 325, 326, 327, 328, 386, 388, 389, 390, 392, 393, 398, 402, 403, 404, 405, 406, 407, 408, 411, 412, 413, 417, 418, 431, 432, 436, 440, 441], "exclud": [11, 12, 183, 335, 379], "exclus": [335, 363], "execut": [3, 4, 14, 15, 19, 34, 35, 65, 69, 87, 93, 98, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 127, 128, 129, 133, 140, 152, 200, 205, 206, 216, 322, 324, 330, 338, 340, 341, 351, 356, 372, 415, 423], "executor": 0, "exist": [57, 58, 85, 86, 96, 144, 390, 397, 410, 438, 453], "exp": [6, 95, 97, 178, 187, 189, 195], "exp2": [6, 94, 97], "expand": [81, 96], "expand_dim": [6, 28, 29], "expect": [4, 11, 12, 13, 18, 21, 22, 23, 24, 25, 26, 27, 31, 46, 47, 48, 49, 53, 54, 59, 60, 63, 66, 67, 71, 72, 73, 82, 83, 86, 92, 94, 95, 97, 125, 126, 141, 142, 145, 148, 151, 153, 154, 155, 160, 161, 162, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 197, 198, 199, 203, 204, 208, 211, 212, 214, 216, 217, 218, 219, 316, 318, 325, 326, 327, 328, 385, 386, 387, 388, 392, 393, 396, 398, 402, 403, 404, 405, 407, 408, 411, 412, 413, 417, 418, 431, 432, 436, 439], "explain": 449, "explan": 86, "explicit": 88, "explor": [89, 337, 354], "expm1": [6, 94, 95, 187], "expon": [94, 95, 97, 172, 189, 195, 326, 361, 453], "exponenti": [6, 89, 189, 195, 348, 374], "expos": [131, 449], "express": [26, 88, 89, 184], "extend": [86, 159, 449], "extens": [0, 1, 3, 4, 9, 139, 184, 442], "extobj": 196, "extra": [86, 135], "extract": [6, 76, 79, 80, 88, 99, 146, 149], "extrema": 453, "ey": [6, 59, 60, 68, 84, 127, 128, 146, 150, 159, 170, 172, 173, 181, 182, 193, 198, 204, 401], "f": [0, 6, 11, 12, 13, 18, 21, 22, 23, 24, 25, 26, 27, 32, 34, 35, 36, 38, 39, 40, 46, 47, 48, 49, 53, 54, 56, 59, 60, 62, 63, 66, 67, 82, 84, 86, 88, 90, 91, 92, 94, 95, 97, 99, 125, 126, 136, 137, 141, 142, 145, 148, 151, 153, 154, 155, 160, 161, 162, 172, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 198, 204, 208, 273, 278, 286, 316, 318, 320, 321, 325, 326, 328, 356, 384, 386, 388, 390, 392, 393, 398, 402, 403, 404, 405, 407, 408, 412, 417, 418, 431, 432, 439, 440, 441], "f0": 86, "f1": 86, "f2": 86, "f4": 52, "f8": [52, 86], "f_contigu": [36, 38], "fab": [6, 11, 12], "fact": 168, "factor": [163, 177], "fail": 337, "fallback": [166, 168, 338, 340, 341, 351, 356, 372], "fals": [14, 15, 16, 17, 18, 19, 28, 29, 32, 33, 36, 38, 40, 44, 46, 47, 49, 50, 51, 52, 62, 68, 69, 71, 73, 84, 86, 88, 89, 91, 92, 119, 133, 137, 138, 141, 142, 143, 149, 151, 152, 153, 154, 155, 161, 162, 163, 164, 173, 175, 176, 180, 183, 190, 191, 192, 193, 194, 195, 197, 199, 200, 201, 203, 209, 210, 213, 214, 215, 216, 217, 218, 219, 225, 268, 269, 270, 271, 273, 290, 291, 292, 297, 309, 311, 315, 317, 318, 321, 327, 329, 387, 390, 403, 411, 413, 435, 436, 439, 441, 449], "fanci": 415, "fashion": 449, "fastcopyandtranspos": 6, "fastest": [384, 390], "fb": 89, "featur": 86, "fft": [6, 442, 453], "fft2": 6, "fftfreq": 6, "fftn": 6, "fftshift": 6, "fh": 132, "field": [86, 201], "field1": 86, "file": [131, 132, 134, 135, 139, 184], "filenam": [132, 184], "fill": [6, 32, 84, 90, 91, 119, 136, 137, 143, 201, 278, 320, 321, 415, 424, 440, 441], "fill_diagon": 6, "fill_valu": [136, 137], "filter": [20, 32, 34, 35, 36, 37, 38, 62, 76, 79, 90, 91, 99, 131, 132, 133, 134, 135, 136, 137, 138, 146, 149, 183, 184, 194, 202, 319, 320, 321, 335, 357, 362, 363, 364, 365, 366, 367, 368, 370, 371, 376, 379, 424, 435, 440, 441], "final": [4, 138, 194], "find": [45, 84, 143, 173, 176, 180, 304, 317, 399, 406, 433, 453], "find_common_typ": 6, "fine": 4, "finfo_object": 120, "finit": [153, 154, 155], "first": [13, 26, 28, 29, 30, 44, 46, 48, 49, 57, 58, 63, 70, 71, 80, 82, 83, 86, 89, 92, 95, 122, 126, 141, 142, 143, 145, 150, 157, 158, 159, 160, 161, 162, 174, 181, 184, 189, 190, 192, 193, 196, 197, 198, 201, 203, 204, 208, 209, 210, 318, 326, 327, 384, 388, 390, 392, 394, 397, 399, 406, 408, 412, 413, 414, 416, 419, 431, 437, 438], "fit": [171, 389], "fix": [6, 80, 86, 330], "flag": [36, 38, 84, 86, 278], "flat": [28, 29, 84, 121, 286, 389], "flatnonzero": [6, 317], "flatten": [6, 28, 29, 30, 58, 72, 73, 76, 79, 80, 84, 143, 197, 203, 209, 210, 211, 212, 216, 218, 285, 299, 307, 317, 331, 384, 389, 394, 406, 416, 437], "flexibl": [83, 86, 132, 174], "flip": [6, 47, 80, 123, 124, 151, 337], "fliplr": [6, 80, 122, 124], "flipud": [6, 80, 122, 123], "float": [9, 11, 12, 15, 18, 20, 26, 34, 35, 37, 44, 52, 63, 71, 73, 86, 90, 91, 95, 99, 120, 131, 132, 133, 134, 135, 136, 137, 140, 143, 146, 148, 171, 172, 173, 175, 176, 183, 184, 189, 194, 195, 197, 199, 203, 214, 217, 219, 320, 321, 335, 339, 364, 365, 367, 368, 370, 373, 374, 376, 379, 385, 386, 387, 398, 411, 424, 436, 440, 441, 449, 453], "float16": 9, "float32": [0, 37, 40, 52, 72, 84, 86, 88, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 273, 335, 357, 362, 364, 365, 367, 368, 370, 376, 379, 391], "float64": [0, 37, 40, 44, 52, 73, 84, 86, 88, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 273, 335, 336, 342, 343, 344, 346, 348, 349, 350, 357, 358, 361, 362, 364, 365, 367, 368, 369, 370, 375, 376, 377, 378, 379, 380, 381, 382, 383, 391, 424], "float_": 9, "float_pow": 6, "floor": [6, 31, 54, 126, 388, 393, 396, 432], "floor_divid": [6, 129, 205, 388], "flop": 89, "flush": 132, "fmax": [6, 128, 197, 198, 204, 213, 326], "fmin": [6, 127, 198, 203, 204, 215, 326], "fmod": [6, 127, 128, 205, 326, 388], "fn": 133, "fname": 184, "follow": [4, 44, 86, 96, 120, 147, 167, 169, 176, 419, 449, 453], "forc": [86, 88], "forg": 4, "form": [32, 34, 35, 36, 37, 38, 57, 62, 76, 79, 84, 85, 88, 89, 136, 137, 138, 183, 194, 314, 397, 435, 438], "format": [86, 132, 135, 453], "format_float_posit": 6, "format_float_scientif": 6, "forth": 419, "fortran": [38, 40, 84, 273, 286, 384, 390], "found": [4, 399, 449], "four": [335, 364], "fourier": [101, 102, 103, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 442], "fraction": [206, 432], "free": [84, 302], "freedom": [217, 219, 377, 411, 436], "frequenc": [103, 105, 110, 117], "frexp": 6, "fro": [164, 175], "frobeniu": 164, "from": [3, 28, 29, 30, 34, 35, 50, 52, 55, 58, 64, 71, 74, 75, 80, 84, 85, 86, 88, 95, 98, 122, 130, 131, 132, 133, 134, 135, 143, 144, 166, 168, 169, 173, 174, 184, 195, 201, 274, 278, 308, 313, 327, 331, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 366, 367, 369, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 387, 390, 391, 397, 399, 400, 408, 409, 410, 413, 415, 416, 434, 435, 438, 439, 453], "from_": 52, "from_dlpack": 6, "frombuff": [6, 132, 134, 135, 184], "fromfil": [6, 131, 134, 135], "fromfunct": [6, 34, 35], "fromit": [6, 34, 35, 131, 132, 135], "frompyfunc": 6, "fromregex": [6, 184], "fromstr": [6, 131, 132, 134, 184], "full": [6, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 287, 288, 290, 291, 292, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 428, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441], "full_lik": [6, 32, 91, 136, 321, 441], "full_matric": 180, "fulli": 86, "function": [0, 2, 3, 11, 12, 14, 15, 16, 17, 19, 20, 28, 29, 31, 32, 34, 35, 36, 38, 39, 62, 65, 69, 71, 74, 80, 82, 84, 87, 88, 90, 91, 93, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 139, 140, 143, 146, 152, 166, 168, 174, 184, 187, 189, 195, 200, 201, 205, 206, 216, 268, 269, 278, 281, 302, 314, 320, 321, 322, 324, 330, 333, 334, 335, 338, 340, 341, 351, 356, 372, 387, 388, 396, 397, 402, 411, 415, 416, 420, 423, 431, 436, 438, 439, 440, 441, 442, 449, 453], "fundament": 86, "futur": 86, "fweight": 69, "g": [4, 86, 90, 91, 99, 136, 137, 146, 320, 321, 335, 424, 440, 441], "gamma": [6, 375], "gaussian": [335, 357, 381], "gc": 89, "gca42767a49": 6, "gcd": 6, "gen": 88, "gender": 86, "gener": [30, 44, 86, 138, 150, 166, 167, 168, 169, 176, 177, 184, 194, 335, 337, 340, 371, 435, 449, 453], "genfromtxt": [6, 184], "geometr": [6, 138, 183], "geomspac": [6, 183, 194], "get": [84, 138, 183, 194, 416, 449], "get_arrai": 84, "get_array_wrap": 6, "get_dtyp": 0, "get_includ": 6, "get_printopt": 6, "get_stat": [6, 335], "get_sycl_devic": 335, "get_sycl_queu": 335, "getbufs": 6, "geterr": 6, "geterrcal": 6, "geterrobj": 6, "getfield": [6, 86], "github": 130, "give": [79, 84, 314, 390, 401], "given": [14, 15, 19, 20, 28, 29, 31, 32, 34, 35, 36, 38, 40, 44, 57, 62, 68, 69, 72, 73, 81, 83, 84, 85, 86, 87, 89, 90, 91, 119, 122, 127, 128, 136, 137, 138, 140, 143, 170, 183, 194, 197, 198, 201, 203, 204, 211, 212, 213, 215, 216, 217, 218, 219, 270, 271, 273, 279, 280, 292, 297, 298, 303, 309, 311, 315, 317, 320, 321, 327, 329, 330, 335, 340, 362, 379, 387, 389, 393, 394, 395, 397, 399, 411, 413, 419, 420, 423, 424, 436, 438, 440, 441, 449], "global": 0, "good": 347, "gpu": [0, 3, 4, 20, 32, 34, 35, 36, 38, 62, 76, 79, 90, 91, 99, 131, 132, 133, 134, 136, 137, 138, 146, 183, 184, 194, 202, 319, 320, 321, 424, 435, 440, 441], "grade": 86, "gradient": [6, 81, 171], "graphic": 4, "greater": [6, 84, 92, 126, 142, 160, 161, 162, 173, 177, 296, 318, 392, 402, 409], "greater_equ": [6, 92, 141, 161, 162, 318], "greatest": 126, "greedi": [88, 89], "grid": [34, 35, 133, 149, 201, 202, 319], "guarante": [86, 390], "guid": [2, 3], "gumbel": 6, "gz": 184, "h": [139, 163, 177, 201], "ha": [4, 11, 12, 18, 28, 29, 30, 44, 71, 72, 73, 86, 92, 96, 106, 111, 133, 141, 142, 144, 148, 161, 162, 168, 178, 180, 195, 199, 211, 212, 214, 216, 217, 218, 219, 318, 327, 330, 385, 386, 387, 388, 389, 395, 398, 409, 410, 411, 413, 414, 420, 436, 449], "had": [331, 416], "hadamard": 89, "half": [22, 183, 335, 365, 367, 368, 370, 379, 414], "ham": 6, "han": 6, "hand": [70, 182], "handl": [20, 86, 184, 317, 415, 453], "happen": [40, 44, 84, 273, 337], "hardwar": 4, "has_aspect_fp64": 0, "hasobject": 86, "have": [3, 4, 11, 12, 13, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 41, 42, 43, 44, 46, 47, 48, 49, 51, 53, 54, 57, 58, 59, 60, 63, 66, 67, 70, 71, 72, 73, 82, 83, 85, 86, 92, 94, 95, 97, 120, 125, 126, 141, 142, 144, 145, 148, 151, 153, 154, 155, 160, 161, 162, 171, 174, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 198, 199, 204, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 316, 318, 325, 326, 327, 328, 354, 385, 386, 387, 388, 392, 393, 396, 397, 398, 402, 403, 404, 405, 407, 408, 410, 411, 412, 413, 417, 418, 420, 431, 432, 436, 438, 449], "hd": 89, "header": 139, "heavisid": 6, "hello": 86, "helper": 453, "henc": 96, "here": [6, 30, 86, 406], "hermit": [167, 169], "hermitian": [106, 111, 163, 166, 167, 168, 169, 173, 176, 180, 453], "hfft": 6, "hierarchi": 157, "high": [335, 363, 366, 379], "higher": [88, 437], "highli": 132, "hist": [143, 373], "histogram": [6, 399, 453], "histogram2d": 6, "histogram_bin_edg": [6, 143], "histogramdd": [6, 143], "hold": [56, 72, 73, 143, 175, 211, 212, 216, 218], "homogen": 86, "horizont": [57, 58, 80, 85, 122, 144, 397, 410, 438], "host": [3, 4, 20, 32, 34, 35, 36, 37, 38, 62, 76, 79, 90, 91, 99, 131, 132, 133, 134, 135, 136, 137, 138, 146, 149, 183, 184, 194, 202, 319, 320, 321, 335, 357, 362, 363, 364, 365, 366, 367, 368, 370, 376, 379, 424, 435, 440, 441], "household": 177, "how": [0, 4, 86, 415], "howev": [84, 307], "hsplit": [6, 58], "hstack": [6, 57, 58, 85, 397, 410, 438], "http": [4, 130], "hyperbol": [21, 22, 23, 24, 25, 26, 27, 66, 67, 404, 405, 417, 418, 453], "hypergeometr": 6, "hypot": [6, 387], "hypotenus": [145, 387], "i": [0, 3, 4, 6, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 44, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 227, 273, 278, 286, 296, 302, 307, 310, 314, 316, 317, 318, 319, 320, 321, 323, 325, 326, 327, 328, 329, 330, 331, 334, 335, 336, 337, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 354, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 449], "i0": 6, "i1": [84, 86, 310], "i2": [84, 86, 310], "i3": [84, 310], "i4": [52, 86], "i7": 88, "i8": [52, 86], "icpx": 4, "icx": 4, "id": [84, 288], "ident": [3, 6, 71, 86, 99, 179, 374], "identifi": 86, "ieee": 120, "ifft": 6, "ifft2": 6, "ifftn": 6, "ifftshift": 6, "ignor": [28, 29, 70, 86, 127, 128, 135, 143, 197, 198, 199, 203, 204, 209, 210, 213, 214, 215, 217, 219, 411, 436], "ihfft": 6, "ii": [88, 358], "iinfo": 352, "iinfo_object": 147, "ij": [88, 89, 201], "ijk": 88, "il": 89, "illustr": 168, "ilm": 88, "imag": [6, 84, 449], "imaginari": [84, 148, 166, 167, 169, 172, 287], "implement": [3, 6, 37, 130], "impli": 86, "implicit": 88, "import": [0, 3, 4, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 273, 278, 281, 287, 296, 300, 307, 314, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 334, 360, 369, 373, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441], "improv": 88, "in1d": 6, "in_array1": 93, "includ": [4, 20, 32, 34, 35, 36, 37, 38, 44, 62, 71, 76, 79, 88, 89, 136, 137, 138, 139, 143, 176, 183, 194, 195, 199, 213, 214, 215, 217, 219, 335, 379, 387, 411, 435, 436], "include_initi": 71, "inclus": [335, 363, 366], "increas": [86, 96, 143, 435], "ind": [30, 181, 426, 429], "index": [28, 29, 30, 55, 84, 86, 89, 99, 149, 201, 209, 210, 274, 310, 317, 330, 331, 384, 390, 399, 415, 416, 439, 442, 453], "index_arrai": [28, 29, 30], "indic": [6, 28, 29, 30, 71, 77, 78, 84, 86, 88, 89, 119, 133, 143, 181, 182, 196, 202, 209, 210, 270, 271, 272, 295, 298, 304, 313, 317, 330, 331, 390, 399, 402, 403, 406, 415, 416, 422, 426, 427, 429, 430, 439], "indirect": [30, 406], "individu": 345, "inequ": 318, "inexact": [216, 218], "inf": [9, 15, 22, 26, 34, 35, 63, 82, 153, 154, 155, 164, 175, 185, 186, 188, 198, 204, 209, 210, 213, 215, 218, 328, 407, 431], "infer": [71, 195, 387, 390], "infin": [9, 14, 19, 126, 153, 154, 155, 213, 215, 218, 388, 432, 453], "infinit": 164, "info": 6, "inform": [0, 36, 38, 84, 86, 120, 284, 449, 453], "infti": 9, "initi": [16, 17, 71, 84, 90, 135, 197, 203, 213, 215, 216, 218, 290, 292, 297, 311, 327, 335, 413], "inner": [6, 70, 88, 89, 174, 196, 322], "input": [11, 12, 13, 14, 15, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 53, 54, 56, 59, 60, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 79, 80, 81, 82, 83, 84, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 112, 113, 114, 115, 116, 118, 122, 123, 124, 125, 126, 127, 128, 129, 131, 135, 136, 137, 140, 141, 142, 143, 144, 145, 146, 148, 150, 151, 152, 153, 154, 155, 159, 160, 161, 162, 163, 165, 167, 173, 175, 177, 178, 180, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 273, 286, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 357, 363, 379, 384, 385, 386, 387, 388, 389, 390, 392, 393, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 428, 431, 432, 434, 435, 436, 437, 440, 441], "insert": [6, 28, 29, 80, 84, 88, 96, 138, 143, 183, 194, 209, 210, 213, 215, 304, 331, 399, 453], "instal": 2, "instanc": [3, 20, 32, 34, 35, 36, 37, 38, 62, 76, 79, 84, 90, 91, 99, 131, 132, 133, 134, 135, 136, 137, 138, 146, 149, 183, 184, 194, 196, 202, 319, 320, 321, 335, 357, 362, 363, 364, 365, 366, 367, 368, 370, 371, 376, 379, 424, 435, 440, 441], "instead": [40, 83, 84, 96, 125, 138, 143, 149, 174, 183, 194, 197, 203, 273, 317, 327, 413, 449], "instruct": 4, "int": [9, 20, 28, 29, 30, 31, 37, 44, 51, 58, 70, 71, 72, 73, 76, 77, 79, 80, 81, 84, 86, 90, 91, 92, 96, 99, 120, 122, 131, 132, 133, 134, 135, 136, 137, 138, 140, 143, 146, 147, 149, 171, 172, 175, 181, 182, 183, 194, 195, 197, 199, 203, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 273, 314, 320, 321, 323, 327, 331, 335, 363, 366, 387, 389, 390, 394, 395, 396, 406, 409, 410, 411, 413, 414, 416, 419, 420, 422, 424, 425, 426, 427, 428, 429, 430, 435, 436, 440, 441, 449], "int16": 86, "int32": [0, 9, 37, 52, 86, 90, 91, 99, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 131, 134, 136, 137, 146, 184, 216, 218, 320, 321, 335, 337, 345, 347, 352, 354, 360, 363, 379, 391, 413, 424, 440, 441], "int64": [0, 9, 52, 86, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 216, 218, 391], "int8": [86, 327], "int_": 9, "intc": 9, "integ": [15, 20, 31, 44, 45, 46, 47, 48, 49, 51, 71, 72, 73, 84, 86, 122, 125, 126, 143, 147, 151, 152, 160, 172, 175, 181, 195, 197, 199, 203, 211, 212, 213, 214, 215, 216, 217, 218, 219, 307, 314, 327, 330, 335, 363, 366, 371, 387, 388, 390, 392, 393, 394, 396, 399, 401, 408, 411, 413, 415, 419, 432, 436, 449], "integer_lik": 419, "integr": [3, 4, 44, 71, 143, 195, 199, 206, 214, 217, 219, 326, 387, 411, 413, 423, 436], "intel": [3, 4, 88], "intend": [84, 314], "interchang": [84, 207, 312, 414], "interfac": [0, 131], "intermedi": [72, 88, 89], "intern": 335, "interp": 6, "interpret": [2, 34, 35, 39, 51, 62, 86, 131, 317, 449], "intersect1d": 6, "interv": [20, 21, 22, 23, 25, 96, 138, 183, 194, 335, 363, 365, 367, 368, 370, 378, 379, 414], "intp": [216, 218], "intrins": 449, "introduc": 394, "introselect": [84, 296, 323], "inv": [6, 164, 176], "invers": [18, 21, 22, 23, 24, 25, 26, 27, 66, 67, 95, 96, 97, 107, 108, 109, 110, 111, 112, 113, 114, 170, 176, 181, 182, 187, 381, 404, 405, 417, 418], "invert": [6, 47, 170, 176, 181], "invok": 449, "involv": [84, 181, 305], "io": [130, 184], "irfft": 6, "irfft2": 6, "irfftn": 6, "irrespect": 30, "is_busdai": 6, "isalignedstruct": 86, "isbuiltin": 86, "isclos": [6, 15], "iscomplex": 6, "iscomplexobj": 6, "isfinit": [6, 154, 155, 213, 215, 218], "isfortran": 6, "isin": 6, "isinf": [6, 153, 155], "isn": 86, "isnan": [6, 153, 154, 211, 212, 213, 215, 216, 218], "isnat": [6, 155], "isneginf": [6, 153, 154, 155], "isposinf": [6, 153, 154, 155], "isreal": 6, "isrealobj": 6, "isscalar": 6, "issctyp": 6, "issubclass_": 6, "issubdtyp": 6, "issubsctyp": 6, "item": [6, 84, 131, 132, 134, 442], "item_dtyp": 86, "item_hasobject": 86, "item_is_point": 86, "items": [84, 86], "itemset": 6, "iter": [6, 34, 35, 84, 89, 121, 131, 132, 134, 135, 285, 453], "its": [4, 6, 11, 12, 30, 44, 76, 84, 101, 107, 120, 143, 146, 166, 167, 168, 169, 174, 176, 182, 199, 214, 217, 219, 314, 372, 384, 387, 390, 406, 411, 422, 424, 436, 449], "itself": [40, 84, 86, 273, 449], "ix_": 6, "j": [59, 60, 84, 88, 133, 148, 149, 159, 163, 166, 167, 188, 196, 314, 328, 331, 408, 416, 419], "j1": 159, "ji": 88, "jil": 88, "jk": [88, 89], "jl": 89, "join": [57, 58, 85, 144, 397, 410, 438, 453], "jump": [74, 333], "just": [57, 80, 86], "k": [11, 12, 13, 18, 21, 22, 23, 24, 25, 26, 27, 32, 34, 35, 39, 40, 46, 47, 48, 49, 53, 54, 56, 59, 60, 62, 63, 66, 67, 76, 79, 82, 84, 88, 92, 94, 95, 97, 99, 125, 126, 141, 142, 145, 148, 151, 153, 154, 155, 159, 160, 161, 162, 171, 177, 179, 180, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 198, 204, 205, 208, 227, 273, 278, 286, 316, 318, 325, 326, 328, 386, 388, 392, 393, 398, 402, 403, 404, 405, 407, 408, 412, 417, 418, 419, 424, 425, 426, 427, 428, 429, 430, 431, 432, 439, 457], "kaiser": 6, "kappa": 380, "keep": [39, 40, 84, 273], "keepdim": [14, 16, 17, 19, 28, 29, 44, 68, 84, 175, 195, 197, 199, 200, 203, 209, 210, 213, 214, 215, 216, 217, 218, 219, 268, 269, 270, 271, 290, 291, 292, 297, 309, 311, 315, 327, 329, 331, 387, 411, 413, 416, 436], "kei": [3, 30, 84, 86, 121, 232, 263, 406], "key2": 86, "keyword": [11, 12, 13, 15, 21, 22, 23, 24, 25, 26, 27, 46, 47, 48, 49, 53, 54, 56, 63, 66, 67, 70, 82, 87, 94, 95, 97, 100, 125, 126, 127, 128, 129, 133, 140, 145, 151, 160, 186, 187, 188, 189, 196, 198, 204, 205, 206, 208, 316, 325, 326, 328, 386, 388, 392, 393, 398, 402, 403, 404, 405, 412, 417, 418, 423, 431, 432, 439, 449], "ki": 88, "kind": [30, 40, 52, 58, 64, 71, 84, 86, 88, 120, 144, 174, 195, 196, 272, 273, 296, 307, 323, 387, 397, 406, 410, 438, 453], "kl": [88, 89], "known": [132, 373], "kron": 6, "kroneck": 159, "kth": [84, 296, 323], "kwarg": [11, 12, 13, 15, 21, 22, 23, 24, 25, 26, 27, 46, 47, 48, 49, 53, 54, 56, 59, 60, 63, 66, 67, 75, 82, 84, 92, 94, 95, 97, 100, 125, 126, 127, 128, 129, 133, 140, 141, 142, 145, 148, 151, 153, 154, 155, 160, 161, 162, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 198, 204, 205, 206, 208, 257, 275, 302, 316, 318, 325, 326, 328, 334, 386, 388, 392, 393, 398, 402, 403, 404, 405, 407, 408, 412, 417, 418, 423, 431, 432, 433, 434], "l": [86, 163, 167, 169], "la": [166, 168, 169], "label": 88, "laid": 38, "lam": 360, "lambda": 133, "lapack": [166, 168], "laplac": 6, "laptop": 4, "larg": [74, 86, 143, 176, 333], "larger": [88, 120, 449], "largest": [89, 120, 125, 147, 171, 388], "largest_singular_valu": 176, "last": [30, 70, 80, 81, 122, 138, 150, 174, 183, 194, 196, 327, 384, 390, 394, 399, 406, 409, 413, 419], "latest": [4, 130], "layout": [11, 12, 13, 18, 21, 22, 23, 24, 25, 26, 27, 32, 34, 35, 36, 38, 39, 46, 47, 48, 49, 53, 54, 56, 59, 60, 62, 63, 66, 67, 82, 84, 88, 90, 91, 92, 94, 95, 97, 99, 125, 126, 136, 137, 141, 142, 145, 148, 151, 153, 154, 155, 160, 161, 162, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 198, 204, 208, 284, 316, 318, 320, 321, 325, 328, 386, 388, 390, 392, 393, 398, 402, 403, 404, 405, 407, 408, 412, 417, 418, 431, 432, 439, 440, 441, 442], "lcm": 6, "ldexp": 6, "lead": [211, 212], "learn": [3, 4], "least": [41, 42, 43, 44, 85, 86, 89, 96, 123, 132, 152, 171, 177, 397, 438], "left": [28, 29, 31, 80, 84, 123, 124, 160, 168, 175, 197, 203, 209, 210, 216, 218, 304, 327, 378, 392, 396, 399, 413, 435], "left_shift": [6, 392], "leg": [145, 387], "legaci": 371, "len": [84, 86, 149, 171, 197, 201, 202, 203, 249, 401, 435], "length": [20, 44, 72, 73, 81, 84, 92, 135, 138, 143, 144, 166, 180, 194, 197, 201, 203, 211, 212, 305, 338, 390, 391, 397, 399, 401, 409, 419, 420, 438], "less": [6, 72, 73, 92, 141, 142, 143, 162, 171, 176, 211, 212, 216, 218, 318, 327, 402, 413], "less_equ": [6, 92, 141, 142, 161, 318], "let": 337, "level": [442, 449], "level_zero": [20, 32, 34, 35, 36, 38, 62, 76, 79, 90, 91, 99, 131, 132, 133, 134, 136, 137, 138, 146, 183, 184, 194, 202, 319, 320, 321, 424, 435, 440, 441], "lexsort": [6, 30, 406], "li": [394, 395], "librari": [3, 4, 449], "like": [20, 32, 34, 35, 36, 38, 40, 41, 42, 43, 57, 84, 85, 88, 90, 99, 131, 132, 133, 134, 135, 136, 138, 146, 183, 184, 194, 273, 320, 335, 379, 390, 440, 453], "limit": [3, 11, 12, 13, 14, 15, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 32, 34, 35, 36, 38, 46, 47, 48, 49, 50, 51, 53, 54, 56, 59, 60, 62, 63, 65, 66, 67, 68, 69, 75, 82, 84, 86, 87, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 140, 141, 142, 145, 146, 147, 151, 152, 153, 154, 155, 160, 161, 162, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 200, 203, 204, 205, 206, 208, 209, 210, 213, 214, 215, 216, 217, 218, 219, 273, 275, 316, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 334, 335, 336, 337, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 357, 358, 360, 361, 363, 366, 369, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 383, 386, 388, 390, 392, 393, 398, 400, 402, 403, 404, 405, 406, 407, 408, 411, 412, 413, 415, 417, 418, 421, 423, 431, 432, 434, 436, 440, 441], "linalg": [6, 83, 88, 89, 408], "line": [171, 184], "linear": [61, 65, 171, 179, 194, 442, 453], "linspac": [0, 6, 20, 93, 138, 194, 201, 434], "linux": 4, "list": [3, 6, 9, 32, 34, 35, 36, 38, 41, 42, 43, 50, 58, 62, 76, 79, 84, 85, 86, 88, 89, 136, 137, 138, 144, 183, 184, 194, 196, 314, 391, 397, 400, 410, 419, 422, 435, 438, 439], "list_pickl": 86, "littl": 86, "ln": 194, "load": [6, 132, 184], "loadtxt": [6, 132], "loc": [335, 346, 348, 349, 357, 381], "local": 4, "locat": [0, 4, 139, 346, 348, 399], "log": [6, 97, 138, 178, 183, 186, 187, 188, 189, 194, 195, 350], "log10": [6, 185, 187, 188], "log1p": [6, 95, 97, 185, 186, 188], "log2": [6, 185, 186, 187], "log_bas": 194, "logabsdet": 178, "logaddexp": [6, 71, 195], "logaddexp2": 6, "logarithm": [71, 165, 178, 183, 185, 186, 187, 188, 189, 195, 351, 453], "logic": [14, 19, 190, 191, 192, 193, 442, 453], "logical_and": [6, 46, 191, 192, 193], "logical_not": [6, 47, 151, 190, 192, 193], "logical_or": [6, 48, 190, 191, 193], "logical_xor": [6, 49, 190, 191, 192], "logist": 6, "lognorm": 6, "logseri": 6, "logspac": [6, 138, 183], "logsumdexp": 189, "logsumexp": 71, "lomax": 358, "long": [86, 172], "lookfor": 6, "loop": 88, "lorentz": 373, "low": [335, 363, 366, 379, 449], "lower": [76, 99, 143, 157, 163, 167, 169, 424, 425, 426, 427, 430], "lowest": [44, 88, 89, 335, 363], "lstsq": 6, "m": [69, 85, 86, 88, 99, 122, 123, 124, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 196, 331, 416, 424, 425, 426, 428, 429], "machin": [4, 120, 147, 171], "machineri": 86, "made": [41, 86, 159], "magnitud": [11, 12, 63, 328], "mai": [18, 40, 52, 56, 58, 64, 73, 84, 86, 88, 89, 96, 144, 164, 166, 167, 171, 175, 177, 194, 196, 214, 217, 219, 273, 331, 397, 410, 420, 438, 449], "main": [76, 77, 78, 79, 80, 99, 119, 146, 169, 424, 425, 428], "maintain": [84, 86, 143, 304, 399, 416], "major": [4, 34, 35, 36, 38, 39, 40, 84, 273, 286, 317, 384], "make": [36, 38, 57, 86, 201], "manag": 0, "mani": 449, "manipul": [3, 77, 442, 453], "manual": [4, 86, 420], "mappingproxi": 86, "mask": [86, 317, 324, 332, 415], "mask_indic": 6, "mass": 143, "mat": 6, "match": [11, 12, 35, 58, 64, 71, 81, 86, 132, 150, 195, 196, 330, 331, 387, 410, 415, 416, 419, 439], "math": 93, "mathemat": [442, 453], "matmul": [6, 83, 177, 180, 437], "matplotlib": [201, 373], "matric": [133, 165, 166, 168, 170, 173, 175, 176, 177, 178, 180, 196, 201, 453], "matrix": [69, 83, 88, 150, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 196, 201, 408, 428, 435, 437, 442, 453], "matrix_pow": [6, 408], "matrix_rank": 6, "max": [0, 6, 16, 28, 84, 120, 127, 143, 147, 171, 173, 198, 203, 204, 213, 275, 352, 416, 420, 449], "max_arg": 0, "max_val": 0, "maxima": [197, 198], "maximum": [0, 6, 16, 28, 29, 56, 84, 89, 127, 128, 197, 203, 204, 209, 210, 213, 215, 270, 290, 326, 329, 331], "maximum_sctyp": 6, "may_share_memori": 6, "mean": [3, 6, 40, 44, 84, 88, 131, 132, 134, 164, 175, 200, 214, 217, 219, 273, 286, 314, 335, 348, 350, 353, 357, 376, 380, 381, 384, 390, 411, 413, 436, 449], "meaningfulli": 449, "meant": 449, "median": [0, 6], "memori": [3, 11, 12, 13, 18, 21, 22, 23, 24, 25, 26, 27, 32, 34, 35, 36, 38, 39, 46, 47, 48, 49, 53, 54, 56, 59, 60, 62, 63, 66, 67, 82, 84, 86, 88, 90, 91, 92, 94, 95, 97, 99, 125, 126, 136, 137, 141, 142, 145, 148, 151, 153, 154, 155, 160, 161, 162, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 198, 201, 204, 208, 284, 286, 310, 316, 318, 320, 321, 325, 328, 386, 388, 390, 392, 393, 398, 402, 403, 404, 405, 407, 408, 412, 417, 418, 431, 432, 439, 440, 441, 442], "mersenn": 335, "meshgrid": [6, 133, 202, 319], "met": [83, 174], "meta": 86, "metadata": 86, "method": [14, 16, 17, 19, 30, 40, 62, 83, 84, 86, 121, 130, 132, 143, 173, 176, 180, 273, 278, 302, 317, 335, 390, 401, 413, 422, 442], "mgridclass": 202, "middl": [80, 168], "might": 88, "min": [6, 17, 29, 56, 84, 120, 128, 143, 147, 164, 171, 177, 180, 197, 198, 204, 215, 275, 416, 449], "min_scalar_typ": 6, "minima": [203, 204], "minimum": [6, 17, 28, 29, 56, 84, 127, 128, 197, 198, 203, 209, 210, 213, 215, 271, 292, 326, 329], "minlength": 45, "mintypecod": 6, "minu": [97, 126, 388, 432], "miscellan": [2, 442, 453], "mise": 380, "miss": 184, "mix": 196, "mkl": 4, "mod": [6, 388], "mode": [55, 61, 65, 84, 177, 274, 298, 313, 330, 373, 378, 399, 415], "model": 337, "modf": 6, "modifi": [62, 372], "modul": [139, 442], "modulu": 388, "monoton": 143, "moor": 176, "more": [0, 3, 4, 15, 30, 32, 41, 42, 43, 85, 86, 88, 89, 97, 123, 124, 130, 132, 144, 149, 171, 172, 173, 174, 176, 180, 187, 189, 410, 419, 449], "most": [3, 4, 80, 81, 86, 89, 335, 371, 409], "move": [84, 207, 296, 394, 395, 422], "moveaxi": [6, 394, 395, 422], "msg": 0, "msort": 6, "mt19937": 371, "mu": [346, 350, 357, 380], "multi": [2, 84, 102, 104, 108, 109, 113, 114, 116, 118, 202, 310, 319, 442], "multi_dot": [6, 83, 88, 89], "multiarrai": 86, "multidimension": [143, 150, 439], "multinomi": 6, "multipl": [28, 29, 30, 44, 58, 70, 71, 86, 88, 144, 166, 167, 168, 169, 170, 174, 195, 197, 199, 203, 213, 214, 215, 217, 219, 387, 397, 406, 410, 411, 436, 438, 442], "multipli": [6, 72, 88, 168, 216, 327], "multivari": 353, "multivariate_norm": 6, "must": [11, 12, 13, 18, 20, 21, 22, 23, 24, 25, 26, 27, 31, 44, 46, 47, 48, 49, 51, 53, 54, 56, 57, 58, 59, 60, 63, 66, 67, 71, 72, 73, 81, 82, 83, 85, 94, 95, 96, 97, 98, 123, 125, 126, 132, 135, 141, 142, 143, 144, 145, 148, 151, 153, 154, 155, 160, 161, 162, 163, 174, 175, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 203, 204, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 316, 318, 325, 326, 327, 328, 330, 331, 386, 387, 388, 392, 393, 394, 396, 397, 398, 399, 402, 403, 404, 405, 407, 408, 410, 411, 412, 413, 414, 416, 417, 418, 419, 422, 431, 432, 436, 438, 439], "mx": 171, "n": [0, 4, 73, 77, 78, 81, 84, 85, 86, 87, 96, 99, 101, 103, 104, 106, 107, 109, 111, 112, 114, 115, 117, 118, 119, 125, 133, 140, 146, 171, 172, 173, 176, 177, 180, 181, 182, 196, 201, 217, 219, 314, 330, 337, 352, 354, 364, 374, 399, 401, 408, 411, 414, 415, 419, 422, 424, 425, 426, 428, 429, 435, 436, 449], "n1": 201, "n2": [184, 201], "n3": 201, "naiv": 89, "name": [0, 6, 86], "namedtupl": 177, "nan": [9, 14, 15, 19, 28, 29, 34, 35, 82, 127, 128, 153, 154, 155, 186, 197, 198, 199, 203, 204, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 326, 327, 407, 411, 431, 436, 453], "nan_to_num": 6, "nanargmax": [6, 28, 210], "nanargmin": [6, 29, 209], "nancumprod": 6, "nancumsum": 6, "nanmax": [6, 127, 197, 198, 204, 215], "nanmean": [6, 199, 217, 219, 411, 436], "nanmedian": 6, "nanmin": [6, 128, 198, 203, 204, 213], "nanpercentil": 6, "nanprod": [6, 327], "nanquantil": 6, "nanstd": [6, 199, 214, 219, 411, 436], "nansum": 6, "nanvar": [6, 199, 214, 217, 411, 436], "nat": 155, "nativ": 86, "native_cod": 86, "native_dt": 86, "natur": [178, 185, 186, 187, 188, 189, 195], "nbad": 347, "nbyte": 84, "ndarrai": [2, 3, 6, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 357, 362, 363, 364, 365, 366, 367, 368, 370, 376, 379, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 428, 429, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442], "ndim": [6, 32, 38, 41, 42, 43, 69, 77, 80, 84, 86, 159, 180, 197, 203, 320, 420, 422, 440], "ndmin": 32, "nearest": [31, 126, 388, 393, 396, 432], "necessari": [4, 20, 32, 34, 35, 36, 38, 41, 64, 72, 73, 138, 183, 194, 196, 199, 211, 212, 214, 216, 217, 218, 219, 327, 390, 411, 413, 436], "necessarili": [166, 168], "need": [4, 139, 416, 439], "needs_init": 86, "needs_pyapi": 86, "neg": [6, 14, 19, 31, 45, 63, 79, 80, 96, 99, 122, 135, 143, 153, 154, 155, 172, 213, 215, 217, 218, 219, 325, 326, 327, 354, 396, 411, 413, 415, 436], "negative_binomi": 6, "neither": [83, 180, 196, 213, 215], "nest": [37, 85, 144, 397, 410, 438], "nested_it": 6, "never": 390, "new": [32, 40, 50, 51, 57, 58, 71, 72, 73, 80, 84, 85, 86, 90, 91, 96, 130, 134, 135, 136, 137, 138, 144, 146, 183, 194, 195, 198, 204, 207, 211, 212, 216, 218, 273, 302, 314, 320, 321, 387, 390, 394, 395, 397, 410, 420, 422, 438, 439, 440, 441, 449], "new_dtyp": 86, "new_ord": 86, "newaxi": 96, "newbyteord": [6, 86], "newli": [11, 12, 13, 18, 21, 22, 23, 24, 25, 26, 27, 32, 34, 35, 40, 46, 47, 48, 49, 53, 54, 56, 59, 60, 62, 63, 66, 67, 82, 84, 90, 91, 92, 94, 95, 97, 99, 125, 126, 136, 137, 141, 142, 145, 148, 151, 153, 154, 155, 160, 161, 162, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 198, 204, 208, 273, 316, 318, 320, 321, 325, 328, 386, 388, 392, 393, 398, 402, 403, 404, 405, 407, 408, 412, 417, 418, 431, 432, 440, 441], "newshap": 390, "next": [4, 120], "nextaft": 6, "ngood": 347, "ni": [201, 331, 416], "nine": 337, "ninf": [9, 213, 215, 218], "ninja": 4, "nj": [331, 416], "njm": 88, "nk": [331, 416], "nlk": 88, "nn": 201, "noisi": 171, "non": [20, 32, 34, 35, 36, 37, 38, 44, 45, 62, 68, 76, 79, 84, 90, 91, 99, 131, 132, 133, 134, 135, 136, 137, 138, 143, 146, 149, 153, 183, 184, 194, 202, 209, 210, 213, 215, 217, 219, 295, 317, 319, 320, 321, 326, 335, 355, 356, 357, 362, 363, 364, 365, 366, 367, 368, 370, 371, 376, 379, 411, 419, 424, 435, 436, 439, 440, 441], "nonc": [355, 356], "noncentral_chisquar": 6, "noncentral_f": 6, "none": [11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 44, 45, 46, 47, 48, 49, 53, 54, 55, 56, 58, 59, 60, 62, 63, 66, 67, 68, 69, 70, 71, 72, 73, 76, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 122, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 148, 149, 151, 153, 154, 155, 160, 161, 162, 164, 171, 173, 174, 175, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 268, 269, 270, 271, 272, 274, 275, 279, 280, 288, 290, 291, 292, 296, 297, 298, 301, 303, 304, 307, 308, 309, 311, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 386, 387, 388, 389, 390, 392, 393, 394, 396, 397, 398, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 421, 422, 423, 424, 426, 429, 431, 432, 435, 436, 438, 439, 440, 441, 449], "nonzero": [6, 68, 84, 439, 449], "nor": [168, 213, 215], "norm": [6, 101, 102, 104, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 118, 164, 168, 171, 453], "normal": [6, 69, 143, 166, 167, 177, 335, 350, 353, 364, 376], "not_equ": [6, 92, 141, 142, 161, 162], "note": [11, 12, 13, 14, 18, 19, 28, 29, 30, 31, 39, 62, 70, 74, 80, 82, 84, 86, 89, 96, 125, 131, 132, 133, 134, 135, 143, 149, 153, 166, 184, 194, 205, 208, 217, 218, 219, 278, 302, 317, 330, 333, 338, 340, 341, 351, 356, 390, 406, 411, 412, 414, 415, 419, 420, 431, 436, 437], "notic": 86, "notimplementederror": [11, 12, 13, 20, 21, 22, 23, 24, 25, 26, 27, 30, 32, 34, 35, 36, 38, 46, 47, 48, 49, 50, 51, 53, 54, 56, 59, 60, 62, 63, 66, 67, 82, 84, 90, 91, 92, 94, 95, 97, 99, 125, 126, 131, 132, 133, 134, 135, 136, 137, 141, 142, 145, 146, 151, 153, 154, 155, 160, 161, 162, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 203, 204, 208, 213, 214, 215, 217, 218, 219, 273, 316, 318, 320, 321, 325, 326, 327, 328, 386, 388, 392, 393, 398, 402, 403, 404, 405, 406, 407, 408, 411, 412, 413, 417, 418, 431, 432, 436, 440, 441], "now": [36, 38, 77, 168, 171], "np": [3, 4, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 159, 160, 161, 162, 163, 164, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 273, 278, 281, 283, 287, 288, 296, 300, 307, 314, 316, 317, 318, 319, 320, 321, 322, 325, 327, 328, 329, 330, 331, 334, 360, 369, 382, 383, 384, 386, 387, 388, 389, 392, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441], "nsamp": 347, "nsampl": 347, "nth": 419, "nuc": 175, "num": [0, 86, 93, 138, 183, 194, 434], "number": [14, 15, 18, 19, 20, 31, 44, 45, 50, 51, 68, 79, 81, 84, 86, 88, 89, 96, 99, 120, 126, 131, 132, 134, 135, 138, 143, 146, 147, 153, 164, 170, 173, 177, 178, 180, 181, 182, 183, 194, 211, 212, 213, 215, 216, 217, 218, 219, 294, 303, 305, 306, 317, 327, 328, 335, 337, 347, 371, 388, 389, 393, 394, 395, 396, 403, 411, 414, 420, 422, 424, 432, 435, 436, 449, 453], "numer": [3, 4, 11, 12, 13, 21, 22, 23, 24, 25, 27, 31, 59, 60, 63, 66, 67, 82, 86, 92, 94, 97, 126, 141, 142, 148, 153, 154, 155, 161, 162, 185, 186, 187, 188, 198, 204, 208, 316, 318, 325, 326, 328, 385, 393, 396, 402, 403, 404, 405, 412, 417, 418, 431, 453], "numpi": [0, 1, 3, 4, 9, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 282, 287, 288, 300, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 428, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 449, 453], "nx": 201, "ny": 201, "nzero": 9, "o": [4, 86], "obj": [28, 29, 30, 86, 130, 143, 156], "obj2sctyp": 6, "object": [20, 32, 34, 35, 36, 37, 38, 39, 62, 76, 79, 84, 86, 90, 91, 96, 99, 120, 121, 130, 131, 132, 133, 134, 135, 136, 137, 138, 146, 147, 149, 164, 167, 175, 183, 184, 194, 202, 302, 319, 320, 321, 335, 357, 362, 363, 364, 365, 366, 367, 368, 370, 371, 376, 379, 390, 424, 435, 440, 441, 449], "obtain": [80, 163, 317], "occupi": [120, 147], "occur": [40, 52, 58, 64, 84, 88, 144, 166, 196, 273, 286, 397, 410, 438], "occurr": [28, 29, 45, 143, 209, 210], "off": [20, 166, 171], "offset": [80, 84, 86, 131, 132, 281, 421, 426, 427, 429, 430], "ogrid": 439, "ogridclass": 319, "oil": [337, 354], "omit": [335, 363], "onc": 170, "one": [3, 4, 15, 28, 29, 30, 32, 37, 41, 42, 43, 44, 56, 61, 64, 65, 84, 86, 90, 92, 96, 99, 101, 103, 106, 107, 111, 112, 115, 117, 123, 124, 132, 136, 144, 146, 149, 168, 172, 175, 185, 186, 188, 197, 201, 202, 203, 209, 210, 216, 218, 278, 286, 289, 317, 319, 321, 327, 354, 395, 406, 409, 410, 413, 419, 426, 429, 440, 449], "oneapi": [20, 32, 34, 35, 36, 37, 38, 62, 76, 79, 90, 91, 99, 131, 132, 133, 134, 135, 136, 137, 138, 146, 149, 183, 184, 194, 202, 319, 320, 321, 335, 357, 362, 363, 364, 365, 366, 367, 368, 370, 371, 376, 379, 424, 435, 440, 441], "onedpl": 4, "onemkl": [4, 166, 168], "ones": [6, 32, 36, 38, 44, 71, 82, 84, 88, 90, 91, 92, 96, 99, 136, 137, 145, 146, 159, 171, 173, 195, 211, 216, 321, 327, 387, 391, 395, 422, 424, 431, 440, 441], "ones_lik": [6, 32, 91, 137, 320, 441], "onli": [20, 28, 29, 30, 32, 34, 35, 36, 38, 40, 41, 44, 56, 62, 65, 69, 84, 86, 87, 88, 89, 90, 91, 99, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 131, 132, 133, 134, 135, 136, 137, 138, 143, 149, 163, 167, 169, 177, 180, 183, 184, 194, 196, 197, 199, 200, 203, 209, 210, 213, 214, 215, 216, 217, 219, 273, 307, 320, 321, 323, 325, 327, 330, 335, 357, 363, 379, 390, 400, 406, 411, 413, 415, 416, 421, 436, 439, 440, 441, 449], "open": [132, 183, 319, 335, 365, 367, 368, 370, 379, 414], "opencl": [20, 32, 34, 35, 36, 38, 62, 76, 79, 90, 91, 99, 131, 132, 133, 134, 136, 137, 138, 146, 183, 184, 194, 202, 319, 320, 321, 424, 435, 440, 441], "oper": [13, 46, 47, 48, 49, 82, 86, 88, 89, 92, 96, 126, 141, 142, 151, 160, 161, 162, 163, 190, 192, 196, 197, 203, 208, 209, 210, 316, 318, 325, 326, 330, 388, 392, 412, 420, 431, 442, 453], "operand": [88, 89, 182, 322, 419], "opposit": 86, "optim": [4, 88, 89, 143], "option": [11, 12, 13, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 40, 44, 46, 47, 48, 49, 52, 53, 54, 56, 58, 59, 60, 62, 63, 64, 66, 67, 70, 71, 72, 73, 76, 79, 80, 81, 82, 83, 84, 86, 88, 90, 91, 92, 94, 95, 97, 99, 122, 125, 126, 131, 132, 133, 134, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 148, 149, 151, 153, 154, 155, 160, 161, 162, 163, 164, 167, 169, 171, 173, 174, 175, 176, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 273, 286, 314, 316, 318, 319, 320, 321, 325, 326, 327, 328, 335, 357, 362, 363, 364, 365, 366, 367, 368, 370, 371, 376, 379, 384, 386, 387, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 417, 418, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 435, 436, 438, 439, 440, 441], "ord": 175, "order": [11, 12, 13, 18, 21, 22, 23, 24, 25, 26, 27, 30, 32, 34, 35, 36, 38, 39, 40, 46, 47, 48, 49, 53, 54, 56, 59, 60, 62, 63, 66, 67, 80, 82, 84, 86, 88, 89, 90, 91, 92, 94, 95, 97, 99, 122, 123, 124, 125, 126, 132, 136, 137, 141, 142, 143, 145, 148, 151, 153, 154, 155, 160, 161, 162, 164, 166, 167, 168, 169, 180, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 198, 201, 204, 205, 207, 208, 227, 272, 273, 278, 286, 296, 299, 304, 307, 314, 316, 317, 318, 320, 321, 323, 325, 326, 328, 384, 386, 388, 390, 392, 393, 398, 399, 402, 403, 404, 405, 406, 407, 408, 412, 417, 418, 419, 422, 431, 432, 435, 439, 440, 441, 453], "ordin": [171, 179], "ordinari": [150, 163], "org": 4, "orient": 70, "origin": [50, 84, 175, 201, 207, 216, 218, 390, 394], "orthogon": [168, 177], "orthonorm": 177, "other": [30, 40, 50, 51, 81, 84, 86, 125, 133, 146, 166, 168, 174, 207, 223, 224, 228, 230, 231, 233, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 258, 260, 262, 265, 266, 267, 273, 335, 379, 395, 406, 442, 453], "otherwis": [3, 11, 12, 13, 14, 15, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 59, 60, 62, 63, 65, 66, 67, 68, 69, 76, 81, 82, 84, 86, 87, 88, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 145, 146, 150, 151, 152, 153, 154, 155, 160, 161, 162, 171, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 203, 204, 205, 206, 208, 209, 210, 213, 214, 215, 216, 217, 218, 219, 273, 286, 302, 316, 318, 320, 321, 322, 324, 325, 326, 327, 328, 330, 335, 336, 337, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 375, 376, 377, 378, 379, 380, 381, 382, 383, 386, 387, 388, 390, 392, 393, 398, 399, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 415, 417, 418, 423, 431, 432, 436, 439, 440, 441], "otim": 419, "out": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 79, 81, 82, 83, 84, 85, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 159, 160, 161, 162, 164, 170, 174, 175, 176, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 268, 269, 270, 271, 274, 275, 278, 279, 280, 286, 290, 291, 292, 297, 303, 309, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 334, 335, 357, 362, 363, 364, 365, 366, 367, 368, 370, 376, 379, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 428, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441], "outer": [6, 70, 80, 88, 89, 159], "output": [11, 12, 13, 18, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 34, 35, 36, 37, 38, 46, 47, 48, 49, 53, 54, 56, 59, 60, 62, 63, 66, 67, 71, 72, 73, 76, 79, 81, 82, 83, 86, 88, 89, 90, 91, 92, 94, 95, 97, 99, 125, 126, 131, 132, 133, 134, 135, 136, 137, 138, 141, 142, 145, 146, 148, 149, 151, 153, 154, 155, 160, 161, 162, 174, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 201, 202, 203, 204, 208, 210, 211, 212, 214, 216, 217, 218, 219, 316, 318, 319, 320, 321, 325, 326, 327, 328, 335, 336, 337, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 354, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 386, 388, 389, 392, 393, 396, 398, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 417, 418, 420, 424, 431, 432, 435, 436, 439, 440, 441, 453], "outsid": 143, "over": [44, 71, 72, 73, 83, 88, 89, 121, 122, 133, 138, 143, 150, 175, 183, 194, 195, 196, 197, 199, 201, 203, 211, 212, 213, 214, 215, 216, 217, 218, 219, 327, 335, 362, 367, 378, 379, 387, 411, 413, 419, 436, 453], "overrid": [70, 91, 137, 321, 441], "overview": 2, "overwrite_input": 200, "p": [164, 171, 172, 337, 340, 345, 351, 354], "pack": [80, 384, 453], "packag": [0, 3], "packbit": 6, "pad": [6, 86], "page": [3, 453], "pair": [89, 166], "parallel": [1, 3, 4, 9, 442], "paramet": [11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 273, 283, 286, 302, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 335, 336, 337, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 435, 436, 437, 438, 439, 440, 441], "parameter": [335, 357, 379], "pareto": 6, "pars": [132, 184], "part": [3, 84, 148, 166, 167, 169, 206, 287, 300, 385, 432, 449], "partial": [30, 406], "particular": [86, 174], "particularli": 88, "partit": [6, 20, 32, 34, 35, 36, 37, 38, 62, 76, 79, 84, 90, 91, 99, 131, 132, 133, 134, 135, 136, 137, 138, 146, 149, 183, 184, 194, 202, 319, 320, 321, 335, 357, 362, 363, 364, 365, 366, 367, 368, 370, 371, 376, 379, 406, 424, 435, 440, 441, 449], "pass": [35, 84, 86, 133, 171, 302], "path": [4, 88, 89, 132, 184], "path_info": 89, "pathlib": 184, "pattern": 44, "penros": 176, "per": 88, "percentil": [6, 200], "perf_count": 0, "perform": [35, 56, 81, 88, 122, 163, 327, 413], "permit": 132, "permut": [6, 84, 88, 207, 314, 422, 453], "phase": [18, 434], "pi": [0, 9, 21, 23, 25, 26, 66, 67, 75, 404, 405, 417, 418, 434], "pickl": [132, 184], "piecewis": 6, "pinf": 9, "pinv": 6, "pip": 4, "place": [6, 15, 31, 56, 58, 72, 73, 83, 84, 96, 149, 196, 197, 199, 203, 211, 212, 214, 216, 217, 218, 219, 307, 314, 319, 327, 330, 372, 390, 394, 396, 406, 410, 411, 413, 436, 449], "platform": [72, 73, 86, 211, 212, 216, 218, 327, 413], "pleas": [0, 3, 143, 449], "plot": 373, "plt": [201, 373], "plu": [185, 186, 188], "point": [11, 12, 18, 20, 26, 31, 34, 35, 44, 63, 71, 86, 90, 91, 95, 99, 120, 131, 132, 133, 135, 136, 137, 146, 148, 171, 172, 183, 184, 189, 195, 199, 214, 217, 219, 320, 321, 335, 364, 376, 385, 386, 387, 396, 398, 399, 411, 424, 436, 440, 441, 453], "pointer": 86, "poisson": 6, "poli": 6, "polyadd": 6, "polyd": 6, "polydiv": 6, "polyfit": 6, "polyint": 6, "polymul": 6, "polysub": 6, "polyv": 6, "popul": [11, 12, 13, 18, 21, 22, 23, 24, 25, 26, 27, 31, 46, 47, 48, 49, 53, 54, 59, 60, 63, 66, 67, 82, 84, 92, 94, 95, 97, 125, 126, 141, 142, 145, 148, 151, 153, 154, 155, 160, 161, 162, 185, 186, 187, 188, 189, 190, 191, 192, 193, 198, 204, 208, 316, 318, 325, 326, 328, 335, 362, 386, 388, 392, 393, 396, 398, 402, 403, 404, 405, 407, 408, 412, 417, 418, 431, 432], "portion": 143, "posit": [6, 14, 15, 19, 20, 31, 34, 35, 53, 63, 79, 80, 84, 96, 99, 120, 132, 153, 154, 155, 163, 172, 181, 207, 213, 215, 218, 296, 310, 316, 337, 361, 394, 395, 396, 398, 407, 408, 422], "possess": 166, "possibl": [39, 40, 42, 43, 84, 88, 89, 96, 143, 273, 302, 390, 409, 414, 422], "possibli": 37, "pow": 449, "power": [6, 95, 172, 408, 435], "precis": [11, 12, 44, 72, 73, 86, 88, 120, 148, 171, 211, 212, 216, 218, 327, 385, 413], "prefer": [55, 62, 84, 278, 317], "prepend": [81, 420], "present": [86, 213, 215, 218], "preserv": [40, 41, 42, 43, 56, 84, 86, 88, 122, 123, 124, 167, 168, 169, 273], "previou": 44, "print": [0, 4, 44, 45, 61, 86, 89, 335, 354, 359, 433], "print_device_info": 0, "printabl": 89, "printopt": 6, "prior": 81, "prob1": 189, "prob12": 189, "prob2": 189, "probabl": [143, 337, 345, 354], "proce": 449, "processor": 88, "prod": [6, 72, 84, 181, 182, 216, 449], "produc": [86, 184, 399], "product": [6, 70, 72, 83, 84, 88, 89, 150, 159, 174, 179, 181, 182, 196, 208, 211, 216, 279, 322, 327, 419, 437, 453], "program": [4, 125], "progress": [138, 183], "project": [86, 328], "promot": [13, 18, 20, 21, 22, 23, 24, 25, 26, 27, 32, 34, 35, 36, 38, 46, 48, 49, 52, 53, 63, 66, 67, 82, 94, 95, 97, 126, 138, 145, 160, 183, 185, 186, 187, 188, 189, 194, 196, 198, 204, 208, 326, 386, 388, 391, 392, 398, 402, 404, 405, 407, 408, 412, 417, 418, 420, 431, 432], "promote_typ": 6, "propag": [86, 127, 128, 197, 198, 203, 204, 211, 212, 213, 215, 216, 218], "proper": [166, 168], "properti": [20, 32, 34, 35, 36, 37, 38, 62, 76, 79, 84, 90, 91, 99, 131, 132, 133, 134, 135, 136, 137, 138, 146, 149, 167, 169, 177, 183, 184, 194, 202, 221, 282, 284, 285, 287, 289, 293, 294, 300, 305, 306, 310, 314, 319, 320, 321, 335, 357, 362, 363, 364, 365, 366, 367, 368, 370, 371, 376, 379, 424, 435, 440, 441, 449], "protocol": [37, 86, 130], "prototyp": 91, "provid": [0, 6, 28, 29, 58, 64, 71, 84, 88, 89, 96, 134, 143, 144, 195, 209, 210, 213, 215, 216, 218, 335, 363, 366, 387, 397, 410, 415, 438, 439, 457], "pseudo": [176, 335], "ptp": 6, "purpos": 171, "put": [6, 84, 331, 416, 449], "put_along_axi": [6, 330, 416], "putmask": [6, 330], "pval": 352, "py": 4, "pypi": 4, "pyplot": [201, 373], "pytest": 4, "python": [0, 2, 3, 37, 84, 86, 130, 288, 388, 449], "pzero": 9, "q": [168, 172, 177, 182, 200], "qr": 6, "quadrant": [18, 25], "quantil": 6, "quaternion": 172, "question": 76, "queue": [20, 32, 34, 35, 36, 37, 38, 62, 76, 79, 90, 91, 99, 131, 132, 133, 134, 135, 136, 137, 138, 146, 149, 183, 184, 194, 202, 319, 320, 321, 335, 357, 362, 363, 364, 365, 366, 367, 368, 370, 371, 376, 379, 424, 435, 440, 441], "quick": [2, 3], "quotient": [26, 205], "r": 177, "r2": 177, "rad": 75, "rad2deg": [6, 74, 75, 434], "radian": [6, 18, 21, 22, 23, 25, 26, 74, 75, 333, 434], "rais": [11, 12, 13, 15, 20, 21, 22, 23, 24, 25, 26, 27, 30, 32, 34, 35, 36, 38, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 59, 60, 62, 63, 64, 66, 67, 68, 71, 82, 83, 84, 90, 91, 92, 94, 95, 97, 99, 101, 107, 115, 125, 126, 131, 132, 133, 134, 135, 136, 137, 141, 142, 145, 146, 151, 153, 154, 155, 160, 161, 162, 172, 174, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 203, 204, 208, 209, 210, 213, 214, 215, 217, 218, 219, 273, 274, 305, 316, 318, 320, 321, 325, 326, 327, 328, 386, 387, 388, 390, 392, 393, 398, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 417, 418, 431, 432, 436, 440, 441, 449], "rand": [6, 89, 335, 365, 367, 368, 370], "randint": [6, 84, 288, 335, 366], "randn": [6, 122, 123, 124, 176, 177, 180, 182, 335, 410], "random": [84, 89, 122, 123, 124, 168, 174, 176, 177, 180, 182, 288, 410, 442, 453], "random_integ": [6, 335, 363], "random_sampl": [6, 335, 362, 365, 368, 370], "randomli": 359, "randomst": 363, "ranf": 6, "rang": [0, 134, 143, 329, 330, 354, 359, 410, 419, 422, 434, 453], "rank": [96, 98, 133, 171, 173, 414], "ratio": [0, 82, 126, 171, 431], "ration": 453, "ravel": [6, 84, 175, 286, 449], "ravel_multi_index": 6, "raw": 177, "rayleigh": 6, "rcond": [171, 176], "re": [28, 29, 45, 76, 394, 433], "read": [76, 86, 131, 132, 134, 135, 184, 384, 390], "readonli": 86, "real": [6, 11, 12, 20, 26, 53, 54, 63, 71, 84, 112, 113, 114, 115, 116, 118, 120, 125, 127, 128, 145, 148, 163, 166, 167, 168, 169, 173, 176, 177, 178, 180, 189, 195, 217, 219, 337, 354, 386, 387, 388, 398, 411, 432, 436, 449, 453], "real_if_clos": 6, "rearrang": [84, 296, 453], "rebuild": 85, "recal": 86, "recent": 409, "recfromcsv": 6, "recfromtxt": 6, "recip": 4, "reciproc": [6, 398, 407], "recommend": [4, 88, 317, 420], "reconstruct": [86, 180], "reduc": [28, 29, 44, 177, 180, 195, 197, 199, 201, 203, 209, 210, 213, 214, 215, 216, 217, 218, 219, 327, 387, 411, 413, 436], "reduce_hypot": 145, "reduct": [14, 19], "refer": [0, 2, 3, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 287, 288, 290, 291, 292, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 428, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 449], "reflect": 449, "reflector": 177, "regardless": [86, 167, 169], "regular": 184, "rel": [15, 84, 310, 394, 395], "relat": 86, "relev": [86, 138, 183, 194], "remain": [44, 89, 143, 195, 199, 207, 214, 217, 219, 387, 390, 411, 436], "remaind": [6, 126, 127, 128, 129, 205, 326], "remov": [28, 29, 74, 80, 84, 96, 308, 327, 333, 409, 413, 453], "reorder": [88, 122, 182, 207], "rep": [389, 420], "repeat": [6, 84, 166, 167, 168, 169, 201, 420, 449], "repeatedli": 88, "repetit": [0, 389, 420], "replac": [3, 37, 56, 211, 212, 331, 340, 449], "replic": 420, "repr": 261, "repres": [20, 32, 34, 35, 36, 37, 38, 44, 84, 86, 89, 130, 133, 138, 149, 178, 183, 194, 201, 219, 305, 335, 449], "represent": [46, 48, 49, 89, 120, 147, 149, 449], "request": 395, "requir": [4, 6, 32, 36, 38, 40, 84, 86, 88, 149, 273], "res_cpu": 76, "res_host": 76, "rese": 371, "reset": 449, "reshap": [0, 6, 13, 28, 29, 41, 43, 44, 76, 77, 80, 82, 83, 84, 85, 88, 96, 122, 129, 149, 150, 159, 175, 196, 197, 203, 208, 281, 305, 314, 359, 384, 394, 412, 419, 431, 449], "resid": 96, "residu": 171, "resiz": [6, 96, 449], "resolut": 120, "resolv": [71, 96, 195, 387], "resourc": 0, "respect": [13, 26, 46, 48, 49, 82, 84, 92, 126, 141, 142, 160, 161, 162, 189, 190, 192, 193, 208, 310, 318, 326, 388, 392, 412, 431], "restor": 394, "result": [0, 4, 14, 19, 26, 28, 29, 44, 46, 47, 48, 49, 52, 56, 58, 63, 71, 72, 73, 82, 83, 86, 87, 89, 91, 92, 97, 100, 126, 131, 132, 133, 134, 135, 137, 138, 140, 141, 142, 143, 149, 151, 153, 154, 155, 160, 161, 162, 163, 166, 175, 177, 183, 184, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 203, 206, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 317, 318, 321, 322, 326, 327, 335, 337, 367, 387, 390, 391, 392, 393, 395, 396, 399, 402, 403, 410, 411, 413, 416, 419, 420, 431, 432, 436, 439, 441, 449], "result_dpnp": 0, "result_numpi": 0, "result_typ": [6, 52, 86, 453], "retriev": [80, 86], "retstep": 183, "return": [0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 224, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 277, 278, 279, 280, 281, 282, 284, 285, 286, 288, 290, 291, 292, 295, 296, 297, 299, 302, 303, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 335, 338, 357, 359, 362, 363, 364, 365, 366, 367, 368, 370, 371, 376, 379, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 435, 436, 437, 438, 439, 440, 441, 449], "reus": 390, "revers": [80, 84, 122, 123, 124, 314, 422, 435], "rewrit": 171, "rfft": 6, "rfft2": 6, "rfftfreq": 6, "rfftn": 6, "right": [56, 70, 80, 123, 124, 145, 160, 166, 167, 168, 169, 174, 182, 378, 387, 392, 399, 435], "right_shift": [6, 160], "rightmost": [143, 182], "rint": [6, 31, 396], "roll": [6, 395], "rollaxi": [6, 394], "root": [6, 53, 145, 164, 386, 387, 398, 407, 408], "rot90": 6, "roughli": [86, 171], "round": [6, 20, 31, 84, 126, 166, 388, 393, 432, 449, 453], "round_": 6, "routin": [2, 442, 449], "row": [38, 40, 57, 58, 72, 73, 80, 84, 85, 99, 123, 124, 144, 146, 149, 174, 180, 273, 286, 317, 384, 397, 410, 424, 426, 438], "row_stack": [6, 438], "rowvar": 69, "rsqrt": [386, 407], "rtol": [15, 152], "rule": [13, 18, 20, 21, 22, 23, 24, 25, 26, 27, 32, 34, 35, 36, 38, 44, 46, 48, 49, 52, 53, 63, 64, 66, 67, 70, 82, 94, 95, 97, 126, 138, 145, 160, 183, 185, 186, 187, 188, 189, 194, 195, 196, 198, 199, 204, 208, 214, 217, 219, 326, 386, 387, 388, 391, 392, 398, 402, 404, 405, 407, 408, 411, 412, 413, 417, 418, 423, 431, 432, 436], "run": [0, 4], "runtim": 4, "runtimewarn": [213, 215], "s1": [84, 86, 159, 310], "s10": 86, "s16": 86, "s2": [84, 86, 310], "s25": 86, "s3": [84, 310], "safe": [40, 52, 58, 64, 84, 88, 144, 196, 273, 397, 410, 438], "safe_ev": 6, "said": 182, "same": [4, 11, 12, 15, 28, 29, 30, 31, 33, 36, 38, 39, 40, 44, 47, 51, 57, 58, 71, 72, 73, 74, 80, 81, 83, 84, 85, 91, 96, 98, 127, 128, 129, 130, 137, 143, 144, 148, 150, 151, 159, 168, 172, 177, 195, 197, 199, 203, 205, 211, 212, 213, 214, 215, 216, 217, 218, 219, 273, 302, 314, 321, 322, 327, 330, 331, 333, 335, 357, 363, 379, 384, 385, 387, 388, 389, 394, 395, 397, 399, 406, 409, 410, 411, 413, 416, 419, 425, 427, 428, 430, 436, 437, 438, 441], "same_kind": [40, 52, 58, 64, 84, 88, 144, 196, 273, 397, 410, 438], "sampl": [103, 117, 138, 143, 183, 194, 331, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 366, 369, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 416, 442, 453], "satisfi": [32, 36, 38, 40, 84, 98, 170, 273], "save": [6, 132], "savetxt": 6, "savez": 6, "savez_compress": 6, "scalar": [15, 32, 34, 35, 36, 37, 38, 52, 62, 64, 70, 76, 79, 81, 83, 84, 86, 88, 89, 127, 128, 129, 136, 137, 138, 143, 145, 150, 156, 159, 179, 183, 194, 196, 201, 205, 283, 288, 322, 331, 335, 336, 337, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 354, 357, 358, 360, 361, 363, 366, 369, 371, 375, 377, 378, 379, 380, 381, 382, 383, 399, 419, 432, 435, 437, 439, 449], "scale": [89, 138, 159, 177, 183, 194, 335, 342, 344, 346, 347, 348, 349, 357, 369, 374, 381], "scipi": 93, "scope": 4, "script": 4, "sctype2char": 6, "search": [89, 442, 453], "searchsort": [6, 84, 143, 406, 449], "second": [13, 26, 44, 46, 48, 49, 63, 70, 80, 82, 83, 86, 89, 92, 95, 126, 141, 142, 143, 144, 145, 150, 158, 159, 160, 161, 162, 189, 190, 192, 193, 196, 197, 198, 201, 203, 204, 208, 318, 326, 388, 392, 408, 412, 414, 419, 431, 437], "section": [4, 86, 449], "see": [3, 31, 86, 130, 143, 171, 352, 396, 426, 427, 429, 430, 449], "seed": [6, 84, 89, 288, 335], "seek": 132, "select": [6, 64, 197, 203, 409, 442], "select_cpu_devic": 0, "select_default_devic": 0, "selector": [20, 32, 34, 35, 36, 37, 38, 62, 76, 79, 90, 91, 99, 131, 132, 133, 134, 135, 136, 137, 138, 146, 149, 183, 184, 194, 202, 319, 320, 321, 335, 357, 362, 363, 364, 365, 366, 367, 368, 370, 371, 376, 379, 424, 435, 440, 441], "self": [84, 86, 121, 222, 223, 224, 225, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 285, 335], "semant": 143, "sens": 182, "sep": [132, 135], "separ": [84, 86, 88, 132, 135, 302], "sequenc": [37, 41, 42, 43, 57, 58, 61, 65, 85, 88, 89, 90, 91, 136, 137, 138, 143, 144, 149, 174, 183, 194, 207, 320, 321, 359, 372, 391, 397, 410, 419, 438, 440, 441], "sequenti": [14, 15, 19, 65, 69, 87, 93, 98, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 127, 128, 129, 140, 152, 200, 205, 206, 216, 322, 324, 330, 415, 423], "seri": 351, "set": [28, 29, 32, 40, 55, 76, 77, 79, 84, 86, 88, 90, 136, 143, 146, 149, 173, 175, 176, 183, 197, 203, 209, 210, 218, 263, 273, 274, 285, 320, 321, 327, 402, 403, 413, 440, 441, 449], "set_numeric_op": 6, "set_printopt": 6, "set_stat": 6, "set_string_funct": 6, "setbufs": 6, "setdiff1d": 6, "seterr": 6, "seterrcal": 6, "seterrobj": 6, "setfield": [6, 86], "setflag": 6, "setter": [84, 305], "setup": 4, "setuptool": 4, "setxor1d": 6, "sever": 170, "sh": [84, 302], "shape": [4, 6, 11, 12, 13, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 36, 40, 43, 44, 46, 47, 48, 49, 50, 51, 53, 54, 56, 58, 59, 60, 63, 65, 66, 67, 69, 71, 72, 73, 77, 81, 82, 83, 84, 85, 86, 90, 91, 92, 94, 95, 96, 97, 98, 122, 125, 126, 133, 136, 137, 141, 142, 143, 144, 145, 148, 149, 150, 151, 153, 154, 155, 159, 160, 161, 162, 165, 170, 171, 172, 173, 174, 177, 178, 179, 180, 181, 182, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 201, 202, 203, 204, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 273, 302, 308, 314, 316, 318, 319, 320, 321, 325, 326, 327, 328, 330, 331, 335, 344, 347, 352, 353, 358, 362, 363, 364, 365, 366, 367, 368, 370, 375, 376, 382, 384, 386, 387, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 417, 418, 419, 420, 422, 424, 425, 428, 429, 431, 432, 436, 438, 439, 440, 441, 442, 453], "share": [20, 32, 34, 35, 36, 37, 38, 62, 76, 79, 90, 91, 99, 131, 132, 133, 134, 135, 136, 137, 138, 146, 149, 183, 184, 194, 202, 319, 320, 321, 335, 357, 362, 363, 364, 365, 366, 367, 368, 370, 376, 379, 424, 435, 440, 441], "shares_memori": 6, "shift": [105, 110, 160, 392, 394], "short": [432, 449], "shorthand": [11, 12, 13, 46, 47, 48, 49, 82, 92, 126, 141, 142, 151, 160, 161, 162, 190, 192, 196, 208, 316, 318, 325, 326, 388, 392, 412, 431, 439], "should": [28, 29, 40, 80, 83, 84, 88, 89, 132, 139, 143, 152, 171, 172, 196, 207, 209, 210, 213, 215, 273, 304, 352, 390, 399, 419, 449], "show": [9, 86, 145, 193, 201, 211, 212, 213, 215, 218, 373], "show_config": 6, "shown": 4, "shuffl": 6, "side": [84, 168, 304, 399], "sigma": [350, 357], "sign": [6, 15, 63, 86, 165, 178, 316, 325, 327, 388, 403, 413, 432], "signal": [106, 111], "signatur": 196, "signbit": [6, 402], "signific": 88, "signum": 402, "similar": [3, 34, 35, 84, 86, 138, 183, 194, 278, 335, 363], "simpl": [4, 193, 453], "simpli": [84, 132, 143, 314], "sin": [0, 6, 23, 66, 168, 201, 405, 417], "sinc": [6, 84, 166, 168, 307, 317], "sine": [21, 22, 23, 24, 25, 26, 27, 66, 67, 404, 405, 417, 418], "singl": [9, 30, 51, 57, 84, 88, 89, 174, 197, 203, 308, 327, 335, 354, 363, 364, 365, 366, 367, 368, 370, 376, 413, 449], "singlecomplex": 9, "singleton": [44, 96, 195, 199, 213, 214, 215, 217, 219, 387, 409, 411, 436], "singular": [170, 171, 173, 176, 180], "sinh": [6, 24, 67, 404, 418], "size": [0, 6, 20, 28, 29, 32, 44, 58, 65, 69, 72, 73, 84, 86, 89, 132, 138, 144, 175, 177, 180, 183, 194, 197, 199, 203, 209, 210, 211, 212, 214, 216, 218, 288, 289, 305, 320, 327, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 361, 363, 365, 366, 367, 368, 369, 370, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 394, 397, 409, 410, 413, 419, 429, 438, 440], "skip": 80, "slice": [209, 210, 213, 214, 215, 217, 219, 330, 331, 416, 429, 449], "slogdet": [6, 165], "slower": 419, "slowest": [384, 390], "small": [15, 97, 171, 176, 187, 189], "smaller": [81, 84, 120, 171, 296, 388], "smallest": [120, 147], "smallest_norm": 120, "smat": 180, "so": [44, 86, 92, 143, 183, 195, 199, 201, 214, 217, 219, 373, 387, 411, 419, 420, 436], "solut": [171, 179], "solv": [6, 171, 181, 182, 453], "some": [20, 86, 96, 98, 125, 150, 171, 439, 449], "sometim": 449, "sometru": 6, "somewhat": 172, "sophist": 172, "sort": [6, 30, 84, 180, 272, 296, 399, 416, 422, 442, 449, 453], "sort_complex": 6, "sorter": [84, 304, 399], "sought": 164, "sourc": [4, 6, 14, 15, 16, 17, 19, 20, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 50, 51, 52, 55, 56, 57, 58, 61, 62, 64, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 87, 88, 89, 90, 91, 93, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 143, 144, 146, 147, 149, 150, 152, 156, 157, 158, 159, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 194, 195, 196, 197, 199, 200, 201, 203, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 317, 320, 321, 322, 323, 324, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 387, 389, 390, 391, 394, 395, 399, 400, 401, 406, 409, 410, 411, 413, 414, 415, 416, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441], "space": [6, 20, 132, 138, 183, 194], "spars": [149, 201], "special": [2, 86, 93, 442, 453], "specif": [0, 4, 86, 133], "specifi": [20, 28, 29, 30, 31, 32, 34, 35, 36, 38, 44, 51, 52, 58, 62, 71, 72, 73, 76, 79, 80, 84, 88, 89, 90, 91, 99, 122, 131, 132, 133, 134, 136, 137, 138, 146, 167, 169, 175, 181, 182, 183, 184, 194, 195, 199, 200, 202, 211, 212, 214, 216, 217, 218, 219, 272, 281, 319, 320, 321, 327, 335, 348, 358, 376, 384, 387, 394, 395, 396, 410, 411, 413, 419, 422, 424, 435, 436, 440, 441], "spectrum": [105, 110], "speed": 88, "speedup": 89, "spell": 317, "split": [6, 58, 85, 144, 397, 410, 438, 453], "spreadsheet": 125, "sqrt": [6, 53, 84, 287, 300, 387, 398, 408], "squar": [6, 53, 145, 146, 163, 164, 166, 167, 168, 170, 171, 172, 178, 181, 182, 217, 219, 339, 355, 386, 387, 398, 407, 411, 427, 430, 435, 436], "squeez": [6, 84, 96, 449], "src": 64, "stabl": [30, 406], "stack": [6, 57, 58, 85, 144, 165, 173, 176, 177, 178, 196, 317, 397, 416, 438], "standard": [84, 120, 126, 129, 199, 205, 214, 217, 219, 288, 309, 335, 350, 357, 364, 373, 374, 375, 376, 377, 388, 411, 436, 449, 453], "standard_cauchi": 6, "standard_exponenti": 6, "standard_gamma": 6, "standard_norm": [6, 335, 364], "standard_t": 6, "start": [2, 3, 20, 36, 38, 89, 131, 138, 183, 194, 395], "start_tim": 0, "state": 335, "statist": [442, 453], "std": [6, 84, 199, 214, 217, 219, 436, 449], "stdev": [335, 376], "step": [4, 20, 89, 138, 183, 194], "sticki": 86, "still": 44, "stop": [20, 138, 183, 194], "store": [138, 183, 194, 196], "str": [37, 58, 86, 88, 89, 132, 135, 144, 184, 264, 397, 410, 438], "str_": 86, "straightforward": 149, "stride": [39, 40, 84, 273], "string": [20, 32, 34, 35, 36, 37, 38, 62, 76, 79, 86, 90, 91, 99, 131, 132, 133, 134, 135, 136, 137, 138, 143, 146, 149, 183, 184, 194, 202, 319, 320, 321, 335, 357, 362, 363, 364, 365, 366, 367, 368, 370, 371, 376, 379, 424, 435, 440, 441, 449], "string_repr": 89, "stringio": 184, "strongli": [4, 420], "struct": 86, "structur": [86, 184], "student": 377, "style": [40, 84, 273, 286, 317, 384], "sub": [58, 80, 86, 88, 144, 182, 397, 410, 424, 438], "subarrai": [86, 149], "subclass": [35, 158], "subdivid": 86, "subdtyp": 86, "subok": [11, 12, 13, 21, 22, 23, 24, 25, 26, 27, 32, 40, 46, 47, 48, 49, 50, 51, 53, 54, 59, 60, 62, 63, 66, 67, 82, 84, 91, 92, 94, 95, 97, 125, 126, 127, 128, 129, 137, 141, 142, 145, 148, 151, 153, 154, 155, 160, 161, 162, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 198, 204, 205, 208, 273, 316, 318, 321, 325, 326, 328, 386, 388, 392, 393, 398, 402, 403, 404, 405, 407, 408, 412, 417, 418, 431, 432, 441], "subscript": [88, 89], "subset": [3, 409, 453], "subtract": 6, "subtyp": 384, "success": [337, 345, 354], "suit": 4, "suitabl": [84, 314, 399], "sum": [0, 3, 4, 6, 13, 44, 71, 73, 76, 79, 80, 81, 83, 84, 88, 143, 145, 150, 164, 171, 181, 189, 195, 196, 211, 212, 218, 280, 337, 352, 354, 387, 419, 421, 449, 453], "sum_of_weight": 44, "summari": 442, "summat": [83, 88, 89, 150, 182, 196, 322, 419], "suppli": [174, 335, 364], "support": [3, 9, 11, 12, 13, 14, 15, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 32, 34, 35, 36, 37, 38, 46, 47, 48, 49, 50, 51, 53, 54, 59, 60, 62, 63, 65, 66, 67, 68, 69, 75, 82, 84, 86, 87, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 140, 141, 142, 145, 146, 151, 152, 153, 154, 155, 160, 161, 162, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 200, 203, 204, 205, 206, 208, 209, 210, 213, 214, 215, 216, 217, 218, 219, 273, 316, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 334, 335, 336, 337, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 353, 354, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 375, 376, 377, 378, 379, 380, 381, 382, 383, 386, 388, 390, 392, 398, 400, 402, 403, 404, 406, 407, 408, 411, 412, 413, 415, 417, 418, 421, 423, 431, 432, 434, 436, 440, 441, 457], "surnam": 86, "svd": [6, 164, 170, 173, 176], "swap": [86, 414], "swapax": [6, 84, 207, 449], "swapped_cod": 86, "swapped_dt": 86, "sy": 86, "sycl": [0, 3, 20, 32, 34, 35, 36, 37, 38, 62, 76, 79, 90, 91, 99, 131, 132, 133, 134, 135, 136, 137, 138, 146, 149, 183, 184, 194, 202, 319, 320, 321, 335, 357, 362, 363, 364, 365, 366, 367, 368, 370, 371, 376, 379, 424, 435, 440, 441], "sycl_context": 84, "sycl_devic": 84, "sycl_queu": [20, 32, 34, 35, 36, 37, 38, 62, 76, 79, 84, 90, 91, 99, 131, 132, 133, 134, 135, 136, 137, 138, 146, 149, 183, 184, 194, 202, 319, 320, 321, 335, 357, 362, 363, 364, 365, 366, 367, 368, 370, 371, 376, 379, 424, 435, 440, 441], "sycldevic": [20, 32, 34, 35, 36, 37, 38, 62, 76, 79, 90, 91, 99, 131, 132, 133, 134, 135, 136, 137, 138, 146, 149, 183, 184, 194, 202, 319, 320, 321, 335, 357, 362, 363, 364, 365, 366, 367, 368, 370, 371, 376, 379, 424, 435, 440, 441], "syclqueu": [20, 32, 34, 35, 36, 37, 38, 62, 76, 79, 90, 91, 99, 131, 132, 133, 134, 135, 136, 137, 138, 146, 149, 183, 184, 194, 202, 319, 320, 321, 335, 357, 362, 363, 364, 365, 366, 367, 368, 370, 371, 376, 379, 424, 435, 440, 441], "symmetr": [163, 166, 167, 168, 169, 173, 176, 180], "symmetri": [106, 111], "syntax": 449, "sys_is_l": 86, "system": [3, 4, 179], "t": [58, 69, 84, 86, 163, 166, 168, 171, 314, 317, 377], "tabl": [2, 9, 442], "tack": 86, "take": [6, 57, 84, 331, 390, 399, 416, 449], "take_along_axi": [6, 28, 29, 30, 55, 331, 415], "taken": [44, 80, 81, 89, 143, 196, 217, 219, 411, 424, 426, 429, 436, 437], "tan": [6, 25, 26, 66, 404, 418], "tangent": [18, 21, 22, 23, 24, 25, 26, 27, 66, 67, 404, 405, 417, 418], "tanh": [6, 27, 67, 405, 417], "target": [40, 52, 84, 273], "target_devic": 84, "tau": 177, "tbb": 4, "tempfil": 132, "temporari": 132, "temporaryfil": 132, "ten": 345, "tensor": [14, 15, 19, 37, 68, 84, 88, 89, 98, 127, 128, 129, 181, 182, 205, 209, 210, 213, 215, 216, 322, 324, 329, 330, 415, 419], "tensordot": [6, 83, 88, 150, 181, 182, 196], "tensorinv": [6, 182], "tensorsolv": [6, 181], "term": [13, 82, 89, 208, 412, 431], "test": [0, 2, 14, 15, 19, 92, 141, 142, 153, 154, 155, 161, 162, 216, 317, 318, 337, 449, 453], "test_repetit": 0, "test_typ": 0, "text": [131, 132, 134, 135, 184], "th": [73, 76, 79, 81, 84, 87, 99, 140, 149, 200, 314, 319, 422, 425, 428], "than": [32, 72, 73, 84, 120, 123, 124, 126, 133, 141, 142, 143, 144, 160, 161, 162, 171, 173, 176, 177, 211, 212, 216, 218, 296, 327, 392, 402, 409, 410, 413, 419, 432, 449], "thei": [15, 86, 168, 171, 397, 399, 419, 435, 438, 449], "them": [57, 449], "theor": 166, "theoret": 89, "therefor": [133, 167, 169], "thi": [11, 12, 16, 17, 20, 28, 29, 31, 32, 34, 35, 36, 37, 38, 39, 40, 56, 58, 62, 71, 74, 76, 77, 79, 81, 84, 85, 86, 88, 89, 97, 120, 123, 124, 131, 132, 133, 134, 135, 136, 137, 138, 139, 144, 167, 169, 171, 174, 175, 178, 183, 184, 187, 189, 194, 195, 196, 197, 203, 205, 207, 209, 210, 213, 215, 216, 218, 273, 278, 283, 296, 302, 305, 314, 317, 327, 331, 333, 368, 370, 384, 387, 388, 390, 395, 397, 410, 413, 415, 416, 420, 435, 438, 439], "third": [57, 58, 85, 144, 397, 410, 438], "those": [56, 172, 331], "thousand": 345, "three": [41, 42, 43, 96, 172, 335, 371, 419], "threshold": 173, "through": [35, 86, 166, 168, 171, 449], "throw": 352, "thu": 420, "tile": [6, 389, 453], "time": [0, 15, 81, 83, 127, 128, 129, 150, 155, 159, 171, 205, 322, 337, 352, 389, 416, 419, 420, 437], "time_dpnp": 0, "time_numpi": 0, "timedelta": 86, "timeit": 88, "tini": 120, "titl": 86, "to_begin": 87, "to_devic": 84, "to_end": 87, "tobyt": 6, "todo": 355, "tofil": [6, 132], "togeth": [15, 58, 86, 410, 439], "tol": [173, 353], "toler": [15, 33, 152], "tolist": 6, "too": [4, 439], "toolkit": 3, "tostr": 6, "total": [6, 68, 72, 84, 293, 411, 436], "toward": [125, 126, 143, 388, 432], "trace": [6, 76, 79, 80, 88, 449], "traceback": 409, "transfer": 84, "transform": [89, 101, 102, 103, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 442], "transpos": [6, 84, 88, 163, 168, 207, 221, 449, 453], "trapezoid": [413, 423], "trapz": [6, 413], "treat": [15, 132, 167, 169, 171, 174, 184, 211, 212, 216, 218, 327, 331, 399, 416, 420, 449], "tri": 6, "trial": 337, "triangl": [76, 145, 387, 424, 425, 426, 427, 428, 429, 430], "triangular": [6, 163, 167, 169, 177], "trigonometr": [18, 21, 22, 23, 24, 25, 26, 27, 66, 67, 404, 405, 417, 418, 453], "tril": [6, 76, 424, 426, 427, 430], "tril_indic": [6, 427, 430], "tril_indices_from": 6, "trim_zero": 6, "triu": [6, 76, 424, 429], "triu_indic": 6, "triu_indices_from": 6, "trivial": [166, 416], "true": [0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 36, 38, 40, 41, 44, 46, 47, 48, 49, 52, 53, 54, 59, 60, 62, 63, 64, 66, 67, 68, 69, 73, 82, 84, 86, 88, 89, 92, 94, 95, 96, 97, 98, 122, 123, 124, 125, 126, 127, 128, 129, 133, 138, 141, 142, 143, 145, 148, 149, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 170, 173, 175, 176, 177, 179, 180, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 203, 204, 205, 208, 209, 210, 213, 214, 215, 216, 217, 218, 219, 225, 268, 269, 273, 278, 290, 291, 292, 297, 309, 311, 315, 316, 317, 318, 325, 326, 327, 328, 331, 340, 386, 387, 388, 390, 392, 393, 398, 402, 403, 404, 405, 407, 408, 411, 412, 413, 416, 417, 418, 419, 431, 432, 435, 436, 439], "true_divid": [6, 82], "trunc": [6, 31, 54, 125, 393, 396], "truncat": [31, 54, 125, 373, 393, 396, 432], "trust": [209, 210], "truth": [46, 47, 48, 49, 92, 141, 142, 151, 161, 162, 190, 191, 192, 193, 318, 449, 453], "try": 4, "tup": [57, 85, 144, 397, 438], "tupl": [28, 29, 32, 34, 35, 36, 38, 44, 51, 62, 71, 76, 77, 79, 84, 86, 89, 96, 122, 133, 136, 137, 138, 143, 149, 159, 175, 177, 182, 183, 194, 195, 196, 197, 199, 201, 202, 203, 213, 214, 215, 216, 217, 218, 219, 305, 314, 317, 319, 327, 387, 390, 394, 401, 409, 411, 413, 420, 422, 426, 429, 435, 436, 449], "turn": 57, "twister": 335, "two": [15, 33, 41, 42, 46, 47, 48, 49, 61, 65, 70, 79, 80, 81, 83, 84, 86, 88, 89, 96, 150, 151, 152, 159, 167, 171, 174, 179, 190, 192, 193, 196, 197, 198, 203, 204, 207, 213, 215, 296, 312, 322, 335, 364, 393, 396, 414, 419, 426, 429, 437], "type": [0, 2, 3, 4, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 273, 278, 282, 286, 302, 314, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 354, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 428, 429, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 453], "type_nam": 0, "typeerror": [15, 44, 64, 68, 101, 107, 115], "typenam": 6, "typestr": 86, "typic": [15, 399, 449], "u": [86, 163, 167, 169, 180, 216, 218], "u1": [86, 131, 132], "u16": 86, "u4": 52, "u8": 86, "ufunc": [2, 442, 449], "uint64": 86, "uint8": [86, 131, 132], "un": 86, "unari": 449, "undefin": [18, 84, 296], "underli": [46, 48, 49, 390], "undocu": 86, "unexpect": [216, 218], "unicod": 86, "uniform": [6, 86, 143, 194, 335, 362, 365, 367, 368, 370], "uniformli": [194, 335, 379], "uniniti": [32, 90, 91, 136, 320, 440], "union1d": 6, "uniqu": [6, 44, 45, 71, 86, 195, 199, 207, 214, 217, 219, 387, 411, 436], "unit": [84, 166, 172, 178, 310], "unitari": [177, 180], "uniti": 143, "univers": [2, 442, 449], "unless": [40, 72, 73, 84, 88, 143, 166, 173, 175, 194, 211, 212, 216, 218, 273, 327, 413], "unlik": [30, 84, 302, 406], "unpackbit": 6, "unravel_index": [6, 28, 29], "unsaf": [40, 52, 58, 64, 84, 88, 144, 196, 273, 397, 410, 438], "unsign": [86, 327, 413], "unspecifi": 390, "unsupport": [11, 12, 13, 15, 21, 22, 23, 24, 25, 26, 27, 46, 47, 48, 49, 53, 54, 56, 63, 66, 67, 82, 94, 95, 97, 100, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 125, 126, 127, 128, 129, 140, 145, 151, 160, 186, 187, 188, 189, 198, 204, 205, 206, 208, 316, 325, 326, 328, 386, 388, 392, 393, 398, 402, 403, 404, 405, 412, 417, 418, 423, 431, 432], "until": [89, 394, 395], "unwrap": [6, 74, 333], "up": [4, 86, 88, 124], "updat": 4, "uplo": [167, 169], "upon": [84, 310], "upper": [76, 99, 143, 163, 167, 169, 177, 424, 428, 429], "us": [4, 13, 20, 32, 34, 35, 36, 37, 38, 39, 40, 46, 47, 48, 49, 52, 56, 58, 62, 70, 72, 73, 76, 77, 79, 80, 82, 84, 86, 88, 89, 90, 91, 92, 96, 99, 125, 126, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 146, 149, 150, 151, 160, 161, 162, 163, 164, 167, 168, 169, 171, 173, 174, 175, 176, 183, 184, 190, 192, 194, 196, 197, 199, 201, 202, 203, 208, 209, 210, 211, 212, 214, 216, 217, 218, 219, 227, 273, 278, 316, 317, 318, 319, 320, 321, 325, 326, 327, 331, 335, 338, 340, 341, 351, 356, 357, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 376, 379, 384, 388, 389, 390, 392, 394, 399, 402, 411, 412, 413, 415, 416, 419, 420, 423, 424, 429, 431, 435, 436, 439, 440, 441, 449], "usag": [3, 4], "use_getitem": 86, "use_setitem": 86, "user": 86, "usm": [20, 32, 34, 35, 36, 37, 38, 62, 76, 79, 90, 91, 99, 131, 132, 133, 134, 135, 136, 137, 138, 146, 149, 183, 184, 194, 202, 319, 320, 321, 335, 357, 362, 363, 364, 365, 366, 367, 368, 370, 376, 379, 409, 424, 435, 440, 441], "usm_ndarrai": [11, 12, 13, 14, 15, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 37, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 63, 64, 66, 67, 68, 70, 71, 72, 73, 76, 80, 81, 82, 83, 84, 85, 88, 91, 92, 94, 95, 96, 97, 98, 122, 123, 124, 125, 126, 127, 128, 129, 137, 141, 142, 143, 144, 145, 148, 150, 151, 153, 154, 155, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 201, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 273, 316, 317, 318, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 425, 428, 431, 432, 436, 437, 438, 439, 441], "usm_typ": [20, 32, 34, 35, 36, 37, 38, 62, 76, 79, 84, 90, 91, 99, 131, 132, 133, 134, 135, 136, 137, 138, 146, 149, 183, 184, 194, 202, 319, 320, 321, 335, 357, 362, 363, 364, 365, 366, 367, 368, 370, 376, 379, 424, 435, 440, 441], "usual": [77, 86, 196], "util": 442, "v": [61, 76, 79, 84, 86, 166, 167, 304, 399], "v0": 6, "v1": 6, "v10": 86, "v9": 6, "val": [84, 119, 121, 263, 298, 324, 330], "valid": [65, 96, 414, 426, 427, 429, 430], "valu": [11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 38, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 71, 73, 76, 81, 82, 84, 86, 87, 88, 90, 91, 92, 94, 95, 97, 98, 99, 100, 101, 107, 119, 120, 121, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 141, 142, 143, 145, 146, 148, 149, 151, 153, 154, 155, 160, 161, 162, 163, 166, 167, 168, 169, 170, 171, 172, 173, 176, 178, 179, 180, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 203, 204, 205, 208, 209, 210, 213, 214, 215, 216, 217, 218, 219, 223, 224, 228, 230, 231, 233, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 258, 260, 262, 263, 265, 266, 267, 270, 271, 273, 275, 278, 283, 285, 296, 298, 316, 317, 318, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 335, 345, 362, 363, 379, 385, 386, 387, 388, 389, 390, 392, 393, 394, 396, 398, 399, 400, 402, 403, 404, 406, 407, 408, 411, 412, 413, 415, 416, 417, 418, 421, 431, 432, 434, 436, 439, 440, 441, 449, 453], "value2": 86, "valueerror": [209, 210, 390, 409], "vander": 6, "vandermond": 435, "var": [6, 84, 199, 214, 217, 219, 411, 449], "vararg": 140, "vari": [18, 80, 89, 133, 149, 164, 166, 167, 171, 175, 214, 217, 219], "variabl": [69, 171, 179], "varianc": [84, 199, 214, 217, 219, 315, 411, 436, 453], "variou": 457, "vdot": [6, 83, 196], "vector": [70, 88, 133, 150, 164, 173, 174, 175, 180, 196, 201, 437, 453], "vendor": 4, "veri": [3, 15, 201], "verif": 0, "verifi": 163, "version": [4, 84, 86, 285, 317], "vertic": [57, 58, 80, 85, 122, 123, 144, 397, 410, 438], "vh": 180, "view": [6, 41, 42, 43, 50, 76, 84, 96, 122, 123, 124, 201, 207, 221, 302, 314, 331, 390, 409, 414, 422], "violat": 64, "void": 86, "void640": 86, "von": 380, "vonmis": 6, "vsplit": [6, 58], "vstack": [6, 57, 58, 85, 144, 171, 397, 410], "w": [44, 166, 167, 168, 169, 172], "wa": [71, 86, 174, 195, 213, 215, 217, 219, 335, 376, 387, 411, 436], "wai": [3, 4, 84, 89, 132, 296, 419], "wald": 6, "walk": 86, "want": [4, 416], "warn": [86, 209, 210, 353], "we": [62, 77, 80, 89, 171, 331, 416], "weibul": [6, 383], "weight": [44, 45, 69, 143, 199, 214, 413], "well": [86, 88, 132, 143, 327, 337, 354, 373], "were": [58, 133, 335, 364, 410], "what": [40, 52, 58, 64, 84, 86, 88, 92, 144, 196, 273, 337, 354, 397, 410, 438, 449], "when": [20, 32, 34, 35, 36, 38, 39, 40, 44, 62, 64, 84, 86, 138, 166, 175, 177, 183, 194, 196, 211, 212, 213, 215, 216, 218, 273, 393, 395, 396, 415, 419, 439], "whenev": [96, 414, 422], "where": [0, 6, 11, 12, 13, 14, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 32, 34, 35, 36, 37, 38, 42, 43, 44, 46, 47, 48, 49, 53, 54, 56, 59, 60, 62, 63, 64, 66, 67, 71, 76, 79, 81, 82, 84, 90, 91, 92, 94, 95, 96, 97, 98, 99, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 141, 142, 143, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 160, 161, 162, 163, 171, 177, 180, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 202, 203, 204, 205, 208, 213, 214, 215, 216, 217, 218, 219, 268, 269, 290, 291, 292, 297, 304, 309, 311, 315, 316, 317, 318, 319, 320, 321, 325, 326, 327, 328, 335, 357, 362, 363, 364, 365, 366, 367, 368, 370, 371, 376, 379, 386, 387, 388, 392, 393, 395, 398, 399, 402, 403, 404, 405, 407, 408, 411, 412, 413, 417, 418, 422, 424, 431, 432, 435, 436, 440, 441], "wherev": 64, "whether": [14, 15, 19, 71, 86, 163, 177, 183, 216, 218, 390, 403], "which": [3, 4, 28, 29, 30, 34, 35, 40, 44, 50, 58, 64, 71, 72, 73, 79, 80, 81, 83, 84, 86, 88, 89, 96, 120, 122, 133, 134, 138, 143, 144, 153, 154, 155, 163, 166, 173, 175, 182, 194, 195, 196, 197, 199, 203, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 273, 317, 327, 330, 387, 389, 394, 406, 409, 410, 411, 413, 422, 424, 425, 426, 428, 429, 432, 436, 439, 449], "whichev": 150, "while": [143, 199, 214, 217, 219, 317, 327, 394, 411, 413, 424, 436], "whitespac": [132, 135], "who": 6, "whose": [11, 12, 80, 86, 99, 164, 167, 168, 169, 181, 207, 394, 427, 430], "width": [86, 143], "wild": [337, 354], "window": 4, "wise": [11, 12, 13, 15, 18, 21, 22, 23, 24, 25, 26, 27, 31, 33, 46, 47, 48, 49, 53, 54, 57, 58, 59, 60, 63, 66, 67, 71, 82, 84, 85, 92, 94, 95, 97, 100, 125, 126, 127, 128, 129, 141, 142, 144, 145, 148, 151, 152, 153, 154, 155, 160, 161, 162, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 197, 198, 203, 204, 205, 206, 208, 213, 215, 216, 277, 316, 318, 325, 326, 328, 385, 386, 388, 392, 393, 396, 397, 398, 402, 403, 404, 405, 407, 408, 410, 412, 417, 418, 431, 432, 438, 449, 453, 457], "within": [15, 20, 33, 40, 84, 88, 143, 152, 273, 330, 335, 379], "without": [84, 90, 305, 314, 384, 390, 449], "won": 86, "word": [125, 168, 335, 379], "work": [4, 31, 39, 74, 205, 333, 416, 449], "world": [86, 337, 354], "would": [30, 58, 84, 86, 133, 149, 174, 196, 296, 335, 406, 410, 416, 422], "wrap": [74, 84, 119, 298, 313, 330, 333, 399, 415], "wrapper": 84, "write": [76, 132, 390], "written": [71, 132, 195, 387, 439], "x": [0, 3, 4, 11, 12, 14, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 38, 41, 42, 43, 47, 50, 51, 53, 54, 59, 60, 62, 63, 65, 66, 67, 69, 70, 71, 76, 79, 81, 84, 86, 87, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 121, 125, 131, 132, 133, 134, 136, 137, 138, 140, 146, 148, 149, 151, 153, 154, 155, 164, 168, 171, 175, 177, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 201, 202, 206, 207, 273, 278, 287, 288, 300, 316, 317, 319, 320, 321, 322, 324, 325, 327, 328, 329, 330, 353, 359, 384, 385, 386, 387, 389, 393, 394, 395, 396, 398, 402, 403, 404, 405, 407, 408, 409, 414, 415, 417, 418, 423, 424, 432, 433, 435, 439, 440, 441], "x0": [36, 38, 62, 79, 321, 435, 441], "x00": 132, "x01": [131, 132], "x02": [131, 132], "x03": [131, 132], "x04": [131, 132], "x05": 131, "x1": [13, 15, 18, 25, 26, 40, 45, 46, 48, 49, 55, 63, 65, 74, 75, 78, 82, 84, 87, 92, 100, 119, 126, 127, 128, 129, 140, 141, 142, 145, 152, 160, 161, 162, 189, 190, 191, 192, 193, 196, 198, 200, 201, 204, 205, 206, 208, 273, 316, 318, 322, 323, 325, 326, 332, 333, 334, 372, 388, 392, 394, 412, 421, 423, 427, 430, 431, 434], "x1_i": [13, 26, 46, 48, 49, 63, 82, 92, 126, 141, 142, 145, 160, 161, 162, 189, 190, 192, 193, 208, 318, 326, 388, 392, 412, 431], "x2": [13, 14, 15, 18, 19, 25, 26, 32, 46, 48, 49, 63, 65, 82, 92, 126, 127, 128, 129, 141, 142, 145, 152, 160, 161, 162, 189, 190, 191, 192, 193, 196, 198, 201, 204, 205, 208, 316, 318, 322, 325, 326, 388, 392, 394, 407, 412, 431], "x2_i": [13, 26, 46, 48, 49, 63, 82, 92, 126, 141, 142, 145, 160, 161, 162, 189, 190, 192, 193, 208, 318, 326, 388, 392, 412, 431], "x3": [14, 19], "x_i": [11, 12, 18, 21, 22, 23, 24, 25, 27, 47, 53, 54, 59, 60, 66, 67, 94, 95, 97, 125, 148, 151, 185, 186, 187, 188, 191, 316, 325, 328, 385, 386, 393, 396, 398, 402, 403, 404, 405, 407, 408, 417, 418, 432], "xi": [188, 201], "xn": 201, "xor": [46, 47, 48, 49, 151, 190, 191, 192, 193], "xv": 201, "xx": 201, "xy": 201, "y": [0, 4, 20, 32, 34, 35, 36, 38, 41, 50, 62, 69, 70, 79, 84, 86, 90, 91, 96, 99, 131, 132, 133, 134, 136, 137, 138, 140, 146, 171, 183, 184, 194, 201, 202, 206, 278, 302, 319, 320, 321, 423, 424, 435, 439, 440, 441], "y1": [140, 423], "yet": [4, 6], "yield": [30, 216, 218, 317, 335, 439, 449], "you": [4, 416, 449], "your": 4, "yv": 201, "yy": 201, "z": [20, 32, 34, 35, 36, 38, 62, 79, 90, 91, 99, 131, 132, 133, 134, 136, 137, 138, 146, 183, 184, 194, 201, 202, 319, 320, 321, 345, 424, 435, 440, 441], "zero": [6, 14, 19, 30, 32, 68, 71, 77, 81, 84, 90, 91, 99, 105, 110, 125, 132, 136, 137, 146, 160, 166, 167, 169, 171, 172, 173, 176, 180, 195, 197, 199, 203, 207, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 295, 310, 317, 320, 321, 327, 335, 337, 365, 367, 368, 370, 387, 402, 406, 411, 413, 419, 424, 425, 428, 432, 436, 439, 441], "zeros_lik": [6, 32, 91, 137, 321, 440], "zipf": 6}, "titles": ["Interplay with the Data Parallel Control Library", "C++ backend API Reference", "Data Parallel Extension for NumPy*", "Overview", "Quick Start Guide", "Binary Operations", "Comparison Table NumPy/ DPNP/ CuPy", "Array creation routines", "Data type routines", "Available array data types", "FFT Functions", "dpnp.abs", "dpnp.absolute", "dpnp.add", "dpnp.all", "dpnp.allclose", "dpnp.amax", "dpnp.amin", "dpnp.angle", "dpnp.any", "dpnp.arange", "dpnp.arccos", "dpnp.arccosh", "dpnp.arcsin", "dpnp.arcsinh", "dpnp.arctan", "dpnp.arctan2", "dpnp.arctanh", "dpnp.argmax", "dpnp.argmin", "dpnp.argsort", "dpnp.around", "dpnp.array", "dpnp.array_equal", "dpnp.asanyarray", "dpnp.asarray", "dpnp.ascontiguousarray", "dpnp.asfarray", "dpnp.asfortranarray", "dpnp.asnumpy", "dpnp.astype", "dpnp.atleast_1d", "dpnp.atleast_2d", "dpnp.atleast_3d", "dpnp.average", "dpnp.bincount", "dpnp.bitwise_and", "dpnp.bitwise_not", "dpnp.bitwise_or", "dpnp.bitwise_xor", "dpnp.broadcast_arrays", "dpnp.broadcast_to", "dpnp.can_cast", "dpnp.cbrt", "dpnp.ceil", "dpnp.choose", "dpnp.clip", "dpnp.column_stack", "dpnp.concatenate", "dpnp.conj", "dpnp.conjugate", "dpnp.convolve", "dpnp.copy", "dpnp.copysign", "dpnp.copyto", "dpnp.correlate", "dpnp.cos", "dpnp.cosh", "dpnp.count_nonzero", "dpnp.cov", "dpnp.cross", "dpnp.cumlogsumexp", "dpnp.cumprod", "dpnp.cumsum", "dpnp.deg2rad", "dpnp.degrees", "dpnp.diag", "dpnp.diag_indices", "dpnp.diag_indices_from", "dpnp.diagflat", "dpnp.diagonal", "dpnp.diff", "dpnp.divide", "dpnp.dot", "dpnp.dpnp_array.dpnp_array", "dpnp.dstack", "dpnp.dtype", "dpnp.ediff1d", "dpnp.einsum", "dpnp.einsum_path", "dpnp.empty", "dpnp.empty_like", "dpnp.equal", "dpnp.erf", "dpnp.exp", "dpnp.exp2", "dpnp.expand_dims", "dpnp.expm1", "dpnp.extract", "dpnp.eye", "dpnp.fabs", "dpnp.fft.fft", "dpnp.fft.fft2", "dpnp.fft.fftfreq", "dpnp.fft.fftn", "dpnp.fft.fftshift", "dpnp.fft.hfft", "dpnp.fft.ifft", "dpnp.fft.ifft2", "dpnp.fft.ifftn", "dpnp.fft.ifftshift", "dpnp.fft.ihfft", "dpnp.fft.irfft", "dpnp.fft.irfft2", "dpnp.fft.irfftn", "dpnp.fft.rfft", "dpnp.fft.rfft2", "dpnp.fft.rfftfreq", "dpnp.fft.rfftn", "dpnp.fill_diagonal", "dpnp.finfo", "dpnp.flatiter", "dpnp.flip", "dpnp.fliplr", "dpnp.flipud", "dpnp.floor", "dpnp.floor_divide", "dpnp.fmax", "dpnp.fmin", "dpnp.fmod", "dpnp.from_dlpack", "dpnp.frombuffer", "dpnp.fromfile", "dpnp.fromfunction", "dpnp.fromiter", "dpnp.fromstring", "dpnp.full", "dpnp.full_like", "dpnp.geomspace", "dpnp.get_include", "dpnp.gradient", "dpnp.greater", "dpnp.greater_equal", "dpnp.histogram", "dpnp.hstack", "dpnp.hypot", "dpnp.identity", "dpnp.iinfo", "dpnp.imag", "dpnp.indices", "dpnp.inner", "dpnp.invert", "dpnp.isclose", "dpnp.isfinite", "dpnp.isinf", "dpnp.isnan", "dpnp.isscalar", "dpnp.issubdtype", "dpnp.issubsctype", "dpnp.kron", "dpnp.left_shift", "dpnp.less", "dpnp.less_equal", "dpnp.linalg.cholesky", "dpnp.linalg.cond", "dpnp.linalg.det", "dpnp.linalg.eig", "dpnp.linalg.eigh", "dpnp.linalg.eigvals", "dpnp.linalg.eigvalsh", "dpnp.linalg.inv", "dpnp.linalg.lstsq", "dpnp.linalg.matrix_power", "dpnp.linalg.matrix_rank", "dpnp.linalg.multi_dot", "dpnp.linalg.norm", "dpnp.linalg.pinv", "dpnp.linalg.qr", "dpnp.linalg.slogdet", "dpnp.linalg.solve", "dpnp.linalg.svd", "dpnp.linalg.tensorinv", "dpnp.linalg.tensorsolve", "dpnp.linspace", "dpnp.loadtxt", "dpnp.log", "dpnp.log10", "dpnp.log1p", "dpnp.log2", "dpnp.logaddexp", "dpnp.logical_and", "dpnp.logical_not", "dpnp.logical_or", "dpnp.logical_xor", "dpnp.logspace", "dpnp.logsumexp", "dpnp.matmul", "dpnp.max", "dpnp.maximum", "dpnp.mean", "dpnp.median", "dpnp.meshgrid", "dpnp.mgrid", "dpnp.min", "dpnp.minimum", "dpnp.mod", "dpnp.modf", "dpnp.moveaxis", "dpnp.multiply", "dpnp.nanargmax", "dpnp.nanargmin", "dpnp.nancumprod", "dpnp.nancumsum", "dpnp.nanmax", "dpnp.nanmean", "dpnp.nanmin", "dpnp.nanprod", "dpnp.nanstd", "dpnp.nansum", "dpnp.nanvar", "dpnp.ndarray", "dpnp.ndarray.T", "dpnp.ndarray.__abs__", "dpnp.ndarray.__add__", "dpnp.ndarray.__and__", "dpnp.ndarray.__bool__", "dpnp.ndarray.__complex__", "dpnp.ndarray.__copy__", "dpnp.ndarray.__eq__", "dpnp.ndarray.__float__", "dpnp.ndarray.__floordiv__", "dpnp.ndarray.__ge__", "dpnp.ndarray.__getitem__", "dpnp.ndarray.__gt__", "dpnp.ndarray.__iadd__", "dpnp.ndarray.__iand__", "dpnp.ndarray.__ifloordiv__", "dpnp.ndarray.__ilshift__", "dpnp.ndarray.__imod__", "dpnp.ndarray.__imul__", "dpnp.ndarray.__int__", "dpnp.ndarray.__invert__", "dpnp.ndarray.__ior__", "dpnp.ndarray.__ipow__", "dpnp.ndarray.__irshift__", "dpnp.ndarray.__isub__", "dpnp.ndarray.__itruediv__", "dpnp.ndarray.__ixor__", "dpnp.ndarray.__le__", "dpnp.ndarray.__len__", "dpnp.ndarray.__lshift__", "dpnp.ndarray.__lt__", "dpnp.ndarray.__matmul__", "dpnp.ndarray.__mod__", "dpnp.ndarray.__mul__", "dpnp.ndarray.__ne__", "dpnp.ndarray.__neg__", "dpnp.ndarray.__new__", "dpnp.ndarray.__or__", "dpnp.ndarray.__pos__", "dpnp.ndarray.__pow__", "dpnp.ndarray.__repr__", "dpnp.ndarray.__rshift__", "dpnp.ndarray.__setitem__", "dpnp.ndarray.__str__", "dpnp.ndarray.__sub__", "dpnp.ndarray.__truediv__", "dpnp.ndarray.__xor__", "dpnp.ndarray.all", "dpnp.ndarray.any", "dpnp.ndarray.argmax", "dpnp.ndarray.argmin", "dpnp.ndarray.argsort", "dpnp.ndarray.astype", "dpnp.ndarray.choose", "dpnp.ndarray.clip", "dpnp.ndarray.conj", "dpnp.ndarray.conjugate", "dpnp.ndarray.copy", "dpnp.ndarray.cumprod", "dpnp.ndarray.cumsum", "dpnp.ndarray.diagonal", "dpnp.ndarray.dtype", "dpnp.ndarray.fill", "dpnp.ndarray.flags", "dpnp.ndarray.flat", "dpnp.ndarray.flatten", "dpnp.ndarray.imag", "dpnp.ndarray.item", "dpnp.ndarray.itemsize", "dpnp.ndarray.max", "dpnp.ndarray.mean", "dpnp.ndarray.min", "dpnp.ndarray.nbytes", "dpnp.ndarray.ndim", "dpnp.ndarray.nonzero", "dpnp.ndarray.partition", "dpnp.ndarray.prod", "dpnp.ndarray.put", "dpnp.ndarray.ravel", "dpnp.ndarray.real", "dpnp.ndarray.repeat", "dpnp.ndarray.reshape", "dpnp.ndarray.round", "dpnp.ndarray.searchsorted", "dpnp.ndarray.shape", "dpnp.ndarray.size", "dpnp.ndarray.sort", "dpnp.ndarray.squeeze", "dpnp.ndarray.std", "dpnp.ndarray.strides", "dpnp.ndarray.sum", "dpnp.ndarray.swapaxes", "dpnp.ndarray.take", "dpnp.ndarray.transpose", "dpnp.ndarray.var", "dpnp.negative", "dpnp.nonzero", "dpnp.not_equal", "dpnp.ogrid", "dpnp.ones", "dpnp.ones_like", "dpnp.outer", "dpnp.partition", "dpnp.place", "dpnp.positive", "dpnp.power", "dpnp.prod", "dpnp.proj", "dpnp.ptp", "dpnp.put", "dpnp.put_along_axis", "dpnp.putmask", "dpnp.rad2deg", "dpnp.radians", "dpnp.random.RandomState", "dpnp.random.beta", "dpnp.random.binomial", "dpnp.random.bytes", "dpnp.random.chisquare", "dpnp.random.choice", "dpnp.random.dirichlet", "dpnp.random.exponential", "dpnp.random.f", "dpnp.random.gamma", "dpnp.random.geometric", "dpnp.random.gumbel", "dpnp.random.hypergeometric", "dpnp.random.laplace", "dpnp.random.logistic", "dpnp.random.lognormal", "dpnp.random.logseries", "dpnp.random.multinomial", "dpnp.random.multivariate_normal", "dpnp.random.negative_binomial", "dpnp.random.noncentral_chisquare", "dpnp.random.noncentral_f", "dpnp.random.normal", "dpnp.random.pareto", "dpnp.random.permutation", "dpnp.random.poisson", "dpnp.random.power", "dpnp.random.rand", "dpnp.random.randint", "dpnp.random.randn", "dpnp.random.random", "dpnp.random.random_integers", "dpnp.random.random_sample", "dpnp.random.ranf", "dpnp.random.rayleigh", "dpnp.random.sample", "dpnp.random.seed", "dpnp.random.shuffle", "dpnp.random.standard_cauchy", "dpnp.random.standard_exponential", "dpnp.random.standard_gamma", "dpnp.random.standard_normal", "dpnp.random.standard_t", "dpnp.random.triangular", "dpnp.random.uniform", "dpnp.random.vonmises", "dpnp.random.wald", "dpnp.random.weibull", "dpnp.random.zipf", "dpnp.ravel", "dpnp.real", "dpnp.reciprocal", "dpnp.reduce_hypot", "dpnp.remainder", "dpnp.repeat", "dpnp.reshape", "dpnp.result_type", "dpnp.right_shift", "dpnp.rint", "dpnp.roll", "dpnp.rollaxis", "dpnp.round", "dpnp.row_stack", "dpnp.rsqrt", "dpnp.searchsorted", "dpnp.select", "dpnp.shape", "dpnp.sign", "dpnp.signbit", "dpnp.sin", "dpnp.sinh", "dpnp.sort", "dpnp.sqrt", "dpnp.square", "dpnp.squeeze", "dpnp.stack", "dpnp.std", "dpnp.subtract", "dpnp.sum", "dpnp.swapaxes", "dpnp.take", "dpnp.take_along_axis", "dpnp.tan", "dpnp.tanh", "dpnp.tensordot", "dpnp.tile", "dpnp.trace", "dpnp.transpose", "dpnp.trapz", "dpnp.tri", "dpnp.tril", "dpnp.tril_indices", "dpnp.tril_indices_from", "dpnp.triu", "dpnp.triu_indices", "dpnp.triu_indices_from", "dpnp.true_divide", "dpnp.trunc", "dpnp.unique", "dpnp.unwrap", "dpnp.vander", "dpnp.var", "dpnp.vdot", "dpnp.vstack", "dpnp.where", "dpnp.zeros", "dpnp.zeros_like", "API Reference", "Array Indexing Routines", "Linear Algebra", "Logic Functions", "Array Manipulation Routines", "Mathematical Functions", "Miscellaneous routines", "Multi-Dimensional Array (ndarray)", "Padding", "Polynomials", "Random Sampling (<code class=\"docutils literal notranslate\"><span class=\"pre\">dpnp.random</span></code>)", "Routines", "Sorting, Searching, and Counting", "Special Functions", "Statistical Functions", "Universal Functions (ufunc)"], "titleterms": {"The": 7, "__abs__": 222, "__add__": 223, "__and__": 224, "__bool__": 225, "__complex__": 226, "__copy__": 227, "__eq__": 228, "__float__": 229, "__floordiv__": 230, "__ge__": 231, "__getitem__": 232, "__gt__": 233, "__iadd__": 234, "__iand__": 235, "__ifloordiv__": 236, "__ilshift__": 237, "__imod__": 238, "__imul__": 239, "__int__": 240, "__invert__": 241, "__ior__": 242, "__ipow__": 243, "__irshift__": 244, "__isub__": 245, "__itruediv__": 246, "__ixor__": 247, "__le__": 248, "__len__": 249, "__lshift__": 250, "__lt__": 251, "__matmul__": 252, "__mod__": 253, "__mul__": 254, "__ne__": 255, "__neg__": 256, "__new__": 257, "__or__": 258, "__pos__": 259, "__pow__": 260, "__repr__": 261, "__rshift__": 262, "__setitem__": 263, "__str__": 264, "__sub__": 265, "__truediv__": 266, "__xor__": 267, "ab": 11, "absolut": 12, "ad": 446, "add": 13, "algebra": [6, 444], "all": [14, 268], "allclos": 15, "amax": 16, "amin": 17, "anaconda": 4, "angl": 18, "ani": [19, 269], "api": [1, 442], "arang": 20, "arcco": 21, "arccosh": 22, "arcsin": 23, "arcsinh": 24, "arctan": 25, "arctan2": 26, "arctanh": 27, "argmax": [28, 270], "argmin": [29, 271], "argsort": [30, 272], "arithmet": [447, 449, 451], "around": 31, "arrai": [6, 7, 9, 32, 443, 445, 446, 449], "array_equ": 33, "asanyarrai": 34, "asarrai": 35, "ascontiguousarrai": 36, "asfarrai": 37, "asfortranarrai": 38, "asnumpi": 39, "astyp": [40, 273], "atleast_1d": 41, "atleast_2d": 42, "atleast_3d": 43, "attribut": 449, "avail": [9, 457], "averag": [44, 456], "backend": 1, "basic": [446, 451], "beta": 336, "binari": 5, "bincount": 45, "binomi": 337, "bit": [5, 457], "bitwise_and": 46, "bitwise_not": 47, "bitwise_or": 48, "bitwise_xor": 49, "broadcast_arrai": 50, "broadcast_to": 51, "build": [4, 7], "byte": 338, "c": 1, "calcul": 449, "can_cast": 52, "cbrt": 53, "ceil": 54, "chang": 446, "chisquar": 339, "choic": 340, "choleski": 163, "choos": [55, 274], "class": 7, "clip": [56, 275], "co": 66, "column_stack": 57, "comparison": [6, 445, 449, 457], "complex": 447, "concaten": 58, "cond": 164, "conda": 4, "conj": [59, 276], "conjug": [60, 277], "construct": 449, "control": 0, "convers": 449, "convolv": 61, "copi": [62, 278], "copysign": 63, "copyto": 64, "correl": [65, 456], "cosh": 67, "count": 454, "count_nonzero": 68, "cov": 69, "creat": 8, "creation": 7, "cross": 70, "cumlogsumexp": 71, "cumprod": [72, 279], "cumsum": [73, 280], "cupi": 6, "data": [0, 2, 7, 8, 9, 443, 449, 452], "decomposit": 444, "deg2rad": 74, "degre": 75, "det": 165, "develop": 2, "devic": 4, "diag": 76, "diag_indic": 77, "diag_indices_from": 78, "diagflat": 79, "diagon": [80, 281], "diff": 81, "differ": 447, "dimens": 446, "dimension": [6, 449], "dirichlet": 341, "discret": 6, "distribut": 452, "divid": 82, "dot": 83, "dpnp": [6, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 452], "dpnp_arrai": 84, "driver": 4, "dstack": 85, "dtype": [86, 282], "ediff1d": 87, "eig": 166, "eigenvalu": 444, "eigh": 167, "eigval": 168, "eigvalsh": 169, "einsum": 88, "einsum_path": 89, "element": [5, 446], "empti": 90, "empty_lik": 91, "equal": 92, "equat": 444, "erf": 93, "error": 455, "exampl": [0, 4], "exist": 7, "exp": 94, "exp2": 95, "expand_dim": 96, "expm1": 97, "expon": 447, "exponenti": 342, "extens": 2, "extract": 98, "extrema": 447, "ey": 99, "f": 343, "fab": 100, "fft": [10, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118], "fft2": 102, "fftfreq": 103, "fftn": 104, "fftshift": 105, "fill": 283, "fill_diagon": 119, "find": 447, "finfo": 120, "flag": 284, "flat": 285, "flatit": 121, "flatten": 286, "flip": 122, "fliplr": 123, "flipud": 124, "float": [447, 457], "floor": 125, "floor_divid": 126, "fmax": 127, "fmin": 128, "fmod": 129, "format": 5, "fourier": 6, "from": [4, 7], "from_dlpack": 130, "frombuff": 131, "fromfil": 132, "fromfunct": 133, "fromit": 134, "fromstr": 135, "full": 136, "full_lik": 137, "function": [10, 445, 447, 455, 456, 457], "gamma": 344, "gener": [443, 452], "geometr": 345, "geomspac": 138, "get_includ": 139, "gradient": 140, "greater": 141, "greater_equ": 142, "guid": 4, "gumbel": 346, "handl": 447, "helper": 10, "hermitian": 10, "hfft": 106, "histogram": [143, 456], "hstack": 144, "hyperbol": 447, "hypergeometr": 347, "hypot": 145, "ident": 146, "ifft": 107, "ifft2": 108, "ifftn": 109, "ifftshift": 110, "ihfft": 111, "iinfo": 147, "imag": [148, 287], "index": [443, 449], "indic": 149, "infin": 445, "inform": [2, 8], "inner": 150, "insert": 443, "instal": 4, "interplai": 0, "interpret": 4, "inv": 170, "invert": 151, "irfft": 112, "irfft2": 113, "irfftn": 114, "isclos": 152, "isfinit": 153, "isinf": 154, "isnan": 155, "isscalar": 156, "issubdtyp": 157, "issubsctyp": 158, "item": [288, 449], "items": 289, "iter": 443, "join": 446, "kind": 446, "kron": 159, "laplac": 348, "layout": 449, "left_shift": 160, "less": 161, "less_equ": 162, "level": 6, "librari": 0, "like": [443, 446], "linalg": [163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182], "linear": [6, 444], "linspac": 183, "loadtxt": 184, "log": 185, "log10": 186, "log1p": 187, "log2": 188, "logaddexp": 189, "logarithm": 447, "logic": 445, "logical_and": 190, "logical_not": 191, "logical_or": 192, "logical_xor": 193, "logist": 349, "lognorm": 350, "logseri": 351, "logspac": 194, "logsumexp": 195, "lstsq": 171, "manipul": [446, 449], "math": 457, "mathemat": 447, "matmul": 196, "matric": 7, "matrix": [7, 444, 449], "matrix_pow": 172, "matrix_rank": 173, "max": [197, 290], "maximum": 198, "mean": [199, 291], "median": 200, "memori": 449, "meshgrid": 201, "method": 449, "mgrid": 202, "min": [203, 292], "minimum": 204, "miscellan": [8, 447, 448], "mod": 205, "modf": 206, "modul": [6, 451], "moveaxi": 207, "multi": [6, 449], "multi_dot": 174, "multinomi": 352, "multipl": 449, "multipli": 208, "multivariate_norm": 353, "nan": 445, "nanargmax": 209, "nanargmin": 210, "nancumprod": 211, "nancumsum": 212, "nanmax": 213, "nanmean": 214, "nanmin": 215, "nanprod": 216, "nanstd": 217, "nansum": 218, "nanvar": 219, "nbyte": 293, "ndarrai": [220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 449], "ndim": 294, "neg": 316, "negative_binomi": 354, "noncentral_chisquar": 355, "noncentral_f": 356, "nonzero": [295, 317], "norm": [175, 444], "normal": 357, "not_equ": 318, "number": [444, 446, 447], "numer": 7, "numpi": [2, 6], "ogrid": 319, "ones": 320, "ones_lik": 321, "oper": [5, 443, 445, 446, 447, 449, 457], "order": 456, "other": [444, 447, 449], "outer": 322, "output": 5, "over": 443, "overview": 3, "pack": 5, "packag": [4, 451], "pad": 450, "parallel": [0, 2], "pareto": 358, "partit": [296, 323], "permut": [359, 452], "pinv": 176, "place": 324, "point": 447, "poisson": 360, "poly1d": 451, "polynomi": 451, "polyutil": 451, "posit": 325, "power": [326, 361], "prod": [297, 327], "product": [444, 447], "proj": 328, "ptp": 329, "put": [298, 330], "put_along_axi": 331, "putmask": 332, "python": 4, "qr": 177, "quick": 4, "rad2deg": 333, "radian": 334, "rand": 362, "randint": 363, "randn": 364, "random": [6, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 452], "random_integ": 366, "random_sampl": 367, "randomst": 335, "ranf": 368, "rang": 7, "ration": 447, "ravel": [299, 384], "rayleigh": 369, "real": [10, 300, 385], "rearrang": 446, "reciproc": 386, "reduce_hypot": 387, "refer": [1, 442], "remaind": 388, "remov": 446, "repeat": [301, 389], "reshap": [302, 390], "result_typ": 391, "rfft": 115, "rfft2": 116, "rfftfreq": 117, "rfftn": 118, "right_shift": 392, "rint": 393, "roll": 394, "rollaxi": 395, "round": [303, 396, 447], "routin": [7, 8, 10, 443, 446, 447, 448, 453], "row_stack": 397, "rsqrt": 398, "sampl": [6, 370, 452], "scikit": 4, "search": 454, "searchsort": [304, 399], "seed": 371, "select": [400, 449], "shape": [7, 305, 401, 446, 449], "shuffl": 372, "sign": 402, "signbit": 403, "simpl": 452, "sin": 404, "sinh": 405, "size": 306, "slogdet": 178, "solv": [179, 444], "sort": [307, 406, 454], "special": [447, 449, 455], "split": 446, "sqrt": 407, "squar": 408, "squeez": [308, 409], "stack": 410, "standard": 10, "standard_cauchi": 373, "standard_exponenti": 374, "standard_gamma": 375, "standard_norm": 376, "standard_t": 377, "start": 4, "statist": 456, "std": [309, 411], "stride": 310, "subtract": 412, "sum": [311, 413, 447], "summari": 6, "svd": 180, "swapax": [312, 414], "t": 221, "tabl": 6, "take": [313, 415], "take_along_axi": 416, "tan": 417, "tanh": 418, "tensordot": 419, "tensorinv": 181, "tensorsolv": 182, "test": [4, 8, 445], "tile": [420, 446], "trace": 421, "transform": 6, "transpos": [314, 422, 446], "trapz": 423, "tri": 424, "triangular": 378, "trigonometr": [447, 457], "tril": 425, "tril_indic": 426, "tril_indices_from": 427, "triu": 428, "triu_indic": 429, "triu_indices_from": 430, "true_divid": 431, "trunc": 432, "truth": 445, "twiddl": 457, "type": [8, 9, 445, 449], "ufunc": 457, "uniform": 379, "uniqu": 433, "univers": 457, "unwrap": 434, "util": 448, "valu": [7, 445], "vander": 435, "var": [315, 436], "varianc": 456, "vdot": 437, "vector": 444, "vonmis": 380, "vstack": 438, "wald": 381, "weibul": 382, "where": 439, "wise": 5, "zero": 440, "zeros_lik": 441, "zipf": 383}})