Search.setIndex({"docnames": ["dpctl", "dpnp_backend_api", "index", "overview", "quick_start_guide", "reference/binary", "reference/comparison", "reference/creation", "reference/dtype", "reference/dtypes_table", "reference/fft", "reference/generated/dpnp.abs", "reference/generated/dpnp.absolute", "reference/generated/dpnp.add", "reference/generated/dpnp.all", "reference/generated/dpnp.allclose", "reference/generated/dpnp.amax", "reference/generated/dpnp.amin", "reference/generated/dpnp.any", "reference/generated/dpnp.arange", "reference/generated/dpnp.arccos", "reference/generated/dpnp.arccosh", "reference/generated/dpnp.arcsin", "reference/generated/dpnp.arcsinh", "reference/generated/dpnp.arctan", "reference/generated/dpnp.arctan2", "reference/generated/dpnp.arctanh", "reference/generated/dpnp.argmax", "reference/generated/dpnp.argmin", "reference/generated/dpnp.argsort", "reference/generated/dpnp.around", "reference/generated/dpnp.array", "reference/generated/dpnp.array_equal", "reference/generated/dpnp.asanyarray", "reference/generated/dpnp.asarray", "reference/generated/dpnp.ascontiguousarray", "reference/generated/dpnp.asfarray", "reference/generated/dpnp.asfortranarray", "reference/generated/dpnp.asnumpy", "reference/generated/dpnp.atleast_1d", "reference/generated/dpnp.atleast_2d", "reference/generated/dpnp.atleast_3d", "reference/generated/dpnp.average", "reference/generated/dpnp.bincount", "reference/generated/dpnp.bitwise_and", "reference/generated/dpnp.bitwise_not", "reference/generated/dpnp.bitwise_or", "reference/generated/dpnp.bitwise_xor", "reference/generated/dpnp.broadcast_to", "reference/generated/dpnp.cbrt", "reference/generated/dpnp.ceil", "reference/generated/dpnp.choose", "reference/generated/dpnp.concatenate", "reference/generated/dpnp.conj", "reference/generated/dpnp.conjugate", "reference/generated/dpnp.convolve", "reference/generated/dpnp.copy", "reference/generated/dpnp.copysign", "reference/generated/dpnp.copyto", "reference/generated/dpnp.correlate", "reference/generated/dpnp.cos", "reference/generated/dpnp.cosh", "reference/generated/dpnp.count_nonzero", "reference/generated/dpnp.cov", "reference/generated/dpnp.cross", "reference/generated/dpnp.cumprod", "reference/generated/dpnp.cumsum", "reference/generated/dpnp.deg2rad", "reference/generated/dpnp.degrees", "reference/generated/dpnp.diag", "reference/generated/dpnp.diag_indices", "reference/generated/dpnp.diag_indices_from", "reference/generated/dpnp.diagflat", "reference/generated/dpnp.diagonal", "reference/generated/dpnp.diff", "reference/generated/dpnp.divide", "reference/generated/dpnp.dot", "reference/generated/dpnp.dpnp_array.dpnp_array", "reference/generated/dpnp.dtype", "reference/generated/dpnp.ediff1d", "reference/generated/dpnp.einsum", "reference/generated/dpnp.einsum_path", "reference/generated/dpnp.empty", "reference/generated/dpnp.empty_like", "reference/generated/dpnp.equal", "reference/generated/dpnp.erf", "reference/generated/dpnp.exp", "reference/generated/dpnp.exp2", "reference/generated/dpnp.expand_dims", "reference/generated/dpnp.expm1", "reference/generated/dpnp.extract", "reference/generated/dpnp.eye", "reference/generated/dpnp.fabs", "reference/generated/dpnp.fft.fft", "reference/generated/dpnp.fft.fft2", "reference/generated/dpnp.fft.fftfreq", "reference/generated/dpnp.fft.fftn", "reference/generated/dpnp.fft.fftshift", "reference/generated/dpnp.fft.hfft", "reference/generated/dpnp.fft.ifft", "reference/generated/dpnp.fft.ifft2", "reference/generated/dpnp.fft.ifftn", "reference/generated/dpnp.fft.ifftshift", "reference/generated/dpnp.fft.ihfft", "reference/generated/dpnp.fft.irfft", "reference/generated/dpnp.fft.irfft2", "reference/generated/dpnp.fft.irfftn", "reference/generated/dpnp.fft.rfft", "reference/generated/dpnp.fft.rfft2", "reference/generated/dpnp.fft.rfftfreq", "reference/generated/dpnp.fft.rfftn", "reference/generated/dpnp.fill_diagonal", "reference/generated/dpnp.flatiter", "reference/generated/dpnp.floor", "reference/generated/dpnp.floor_divide", "reference/generated/dpnp.fmax", "reference/generated/dpnp.fmin", "reference/generated/dpnp.fmod", "reference/generated/dpnp.from_dlpack", "reference/generated/dpnp.frombuffer", "reference/generated/dpnp.fromfile", "reference/generated/dpnp.fromfunction", "reference/generated/dpnp.fromiter", "reference/generated/dpnp.fromstring", "reference/generated/dpnp.full", "reference/generated/dpnp.full_like", "reference/generated/dpnp.geomspace", "reference/generated/dpnp.get_include", "reference/generated/dpnp.gradient", "reference/generated/dpnp.greater", "reference/generated/dpnp.greater_equal", "reference/generated/dpnp.histogram", "reference/generated/dpnp.hstack", "reference/generated/dpnp.hypot", "reference/generated/dpnp.identity", "reference/generated/dpnp.indices", "reference/generated/dpnp.inner", "reference/generated/dpnp.invert", "reference/generated/dpnp.isclose", "reference/generated/dpnp.isfinite", "reference/generated/dpnp.isinf", "reference/generated/dpnp.isnan", "reference/generated/dpnp.isscalar", "reference/generated/dpnp.issubdtype", "reference/generated/dpnp.issubsctype", "reference/generated/dpnp.kron", "reference/generated/dpnp.left_shift", "reference/generated/dpnp.less", "reference/generated/dpnp.less_equal", "reference/generated/dpnp.linalg.cholesky", "reference/generated/dpnp.linalg.cond", "reference/generated/dpnp.linalg.det", "reference/generated/dpnp.linalg.eig", "reference/generated/dpnp.linalg.eigh", "reference/generated/dpnp.linalg.eigvals", "reference/generated/dpnp.linalg.inv", "reference/generated/dpnp.linalg.matrix_power", "reference/generated/dpnp.linalg.matrix_rank", "reference/generated/dpnp.linalg.multi_dot", "reference/generated/dpnp.linalg.norm", "reference/generated/dpnp.linalg.qr", "reference/generated/dpnp.linalg.svd", "reference/generated/dpnp.linspace", "reference/generated/dpnp.loadtxt", "reference/generated/dpnp.log", "reference/generated/dpnp.log10", "reference/generated/dpnp.log1p", "reference/generated/dpnp.log2", "reference/generated/dpnp.logical_and", "reference/generated/dpnp.logical_not", "reference/generated/dpnp.logical_or", "reference/generated/dpnp.logical_xor", "reference/generated/dpnp.logspace", "reference/generated/dpnp.matmul", "reference/generated/dpnp.max", "reference/generated/dpnp.maximum", "reference/generated/dpnp.mean", "reference/generated/dpnp.median", "reference/generated/dpnp.meshgrid", "reference/generated/dpnp.mgrid", "reference/generated/dpnp.min", "reference/generated/dpnp.minimum", "reference/generated/dpnp.mod", "reference/generated/dpnp.modf", "reference/generated/dpnp.moveaxis", "reference/generated/dpnp.multiply", "reference/generated/dpnp.nancumprod", "reference/generated/dpnp.nancumsum", "reference/generated/dpnp.nanprod", "reference/generated/dpnp.nansum", "reference/generated/dpnp.nanvar", "reference/generated/dpnp.ndarray", "reference/generated/dpnp.ndarray.T", "reference/generated/dpnp.ndarray.__abs__", "reference/generated/dpnp.ndarray.__add__", "reference/generated/dpnp.ndarray.__and__", "reference/generated/dpnp.ndarray.__complex__", "reference/generated/dpnp.ndarray.__eq__", "reference/generated/dpnp.ndarray.__float__", "reference/generated/dpnp.ndarray.__ge__", "reference/generated/dpnp.ndarray.__getitem__", "reference/generated/dpnp.ndarray.__gt__", "reference/generated/dpnp.ndarray.__iadd__", "reference/generated/dpnp.ndarray.__iand__", "reference/generated/dpnp.ndarray.__ilshift__", "reference/generated/dpnp.ndarray.__imul__", "reference/generated/dpnp.ndarray.__int__", "reference/generated/dpnp.ndarray.__invert__", "reference/generated/dpnp.ndarray.__ior__", "reference/generated/dpnp.ndarray.__ipow__", "reference/generated/dpnp.ndarray.__irshift__", "reference/generated/dpnp.ndarray.__isub__", "reference/generated/dpnp.ndarray.__itruediv__", "reference/generated/dpnp.ndarray.__ixor__", "reference/generated/dpnp.ndarray.__le__", "reference/generated/dpnp.ndarray.__len__", "reference/generated/dpnp.ndarray.__lshift__", "reference/generated/dpnp.ndarray.__lt__", "reference/generated/dpnp.ndarray.__mod__", "reference/generated/dpnp.ndarray.__mul__", "reference/generated/dpnp.ndarray.__ne__", "reference/generated/dpnp.ndarray.__neg__", "reference/generated/dpnp.ndarray.__new__", "reference/generated/dpnp.ndarray.__or__", "reference/generated/dpnp.ndarray.__pow__", "reference/generated/dpnp.ndarray.__repr__", "reference/generated/dpnp.ndarray.__rshift__", "reference/generated/dpnp.ndarray.__setitem__", "reference/generated/dpnp.ndarray.__str__", "reference/generated/dpnp.ndarray.__sub__", "reference/generated/dpnp.ndarray.__truediv__", "reference/generated/dpnp.ndarray.__xor__", "reference/generated/dpnp.ndarray.all", "reference/generated/dpnp.ndarray.any", "reference/generated/dpnp.ndarray.argmax", "reference/generated/dpnp.ndarray.argmin", "reference/generated/dpnp.ndarray.argsort", "reference/generated/dpnp.ndarray.astype", "reference/generated/dpnp.ndarray.choose", "reference/generated/dpnp.ndarray.conj", "reference/generated/dpnp.ndarray.conjugate", "reference/generated/dpnp.ndarray.cumsum", "reference/generated/dpnp.ndarray.diagonal", "reference/generated/dpnp.ndarray.dtype", "reference/generated/dpnp.ndarray.fill", "reference/generated/dpnp.ndarray.flags", "reference/generated/dpnp.ndarray.flat", "reference/generated/dpnp.ndarray.flatten", "reference/generated/dpnp.ndarray.item", "reference/generated/dpnp.ndarray.itemsize", "reference/generated/dpnp.ndarray.max", "reference/generated/dpnp.ndarray.mean", "reference/generated/dpnp.ndarray.min", "reference/generated/dpnp.ndarray.nbytes", "reference/generated/dpnp.ndarray.ndim", "reference/generated/dpnp.ndarray.nonzero", "reference/generated/dpnp.ndarray.partition", "reference/generated/dpnp.ndarray.prod", "reference/generated/dpnp.ndarray.reshape", "reference/generated/dpnp.ndarray.round", "reference/generated/dpnp.ndarray.shape", "reference/generated/dpnp.ndarray.size", "reference/generated/dpnp.ndarray.squeeze", "reference/generated/dpnp.ndarray.std", "reference/generated/dpnp.ndarray.strides", "reference/generated/dpnp.ndarray.sum", "reference/generated/dpnp.ndarray.swapaxes", "reference/generated/dpnp.ndarray.take", "reference/generated/dpnp.ndarray.transpose", "reference/generated/dpnp.ndarray.var", "reference/generated/dpnp.negative", "reference/generated/dpnp.nonzero", "reference/generated/dpnp.not_equal", "reference/generated/dpnp.ogrid", "reference/generated/dpnp.ones", "reference/generated/dpnp.ones_like", "reference/generated/dpnp.outer", "reference/generated/dpnp.partition", "reference/generated/dpnp.place", "reference/generated/dpnp.power", "reference/generated/dpnp.prod", "reference/generated/dpnp.ptp", "reference/generated/dpnp.put", "reference/generated/dpnp.put_along_axis", "reference/generated/dpnp.putmask", "reference/generated/dpnp.rad2deg", "reference/generated/dpnp.radians", "reference/generated/dpnp.random.RandomState", "reference/generated/dpnp.random.beta", "reference/generated/dpnp.random.binomial", "reference/generated/dpnp.random.bytes", "reference/generated/dpnp.random.chisquare", "reference/generated/dpnp.random.choice", "reference/generated/dpnp.random.dirichlet", "reference/generated/dpnp.random.exponential", "reference/generated/dpnp.random.f", "reference/generated/dpnp.random.gamma", "reference/generated/dpnp.random.geometric", "reference/generated/dpnp.random.gumbel", "reference/generated/dpnp.random.hypergeometric", "reference/generated/dpnp.random.laplace", "reference/generated/dpnp.random.logistic", "reference/generated/dpnp.random.lognormal", "reference/generated/dpnp.random.logseries", "reference/generated/dpnp.random.multinomial", "reference/generated/dpnp.random.multivariate_normal", "reference/generated/dpnp.random.negative_binomial", "reference/generated/dpnp.random.noncentral_chisquare", "reference/generated/dpnp.random.noncentral_f", "reference/generated/dpnp.random.normal", "reference/generated/dpnp.random.pareto", "reference/generated/dpnp.random.permutation", "reference/generated/dpnp.random.poisson", "reference/generated/dpnp.random.power", "reference/generated/dpnp.random.rand", "reference/generated/dpnp.random.randint", "reference/generated/dpnp.random.randn", "reference/generated/dpnp.random.random", "reference/generated/dpnp.random.random_integers", "reference/generated/dpnp.random.random_sample", "reference/generated/dpnp.random.ranf", "reference/generated/dpnp.random.rayleigh", "reference/generated/dpnp.random.sample", "reference/generated/dpnp.random.seed", "reference/generated/dpnp.random.shuffle", "reference/generated/dpnp.random.standard_cauchy", "reference/generated/dpnp.random.standard_exponential", "reference/generated/dpnp.random.standard_gamma", "reference/generated/dpnp.random.standard_normal", "reference/generated/dpnp.random.standard_t", "reference/generated/dpnp.random.triangular", "reference/generated/dpnp.random.uniform", "reference/generated/dpnp.random.vonmises", "reference/generated/dpnp.random.wald", "reference/generated/dpnp.random.weibull", "reference/generated/dpnp.random.zipf", "reference/generated/dpnp.ravel", "reference/generated/dpnp.reciprocal", "reference/generated/dpnp.remainder", "reference/generated/dpnp.repeat", "reference/generated/dpnp.reshape", "reference/generated/dpnp.result_type", "reference/generated/dpnp.right_shift", "reference/generated/dpnp.rollaxis", "reference/generated/dpnp.searchsorted", "reference/generated/dpnp.select", "reference/generated/dpnp.shape", "reference/generated/dpnp.sign", "reference/generated/dpnp.sin", "reference/generated/dpnp.sinh", "reference/generated/dpnp.sort", "reference/generated/dpnp.sqrt", "reference/generated/dpnp.square", "reference/generated/dpnp.squeeze", "reference/generated/dpnp.stack", "reference/generated/dpnp.std", "reference/generated/dpnp.subtract", "reference/generated/dpnp.sum", "reference/generated/dpnp.swapaxes", "reference/generated/dpnp.take", "reference/generated/dpnp.take_along_axis", "reference/generated/dpnp.tan", "reference/generated/dpnp.tanh", "reference/generated/dpnp.tensordot", "reference/generated/dpnp.trace", "reference/generated/dpnp.transpose", "reference/generated/dpnp.trapz", "reference/generated/dpnp.tri", "reference/generated/dpnp.tril", "reference/generated/dpnp.tril_indices", "reference/generated/dpnp.tril_indices_from", "reference/generated/dpnp.triu", "reference/generated/dpnp.triu_indices", "reference/generated/dpnp.triu_indices_from", "reference/generated/dpnp.true_divide", "reference/generated/dpnp.trunc", "reference/generated/dpnp.unique", "reference/generated/dpnp.unwrap", "reference/generated/dpnp.vander", "reference/generated/dpnp.var", "reference/generated/dpnp.vdot", "reference/generated/dpnp.vstack", "reference/generated/dpnp.where", "reference/generated/dpnp.zeros", "reference/generated/dpnp.zeros_like", "reference/index", "reference/indexing", "reference/linalg", "reference/logic", "reference/manipulation", "reference/math", "reference/misc", "reference/ndarray", "reference/pad", "reference/polynomials", "reference/random", "reference/routines", "reference/sorting", "reference/special", "reference/statistics", "reference/ufunc"], "filenames": ["dpctl.rst", "dpnp_backend_api.rst", "index.rst", "overview.rst", "quick_start_guide.rst", "reference/binary.rst", "reference/comparison.rst", "reference/creation.rst", "reference/dtype.rst", "reference/dtypes_table.rst", "reference/fft.rst", "reference/generated/dpnp.abs.rst", "reference/generated/dpnp.absolute.rst", "reference/generated/dpnp.add.rst", "reference/generated/dpnp.all.rst", "reference/generated/dpnp.allclose.rst", "reference/generated/dpnp.amax.rst", "reference/generated/dpnp.amin.rst", "reference/generated/dpnp.any.rst", "reference/generated/dpnp.arange.rst", "reference/generated/dpnp.arccos.rst", "reference/generated/dpnp.arccosh.rst", "reference/generated/dpnp.arcsin.rst", "reference/generated/dpnp.arcsinh.rst", "reference/generated/dpnp.arctan.rst", "reference/generated/dpnp.arctan2.rst", "reference/generated/dpnp.arctanh.rst", "reference/generated/dpnp.argmax.rst", "reference/generated/dpnp.argmin.rst", "reference/generated/dpnp.argsort.rst", "reference/generated/dpnp.around.rst", "reference/generated/dpnp.array.rst", "reference/generated/dpnp.array_equal.rst", "reference/generated/dpnp.asanyarray.rst", "reference/generated/dpnp.asarray.rst", "reference/generated/dpnp.ascontiguousarray.rst", "reference/generated/dpnp.asfarray.rst", "reference/generated/dpnp.asfortranarray.rst", "reference/generated/dpnp.asnumpy.rst", "reference/generated/dpnp.atleast_1d.rst", "reference/generated/dpnp.atleast_2d.rst", "reference/generated/dpnp.atleast_3d.rst", "reference/generated/dpnp.average.rst", "reference/generated/dpnp.bincount.rst", "reference/generated/dpnp.bitwise_and.rst", "reference/generated/dpnp.bitwise_not.rst", "reference/generated/dpnp.bitwise_or.rst", "reference/generated/dpnp.bitwise_xor.rst", "reference/generated/dpnp.broadcast_to.rst", "reference/generated/dpnp.cbrt.rst", "reference/generated/dpnp.ceil.rst", "reference/generated/dpnp.choose.rst", "reference/generated/dpnp.concatenate.rst", "reference/generated/dpnp.conj.rst", "reference/generated/dpnp.conjugate.rst", "reference/generated/dpnp.convolve.rst", "reference/generated/dpnp.copy.rst", "reference/generated/dpnp.copysign.rst", "reference/generated/dpnp.copyto.rst", "reference/generated/dpnp.correlate.rst", "reference/generated/dpnp.cos.rst", "reference/generated/dpnp.cosh.rst", "reference/generated/dpnp.count_nonzero.rst", "reference/generated/dpnp.cov.rst", "reference/generated/dpnp.cross.rst", "reference/generated/dpnp.cumprod.rst", "reference/generated/dpnp.cumsum.rst", "reference/generated/dpnp.deg2rad.rst", "reference/generated/dpnp.degrees.rst", "reference/generated/dpnp.diag.rst", "reference/generated/dpnp.diag_indices.rst", "reference/generated/dpnp.diag_indices_from.rst", "reference/generated/dpnp.diagflat.rst", "reference/generated/dpnp.diagonal.rst", "reference/generated/dpnp.diff.rst", "reference/generated/dpnp.divide.rst", "reference/generated/dpnp.dot.rst", "reference/generated/dpnp.dpnp_array.dpnp_array.rst", "reference/generated/dpnp.dtype.rst", "reference/generated/dpnp.ediff1d.rst", "reference/generated/dpnp.einsum.rst", "reference/generated/dpnp.einsum_path.rst", "reference/generated/dpnp.empty.rst", "reference/generated/dpnp.empty_like.rst", "reference/generated/dpnp.equal.rst", "reference/generated/dpnp.erf.rst", "reference/generated/dpnp.exp.rst", "reference/generated/dpnp.exp2.rst", "reference/generated/dpnp.expand_dims.rst", "reference/generated/dpnp.expm1.rst", "reference/generated/dpnp.extract.rst", "reference/generated/dpnp.eye.rst", "reference/generated/dpnp.fabs.rst", "reference/generated/dpnp.fft.fft.rst", "reference/generated/dpnp.fft.fft2.rst", "reference/generated/dpnp.fft.fftfreq.rst", "reference/generated/dpnp.fft.fftn.rst", "reference/generated/dpnp.fft.fftshift.rst", "reference/generated/dpnp.fft.hfft.rst", "reference/generated/dpnp.fft.ifft.rst", "reference/generated/dpnp.fft.ifft2.rst", "reference/generated/dpnp.fft.ifftn.rst", "reference/generated/dpnp.fft.ifftshift.rst", "reference/generated/dpnp.fft.ihfft.rst", "reference/generated/dpnp.fft.irfft.rst", "reference/generated/dpnp.fft.irfft2.rst", "reference/generated/dpnp.fft.irfftn.rst", "reference/generated/dpnp.fft.rfft.rst", "reference/generated/dpnp.fft.rfft2.rst", "reference/generated/dpnp.fft.rfftfreq.rst", "reference/generated/dpnp.fft.rfftn.rst", "reference/generated/dpnp.fill_diagonal.rst", "reference/generated/dpnp.flatiter.rst", "reference/generated/dpnp.floor.rst", "reference/generated/dpnp.floor_divide.rst", "reference/generated/dpnp.fmax.rst", "reference/generated/dpnp.fmin.rst", "reference/generated/dpnp.fmod.rst", "reference/generated/dpnp.from_dlpack.rst", "reference/generated/dpnp.frombuffer.rst", "reference/generated/dpnp.fromfile.rst", "reference/generated/dpnp.fromfunction.rst", "reference/generated/dpnp.fromiter.rst", "reference/generated/dpnp.fromstring.rst", "reference/generated/dpnp.full.rst", "reference/generated/dpnp.full_like.rst", "reference/generated/dpnp.geomspace.rst", "reference/generated/dpnp.get_include.rst", "reference/generated/dpnp.gradient.rst", "reference/generated/dpnp.greater.rst", "reference/generated/dpnp.greater_equal.rst", "reference/generated/dpnp.histogram.rst", "reference/generated/dpnp.hstack.rst", "reference/generated/dpnp.hypot.rst", "reference/generated/dpnp.identity.rst", "reference/generated/dpnp.indices.rst", "reference/generated/dpnp.inner.rst", "reference/generated/dpnp.invert.rst", "reference/generated/dpnp.isclose.rst", "reference/generated/dpnp.isfinite.rst", "reference/generated/dpnp.isinf.rst", "reference/generated/dpnp.isnan.rst", "reference/generated/dpnp.isscalar.rst", "reference/generated/dpnp.issubdtype.rst", "reference/generated/dpnp.issubsctype.rst", "reference/generated/dpnp.kron.rst", "reference/generated/dpnp.left_shift.rst", "reference/generated/dpnp.less.rst", "reference/generated/dpnp.less_equal.rst", "reference/generated/dpnp.linalg.cholesky.rst", "reference/generated/dpnp.linalg.cond.rst", "reference/generated/dpnp.linalg.det.rst", "reference/generated/dpnp.linalg.eig.rst", "reference/generated/dpnp.linalg.eigh.rst", "reference/generated/dpnp.linalg.eigvals.rst", "reference/generated/dpnp.linalg.inv.rst", "reference/generated/dpnp.linalg.matrix_power.rst", "reference/generated/dpnp.linalg.matrix_rank.rst", "reference/generated/dpnp.linalg.multi_dot.rst", "reference/generated/dpnp.linalg.norm.rst", "reference/generated/dpnp.linalg.qr.rst", "reference/generated/dpnp.linalg.svd.rst", "reference/generated/dpnp.linspace.rst", "reference/generated/dpnp.loadtxt.rst", "reference/generated/dpnp.log.rst", "reference/generated/dpnp.log10.rst", "reference/generated/dpnp.log1p.rst", "reference/generated/dpnp.log2.rst", "reference/generated/dpnp.logical_and.rst", "reference/generated/dpnp.logical_not.rst", "reference/generated/dpnp.logical_or.rst", "reference/generated/dpnp.logical_xor.rst", "reference/generated/dpnp.logspace.rst", "reference/generated/dpnp.matmul.rst", "reference/generated/dpnp.max.rst", "reference/generated/dpnp.maximum.rst", "reference/generated/dpnp.mean.rst", "reference/generated/dpnp.median.rst", "reference/generated/dpnp.meshgrid.rst", "reference/generated/dpnp.mgrid.rst", "reference/generated/dpnp.min.rst", "reference/generated/dpnp.minimum.rst", "reference/generated/dpnp.mod.rst", "reference/generated/dpnp.modf.rst", "reference/generated/dpnp.moveaxis.rst", "reference/generated/dpnp.multiply.rst", "reference/generated/dpnp.nancumprod.rst", "reference/generated/dpnp.nancumsum.rst", "reference/generated/dpnp.nanprod.rst", "reference/generated/dpnp.nansum.rst", "reference/generated/dpnp.nanvar.rst", "reference/generated/dpnp.ndarray.rst", "reference/generated/dpnp.ndarray.T.rst", "reference/generated/dpnp.ndarray.__abs__.rst", "reference/generated/dpnp.ndarray.__add__.rst", "reference/generated/dpnp.ndarray.__and__.rst", "reference/generated/dpnp.ndarray.__complex__.rst", "reference/generated/dpnp.ndarray.__eq__.rst", "reference/generated/dpnp.ndarray.__float__.rst", "reference/generated/dpnp.ndarray.__ge__.rst", "reference/generated/dpnp.ndarray.__getitem__.rst", "reference/generated/dpnp.ndarray.__gt__.rst", "reference/generated/dpnp.ndarray.__iadd__.rst", "reference/generated/dpnp.ndarray.__iand__.rst", "reference/generated/dpnp.ndarray.__ilshift__.rst", "reference/generated/dpnp.ndarray.__imul__.rst", "reference/generated/dpnp.ndarray.__int__.rst", "reference/generated/dpnp.ndarray.__invert__.rst", "reference/generated/dpnp.ndarray.__ior__.rst", "reference/generated/dpnp.ndarray.__ipow__.rst", "reference/generated/dpnp.ndarray.__irshift__.rst", "reference/generated/dpnp.ndarray.__isub__.rst", "reference/generated/dpnp.ndarray.__itruediv__.rst", "reference/generated/dpnp.ndarray.__ixor__.rst", "reference/generated/dpnp.ndarray.__le__.rst", "reference/generated/dpnp.ndarray.__len__.rst", "reference/generated/dpnp.ndarray.__lshift__.rst", "reference/generated/dpnp.ndarray.__lt__.rst", "reference/generated/dpnp.ndarray.__mod__.rst", "reference/generated/dpnp.ndarray.__mul__.rst", "reference/generated/dpnp.ndarray.__ne__.rst", "reference/generated/dpnp.ndarray.__neg__.rst", "reference/generated/dpnp.ndarray.__new__.rst", "reference/generated/dpnp.ndarray.__or__.rst", "reference/generated/dpnp.ndarray.__pow__.rst", "reference/generated/dpnp.ndarray.__repr__.rst", "reference/generated/dpnp.ndarray.__rshift__.rst", "reference/generated/dpnp.ndarray.__setitem__.rst", "reference/generated/dpnp.ndarray.__str__.rst", "reference/generated/dpnp.ndarray.__sub__.rst", "reference/generated/dpnp.ndarray.__truediv__.rst", "reference/generated/dpnp.ndarray.__xor__.rst", "reference/generated/dpnp.ndarray.all.rst", "reference/generated/dpnp.ndarray.any.rst", "reference/generated/dpnp.ndarray.argmax.rst", "reference/generated/dpnp.ndarray.argmin.rst", "reference/generated/dpnp.ndarray.argsort.rst", "reference/generated/dpnp.ndarray.astype.rst", "reference/generated/dpnp.ndarray.choose.rst", "reference/generated/dpnp.ndarray.conj.rst", "reference/generated/dpnp.ndarray.conjugate.rst", "reference/generated/dpnp.ndarray.cumsum.rst", "reference/generated/dpnp.ndarray.diagonal.rst", "reference/generated/dpnp.ndarray.dtype.rst", "reference/generated/dpnp.ndarray.fill.rst", "reference/generated/dpnp.ndarray.flags.rst", "reference/generated/dpnp.ndarray.flat.rst", "reference/generated/dpnp.ndarray.flatten.rst", "reference/generated/dpnp.ndarray.item.rst", "reference/generated/dpnp.ndarray.itemsize.rst", "reference/generated/dpnp.ndarray.max.rst", "reference/generated/dpnp.ndarray.mean.rst", "reference/generated/dpnp.ndarray.min.rst", "reference/generated/dpnp.ndarray.nbytes.rst", "reference/generated/dpnp.ndarray.ndim.rst", "reference/generated/dpnp.ndarray.nonzero.rst", "reference/generated/dpnp.ndarray.partition.rst", "reference/generated/dpnp.ndarray.prod.rst", "reference/generated/dpnp.ndarray.reshape.rst", "reference/generated/dpnp.ndarray.round.rst", "reference/generated/dpnp.ndarray.shape.rst", "reference/generated/dpnp.ndarray.size.rst", "reference/generated/dpnp.ndarray.squeeze.rst", "reference/generated/dpnp.ndarray.std.rst", "reference/generated/dpnp.ndarray.strides.rst", "reference/generated/dpnp.ndarray.sum.rst", "reference/generated/dpnp.ndarray.swapaxes.rst", "reference/generated/dpnp.ndarray.take.rst", "reference/generated/dpnp.ndarray.transpose.rst", "reference/generated/dpnp.ndarray.var.rst", "reference/generated/dpnp.negative.rst", "reference/generated/dpnp.nonzero.rst", "reference/generated/dpnp.not_equal.rst", "reference/generated/dpnp.ogrid.rst", "reference/generated/dpnp.ones.rst", "reference/generated/dpnp.ones_like.rst", "reference/generated/dpnp.outer.rst", "reference/generated/dpnp.partition.rst", "reference/generated/dpnp.place.rst", "reference/generated/dpnp.power.rst", "reference/generated/dpnp.prod.rst", "reference/generated/dpnp.ptp.rst", "reference/generated/dpnp.put.rst", "reference/generated/dpnp.put_along_axis.rst", "reference/generated/dpnp.putmask.rst", "reference/generated/dpnp.rad2deg.rst", "reference/generated/dpnp.radians.rst", "reference/generated/dpnp.random.RandomState.rst", "reference/generated/dpnp.random.beta.rst", "reference/generated/dpnp.random.binomial.rst", "reference/generated/dpnp.random.bytes.rst", "reference/generated/dpnp.random.chisquare.rst", "reference/generated/dpnp.random.choice.rst", "reference/generated/dpnp.random.dirichlet.rst", "reference/generated/dpnp.random.exponential.rst", "reference/generated/dpnp.random.f.rst", "reference/generated/dpnp.random.gamma.rst", "reference/generated/dpnp.random.geometric.rst", "reference/generated/dpnp.random.gumbel.rst", "reference/generated/dpnp.random.hypergeometric.rst", "reference/generated/dpnp.random.laplace.rst", "reference/generated/dpnp.random.logistic.rst", "reference/generated/dpnp.random.lognormal.rst", "reference/generated/dpnp.random.logseries.rst", "reference/generated/dpnp.random.multinomial.rst", "reference/generated/dpnp.random.multivariate_normal.rst", "reference/generated/dpnp.random.negative_binomial.rst", "reference/generated/dpnp.random.noncentral_chisquare.rst", "reference/generated/dpnp.random.noncentral_f.rst", "reference/generated/dpnp.random.normal.rst", "reference/generated/dpnp.random.pareto.rst", "reference/generated/dpnp.random.permutation.rst", "reference/generated/dpnp.random.poisson.rst", "reference/generated/dpnp.random.power.rst", "reference/generated/dpnp.random.rand.rst", "reference/generated/dpnp.random.randint.rst", "reference/generated/dpnp.random.randn.rst", "reference/generated/dpnp.random.random.rst", "reference/generated/dpnp.random.random_integers.rst", "reference/generated/dpnp.random.random_sample.rst", "reference/generated/dpnp.random.ranf.rst", "reference/generated/dpnp.random.rayleigh.rst", "reference/generated/dpnp.random.sample.rst", "reference/generated/dpnp.random.seed.rst", "reference/generated/dpnp.random.shuffle.rst", "reference/generated/dpnp.random.standard_cauchy.rst", "reference/generated/dpnp.random.standard_exponential.rst", "reference/generated/dpnp.random.standard_gamma.rst", "reference/generated/dpnp.random.standard_normal.rst", "reference/generated/dpnp.random.standard_t.rst", "reference/generated/dpnp.random.triangular.rst", "reference/generated/dpnp.random.uniform.rst", "reference/generated/dpnp.random.vonmises.rst", "reference/generated/dpnp.random.wald.rst", "reference/generated/dpnp.random.weibull.rst", "reference/generated/dpnp.random.zipf.rst", "reference/generated/dpnp.ravel.rst", "reference/generated/dpnp.reciprocal.rst", "reference/generated/dpnp.remainder.rst", "reference/generated/dpnp.repeat.rst", "reference/generated/dpnp.reshape.rst", "reference/generated/dpnp.result_type.rst", "reference/generated/dpnp.right_shift.rst", "reference/generated/dpnp.rollaxis.rst", "reference/generated/dpnp.searchsorted.rst", "reference/generated/dpnp.select.rst", "reference/generated/dpnp.shape.rst", "reference/generated/dpnp.sign.rst", "reference/generated/dpnp.sin.rst", "reference/generated/dpnp.sinh.rst", "reference/generated/dpnp.sort.rst", "reference/generated/dpnp.sqrt.rst", "reference/generated/dpnp.square.rst", "reference/generated/dpnp.squeeze.rst", "reference/generated/dpnp.stack.rst", "reference/generated/dpnp.std.rst", "reference/generated/dpnp.subtract.rst", "reference/generated/dpnp.sum.rst", "reference/generated/dpnp.swapaxes.rst", "reference/generated/dpnp.take.rst", "reference/generated/dpnp.take_along_axis.rst", "reference/generated/dpnp.tan.rst", "reference/generated/dpnp.tanh.rst", "reference/generated/dpnp.tensordot.rst", "reference/generated/dpnp.trace.rst", "reference/generated/dpnp.transpose.rst", "reference/generated/dpnp.trapz.rst", "reference/generated/dpnp.tri.rst", "reference/generated/dpnp.tril.rst", "reference/generated/dpnp.tril_indices.rst", "reference/generated/dpnp.tril_indices_from.rst", "reference/generated/dpnp.triu.rst", "reference/generated/dpnp.triu_indices.rst", "reference/generated/dpnp.triu_indices_from.rst", "reference/generated/dpnp.true_divide.rst", "reference/generated/dpnp.trunc.rst", "reference/generated/dpnp.unique.rst", "reference/generated/dpnp.unwrap.rst", "reference/generated/dpnp.vander.rst", "reference/generated/dpnp.var.rst", "reference/generated/dpnp.vdot.rst", "reference/generated/dpnp.vstack.rst", "reference/generated/dpnp.where.rst", "reference/generated/dpnp.zeros.rst", "reference/generated/dpnp.zeros_like.rst", "reference/index.rst", "reference/indexing.rst", "reference/linalg.rst", "reference/logic.rst", "reference/manipulation.rst", "reference/math.rst", "reference/misc.rst", "reference/ndarray.rst", "reference/pad.rst", "reference/polynomials.rst", "reference/random.rst", "reference/routines.rst", "reference/sorting.rst", "reference/special.rst", "reference/statistics.rst", "reference/ufunc.rst"], "titles": ["Interplay with the Data Parallel Control Library", "C++ backend API Reference", "Data Parallel Extension for NumPy*", "Overview", "Quick Start Guide", "Binary Operations", "Comparison Table NumPy/ DPNP/ CuPy", "Array Creation Routines", "Data type routines", "Available array data types", "FFT Functions", "dpnp.abs", "dpnp.absolute", "dpnp.add", "dpnp.all", "dpnp.allclose", "dpnp.amax", "dpnp.amin", "dpnp.any", "dpnp.arange", "dpnp.arccos", "dpnp.arccosh", "dpnp.arcsin", "dpnp.arcsinh", "dpnp.arctan", "dpnp.arctan2", "dpnp.arctanh", "dpnp.argmax", "dpnp.argmin", "dpnp.argsort", "dpnp.around", "dpnp.array", "dpnp.array_equal", "dpnp.asanyarray", "dpnp.asarray", "dpnp.ascontiguousarray", "dpnp.asfarray", "dpnp.asfortranarray", "dpnp.asnumpy", "dpnp.atleast_1d", "dpnp.atleast_2d", "dpnp.atleast_3d", "dpnp.average", "dpnp.bincount", "dpnp.bitwise_and", "dpnp.bitwise_not", "dpnp.bitwise_or", "dpnp.bitwise_xor", "dpnp.broadcast_to", "dpnp.cbrt", "dpnp.ceil", "dpnp.choose", "dpnp.concatenate", "dpnp.conj", "dpnp.conjugate", "dpnp.convolve", "dpnp.copy", "dpnp.copysign", "dpnp.copyto", "dpnp.correlate", "dpnp.cos", "dpnp.cosh", "dpnp.count_nonzero", "dpnp.cov", "dpnp.cross", "dpnp.cumprod", "dpnp.cumsum", "dpnp.deg2rad", "dpnp.degrees", "dpnp.diag", "dpnp.diag_indices", "dpnp.diag_indices_from", "dpnp.diagflat", "dpnp.diagonal", "dpnp.diff", "dpnp.divide", "dpnp.dot", "dpnp.dpnp_array.dpnp_array", "dpnp.dtype", "dpnp.ediff1d", "dpnp.einsum", "dpnp.einsum_path", "dpnp.empty", "dpnp.empty_like", "dpnp.equal", "dpnp.erf", "dpnp.exp", "dpnp.exp2", "dpnp.expand_dims", "dpnp.expm1", "dpnp.extract", "dpnp.eye", "dpnp.fabs", "dpnp.fft.fft", "dpnp.fft.fft2", "dpnp.fft.fftfreq", "dpnp.fft.fftn", "dpnp.fft.fftshift", "dpnp.fft.hfft", "dpnp.fft.ifft", "dpnp.fft.ifft2", "dpnp.fft.ifftn", "dpnp.fft.ifftshift", "dpnp.fft.ihfft", "dpnp.fft.irfft", "dpnp.fft.irfft2", "dpnp.fft.irfftn", "dpnp.fft.rfft", "dpnp.fft.rfft2", "dpnp.fft.rfftfreq", "dpnp.fft.rfftn", "dpnp.fill_diagonal", "dpnp.flatiter", "dpnp.floor", "dpnp.floor_divide", "dpnp.fmax", "dpnp.fmin", "dpnp.fmod", "dpnp.from_dlpack", "dpnp.frombuffer", "dpnp.fromfile", "dpnp.fromfunction", "dpnp.fromiter", "dpnp.fromstring", "dpnp.full", "dpnp.full_like", "dpnp.geomspace", "dpnp.get_include", "dpnp.gradient", "dpnp.greater", "dpnp.greater_equal", "dpnp.histogram", "dpnp.hstack", "dpnp.hypot", "dpnp.identity", "dpnp.indices", "dpnp.inner", "dpnp.invert", "dpnp.isclose", "dpnp.isfinite", "dpnp.isinf", "dpnp.isnan", "dpnp.isscalar", "dpnp.issubdtype", "dpnp.issubsctype", "dpnp.kron", "dpnp.left_shift", "dpnp.less", "dpnp.less_equal", "dpnp.linalg.cholesky", "dpnp.linalg.cond", "dpnp.linalg.det", "dpnp.linalg.eig", "dpnp.linalg.eigh", "dpnp.linalg.eigvals", "dpnp.linalg.inv", "dpnp.linalg.matrix_power", "dpnp.linalg.matrix_rank", "dpnp.linalg.multi_dot", "dpnp.linalg.norm", "dpnp.linalg.qr", "dpnp.linalg.svd", "dpnp.linspace", "dpnp.loadtxt", "dpnp.log", "dpnp.log10", "dpnp.log1p", "dpnp.log2", "dpnp.logical_and", "dpnp.logical_not", "dpnp.logical_or", "dpnp.logical_xor", "dpnp.logspace", "dpnp.matmul", "dpnp.max", "dpnp.maximum", "dpnp.mean", "dpnp.median", "dpnp.meshgrid", "dpnp.mgrid", "dpnp.min", "dpnp.minimum", "dpnp.mod", "dpnp.modf", "dpnp.moveaxis", "dpnp.multiply", "dpnp.nancumprod", "dpnp.nancumsum", "dpnp.nanprod", "dpnp.nansum", "dpnp.nanvar", "dpnp.ndarray", "dpnp.ndarray.T", "dpnp.ndarray.__abs__", "dpnp.ndarray.__add__", "dpnp.ndarray.__and__", "dpnp.ndarray.__complex__", "dpnp.ndarray.__eq__", "dpnp.ndarray.__float__", "dpnp.ndarray.__ge__", "dpnp.ndarray.__getitem__", "dpnp.ndarray.__gt__", "dpnp.ndarray.__iadd__", "dpnp.ndarray.__iand__", "dpnp.ndarray.__ilshift__", "dpnp.ndarray.__imul__", "dpnp.ndarray.__int__", "dpnp.ndarray.__invert__", "dpnp.ndarray.__ior__", "dpnp.ndarray.__ipow__", "dpnp.ndarray.__irshift__", "dpnp.ndarray.__isub__", "dpnp.ndarray.__itruediv__", "dpnp.ndarray.__ixor__", "dpnp.ndarray.__le__", "dpnp.ndarray.__len__", "dpnp.ndarray.__lshift__", "dpnp.ndarray.__lt__", "dpnp.ndarray.__mod__", "dpnp.ndarray.__mul__", "dpnp.ndarray.__ne__", "dpnp.ndarray.__neg__", "dpnp.ndarray.__new__", "dpnp.ndarray.__or__", "dpnp.ndarray.__pow__", "dpnp.ndarray.__repr__", "dpnp.ndarray.__rshift__", "dpnp.ndarray.__setitem__", "dpnp.ndarray.__str__", "dpnp.ndarray.__sub__", "dpnp.ndarray.__truediv__", "dpnp.ndarray.__xor__", "dpnp.ndarray.all", "dpnp.ndarray.any", "dpnp.ndarray.argmax", "dpnp.ndarray.argmin", "dpnp.ndarray.argsort", "dpnp.ndarray.astype", "dpnp.ndarray.choose", "dpnp.ndarray.conj", "dpnp.ndarray.conjugate", "dpnp.ndarray.cumsum", "dpnp.ndarray.diagonal", "dpnp.ndarray.dtype", "dpnp.ndarray.fill", "dpnp.ndarray.flags", "dpnp.ndarray.flat", "dpnp.ndarray.flatten", "dpnp.ndarray.item", "dpnp.ndarray.itemsize", "dpnp.ndarray.max", "dpnp.ndarray.mean", "dpnp.ndarray.min", "dpnp.ndarray.nbytes", "dpnp.ndarray.ndim", "dpnp.ndarray.nonzero", "dpnp.ndarray.partition", "dpnp.ndarray.prod", "dpnp.ndarray.reshape", "dpnp.ndarray.round", "dpnp.ndarray.shape", "dpnp.ndarray.size", "dpnp.ndarray.squeeze", "dpnp.ndarray.std", "dpnp.ndarray.strides", "dpnp.ndarray.sum", "dpnp.ndarray.swapaxes", "dpnp.ndarray.take", "dpnp.ndarray.transpose", "dpnp.ndarray.var", "dpnp.negative", "dpnp.nonzero", "dpnp.not_equal", "dpnp.ogrid", "dpnp.ones", "dpnp.ones_like", "dpnp.outer", "dpnp.partition", "dpnp.place", "dpnp.power", "dpnp.prod", "dpnp.ptp", "dpnp.put", "dpnp.put_along_axis", "dpnp.putmask", "dpnp.rad2deg", "dpnp.radians", "dpnp.random.RandomState", "dpnp.random.beta", "dpnp.random.binomial", "dpnp.random.bytes", "dpnp.random.chisquare", "dpnp.random.choice", "dpnp.random.dirichlet", "dpnp.random.exponential", "dpnp.random.f", "dpnp.random.gamma", "dpnp.random.geometric", "dpnp.random.gumbel", "dpnp.random.hypergeometric", "dpnp.random.laplace", "dpnp.random.logistic", "dpnp.random.lognormal", "dpnp.random.logseries", "dpnp.random.multinomial", "dpnp.random.multivariate_normal", "dpnp.random.negative_binomial", "dpnp.random.noncentral_chisquare", "dpnp.random.noncentral_f", "dpnp.random.normal", "dpnp.random.pareto", "dpnp.random.permutation", "dpnp.random.poisson", "dpnp.random.power", "dpnp.random.rand", "dpnp.random.randint", "dpnp.random.randn", "dpnp.random.random", "dpnp.random.random_integers", "dpnp.random.random_sample", "dpnp.random.ranf", "dpnp.random.rayleigh", "dpnp.random.sample", "dpnp.random.seed", "dpnp.random.shuffle", "dpnp.random.standard_cauchy", "dpnp.random.standard_exponential", "dpnp.random.standard_gamma", "dpnp.random.standard_normal", "dpnp.random.standard_t", "dpnp.random.triangular", "dpnp.random.uniform", "dpnp.random.vonmises", "dpnp.random.wald", "dpnp.random.weibull", "dpnp.random.zipf", "dpnp.ravel", "dpnp.reciprocal", "dpnp.remainder", "dpnp.repeat", "dpnp.reshape", "dpnp.result_type", "dpnp.right_shift", "dpnp.rollaxis", "dpnp.searchsorted", "dpnp.select", "dpnp.shape", "dpnp.sign", "dpnp.sin", "dpnp.sinh", "dpnp.sort", "dpnp.sqrt", "dpnp.square", "dpnp.squeeze", "dpnp.stack", "dpnp.std", "dpnp.subtract", "dpnp.sum", "dpnp.swapaxes", "dpnp.take", "dpnp.take_along_axis", "dpnp.tan", "dpnp.tanh", "dpnp.tensordot", "dpnp.trace", "dpnp.transpose", "dpnp.trapz", "dpnp.tri", "dpnp.tril", "dpnp.tril_indices", "dpnp.tril_indices_from", "dpnp.triu", "dpnp.triu_indices", "dpnp.triu_indices_from", "dpnp.true_divide", "dpnp.trunc", "dpnp.unique", "dpnp.unwrap", "dpnp.vander", "dpnp.var", "dpnp.vdot", "dpnp.vstack", "dpnp.where", "dpnp.zeros", "dpnp.zeros_like", "API Reference", "Array Indexing Routines", "Linear Algebra", "Logic Functions", "Array Manipulation Routines", "Mathematical Functions", "Miscellaneous routines", "Multi-Dimensional Array (ndarray)", "Padding", "Polynomials", "Random Sampling (<code class=\"docutils literal notranslate\"><span class=\"pre\">dpnp.random</span></code>)", "Routines", "Sorting, Searching, and Counting", "Special Functions", "Statistical Functions", "Universal Functions (ufunc)"], "terms": {"provid": [0, 6, 58, 77, 88, 287, 315, 318, 359, 374, 382, 400], "api": [0, 2, 3, 6, 78, 287, 309, 314, 315, 316, 317, 318, 319, 320, 322, 323, 328, 331, 357], "manag": 0, "specif": [0, 4, 78], "sycl": [0, 3, 287, 309, 314, 315, 316, 317, 318, 319, 320, 322, 323, 328, 331], "resourc": 0, "base": [0, 4, 78, 126, 161, 164, 167, 172, 278, 279, 284], "python": [0, 2, 3, 77, 78, 118, 248, 357, 392], "packag": [0, 3], "an": [0, 3, 4, 12, 14, 16, 17, 18, 19, 27, 28, 29, 31, 33, 34, 35, 36, 37, 43, 44, 45, 46, 47, 48, 49, 51, 52, 56, 70, 71, 77, 78, 79, 80, 81, 82, 83, 84, 88, 90, 111, 118, 120, 121, 122, 125, 127, 128, 135, 137, 146, 151, 157, 159, 174, 176, 183, 184, 236, 238, 248, 250, 256, 258, 260, 262, 264, 266, 267, 268, 273, 274, 275, 277, 278, 279, 281, 282, 284, 287, 289, 294, 295, 297, 306, 309, 314, 315, 316, 317, 318, 319, 320, 322, 323, 328, 331, 335, 339, 340, 341, 342, 343, 345, 346, 347, 350, 351, 352, 353, 354, 357, 358, 359, 360, 365, 367, 368, 369, 371, 372, 376, 382, 383, 384, 392], "below": [0, 4, 9, 78, 157, 159, 367, 371, 392], "demonstr": [0, 4, 78], "how": [0, 4, 78, 359], "extens": [0, 1, 3, 4, 9, 127, 385], "numpi": [0, 1, 3, 4, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 152, 153, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 236, 237, 239, 240, 243, 248, 258, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 371, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 392, 396], "can": [0, 3, 4, 13, 44, 45, 46, 47, 70, 75, 76, 77, 78, 84, 114, 120, 129, 130, 137, 146, 147, 148, 168, 170, 171, 182, 185, 234, 235, 271, 272, 276, 279, 287, 309, 314, 315, 316, 317, 318, 319, 320, 322, 323, 328, 331, 338, 340, 342, 356, 359, 372, 392], "easili": 0, "combin": [0, 78, 88], "devic": [0, 2, 3, 19, 31, 33, 34, 35, 36, 37, 77, 82, 83, 91, 118, 124, 125, 162, 274, 275, 287, 309, 314, 315, 316, 317, 318, 319, 320, 322, 323, 328, 331, 353, 383, 384], "interfac": 0, "dpctl": [0, 4, 12, 13, 14, 18, 44, 45, 46, 47, 48, 50, 52, 53, 54, 58, 60, 75, 76, 77, 83, 84, 88, 90, 113, 114, 125, 129, 130, 137, 139, 140, 141, 146, 147, 148, 153, 164, 168, 169, 170, 171, 176, 178, 182, 184, 185, 271, 272, 275, 276, 278, 279, 287, 309, 314, 315, 316, 317, 318, 319, 320, 322, 323, 328, 331, 338, 341, 342, 348, 351, 352, 353, 354, 356, 357, 358, 359, 365, 368, 371, 375, 382, 384], "liter": 0, "queue": [0, 287, 309, 314, 315, 316, 317, 318, 319, 320, 322, 323, 328, 331], "from": [0, 3, 27, 28, 29, 33, 34, 51, 52, 58, 67, 68, 77, 78, 87, 90, 118, 120, 122, 123, 163, 178, 228, 238, 262, 267, 273, 279, 283, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 316, 318, 319, 321, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 340, 341, 345, 352, 353, 354, 359, 360, 377, 382, 396], "allow": [0, 77, 258, 392], "set": [0, 31, 51, 70, 77, 78, 82, 124, 157, 159, 227, 238, 246, 274, 275, 383, 384, 392], "input": [0, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 53, 54, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 72, 73, 74, 75, 76, 77, 79, 82, 83, 84, 85, 86, 87, 88, 89, 92, 104, 105, 106, 107, 108, 110, 113, 114, 117, 124, 125, 128, 129, 130, 133, 136, 137, 138, 139, 140, 141, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 159, 160, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 235, 247, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 309, 315, 331, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 374, 375, 377, 379, 382, 383, 384], "current": [0, 12, 13, 15, 22, 24, 25, 44, 45, 46, 47, 50, 52, 57, 60, 64, 65, 66, 75, 76, 77, 78, 79, 92, 113, 114, 117, 128, 133, 134, 136, 137, 146, 175, 181, 182, 183, 185, 186, 187, 188, 189, 237, 270, 279, 337, 338, 342, 347, 348, 350, 354, 356, 361, 363, 366, 375], "usabl": 0, "insid": 0, "context": 0, "": [0, 3, 4, 77, 78, 94, 96, 100, 101, 105, 106, 108, 110, 157, 159, 161, 243, 287, 288, 289, 294, 295, 296, 298, 299, 300, 301, 302, 304, 306, 309, 310, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 392], "scope": [0, 4], "thi": [0, 16, 17, 36, 38, 67, 70, 77, 78, 115, 116, 120, 127, 159, 182, 236, 237, 244, 256, 258, 260, 285, 320, 322, 340, 359, 374, 380, 382], "wai": [0, 3, 4, 77, 120, 256], "arrai": [0, 2, 3, 4, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 96, 100, 101, 105, 106, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 145, 146, 147, 148, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 228, 234, 235, 236, 237, 238, 243, 244, 245, 247, 248, 249, 251, 253, 254, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 306, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 396], "creation": [0, 78, 81, 385, 392, 396], "function": [0, 2, 3, 12, 13, 14, 15, 16, 17, 18, 19, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 42, 44, 45, 46, 47, 48, 50, 52, 53, 54, 57, 59, 60, 62, 63, 64, 65, 66, 67, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 113, 114, 115, 116, 117, 120, 121, 124, 125, 127, 128, 129, 130, 133, 136, 137, 138, 139, 140, 141, 146, 147, 148, 155, 158, 159, 162, 164, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 232, 233, 258, 268, 269, 270, 271, 272, 274, 275, 276, 278, 279, 285, 286, 287, 290, 292, 293, 303, 308, 324, 336, 337, 338, 339, 342, 343, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 363, 366, 368, 371, 374, 375, 379, 380, 382, 383, 384, 385, 392, 396], "dpnp": [0, 2, 3, 4, 385, 392, 396, 397, 400], "which": [0, 3, 4, 33, 34, 58, 77, 78, 88, 149, 157, 159, 234, 235, 236, 269, 271, 353, 354, 369, 372, 392], "i": [0, 3, 4, 6, 11, 12, 14, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 40, 41, 42, 45, 48, 49, 50, 51, 52, 53, 54, 56, 58, 59, 60, 61, 62, 63, 65, 66, 68, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 124, 125, 126, 128, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 146, 149, 150, 153, 155, 157, 158, 159, 160, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 180, 183, 184, 186, 187, 188, 189, 190, 234, 235, 236, 237, 247, 256, 258, 270, 271, 274, 275, 277, 280, 281, 282, 286, 287, 288, 289, 291, 294, 295, 296, 297, 298, 299, 300, 301, 302, 306, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 368, 369, 371, 372, 375, 377, 379, 382, 383, 384, 392], "defin": [0, 77, 78, 236, 392], "alloc": [0, 3, 4, 184, 287, 309, 314, 315, 316, 317, 318, 319, 320, 322, 328, 331, 353], "us": [0, 4, 13, 29, 44, 45, 46, 47, 70, 75, 77, 78, 84, 88, 113, 120, 126, 127, 129, 130, 137, 146, 147, 148, 149, 162, 168, 170, 172, 178, 185, 236, 237, 271, 272, 287, 290, 292, 293, 303, 308, 309, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 328, 331, 338, 340, 342, 356, 359, 360, 366, 372, 392], "import": [0, 3, 4, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 37, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 72, 75, 76, 77, 78, 79, 82, 83, 84, 85, 86, 87, 88, 89, 92, 113, 114, 117, 124, 125, 126, 128, 129, 130, 131, 133, 134, 136, 137, 138, 139, 140, 141, 146, 147, 148, 153, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 256, 268, 270, 271, 272, 273, 274, 275, 276, 279, 280, 286, 312, 321, 325, 336, 337, 338, 339, 340, 341, 342, 343, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 365, 366, 367, 368, 371, 375, 376, 377, 378, 379, 382, 383, 384], "np": [0, 3, 4, 11, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 37, 42, 43, 44, 45, 46, 47, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 72, 75, 77, 78, 79, 82, 83, 84, 85, 86, 87, 88, 89, 92, 113, 114, 117, 124, 125, 126, 128, 129, 130, 133, 134, 136, 137, 138, 139, 140, 141, 146, 147, 148, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 234, 244, 248, 256, 270, 271, 272, 273, 274, 275, 276, 280, 286, 312, 321, 334, 335, 336, 337, 338, 339, 342, 343, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 366, 367, 368, 371, 375, 376, 377, 378, 379, 383, 384], "device_context": 0, "opencl": 0, "gpu": [0, 3, 4], "x": [0, 3, 4, 11, 12, 14, 18, 20, 21, 22, 23, 24, 26, 29, 31, 33, 34, 35, 37, 45, 48, 49, 50, 53, 54, 56, 57, 59, 60, 61, 63, 64, 65, 66, 69, 77, 78, 79, 82, 83, 85, 86, 87, 88, 89, 90, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 112, 113, 117, 121, 124, 125, 126, 128, 136, 137, 139, 140, 141, 159, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 175, 176, 178, 181, 183, 184, 186, 187, 248, 270, 271, 274, 275, 276, 278, 279, 305, 311, 336, 337, 339, 340, 347, 348, 349, 351, 352, 353, 357, 358, 359, 361, 362, 363, 366, 375, 376, 378, 382, 383, 384], "1": [0, 3, 4, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 29, 30, 31, 33, 34, 35, 37, 39, 42, 43, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 83, 84, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 117, 119, 122, 123, 125, 126, 128, 130, 131, 134, 136, 138, 146, 147, 148, 150, 153, 155, 158, 159, 163, 164, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 234, 236, 242, 244, 248, 256, 268, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 286, 287, 289, 291, 292, 294, 296, 298, 300, 301, 302, 304, 305, 306, 309, 311, 312, 313, 314, 315, 317, 319, 320, 321, 322, 326, 328, 331, 336, 337, 338, 339, 340, 342, 343, 346, 347, 348, 350, 351, 352, 353, 354, 355, 357, 358, 359, 361, 363, 364, 365, 366, 367, 368, 371, 375, 376, 377, 378, 379, 382, 383, 384, 392], "2": [0, 3, 4, 11, 12, 13, 19, 21, 23, 27, 28, 29, 30, 31, 33, 34, 35, 37, 42, 44, 46, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 69, 70, 72, 75, 76, 77, 78, 79, 83, 84, 85, 86, 87, 88, 91, 92, 94, 100, 105, 108, 113, 114, 117, 128, 129, 130, 131, 135, 136, 146, 147, 148, 150, 153, 155, 158, 159, 161, 162, 163, 164, 167, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 185, 186, 187, 188, 189, 234, 244, 248, 256, 268, 271, 272, 273, 274, 275, 276, 279, 280, 286, 287, 291, 295, 299, 305, 311, 314, 316, 327, 329, 330, 333, 335, 336, 337, 338, 339, 340, 342, 343, 346, 348, 349, 351, 353, 354, 355, 356, 357, 358, 361, 362, 363, 365, 366, 367, 368, 371, 372, 375, 376, 377, 378, 379, 382, 383, 384], "3": [0, 3, 4, 6, 13, 19, 20, 27, 28, 29, 30, 31, 33, 34, 35, 37, 42, 44, 47, 48, 49, 52, 55, 56, 58, 59, 62, 63, 64, 65, 66, 69, 70, 72, 75, 76, 77, 78, 79, 83, 84, 85, 86, 87, 89, 113, 114, 117, 128, 131, 133, 134, 136, 146, 161, 162, 163, 165, 166, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 184, 185, 187, 188, 189, 234, 248, 256, 268, 271, 272, 273, 275, 276, 279, 280, 287, 291, 295, 302, 305, 311, 314, 315, 316, 326, 330, 333, 336, 337, 338, 339, 340, 341, 342, 343, 346, 350, 351, 353, 354, 355, 356, 357, 358, 359, 363, 365, 366, 367, 368, 371, 376, 377, 378, 379, 382, 384], "sum": [0, 3, 4, 6, 13, 66, 76, 77, 131, 173, 187, 189, 241, 257, 289, 304, 306, 364, 392, 396], "For": [0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 153, 155, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 239, 240, 248, 258, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 371, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 392], "more": [0, 3, 4, 31, 78, 118, 157, 158, 354, 368, 371, 392], "inform": [0, 35, 37, 77, 78, 245, 392, 396], "pleas": [0, 3, 392], "refer": [0, 2, 3, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 153, 155, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 232, 233, 239, 240, 248, 256, 258, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 371, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 392], "document": [0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 153, 155, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 232, 233, 236, 239, 240, 248, 256, 257, 258, 259, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 371, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 392], "time": [0, 13, 44, 46, 47, 75, 76, 84, 114, 129, 130, 141, 146, 147, 148, 168, 170, 171, 182, 185, 272, 276, 279, 289, 304, 338, 342, 356], "def": 0, "run": [0, 4], "executor": 0, "size": [0, 6, 31, 52, 59, 63, 64, 77, 78, 126, 159, 162, 172, 248, 249, 260, 274, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 315, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 353, 354, 355, 372, 379, 383], "test_typ": 0, "repetit": 0, "reshap": [0, 6, 13, 27, 28, 69, 70, 75, 77, 88, 174, 180, 185, 234, 260, 268, 311, 356, 392], "arang": [0, 6, 13, 27, 28, 42, 43, 68, 69, 70, 75, 77, 84, 86, 87, 89, 125, 126, 131, 162, 165, 166, 168, 169, 170, 171, 172, 174, 178, 180, 185, 234, 272, 275, 286, 311, 338, 341, 356, 382, 384], "dtype": [0, 9, 12, 13, 19, 25, 31, 33, 34, 35, 36, 37, 44, 45, 46, 47, 50, 52, 53, 54, 57, 60, 63, 70, 75, 77, 82, 83, 84, 91, 113, 114, 117, 122, 124, 125, 126, 128, 129, 130, 133, 134, 135, 137, 139, 140, 141, 146, 147, 148, 161, 162, 164, 168, 169, 170, 171, 172, 175, 176, 181, 182, 185, 190, 237, 241, 257, 263, 265, 269, 272, 274, 275, 279, 280, 287, 309, 315, 331, 338, 341, 342, 348, 351, 352, 354, 355, 356, 357, 364, 367, 375, 379, 383, 384, 392], "_": [0, 354], "rang": [0, 131, 281, 306, 311, 354, 377, 396], "start_tim": 0, "perf_count": 0, "result": [0, 4, 11, 12, 14, 18, 44, 45, 46, 47, 57, 64, 65, 66, 77, 78, 79, 92, 117, 121, 128, 136, 137, 139, 140, 141, 146, 159, 168, 169, 170, 171, 175, 181, 183, 186, 187, 234, 235, 269, 270, 276, 279, 287, 289, 319, 340, 341, 342, 347, 357, 363, 392], "end_tim": 0, "append": [0, 6, 74, 88], "return": [0, 12, 13, 14, 15, 16, 17, 18, 19, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 42, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 60, 63, 64, 65, 66, 70, 71, 73, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 88, 90, 91, 111, 112, 113, 118, 124, 125, 126, 127, 128, 129, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 151, 153, 154, 156, 157, 158, 159, 162, 164, 167, 168, 169, 170, 171, 172, 174, 176, 178, 180, 183, 184, 185, 186, 187, 193, 194, 195, 197, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 240, 241, 242, 243, 245, 246, 247, 248, 250, 251, 252, 255, 256, 257, 258, 259, 263, 264, 265, 268, 269, 271, 272, 274, 275, 276, 277, 279, 287, 290, 309, 311, 314, 315, 316, 317, 318, 319, 320, 322, 323, 328, 331, 335, 336, 337, 338, 340, 341, 342, 345, 346, 347, 348, 350, 351, 352, 353, 354, 356, 357, 358, 359, 363, 364, 365, 368, 369, 370, 371, 372, 373, 375, 380, 382, 383, 384, 392], "median": [0, 6], "get_dtyp": 0, "_dtypes_list": 0, "int32": [0, 9, 78, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 119, 120, 121, 122, 123, 163, 287, 289, 297, 299, 304, 306, 312, 315, 331, 341], "int64": [0, 9, 78, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 119, 120, 121, 122, 123, 163, 341], "float32": [0, 78, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 119, 120, 121, 122, 123, 163, 287, 309, 314, 316, 317, 319, 320, 322, 328, 331, 341], "select_default_devic": 0, "has_aspect_fp64": 0, "float64": [0, 78, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 119, 120, 121, 122, 123, 163, 287, 288, 294, 295, 296, 298, 300, 301, 302, 309, 310, 313, 314, 316, 317, 319, 320, 321, 322, 327, 328, 329, 330, 331, 332, 333, 334, 335, 341, 367], "test_repetit": 0, "5": [0, 6, 13, 14, 19, 26, 27, 30, 42, 43, 44, 46, 47, 50, 52, 55, 58, 59, 62, 64, 65, 66, 69, 70, 75, 77, 79, 85, 113, 114, 117, 126, 128, 131, 133, 146, 153, 162, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 181, 184, 185, 234, 271, 273, 274, 275, 279, 287, 288, 289, 291, 294, 306, 310, 311, 312, 313, 316, 319, 334, 336, 337, 338, 340, 342, 343, 347, 354, 357, 359, 363, 365, 367, 368, 371, 375, 377, 378, 382, 383, 384], "type_nam": 0, "name": [0, 6, 78], "print": [0, 4, 31, 43, 55, 78, 82, 131, 228, 287, 306, 311, 376], "f": [0, 6, 35, 37, 77, 78, 82, 83, 91, 124, 125, 237, 247, 274, 275, 308, 340, 383, 384], "test": [0, 2, 14, 18, 139, 140, 141, 289, 396], "type": [0, 2, 3, 4, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 36, 42, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 75, 76, 77, 78, 79, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 128, 129, 130, 133, 137, 138, 139, 140, 141, 142, 143, 146, 147, 148, 149, 151, 153, 154, 156, 157, 158, 159, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 234, 235, 236, 237, 243, 247, 258, 268, 270, 271, 272, 274, 275, 276, 279, 280, 286, 287, 288, 289, 291, 294, 295, 296, 297, 298, 299, 300, 301, 302, 306, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 365, 366, 368, 369, 371, 372, 375, 377, 379, 382, 383, 384, 385, 396], "each": [0, 12, 43, 50, 52, 53, 54, 60, 77, 78, 113, 121, 153, 154, 163, 178, 259, 260, 289, 306, 348, 351, 354, 369, 372, 375, 392], "64": [0, 4, 30], "128": 0, "256": 0, "512": 0, "1024": 0, "2048": 0, "4096": 0, "time_numpi": 0, "result_numpi": 0, "time_dpnp": 0, "result_dpnp": 0, "verif": 0, "true": [0, 12, 13, 14, 15, 18, 25, 31, 32, 35, 37, 44, 45, 46, 47, 50, 53, 54, 56, 57, 58, 60, 63, 75, 77, 78, 84, 88, 90, 113, 114, 117, 126, 129, 130, 131, 133, 137, 138, 139, 140, 141, 142, 143, 146, 147, 148, 157, 159, 161, 162, 164, 168, 169, 170, 171, 172, 174, 175, 176, 178, 180, 181, 182, 185, 232, 233, 237, 257, 265, 272, 279, 280, 292, 338, 340, 342, 348, 351, 352, 356, 357, 374, 375, 378, 382], "els": 0, "msg": 0, "n": [0, 4, 70, 71, 74, 78, 79, 88, 91, 93, 95, 96, 98, 99, 101, 103, 104, 106, 107, 109, 110, 111, 134, 157, 159, 178, 289, 304, 306, 316, 326, 346, 352, 358, 359, 367, 369, 372, 378, 392], "4": [0, 13, 14, 19, 30, 31, 42, 44, 46, 52, 55, 58, 60, 64, 65, 66, 69, 70, 72, 75, 77, 78, 79, 82, 84, 87, 114, 117, 124, 126, 128, 129, 130, 131, 133, 148, 162, 167, 168, 172, 173, 174, 175, 176, 177, 179, 180, 181, 184, 185, 186, 187, 188, 189, 256, 268, 271, 273, 275, 279, 280, 287, 288, 291, 311, 316, 332, 336, 338, 339, 340, 343, 347, 350, 351, 354, 355, 356, 357, 359, 363, 365, 366, 368, 371, 378, 379, 382, 384], "3e": 0, "ratio": 0, "6": [0, 4, 13, 19, 27, 28, 30, 46, 47, 52, 57, 58, 64, 65, 66, 68, 69, 70, 75, 77, 78, 79, 84, 89, 92, 125, 161, 162, 172, 186, 187, 234, 248, 271, 275, 286, 287, 304, 306, 311, 316, 336, 340, 343, 354, 356, 357, 359, 363, 366, 368, 371, 377, 382, 384], "2f": 0, "__name__": 0, "__main__": 0, "try": [0, 4], "gpu_queu": 0, "get_sycl_devic": [0, 287], "print_device_info": 0, "except": [0, 4, 31, 33, 34, 35, 37, 52, 58, 77, 88, 93, 99, 107, 260, 340, 354, 358], "importerror": 0, "data": [1, 3, 4, 12, 13, 14, 15, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 38, 42, 44, 45, 46, 47, 48, 49, 50, 53, 54, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 75, 76, 77, 78, 79, 84, 85, 86, 87, 88, 89, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 113, 114, 117, 118, 120, 123, 128, 129, 130, 133, 137, 138, 139, 140, 141, 146, 147, 148, 153, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 237, 258, 268, 270, 271, 272, 276, 279, 280, 283, 286, 287, 288, 289, 291, 294, 295, 296, 297, 298, 299, 300, 301, 302, 306, 309, 310, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 347, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 366, 368, 371, 375, 377, 379, 382, 385, 396], "parallel": [1, 3, 4, 9, 385], "overview": 2, "quick": [2, 3], "start": [2, 3, 19, 35, 37, 126, 162, 172, 343], "guid": [2, 3], "driver": 2, "interpret": [2, 78, 119, 392], "instal": 2, "exampl": [2, 3, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 37, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 72, 75, 76, 77, 78, 79, 82, 83, 84, 85, 86, 87, 88, 89, 92, 113, 114, 117, 124, 125, 126, 128, 129, 130, 131, 133, 134, 136, 137, 138, 139, 140, 141, 146, 147, 148, 153, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 228, 234, 244, 248, 256, 258, 268, 270, 271, 272, 273, 274, 275, 276, 279, 280, 286, 287, 288, 289, 291, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 365, 366, 367, 368, 371, 375, 376, 377, 378, 379, 382, 383, 384], "multi": [2, 77, 94, 96, 100, 101, 105, 106, 108, 110, 179, 235, 264, 273, 385], "dimension": [2, 4, 39, 55, 59, 70, 71, 72, 77, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 119, 122, 178, 179, 262, 273, 357, 385], "ndarrai": [2, 3, 6, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33, 34, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 73, 74, 75, 76, 77, 78, 79, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 113, 114, 117, 128, 129, 130, 133, 136, 137, 138, 139, 140, 141, 146, 147, 148, 150, 153, 154, 155, 158, 159, 160, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 270, 271, 272, 276, 277, 278, 279, 281, 282, 284, 286, 287, 309, 314, 315, 316, 317, 318, 319, 320, 322, 328, 331, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 372, 375, 377, 379, 382, 385], "univers": [2, 385, 392], "ufunc": [2, 385, 392], "routin": [2, 385, 392], "special": [2, 78, 85, 385, 396], "avail": [2, 3, 4, 78, 385, 392], "comparison": [2, 84, 129, 130, 147, 148, 272, 385, 396], "tabl": [2, 9, 159, 385], "cupi": [2, 385], "miscellan": [2, 385, 396], "c": [2, 4, 35, 37, 38, 56, 77, 78, 82, 83, 91, 124, 125, 127, 163, 173, 237, 247, 274, 275, 336, 340, 383, 384], "backend": [2, 127, 290, 292, 293, 303, 308, 324], "The": [3, 4, 13, 16, 17, 19, 27, 28, 44, 45, 46, 47, 50, 52, 53, 54, 58, 60, 63, 75, 77, 78, 79, 84, 88, 93, 99, 107, 113, 121, 129, 130, 134, 137, 146, 147, 148, 153, 154, 158, 159, 164, 168, 170, 184, 185, 236, 247, 256, 272, 279, 287, 290, 292, 293, 303, 308, 309, 314, 315, 316, 317, 318, 319, 320, 322, 323, 328, 331, 338, 340, 341, 342, 346, 348, 354, 356, 357, 369, 370, 372, 373, 375, 382, 392, 396], "librari": [3, 4, 392], "implement": [3, 6, 118], "subset": [3, 353, 396], "execut": [3, 4, 12, 13, 14, 15, 18, 19, 25, 27, 28, 29, 30, 33, 34, 42, 44, 45, 46, 47, 48, 50, 52, 53, 54, 57, 59, 60, 62, 63, 64, 65, 66, 73, 74, 75, 76, 79, 80, 81, 82, 83, 84, 85, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 113, 114, 117, 121, 124, 125, 128, 129, 130, 133, 136, 137, 138, 139, 140, 141, 146, 147, 148, 155, 162, 164, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 270, 271, 272, 274, 275, 276, 278, 279, 290, 292, 293, 303, 308, 324, 336, 337, 338, 339, 342, 343, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 363, 366, 368, 371, 375, 379, 382, 383, 384], "ani": [3, 6, 14, 16, 17, 77, 78, 111, 287, 331, 351, 392], "drop": [3, 78], "replac": [3, 36, 282, 292, 392], "core": [3, 78, 392], "numer": [3, 4, 78, 396], "being": [3, 78], "develop": [3, 4], "part": [3, 53, 54, 183, 392], "intel": [3, 4], "ai": 3, "analyt": 3, "toolkit": 3, "distribut": [3, 4, 172, 287, 288, 289, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 316, 318, 319, 321, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 396], "also": [3, 78, 88, 325, 392], "anaconda": 3, "cloud": 3, "page": [3, 396], "learn": [3, 4], "Being": 3, "mean": [3, 6, 42, 77, 159, 177, 247, 287, 300, 302, 305, 309, 328, 332, 333, 340, 355, 379, 392], "usag": [3, 4], "veri": [3, 178], "similar": [3, 33, 34, 78, 126, 162, 172, 287, 315], "class": [3, 77, 78, 79, 112, 135, 287, 315, 351, 352, 367, 396], "compat": [3, 340, 396], "altern": [3, 4, 173], "abov": [3, 368], "instanc": [3, 77, 178, 287, 309, 314, 315, 316, 317, 318, 319, 320, 322, 323, 328, 331], "creat": [3, 4, 31, 33, 34, 70, 72, 78, 118, 122, 287, 309, 314, 315, 316, 317, 318, 319, 320, 322, 323, 328, 331, 392, 396], "ident": [3, 6, 78, 326], "one": [3, 4, 31, 36, 39, 55, 58, 59, 77, 78, 82, 84, 93, 95, 98, 99, 103, 104, 107, 109, 124, 159, 164, 167, 178, 186, 247, 249, 275, 306, 353, 354, 369, 372, 383, 392], "kei": [3, 29, 77, 78, 112, 200, 227, 236, 350], "differ": [3, 74, 77, 78, 79, 154, 159, 173, 236, 356, 396], "memori": [3, 33, 34, 35, 37, 77, 78, 245, 247, 264, 340, 385], "default": [3, 12, 13, 14, 18, 19, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 42, 44, 45, 46, 47, 48, 50, 52, 53, 54, 56, 57, 59, 60, 62, 63, 73, 74, 75, 77, 78, 79, 82, 83, 84, 91, 93, 99, 111, 113, 114, 117, 124, 125, 126, 129, 130, 133, 135, 137, 139, 140, 141, 146, 147, 148, 157, 159, 162, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 185, 190, 236, 247, 272, 274, 275, 277, 279, 281, 287, 291, 309, 314, 315, 316, 317, 318, 319, 320, 322, 323, 325, 326, 328, 331, 338, 340, 342, 344, 345, 348, 351, 352, 354, 355, 356, 357, 359, 364, 369, 372, 375, 379, 383, 384, 392], "system": [3, 4], "integr": [3, 4, 183, 366], "discret": [3, 55, 59, 74, 79, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 287, 385], "otherwis": [3, 12, 13, 14, 15, 18, 19, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 42, 44, 45, 46, 47, 48, 50, 52, 53, 54, 57, 58, 59, 60, 62, 63, 64, 65, 66, 73, 74, 75, 76, 77, 78, 79, 82, 83, 84, 85, 88, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 113, 114, 117, 124, 125, 128, 129, 130, 133, 136, 137, 138, 139, 140, 141, 146, 147, 148, 155, 162, 164, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 234, 235, 237, 247, 258, 270, 271, 272, 274, 275, 276, 278, 279, 287, 288, 289, 291, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 363, 366, 368, 371, 375, 379, 382, 383, 384], "host": [3, 4, 287, 309, 314, 315, 316, 317, 318, 319, 320, 322, 328, 331], "do": [3, 4, 78, 289], "have": [3, 4, 32, 48, 78, 163, 184, 306, 392], "most": [3, 4, 78, 353], "manipul": [3, 70, 385, 396], "ar": [3, 4, 12, 13, 14, 15, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 39, 42, 44, 45, 46, 47, 49, 50, 52, 53, 54, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 73, 74, 75, 76, 77, 78, 79, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 113, 114, 117, 119, 120, 121, 122, 123, 128, 129, 130, 133, 135, 136, 137, 138, 139, 140, 141, 146, 147, 148, 149, 153, 154, 157, 159, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 255, 256, 269, 270, 271, 272, 276, 277, 278, 279, 280, 281, 284, 286, 287, 288, 289, 291, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 309, 310, 312, 313, 315, 318, 319, 321, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 345, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 366, 370, 373, 375, 377, 379, 382, 392], "done": 3, "see": [3, 77, 78, 118, 159, 236, 304, 369, 370, 372, 373, 392], "complet": [3, 4, 392], "list": [3, 6, 9, 52, 77, 78, 236, 339, 341, 345, 354], "support": [3, 9, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 73, 74, 75, 76, 77, 78, 79, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 113, 114, 117, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 146, 147, 148, 150, 153, 155, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 237, 270, 271, 272, 274, 275, 276, 277, 278, 279, 281, 282, 284, 286, 287, 288, 289, 291, 294, 295, 296, 297, 298, 299, 300, 301, 302, 305, 306, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 368, 371, 375, 377, 379, 382, 383, 384, 400], "along": [3, 4, 14, 16, 17, 18, 27, 28, 42, 52, 65, 66, 74, 77, 79, 136, 159, 174, 176, 177, 180, 186, 187, 190, 234, 235, 236, 241, 250, 252, 257, 263, 265, 267, 269, 281, 343, 354, 355, 359, 360, 363, 364, 366, 369, 372, 379, 392], "limit": [3, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 117, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 146, 147, 148, 150, 153, 155, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 286, 287, 288, 289, 291, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 309, 310, 312, 313, 315, 318, 321, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 368, 371, 375, 377, 379, 382, 383, 384], "To": 4, "program": [4, 113], "beyond": 4, "cpu": [4, 12, 13, 14, 15, 18, 19, 25, 27, 28, 29, 30, 42, 44, 45, 46, 47, 48, 50, 52, 53, 54, 57, 59, 60, 62, 63, 64, 65, 66, 73, 74, 75, 76, 79, 80, 81, 82, 83, 84, 85, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 113, 114, 117, 124, 125, 128, 129, 130, 133, 136, 137, 138, 139, 140, 141, 146, 147, 148, 155, 162, 164, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 270, 271, 272, 274, 275, 276, 278, 279, 336, 337, 338, 339, 342, 343, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 363, 366, 368, 371, 375, 379, 382, 383, 384], "you": [4, 392], "need": [4, 77, 127, 236], "appropri": [4, 127, 287, 315, 318, 392], "hardwar": 4, "work": [4, 16, 17, 36, 38, 67, 115, 116, 182, 285, 374, 380, 392], "fine": 4, "laptop": 4, "graphic": 4, "In": [4, 27, 28, 77, 149, 236, 287, 331, 340, 359], "major": [4, 33, 34, 35, 37, 77, 237, 247], "case": [4, 27, 28, 161, 340], "your": 4, "window": 4, "alreadi": 4, "ha": [4, 44, 45, 46, 47, 78, 88, 98, 103, 121, 137, 353, 354, 357, 358, 392], "all": [4, 6, 9, 18, 32, 77, 78, 86, 149, 236, 239, 244, 256, 289, 351, 353, 392], "necessari": [4, 58, 340], "But": [4, 78], "want": 4, "up": [4, 78], "date": [4, 77, 236], "alwai": [4, 33, 340], "updat": 4, "latest": [4, 118], "follow": [4, 78, 88, 392, 396], "instruct": 4, "step": [4, 19, 126, 162, 172], "8": [4, 13, 15, 49, 58, 69, 70, 78, 138, 161, 162, 172, 186, 287, 311, 330, 348, 359, 363, 366, 368, 371, 378, 382], "9": [4, 13, 57, 58, 62, 69, 70, 75, 77, 92, 114, 161, 173, 185, 248, 279, 287, 289, 291, 311, 351, 356, 363, 368, 371, 378, 382], "10": [4, 13, 21, 23, 27, 28, 30, 56, 66, 70, 77, 78, 124, 126, 131, 146, 164, 167, 172, 177, 185, 189, 258, 287, 289, 299, 311, 341, 342, 354, 368, 371, 382], "If": [4, 36, 76, 77, 78, 88, 157, 158, 159, 176, 234, 235, 236, 237, 260, 287, 309, 331, 339, 340, 351, 357, 358, 392], "yet": [4, 6], "easiest": 4, "It": 4, "essenti": 4, "machin": 4, "optim": [4, 81], "includ": [4, 127, 172, 287, 331], "anoth": [4, 58, 118], "vendor": 4, "too": 4, "manual": [4, 78], "shown": 4, "next": 4, "section": [4, 78, 392], "recommend": [4, 271], "org": 4, "channel": 4, "command": 4, "forg": 4, "pip": 4, "http": [4, 118], "pypi": 4, "simpl": [4, 171, 396], "These": [4, 78, 88, 392, 396], "its": [4, 6, 53, 54, 77, 93, 99, 133, 153, 154, 268, 324, 340, 365, 392], "depend": [4, 36, 153, 159, 345, 382], "control": 4, "requir": [4, 6, 35, 37, 77, 78, 237], "compil": [4, 78, 127], "runtim": 4, "onemkl": 4, "befor": [4, 77, 256], "strongli": 4, "advis": 4, "version": [4, 77, 78, 246, 271], "activ": 4, "local": 4, "environ": 4, "env": 4, "And": [4, 70, 77, 237], "sourc": [4, 6, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384], "recip": 4, "finanli": 4, "setuptool": 4, "o": [4, 78], "On": 4, "linux": 4, "cython": 4, "dpcpp_linux": 4, "mkl": 4, "devel": 4, "dpcpp": 4, "tbb": 4, "onedpl": 4, "cmake": 4, "ninja": 4, "pytest": 4, "dpcpp_win": 4, "setup": 4, "py": 4, "g": [4, 77, 78, 264, 287], "dcmake_c_compil": 4, "path": 4, "icx": 4, "dcmake_cxx_compil": 4, "icpx": 4, "script": 4, "build_loc": 4, "suit": 4, "element": [4, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 32, 43, 44, 45, 46, 47, 49, 50, 53, 54, 57, 58, 60, 61, 65, 66, 75, 77, 78, 79, 84, 86, 87, 89, 90, 92, 113, 115, 116, 117, 129, 130, 137, 138, 139, 140, 141, 146, 147, 148, 149, 155, 164, 165, 166, 167, 168, 169, 170, 171, 175, 176, 181, 182, 183, 185, 186, 187, 232, 233, 239, 240, 241, 243, 244, 247, 248, 249, 251, 253, 255, 256, 258, 259, 261, 263, 264, 267, 269, 270, 271, 272, 278, 279, 280, 282, 284, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 356, 357, 359, 361, 362, 368, 371, 374, 375, 376, 382, 392, 396], "asarrai": [4, 6, 33, 38], "y": [4, 12, 13, 35, 37, 48, 56, 60, 63, 64, 75, 76, 77, 78, 88, 90, 121, 128, 164, 176, 178, 183, 185, 258, 268, 271, 279, 340, 348, 351, 352, 356, 357, 365, 366, 382], "locat": [4, 127, 298, 300], "same": [4, 13, 16, 17, 32, 35, 36, 37, 38, 44, 46, 47, 48, 67, 75, 76, 77, 83, 84, 88, 90, 114, 115, 116, 118, 125, 129, 130, 146, 147, 148, 163, 168, 169, 170, 171, 182, 184, 185, 258, 272, 275, 276, 279, 285, 287, 309, 315, 331, 338, 342, 351, 352, 353, 356, 360, 370, 373, 374, 380, 384], "shape": [4, 6, 27, 28, 31, 32, 48, 59, 63, 64, 70, 77, 78, 82, 83, 88, 90, 121, 124, 125, 155, 157, 161, 168, 169, 170, 171, 173, 174, 180, 184, 234, 235, 258, 262, 268, 274, 275, 287, 296, 299, 304, 305, 310, 314, 315, 316, 317, 318, 319, 320, 322, 327, 328, 334, 340, 343, 351, 352, 353, 354, 358, 359, 365, 372, 383, 384, 385, 396], "0": [4, 6, 13, 14, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 43, 49, 50, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 68, 69, 70, 72, 73, 75, 77, 78, 79, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 95, 109, 113, 114, 117, 125, 126, 128, 131, 133, 134, 136, 139, 140, 141, 153, 155, 162, 163, 164, 165, 166, 167, 169, 171, 172, 173, 174, 176, 178, 179, 180, 183, 184, 185, 186, 187, 190, 234, 236, 242, 244, 248, 259, 263, 264, 265, 268, 269, 271, 273, 274, 275, 286, 287, 289, 294, 296, 297, 298, 300, 301, 302, 304, 305, 306, 309, 311, 312, 313, 314, 317, 319, 320, 321, 322, 325, 328, 330, 331, 332, 337, 338, 339, 343, 345, 346, 347, 348, 349, 352, 353, 354, 355, 356, 357, 358, 359, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 377, 379, 382, 383, 384], "expect": [4, 78], "comput": [4, 21, 22, 25, 42, 44, 45, 46, 47, 50, 88, 92, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 131, 136, 137, 150, 151, 152, 154, 158, 159, 160, 168, 169, 170, 171, 176, 177, 182, 190, 338, 355, 357, 361, 362, 363, 375, 379], "empti": [4, 6, 31, 77, 83, 124, 125, 176, 244, 274, 275, 383, 384], "found": [4, 392], "here": [6, 78], "correspond": [6, 27, 28, 77, 153, 243, 269, 287, 309, 314, 315, 316, 317, 318, 319, 320, 322, 323, 328, 331, 346, 392], "column": [6, 33, 34, 35, 37, 52, 77, 132, 153, 158, 237, 247, 369, 372], "v1": 6, "23": [6, 287], "v0": 6, "12": [6, 27, 28, 70, 78, 311, 368, 371], "2dev0": 6, "61": 6, "gb0cb61cf4": 6, "v8": 6, "397": 6, "209": 6, "286": 6, "56": 6, "30": [6, 68, 286], "47": 6, "20": [6, 146, 289, 304], "13": [6, 27, 28, 45, 70, 77, 78, 137, 187, 236], "16": [6, 44, 70, 78, 128, 185, 279, 361], "21": [6, 66, 78], "18": [6, 78, 79], "51": 6, "48": [6, 186], "total": [6, 77, 253], "545": 6, "318": 6, "415": 6, "ab": [6, 12, 92], "absolut": [6, 11, 92], "add": [6, 78], "add_docstr": 6, "add_newdoc": 6, "add_newdoc_ufunc": 6, "allclos": [6, 32, 138, 161], "alltru": 6, "amax": [6, 17, 27], "amin": [6, 16, 28], "angl": [6, 24, 25, 67, 68, 285, 286, 377], "apply_along_axi": 6, "apply_over_ax": 6, "arcco": [6, 22], "arccosh": 6, "arcsin": [6, 20, 348], "arcsinh": [6, 21], "arctan": [6, 20, 22, 25], "arctan2": [6, 22, 24], "arctanh": [6, 21], "argmax": [6, 16, 28, 77, 392], "argmin": [6, 17, 27, 77, 392], "argpartit": [6, 29, 392], "argsort": [6, 77, 350, 365, 392], "argwher": 6, "around": [6, 77, 259], "array2str": 6, "array_equ": 6, "array_equiv": [6, 32], "array_repr": 6, "array_split": [6, 52], "array_str": 6, "asanyarrai": [6, 34, 37], "asarray_chkfinit": [6, 33, 34], "ascontiguousarrai": [6, 33, 34, 37], "asfarrai": [6, 33, 34], "asfortranarrai": [6, 33, 34, 35], "asmatrix": 6, "atleast_1d": [6, 88], "atleast_2d": [6, 88], "atleast_3d": [6, 88], "averag": [6, 77, 176, 251, 396], "bartlett": 6, "base_repr": 6, "binary_repr": 6, "bincount": 6, "bitwise_and": [6, 45, 46, 47, 137, 168], "bitwise_not": 6, "bitwise_or": [6, 44, 45, 47, 137, 170], "bitwise_xor": [6, 44, 45, 46, 137, 171], "blackman": 6, "block": [6, 52, 354], "bmat": 6, "broadcast_arrai": 6, "broadcast_shap": 6, "broadcast_to": 6, "busday_count": 6, "busday_offset": 6, "byte_bound": 6, "can_cast": 6, "cbrt": 6, "ceil": [6, 113, 114, 375], "choos": [6, 22, 24, 25, 77, 392], "clip": [6, 359, 392], "column_stack": [6, 52], "common_typ": 6, "compare_chararrai": 6, "compress": [6, 359, 392], "concaten": [6, 354], "conj": [6, 77], "conjug": [6, 53, 76, 77, 149, 153, 173, 239], "convolv": [6, 59], "copi": [6, 31, 35, 37, 58, 77, 78, 178, 237, 247, 248, 256, 258, 260, 277, 287, 309, 314, 315, 316, 317, 318, 319, 320, 322, 328, 331, 340, 350, 353, 368, 371, 392], "copysign": [6, 270], "copyto": 6, "corrcoef": [6, 63], "correl": [6, 396], "co": [6, 20, 22, 348], "cosh": [6, 21], "count_nonzero": [6, 271], "cov": [6, 305], "cross": [6, 59], "cumprod": [6, 186, 392], "cumproduct": 6, "cumsum": [6, 77, 187, 392], "datetime_as_str": 6, "datetime_data": 6, "deg2rad": [6, 285, 286, 377], "degre": [6, 67, 285, 286, 329, 377], "delet": 6, "deprec": 6, "deprecate_with_doc": 6, "diag": [6, 161], "diag_indic": [6, 71, 111], "diag_indices_from": [6, 70, 111], "diagflat": 6, "diagon": [6, 69, 70, 71, 72, 77, 91, 111, 134, 149, 364, 367, 368, 369, 370, 371, 372, 373, 392], "diff": [6, 79, 131], "digit": 6, "disp": 6, "divid": [6, 114, 117, 155, 182, 338, 374], "divmod": [6, 392], "dot": [6, 77, 80, 81, 136, 156, 158, 161, 173, 363, 380], "dsplit": [6, 52], "dstack": [6, 52], "ediff1d": 6, "einsum": [6, 81, 136, 173, 276, 363], "einsum_path": [6, 80], "empty_lik": [6, 31, 82, 125, 275, 384], "equal": [6, 14, 15, 18, 32, 52, 59, 63, 77, 114, 129, 130, 138, 143, 147, 148, 155, 256, 272, 287, 297, 331, 338, 350, 353, 354, 369, 372], "exp": [6, 164, 166], "exp2": [6, 86], "expand_dim": [6, 27, 28], "expm1": [6, 86, 166], "extract": [6, 69], "ey": [6, 53, 54, 171, 346], "fab": 6, "fastcopyandtranspos": 6, "fill_diagon": 6, "find_common_typ": 6, "fix": [6, 78], "flatnonzero": [6, 271], "flip": [6, 289], "fliplr": 6, "flipud": 6, "float_pow": 6, "floor": [6, 50, 114, 338, 375], "floor_divid": [6, 117, 182, 338], "fmax": [6, 16, 17, 116, 175, 181, 279], "fmin": [6, 16, 17, 115, 175, 181, 279], "fmod": [6, 115, 116, 175, 181, 182, 279, 338], "format_float_posit": 6, "format_float_scientif": 6, "frexp": 6, "from_dlpack": 6, "frombuff": 6, "fromfil": 6, "fromfunct": [6, 33, 34], "fromit": [6, 33, 34], "frompyfunc": 6, "fromregex": 6, "fromstr": 6, "full": [6, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 153, 155, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 232, 233, 239, 240, 248, 256, 257, 258, 259, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384], "full_lik": [6, 31, 83, 124, 275, 384], "gcd": 6, "genfromtxt": 6, "geomspac": [6, 162, 172], "get_array_wrap": 6, "get_includ": 6, "get_printopt": 6, "getbufs": 6, "geterr": 6, "geterrcal": 6, "geterrobj": 6, "gradient": 6, "greater": [6, 77, 84, 130, 147, 148, 157, 256, 272], "greater_equ": [6, 84, 129, 147, 148, 272], "ham": 6, "han": 6, "heavisid": 6, "histogram": [6, 396], "histogram2d": 6, "histogram_bin_edg": 6, "histogramdd": 6, "hsplit": [6, 52], "hstack": [6, 52], "hypot": 6, "i0": 6, "imag": [6, 392], "in1d": 6, "indic": [6, 16, 17, 27, 28, 29, 70, 71, 77, 78, 111, 234, 235, 236, 255, 267, 271, 283, 340, 344, 347, 359, 360, 365, 369, 370, 372, 373], "info": 6, "inner": [6, 80, 81, 276], "insert": [6, 88, 344, 396], "interp": 6, "intersect1d": 6, "invert": [6, 45], "is_busdai": 6, "isclos": 6, "iscomplex": 6, "iscomplexobj": 6, "isfinit": [6, 140, 141], "isfortran": 6, "isin": 6, "isinf": [6, 139, 141], "isnan": [6, 139, 140], "isnat": [6, 141], "isneginf": [6, 139, 140, 141], "isposinf": [6, 139, 140, 141], "isreal": 6, "isrealobj": 6, "isscalar": 6, "issctyp": 6, "issubclass_": 6, "issubdtyp": 6, "issubsctyp": 6, "iter": [6, 33, 34, 77, 112, 122, 246, 396], "ix_": 6, "kaiser": 6, "kron": 6, "lcm": 6, "ldexp": 6, "left_shift": [6, 342], "less": [6, 84, 129, 130, 148, 272, 339], "less_equ": [6, 84, 129, 130, 147, 272], "lexsort": [6, 29, 77, 236, 350], "linspac": [6, 19, 85, 126, 172, 178, 377], "load": [6, 163], "loadtxt": 6, "log": [6, 89, 126, 162, 167, 172, 302], "log10": [6, 164, 167], "log1p": [6, 89, 164, 167], "log2": [6, 164], "logaddexp": 6, "logaddexp2": 6, "logical_and": [6, 44, 169, 170, 171], "logical_not": [6, 45, 137, 168, 170, 171], "logical_or": [6, 46, 168, 169, 171], "logical_xor": [6, 47, 168, 169, 170], "logspac": [6, 126, 162], "lookfor": 6, "mask_indic": 6, "mat": 6, "matmul": [6, 161], "max": [6, 16, 27, 77, 157, 304, 392], "maximum": [6, 16, 17, 27, 28, 77, 115, 116, 174, 181, 234, 250, 279, 281], "maximum_sctyp": 6, "may_share_memori": 6, "meshgrid": [6, 179, 273], "min": [6, 17, 28, 77, 392], "min_scalar_typ": 6, "minimum": [6, 16, 17, 27, 28, 77, 115, 116, 175, 180, 235, 252, 279, 281], "mintypecod": 6, "mod": [6, 338], "modf": 6, "moveaxi": [6, 343, 365], "msort": 6, "multipli": 6, "nan_to_num": 6, "nanargmax": 6, "nanargmin": 6, "nancumprod": [6, 187], "nancumsum": 6, "nanmax": [6, 16, 17], "nanmean": [6, 176, 355, 379], "nanmedian": 6, "nanmin": [6, 16, 17], "nanpercentil": 6, "nanprod": 6, "nanquantil": 6, "nanstd": [6, 176, 355, 379], "nansum": 6, "nanvar": [6, 176, 355, 379], "ndim": [6, 31, 35, 37, 63, 70, 77, 78, 236, 274, 343, 358, 383], "neg": [6, 14, 18, 43, 88, 139, 140, 141, 279, 306, 351, 359], "nested_it": 6, "nextaft": 6, "nonzero": [6, 77, 382, 392], "not_equ": [6, 84, 129, 130, 147, 148], "obj2sctyp": 6, "ones": [6, 31, 35, 37, 75, 82, 83, 84, 88, 91, 124, 125, 133, 134, 173, 188, 275, 341, 343, 365, 367, 383, 384], "ones_lik": [6, 31, 83, 125, 274, 384], "outer": [6, 80, 81, 145], "packbit": 6, "pad": [6, 78], "partit": [6, 77, 287, 309, 314, 315, 316, 317, 318, 319, 320, 322, 323, 328, 331, 350, 392], "percentil": [6, 177], "piecewis": 6, "place": [6, 77, 234, 235, 324, 340, 392], "poli": 6, "polyadd": 6, "polyd": 6, "polydiv": 6, "polyfit": 6, "polyint": 6, "polymul": 6, "polysub": 6, "polyv": 6, "posit": [6, 14, 18, 33, 34, 77, 88, 139, 140, 141, 149, 184, 256, 279, 289, 313, 343, 351, 352, 365], "power": [6, 87, 156, 352], "printopt": 6, "prod": [6, 77, 188, 392], "product": [6, 64, 65, 76, 80, 81, 136, 145, 156, 158, 173, 185, 186, 276, 280, 363, 380, 396], "promote_typ": 6, "ptp": [6, 392], "put": [6, 283, 360, 392], "put_along_axi": [6, 360], "putmask": 6, "quantil": 6, "rad2deg": [6, 67, 68, 377], "radian": [6, 67, 68, 285, 377], "ravel": [6, 77, 159, 247, 392], "ravel_multi_index": 6, "real": [6, 50, 104, 105, 106, 107, 108, 110, 113, 149, 153, 154, 157, 289, 306, 351, 375, 392, 396], "real_if_clos": 6, "recfromcsv": 6, "recfromtxt": 6, "reciproc": 6, "remaind": [6, 114, 115, 116, 117, 175, 181, 182, 279], "repeat": [6, 153, 154, 392], "resiz": [6, 88, 392], "result_typ": [6, 78, 396], "right_shift": [6, 146], "rint": 6, "roll": [6, 343], "rollaxi": 6, "root": [6, 49, 351, 352], "rot90": 6, "round": [6, 30, 77, 113, 114, 338, 375, 392, 396], "round_": 6, "row_stack": 6, "safe_ev": 6, "save": 6, "savetxt": 6, "savez": 6, "savez_compress": 6, "sctype2char": 6, "searchsort": [6, 350, 392], "select": [6, 58, 353, 385], "set_numeric_op": 6, "set_printopt": 6, "set_string_funct": 6, "setbufs": 6, "setdiff1d": 6, "seterr": 6, "seterrcal": 6, "seterrobj": 6, "setxor1d": 6, "shares_memori": 6, "show_config": 6, "sign": [6, 53, 54, 57, 78, 270], "signbit": 6, "sin": [6, 22, 178], "sinc": 6, "sinh": [6, 21, 348], "sometru": 6, "sort": [6, 29, 77, 236, 256, 344, 365, 385, 392, 396], "sort_complex": 6, "space": [6, 19, 126, 162, 172], "split": [6, 52, 354, 396], "sqrt": [6, 352], "squar": [6, 134, 149, 152, 153, 156, 291, 307, 351, 370, 373], "squeez": [6, 77, 88, 392], "stack": [6, 52, 132, 157, 381], "std": [6, 77, 176, 379, 392], "subtract": 6, "swapax": [6, 77, 184, 392], "take": [6, 77, 283, 340, 360, 392], "take_along_axi": [6, 27, 28, 29, 51, 283, 359], "tan": [6, 22, 25], "tanh": [6, 21], "tensordot": [6, 76, 136, 173], "tile": [6, 339, 396], "trace": [6, 392], "transpos": [6, 77, 149, 184, 192, 392, 396], "trapz": 6, "tri": 6, "tril": [6, 369, 370, 373], "tril_indic": [6, 370, 373], "tril_indices_from": 6, "trim_zero": 6, "triu": [6, 372], "triu_indic": 6, "triu_indices_from": 6, "true_divid": 6, "trunc": [6, 50, 113], "typenam": 6, "union1d": 6, "uniqu": [6, 43, 78], "unpackbit": 6, "unravel_index": [6, 27, 28], "unwrap": [6, 67, 285], "vander": 6, "var": [6, 77, 176, 263, 355, 392], "vdot": [6, 76, 173], "vsplit": [6, 52], "vstack": [6, 52], "where": [6, 12, 13, 14, 18, 25, 44, 45, 46, 47, 50, 53, 54, 57, 58, 60, 75, 77, 84, 90, 113, 114, 117, 129, 130, 133, 137, 138, 139, 140, 141, 146, 147, 148, 149, 160, 164, 168, 169, 170, 171, 174, 175, 176, 180, 181, 182, 185, 232, 233, 250, 252, 257, 265, 272, 279, 280, 287, 309, 314, 315, 316, 317, 318, 319, 320, 322, 323, 328, 331, 338, 342, 344, 348, 351, 352, 356, 357, 375], "who": 6, "zero": [6, 14, 18, 31, 62, 70, 77, 82, 83, 91, 97, 102, 113, 124, 125, 157, 161, 184, 189, 255, 271, 274, 275, 279, 287, 289, 317, 319, 320, 322, 357, 367, 368, 371, 384], "zeros_lik": [6, 31, 83, 125, 275, 383], "astyp": [6, 77, 271], "byteswap": 6, "dump": 6, "fill": [6, 31, 77, 82, 83, 111, 124, 125, 274, 275, 359, 383, 384], "flatten": [6, 72, 77, 234, 235, 236, 246, 271, 336], "getfield": [6, 78], "item": [6, 77, 385], "itemset": 6, "newbyteord": [6, 78], "setfield": [6, 78], "setflag": 6, "tobyt": 6, "tofil": [6, 120], "tolist": 6, "tostr": 6, "view": [6, 40, 41, 77, 88, 192, 258, 268, 340, 353, 365], "linalg": [6, 352], "choleski": 6, "cond": 6, "det": 6, "eig": [6, 153, 154], "eigh": 6, "eigval": [6, 153], "eigvalsh": 6, "inv": 6, "lstsq": 6, "matrix_pow": [6, 352], "matrix_rank": 6, "multi_dot": 6, "norm": [6, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 150, 396], "pinv": 6, "qr": 6, "slogdet": 6, "solv": [6, 396], "svd": [6, 157], "tensorinv": 6, "tensorsolv": 6, "fft": [6, 385, 396], "fft2": 6, "fftfreq": 6, "fftn": 6, "fftshift": 6, "hfft": 6, "ifft": 6, "ifft2": 6, "ifftn": 6, "ifftshift": 6, "ihfft": 6, "irfft": 6, "irfft2": 6, "irfftn": 6, "register_func": 6, "restore_al": 6, "restore_func": 6, "rfft": 6, "rfft2": 6, "rfftfreq": 6, "rfftn": 6, "beta": [6, 298], "binomi": [6, 306], "byte": [6, 77, 78, 249, 253], "chisquar": 6, "choic": [6, 51, 77, 238], "default_rng": 6, "dirichlet": 6, "exponenti": [6, 164, 300, 326], "gamma": [6, 327], "geometr": [6, 126, 162], "get_stat": [6, 287], "gumbel": 6, "hypergeometr": 6, "laplac": 6, "logist": 6, "lognorm": 6, "logseri": 6, "multinomi": 6, "multivariate_norm": 6, "negative_binomi": 6, "noncentral_chisquar": 6, "noncentral_f": 6, "normal": [6, 63, 153, 287, 302, 305, 316, 328], "pareto": 6, "permut": [6, 77, 184, 268, 365, 396], "poisson": 6, "rand": [6, 287, 317, 319, 320, 322], "randint": [6, 77, 248, 287, 318], "randn": [6, 161, 287, 354], "random_integ": [6, 287, 315], "random_sampl": [6, 287, 314, 317, 320, 322], "ranf": 6, "rayleigh": 6, "seed": [6, 77, 248, 287], "set_stat": 6, "shuffl": 6, "standard_cauchi": 6, "standard_exponenti": 6, "standard_gamma": 6, "standard_norm": [6, 287, 316], "standard_t": 6, "triangular": [6, 149, 160], "uniform": [6, 78, 287, 314, 317, 319, 320, 322], "vonmis": 6, "wald": 6, "weibul": [6, 335], "zipf": 6, "show": [9, 78, 171, 178, 325], "constant": [9, 78], "alias": 9, "bool": [9, 14, 18, 36, 77, 78, 84, 93, 99, 107, 129, 130, 139, 140, 141, 147, 148, 157, 159, 237, 271, 272, 340], "complex64": [9, 93, 99], "complex128": [9, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 341], "bool_": 9, "cdoubl": 9, "complex": [9, 24, 25, 53, 54, 76, 77, 78, 85, 153, 154, 161, 173, 239, 240, 351, 392, 396], "cfloat": 9, "csingl": 9, "doubl": [9, 300], "float": [9, 33, 34, 36, 78, 128, 157, 159, 172, 287, 291, 316, 317, 319, 320, 322, 325, 326, 328, 331, 392, 396], "float_": 9, "float16": 9, "int": [9, 30, 36, 43, 70, 77, 78, 84, 128, 135, 236, 277, 287, 315, 318, 340, 346, 367, 369, 370, 372, 373, 392], "int_": 9, "intc": 9, "singl": [9, 77, 158, 176, 262, 287, 306, 315, 316, 317, 318, 319, 320, 322, 328, 392], "singlecomplex": 9, "e": [9, 21, 23, 77, 78, 88, 164, 264, 287, 358], "euler_gamma": 9, "inf": [9, 33, 34, 75, 139, 140, 141, 150, 159, 164, 165, 167, 351], "infin": [9, 14, 18, 113, 114, 139, 140, 141, 338, 375, 396], "infti": 9, "nan": [9, 14, 16, 17, 18, 33, 34, 75, 139, 140, 141, 176, 186, 187, 188, 189, 190, 351, 355, 379, 396], "ninf": 9, "nzero": 9, "pi": [9, 60, 68, 348, 349, 361, 362, 377], "pinf": 9, "pzero": 9, "arg": [11, 80, 115, 116, 287, 374, 380], "kwarg": [11, 12, 13, 15, 22, 24, 25, 44, 45, 46, 47, 50, 52, 53, 54, 57, 60, 64, 65, 66, 75, 76, 77, 80, 84, 86, 92, 113, 114, 115, 116, 117, 119, 120, 121, 123, 128, 129, 130, 133, 136, 137, 139, 140, 141, 146, 147, 148, 163, 164, 168, 169, 170, 171, 173, 175, 181, 182, 183, 185, 186, 187, 188, 189, 222, 251, 258, 270, 272, 279, 337, 338, 342, 347, 348, 350, 351, 352, 354, 356, 361, 363, 366, 367, 374, 375, 376, 380], "calcul": [11, 12, 74, 79, 86, 92, 113, 115, 116, 117, 175, 181, 182, 188, 189, 279, 280, 338, 351, 385], "valu": [11, 12, 13, 14, 16, 17, 18, 19, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 37, 42, 43, 44, 45, 46, 47, 48, 50, 52, 53, 54, 56, 57, 58, 59, 60, 62, 63, 73, 74, 75, 77, 78, 79, 82, 83, 84, 90, 91, 92, 93, 99, 111, 112, 113, 114, 117, 121, 124, 125, 126, 129, 130, 133, 135, 137, 139, 140, 141, 146, 147, 148, 149, 154, 157, 159, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 185, 190, 194, 195, 197, 199, 201, 202, 203, 204, 205, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 223, 224, 226, 227, 228, 229, 230, 231, 234, 235, 244, 246, 250, 252, 256, 271, 272, 274, 275, 277, 278, 279, 281, 282, 283, 284, 287, 297, 314, 315, 331, 338, 339, 340, 342, 344, 345, 348, 351, 352, 354, 355, 356, 357, 359, 360, 363, 364, 375, 377, 379, 383, 384, 392, 396], "wise": [11, 12, 13, 15, 16, 17, 20, 21, 22, 23, 24, 25, 26, 32, 44, 45, 46, 47, 49, 50, 52, 53, 54, 57, 60, 61, 75, 77, 84, 86, 87, 89, 92, 113, 115, 116, 117, 129, 130, 132, 137, 138, 139, 140, 141, 146, 147, 148, 155, 164, 165, 166, 167, 168, 169, 170, 171, 175, 181, 182, 183, 185, 240, 270, 272, 279, 337, 338, 342, 347, 348, 349, 351, 352, 356, 361, 362, 374, 375, 381, 392], "note": [11, 14, 16, 17, 18, 27, 28, 36, 38, 67, 77, 78, 88, 113, 115, 116, 139, 159, 172, 182, 236, 258, 271, 285, 290, 292, 293, 303, 308, 340, 358, 359, 374, 380], "shorthand": [11, 13, 44, 45, 46, 47, 75, 84, 129, 130, 137, 146, 147, 148, 168, 170, 185, 272, 338, 342, 356, 382], "out": [12, 13, 14, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 37, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 57, 60, 61, 63, 68, 75, 76, 77, 84, 85, 86, 87, 89, 113, 114, 117, 118, 129, 130, 133, 137, 138, 139, 140, 141, 146, 147, 148, 158, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 180, 181, 182, 184, 185, 190, 232, 233, 234, 235, 238, 241, 247, 250, 252, 257, 259, 263, 265, 267, 269, 271, 272, 276, 279, 280, 281, 286, 287, 309, 314, 315, 316, 317, 318, 319, 320, 322, 328, 331, 336, 337, 338, 341, 342, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 364, 375, 377, 379], "none": [12, 13, 14, 16, 17, 18, 19, 22, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 57, 60, 62, 63, 64, 75, 76, 77, 78, 79, 82, 83, 84, 86, 88, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 117, 124, 125, 126, 129, 130, 131, 133, 134, 137, 139, 140, 141, 146, 147, 148, 150, 157, 158, 159, 161, 162, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 180, 181, 182, 185, 190, 232, 233, 234, 235, 236, 238, 241, 248, 250, 251, 252, 256, 257, 259, 262, 263, 265, 267, 269, 272, 274, 275, 276, 277, 279, 280, 281, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340, 342, 344, 348, 351, 352, 353, 354, 355, 356, 357, 359, 361, 364, 365, 366, 367, 369, 372, 375, 378, 379, 382, 383, 384, 392], "subok": [12, 13, 31, 44, 45, 46, 47, 48, 50, 53, 54, 56, 60, 75, 77, 83, 84, 113, 114, 125, 129, 130, 137, 139, 140, 141, 146, 147, 148, 164, 168, 169, 170, 171, 182, 185, 237, 272, 275, 279, 338, 342, 348, 351, 352, 356, 375, 384], "contain": [12, 14, 18, 19, 44, 45, 46, 47, 77, 78, 118, 127, 137, 146, 153, 176, 258, 287, 342, 351, 357, 369, 372, 392], "paramet": [12, 13, 14, 15, 18, 19, 25, 27, 28, 30, 31, 33, 34, 35, 37, 44, 45, 46, 47, 48, 50, 52, 53, 54, 56, 57, 58, 60, 62, 64, 65, 66, 73, 74, 75, 76, 77, 78, 79, 82, 83, 84, 85, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 117, 118, 124, 125, 126, 128, 129, 130, 133, 134, 135, 136, 137, 139, 140, 141, 146, 147, 148, 149, 150, 151, 153, 154, 156, 157, 158, 159, 160, 162, 164, 168, 169, 170, 171, 172, 173, 175, 176, 178, 181, 182, 183, 184, 185, 186, 187, 188, 189, 234, 235, 236, 237, 244, 247, 258, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 287, 288, 289, 291, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 354, 356, 357, 358, 359, 363, 364, 366, 368, 369, 370, 371, 372, 373, 375, 382, 383, 384], "onli": [12, 19, 27, 28, 29, 31, 33, 34, 35, 37, 42, 50, 53, 54, 56, 59, 60, 62, 63, 73, 74, 78, 79, 82, 83, 91, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 113, 119, 120, 121, 122, 123, 124, 125, 126, 135, 139, 140, 141, 146, 149, 162, 163, 164, 169, 172, 174, 177, 178, 180, 190, 274, 275, 277, 281, 287, 309, 315, 331, 340, 342, 343, 344, 345, 348, 355, 359, 363, 364, 368, 371, 375, 379, 382, 383, 384, 392], "either": [12, 13, 14, 15, 18, 25, 37, 44, 45, 46, 47, 48, 50, 52, 53, 54, 57, 58, 60, 75, 76, 78, 84, 88, 90, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 113, 114, 117, 129, 130, 133, 137, 138, 139, 140, 141, 146, 147, 148, 159, 164, 168, 169, 170, 171, 175, 176, 178, 181, 182, 184, 185, 271, 272, 276, 278, 279, 323, 338, 339, 341, 342, 348, 351, 352, 353, 354, 356, 357, 358, 359, 365, 375, 382], "tensor": [12, 13, 14, 18, 44, 45, 46, 47, 48, 50, 52, 53, 54, 58, 60, 75, 76, 77, 83, 84, 88, 90, 113, 114, 125, 129, 130, 136, 137, 139, 140, 141, 146, 147, 148, 153, 164, 168, 169, 170, 171, 176, 178, 182, 184, 185, 271, 272, 275, 276, 278, 279, 338, 341, 342, 348, 351, 352, 353, 354, 356, 357, 358, 359, 363, 365, 368, 371, 375, 382, 384], "usm_ndarrai": [12, 13, 14, 18, 44, 45, 46, 47, 48, 50, 52, 53, 54, 58, 60, 75, 76, 77, 83, 84, 88, 90, 113, 114, 125, 129, 130, 137, 139, 140, 141, 146, 147, 148, 153, 164, 168, 169, 170, 171, 176, 178, 182, 184, 185, 271, 272, 275, 276, 278, 279, 338, 340, 341, 342, 348, 351, 352, 353, 354, 356, 357, 358, 359, 365, 368, 371, 375, 382, 384], "keyword": [12, 13, 15, 22, 24, 25, 44, 45, 46, 47, 50, 52, 57, 60, 64, 65, 66, 75, 76, 79, 92, 113, 114, 117, 128, 133, 136, 137, 146, 175, 181, 182, 183, 185, 186, 187, 188, 189, 270, 279, 337, 338, 342, 347, 348, 350, 354, 356, 361, 363, 366, 375, 392], "argument": [12, 13, 15, 22, 24, 25, 44, 45, 46, 47, 50, 52, 57, 60, 64, 65, 66, 75, 76, 77, 78, 79, 85, 92, 113, 114, 117, 128, 133, 136, 137, 143, 144, 146, 155, 158, 175, 181, 182, 183, 185, 186, 187, 188, 189, 236, 237, 258, 270, 279, 337, 338, 341, 342, 347, 348, 350, 354, 356, 361, 363, 366, 375, 392], "unsupport": [12, 13, 15, 22, 24, 25, 44, 45, 46, 47, 50, 52, 57, 60, 64, 65, 66, 75, 76, 92, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 117, 128, 133, 136, 137, 146, 158, 175, 181, 182, 183, 185, 186, 187, 188, 189, 270, 279, 280, 337, 338, 342, 347, 348, 350, 354, 356, 361, 363, 366, 375], "sequenti": [12, 13, 14, 15, 18, 19, 25, 27, 28, 29, 30, 42, 44, 45, 46, 47, 48, 50, 52, 53, 54, 57, 59, 60, 62, 63, 64, 65, 66, 73, 74, 75, 76, 79, 80, 81, 82, 83, 84, 85, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 113, 114, 117, 124, 125, 128, 129, 130, 133, 136, 137, 138, 139, 140, 141, 146, 147, 148, 155, 162, 164, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 270, 271, 272, 274, 275, 276, 278, 279, 336, 337, 338, 339, 342, 343, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 363, 366, 368, 371, 375, 379, 382, 383, 384], "dp": [12, 48, 75, 76, 77, 153, 268, 279, 340, 341, 346, 356, 365, 382], "x1": [13, 15, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 36, 42, 43, 44, 46, 47, 49, 51, 56, 57, 59, 61, 62, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 79, 83, 84, 86, 87, 89, 92, 111, 114, 117, 125, 128, 129, 130, 133, 136, 138, 145, 146, 147, 148, 152, 159, 160, 161, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 177, 178, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 270, 272, 275, 276, 277, 279, 280, 282, 283, 284, 285, 286, 324, 336, 337, 338, 339, 342, 343, 344, 347, 349, 350, 355, 356, 358, 360, 361, 362, 363, 364, 366, 368, 370, 371, 373, 376, 377, 378, 379, 384], "x2": [13, 14, 15, 18, 22, 24, 25, 31, 44, 46, 47, 57, 59, 64, 75, 76, 84, 114, 117, 126, 129, 130, 133, 136, 138, 145, 146, 147, 148, 162, 168, 169, 170, 171, 172, 173, 175, 178, 181, 182, 185, 270, 271, 272, 276, 279, 338, 342, 344, 351, 356, 363], "order": [13, 29, 31, 33, 34, 35, 37, 38, 44, 45, 46, 47, 50, 53, 54, 56, 60, 75, 77, 78, 80, 81, 82, 83, 84, 91, 113, 114, 124, 125, 129, 130, 137, 139, 140, 141, 146, 147, 148, 153, 154, 159, 164, 168, 169, 170, 171, 182, 184, 185, 236, 237, 247, 256, 272, 274, 275, 277, 336, 338, 340, 342, 344, 348, 351, 352, 356, 375, 383, 384, 396], "k": [13, 31, 44, 45, 46, 47, 50, 53, 54, 56, 60, 69, 72, 75, 77, 84, 91, 113, 114, 129, 130, 137, 139, 140, 141, 146, 147, 148, 164, 168, 169, 170, 171, 182, 185, 237, 247, 272, 338, 342, 348, 351, 352, 356, 367, 368, 369, 370, 371, 372, 373, 375, 400], "scalar": [13, 15, 25, 39, 44, 46, 47, 57, 58, 75, 76, 77, 78, 84, 114, 117, 129, 130, 133, 142, 146, 147, 148, 168, 170, 171, 175, 178, 181, 182, 185, 235, 244, 248, 272, 276, 279, 287, 288, 289, 291, 294, 295, 296, 297, 298, 299, 300, 301, 302, 306, 309, 310, 312, 313, 315, 318, 321, 323, 327, 329, 330, 331, 332, 333, 334, 335, 338, 342, 356, 382, 392], "both": [13, 44, 46, 47, 75, 76, 84, 114, 129, 130, 146, 147, 148, 159, 168, 170, 171, 182, 185, 272, 276, 279, 338, 342, 356], "b": [13, 44, 47, 52, 58, 65, 66, 76, 78, 79, 84, 117, 129, 130, 136, 147, 148, 161, 168, 170, 173, 186, 187, 272, 276, 279, 288, 354, 363, 366], "7": [13, 15, 19, 50, 58, 62, 66, 69, 70, 75, 77, 79, 86, 113, 128, 138, 161, 173, 177, 185, 187, 248, 271, 287, 311, 338, 341, 356, 359, 363, 368, 371, 375, 382], "oper": [13, 44, 45, 46, 47, 75, 78, 84, 88, 129, 130, 137, 146, 147, 148, 149, 168, 169, 170, 171, 185, 272, 338, 342, 356, 385, 396], "axi": [14, 16, 17, 18, 27, 28, 29, 42, 52, 62, 64, 65, 66, 74, 77, 79, 88, 93, 98, 99, 103, 104, 107, 126, 159, 162, 172, 174, 176, 177, 180, 186, 187, 190, 232, 233, 234, 235, 236, 241, 250, 251, 252, 256, 257, 262, 263, 265, 267, 269, 277, 280, 281, 283, 339, 340, 343, 353, 354, 355, 357, 358, 359, 360, 366, 379, 392], "keepdim": [14, 18, 62, 77, 159, 174, 176, 177, 180, 190, 232, 233, 250, 252, 257, 263, 265, 269, 280, 281, 355, 357, 379], "fals": [14, 15, 18, 31, 32, 35, 37, 42, 44, 45, 47, 48, 56, 62, 63, 77, 78, 83, 84, 111, 125, 126, 129, 130, 135, 137, 138, 139, 140, 141, 147, 148, 157, 159, 161, 162, 168, 169, 170, 171, 172, 174, 176, 177, 178, 180, 190, 232, 233, 237, 257, 263, 265, 269, 272, 275, 280, 340, 355, 357, 378, 379, 384], "whether": [14, 18, 78, 149, 340], "given": [14, 16, 17, 18, 19, 27, 28, 30, 31, 56, 63, 65, 66, 74, 76, 77, 78, 79, 82, 83, 111, 124, 125, 133, 178, 180, 186, 187, 234, 235, 236, 241, 252, 257, 259, 263, 265, 269, 274, 275, 280, 282, 287, 292, 314, 331, 343, 357, 366, 367, 383, 384, 392], "evalu": [14, 18, 77, 80, 81, 84, 136, 178, 232, 233, 276, 363], "logic": [14, 18, 168, 170, 171, 385, 396], "AND": [14, 44, 45, 46, 47, 137, 168, 169, 170, 171], "reduct": [14, 18], "equival": [14, 18, 77, 88, 232, 233, 258, 268, 269, 286, 287, 315, 340, 346, 365, 392], "method": [14, 18, 77, 78, 112, 118, 120, 157, 237, 258, 287, 340, 346, 365, 385], "Not": [14, 18, 77, 139, 186, 188, 189, 236, 282], "number": [14, 18, 19, 30, 43, 53, 54, 62, 77, 78, 88, 113, 114, 126, 139, 150, 157, 159, 162, 163, 172, 186, 188, 189, 254, 259, 260, 261, 271, 287, 289, 299, 323, 338, 343, 347, 358, 375, 396], "becaus": [14, 18], "x3": [14, 18, 162, 172], "rtol": [15, 138], "1e": [15, 138, 305], "05": [15, 138], "atol": [15, 138], "08": [15, 60, 138, 305, 348], "two": [15, 16, 17, 32, 40, 44, 45, 46, 47, 55, 59, 64, 72, 77, 78, 80, 81, 136, 137, 138, 145, 153, 158, 168, 170, 171, 173, 184, 256, 266, 276, 287, 316, 358, 368, 369, 371, 372, 380], "within": [15, 19, 32, 138, 287, 331], "toler": [15, 32, 138], "1e10": [15, 138], "00001e10": [15, 138], "propag": [16, 17, 78], "ignor": [16, 17, 77, 78, 176, 190, 269, 355, 379], "exactli": [16, 17, 36, 38, 67, 285, 287, 315], "OR": [18, 44, 45, 46, 47, 137, 168, 169, 170, 171], "stop": [19, 126, 162, 172], "like": [19, 31, 33, 34, 35, 37, 82, 91, 124, 134, 163, 274, 287, 331, 340, 383, 396], "usm_typ": [19, 31, 33, 34, 35, 37, 77, 82, 83, 91, 124, 125, 162, 274, 275, 287, 309, 314, 315, 316, 317, 318, 319, 320, 322, 328, 331, 383, 384], "sycl_queu": [19, 31, 33, 34, 35, 37, 77, 82, 83, 91, 124, 125, 162, 274, 275, 287, 309, 314, 315, 316, 317, 318, 319, 320, 322, 323, 328, 331, 383, 384], "evenli": [19, 30, 126, 162, 172], "interv": [19, 88, 162, 287, 315, 317, 319, 320, 322, 330, 331, 358], "d": [19, 52, 70, 78, 91, 94, 95, 96, 100, 101, 105, 106, 108, 109, 110, 123, 153, 158, 159, 178, 271, 292, 340, 346, 359, 382, 392], "care": 19, "handl": [19, 78, 271, 359, 396], "endpoint": [19, 126, 162, 172], "trigonometr": [20, 21, 22, 24, 25, 26, 60, 61, 86, 87, 89, 165, 166, 167, 348, 349, 396], "invers": [20, 21, 22, 23, 24, 25, 26, 45, 88, 89, 99, 100, 101, 102, 103, 104, 105, 106, 137, 164, 166, 333, 348], "cosin": [20, 21, 22, 60, 61, 348], "tangent": [20, 21, 22, 24, 25, 26, 361, 362], "sine": [20, 21, 22, 23, 348, 349], "14159265": 20, "hyperbol": [21, 23, 26, 61, 348, 349, 362, 396], "65745445": 21, "99322285": 21, "arc": [22, 24, 25], "quadrant": [22, 24, 25], "correctli": [22, 24, 25, 159, 271], "5707963267948966": 22, "72538256": 23, "99822295": 23, "78539816": [24, 377], "57079633": [25, 286, 377], "54930614": 26, "convert": [27, 28, 33, 34, 35, 36, 37, 39, 67, 68, 78, 285, 286, 377], "flat": [27, 28, 77, 112, 247], "index": [27, 28, 51, 77, 78, 88, 178, 234, 235, 238, 264, 283, 340, 359, 360, 385, 396], "tupl": [27, 28, 70, 77, 78, 88, 159, 260, 271, 339, 340, 346, 369, 372, 392], "appli": [27, 28, 29, 168, 170, 171, 341], "index_arrai": [27, 28, 29, 77, 234, 236], "call": [27, 28, 29, 35, 37, 78, 158, 353, 382], "multipl": [27, 28, 29, 52, 77, 78, 153, 154, 236, 350, 354, 385], "occurr": [27, 28, 43], "first": [27, 28, 77, 78, 87, 143, 144, 158, 236, 279, 340, 352], "11": [27, 28, 30, 70, 77, 128, 258, 306, 315, 349, 368, 371], "14": [27, 28, 44, 45, 70, 76, 137, 363], "15": [27, 28, 66, 70, 311, 357], "in_array1": [29, 62, 85], "kind": [29, 77, 78, 236, 256, 277, 396], "would": [29, 77, 78, 256, 287, 365], "pramet": [29, 42, 59, 63, 174, 177, 180, 190, 355, 379], "describ": [29, 77, 78, 159, 236, 357, 396], "algorithm": [29, 77, 236], "indirect": [29, 77, 236, 350], "stabl": [29, 77, 236, 350], "partial": [29, 350], "decim": [30, 77, 259], "37": 30, "nearest": [30, 113, 114, 338, 375], "even": [30, 78], "ndmin": 31, "rais": [31, 33, 34, 35, 37, 51, 52, 58, 77, 87, 88, 93, 99, 107, 156, 238, 260, 279, 282, 340, 352, 354, 358], "valueerror": [31, 33, 34, 35, 37, 340, 353], "new": [31, 48, 52, 77, 78, 82, 83, 88, 118, 122, 123, 124, 125, 184, 235, 258, 268, 274, 275, 340, 343, 354, 365, 383, 384, 392], "uniniti": [31, 83, 124, 274, 383], "than": [31, 77, 157, 256, 339, 354], "dimens": [31, 39, 40, 41, 52, 63, 70, 77, 78, 88, 135, 155, 159, 184, 235, 247, 254, 287, 317, 319, 320, 322, 339, 340, 346, 350, 353, 354, 358, 368, 369, 370, 371, 372, 373, 392, 396], "a1": 32, "a2": 32, "equal_nan": [32, 138], "consist": 32, "pass": [33, 34, 77, 78, 258], "subclass": [33, 34, 144], "through": [33, 34, 78, 392], "contigu": [33, 34, 35, 37, 77, 247, 336, 340], "point": [33, 34, 78, 162, 287, 316, 328, 396], "check": [33, 34, 149], "construct": [33, 34, 51, 69, 77, 78, 120, 121, 179, 238, 273, 385], "grid": [33, 34, 135, 178], "object": [34, 35, 37, 56, 77, 78, 88, 112, 118, 122, 149, 153, 159, 163, 179, 258, 273, 287, 309, 314, 315, 316, 317, 318, 319, 320, 322, 323, 328, 331, 340, 392], "satisfi": [35, 37, 90], "flag": [35, 37, 77, 78], "about": [35, 37, 77, 245, 392], "layout": [35, 37, 77, 245, 340, 385], "f_contigu": [35, 37], "make": [35, 37, 78, 178], "now": [35, 37, 70], "c_contigu": [35, 37], "Then": [35, 37], "capabl": 36, "laid": 37, "fortran": [37, 77, 237, 247, 340], "row": [37, 52, 77, 158, 163, 237, 247, 369, 381], "ari": [39, 40, 41], "least": [39, 40, 41, 78, 138], "whilst": 39, "higher": 39, "preserv": [39, 77, 78, 234, 235], "three": [41, 287, 323], "weight": [42, 43, 63, 131, 176], "specifi": [42, 48, 73, 77, 126, 136, 159, 162, 172, 176, 177, 190, 234, 235, 236, 242, 282, 287, 300, 310, 328, 343, 355, 363, 379], "arithmet": [42, 126, 176, 177, 355, 379, 385, 396], "minlength": 43, "count": [43, 62, 78, 122, 156, 271, 289, 385, 396], "non": [43, 62, 77, 139, 153, 255, 271, 287, 309, 314, 315, 316, 317, 318, 319, 320, 322, 323, 328, 331, 351], "find": [43, 157, 344, 350, 376, 396], "re": [43, 131, 376], "bit": [44, 45, 46, 47, 78, 137, 146, 168, 170, 171, 342, 396], "integ": [44, 45, 46, 47, 77, 78, 113, 114, 137, 138, 146, 156, 159, 234, 235, 279, 287, 315, 318, 323, 338, 340, 342, 343, 352, 359, 368, 371, 375, 392], "boolean": [44, 46, 47, 78, 138, 139, 140, 141, 168, 169, 170, 171, 340, 359], "truth": [44, 45, 46, 47, 84, 129, 130, 137, 147, 148, 168, 169, 170, 171, 272, 396], "xor": [44, 45, 46, 47, 137, 168, 169, 170, 171], "255": [44, 46], "NOT": [45, 137, 168, 169, 170, 171], "31": [47, 126], "26": 47, "broadcast": [48, 58, 159, 168, 170, 171, 173], "must": [48, 77, 88, 90, 149, 158, 159, 163, 234, 235, 358], "cube": 49, "27": [49, 378], "truncat": [50, 113, 325, 375], "mode": [51, 55, 59, 77, 160, 238, 267, 282, 325, 330, 359], "prefer": 51, "join": [52, 354, 396], "sequenc": [52, 55, 59, 132, 156, 158, 311, 324, 341, 354, 381], "exist": [52, 78, 88, 340, 354], "typeerror": [52, 58, 88, 93, 99, 107, 354, 358], "sub": [52, 78, 354], "horizont": [52, 132], "vertic": [52, 381], "3rd": 52, "depth": 52, "assembl": [52, 354], "third": 52, "t": [52, 63, 77, 78, 154, 268, 329], "obtain": [53, 54, 271], "chang": [53, 54, 57, 77, 78, 236, 264, 268, 270, 278, 284, 340, 377, 396], "imaginari": [53, 54], "2j": [53, 54, 153], "1j": [53, 54, 161, 352], "j": [53, 54, 153, 352], "v": [55, 78, 153, 282], "linear": [55, 59, 172, 385, 396], "convolut": [55, 59], "ca": 55, "z": [56, 121, 178, 297], "dst": 58, "src": 58, "cast": [58, 77, 237], "same_kind": 58, "rule": [58, 173, 341, 366], "violat": 58, "A": [58, 77, 78, 88, 118, 120, 123, 154, 237, 247, 260, 287, 289, 306, 309, 314, 315, 316, 317, 318, 319, 320, 322, 323, 328, 331, 365], "valid": [59, 88, 358, 369, 370, 372, 373], "000000e": [60, 348], "00": [60, 348], "371139e": 60, "m": [63, 78, 91, 149, 151, 153, 154, 157, 367, 369, 372], "rowvar": 63, "bia": 63, "ddof": [63, 77, 190, 263, 269, 355, 379], "fweight": 63, "aweight": 63, "estim": [63, 289, 306], "covari": 63, "matrix": [63, 149, 150, 153, 154, 156, 157, 159, 160, 173, 352, 371, 378, 385, 396], "variabl": 63, "axisa": 64, "axisb": 64, "axisc": 64, "vector": [64, 150, 157, 158, 159, 178, 380, 396], "cumul": [65, 66, 77, 186, 187, 241], "24": [65, 79, 188, 280], "120": [65, 68], "720": 65, "remov": [67, 77, 88, 262, 285, 353, 396], "larg": [67, 78, 285], "jump": [67, 285], "wrap": [67, 77, 111, 267, 285, 359], "rad": 68, "60": [68, 382], "90": [68, 382], "150": 68, "access": [70, 71, 111, 392], "main": [70, 71, 111, 134, 154], "usual": [70, 78], "di": 70, "100": [70, 126, 172, 299, 325], "we": 70, "d3": 70, "offset": [73, 77, 78, 242, 364, 369, 370, 372, 373], "axis1": [73, 77, 242, 266, 358, 364], "axis2": [73, 77, 242, 266, 358, 364], "prepend": [74, 88], "th": [74, 79, 177, 368, 371], "quotient": 75, "over": [76, 112, 121, 159, 162, 173, 178, 186, 280, 287, 314, 319, 330, 331, 357, 396], "arbitrari": [76, 78, 173, 341], "ax": [76, 77, 94, 96, 97, 100, 101, 102, 105, 106, 108, 110, 136, 159, 173, 176, 184, 260, 266, 268, 343, 353, 358, 363, 365], "buffer": [77, 119, 340], "stride": [77, 237], "wrapper": 77, "compliant": 77, "origin": [77, 159, 184, 236, 340], "__getitem__": [77, 78, 112], "self": [77, 78, 112, 193, 194, 195, 197, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 229, 230, 231, 246, 287], "__setitem__": [77, 112], "val": [77, 111, 112, 227, 278], "__len__": [77, 78], "len": [77, 78, 135, 215, 339, 346], "option": [77, 78, 157, 158, 159, 234, 235, 236, 247, 287, 309, 314, 315, 316, 317, 318, 319, 320, 322, 323, 328, 331, 340, 359, 369, 370, 372, 373], "Its": [77, 234, 235], "right": [77, 133, 146, 152, 153, 234, 235, 330, 342, 344], "hold": [77, 159, 234, 235], "output": [77, 78, 84, 129, 130, 147, 148, 156, 158, 178, 228, 234, 235, 272, 287, 288, 289, 291, 294, 295, 296, 297, 298, 299, 300, 301, 302, 306, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 353, 396], "integer_arrai": [77, 234], "versionchang": [77, 236], "previous": [77, 236], "wa": [77, 78, 236, 287, 328, 357], "error": [77, 85, 236, 385], "At": [77, 236], "some": [77, 78, 88, 90, 113, 236, 392], "futur": [77, 78, 236], "intend": [77, 236], "until": [77, 236, 343], "should": [77, 127, 138, 236, 304, 339, 340, 344, 392], "explicitli": [77, 236], "when": [77, 78, 159, 172, 236, 237, 359, 382], "arr": [77, 78, 236, 271, 281, 284, 311, 370, 373], "avoid": [77, 236], "futurewarn": [77, 236], "quicksort": [77, 236], "mergesort": [77, 236], "heapsort": [77, 236], "field": [77, 78, 178, 236], "compar": [77, 84, 236], "second": [77, 78, 87, 144, 236, 279, 352], "etc": [77, 78, 236, 306], "other": [77, 78, 113, 158, 184, 194, 195, 197, 199, 201, 202, 203, 204, 205, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 223, 224, 226, 229, 230, 231, 236, 287, 331, 385, 396], "word": [77, 113, 236, 287, 331], "yield": [77, 236, 287, 392], "maskedarrai": [77, 236], "inplac": [77, 236], "asnumpi": 77, "content": [77, 324], "popul": [77, 287, 314], "unsaf": [77, 237], "target": [77, 237], "style": [77, 237, 247], "keep": [77, 237], "close": [77, 88, 237, 287, 315], "possibl": [77, 88, 237, 258, 340, 353, 365], "happen": [77, 237, 289], "itself": [77, 78, 237, 392], "possibli": [77, 237], "doe": [77, 237], "assign": [77, 244], "collaps": [77, 247], "occur": [77, 247], "get_arrai": 77, "get": [77, 264, 392], "id": [77, 248], "standard": [77, 114, 117, 176, 182, 228, 248, 287, 302, 309, 316, 325, 326, 327, 328, 329, 338, 355, 357, 374, 379, 392, 396], "random": [77, 161, 248, 354, 385, 396], "123": [77, 248], "initi": [77, 82, 123, 174, 180, 250, 252, 257, 265, 280, 287, 357], "kth": [77, 256, 277], "introselect": [77, 256, 277], "rearrang": [77, 256, 396], "smaller": [77, 114, 256, 338], "move": [77, 184, 256, 343, 365], "behind": [77, 256], "undefin": [77, 256], "dparrai": [77, 257, 265, 397], "sh": [77, 258], "unlik": [77, 258], "free": [77, 258], "separ": [77, 78, 258], "entri": [77, 78, 82, 262, 269], "varianc": [77, 176, 190, 263, 269, 355, 379, 396], "interchang": [77, 184, 266, 358], "to_devic": 77, "target_devic": 77, "transfer": 77, "suitabl": [77, 268], "properti": [77, 192, 243, 245, 246, 249, 253, 254, 260, 261, 264, 268, 287, 309, 314, 315, 316, 317, 318, 319, 320, 322, 323, 328, 331, 392], "give": [77, 268, 340, 346], "without": [77, 82, 260, 268, 340, 392], "mask": [77, 78, 269, 278, 284, 359], "finit": [77, 139, 140, 141, 269], "__eq__": [77, 78, 112, 287], "__ne__": [77, 78, 112, 287], "__lt__": [77, 78, 112, 287], "__le__": [77, 78, 112, 287], "__gt__": [77, 78, 112, 287], "__ge__": [77, 78, 112, 287], "attribut": [77, 78, 385], "items": [77, 78], "nbyte": 77, "consum": [77, 253], "length": [77, 84, 260, 290, 340, 341, 346, 353], "repres": [77, 78, 118, 135, 260, 287, 392], "diment": [77, 260], "setter": [77, 260], "involv": [77, 260], "cannot": [77, 260, 353], "displac": [77, 264], "upon": [77, 264], "unit": [77, 264], "respect": [77, 264], "s1": [77, 78, 264], "s2": [77, 78, 264], "s3": [77, 264], "i1": [77, 78, 264], "i2": [77, 78, 264], "i3": [77, 264], "sycl_context": 77, "sycl_devic": 77, "align": 78, "homogen": 78, "fundament": 78, "match": [78, 283, 359, 360], "what": [78, 84, 289, 306], "struct": 78, "obj": [78, 118, 142], "dictionari": 78, "comma": 78, "string": [78, 123, 287, 309, 314, 315, 316, 317, 318, 319, 320, 322, 323, 328, 331, 392], "sticki": 78, "isalignedstruct": 78, "mai": [78, 88, 153, 172, 392], "just": 78, "built": 78, "int16": 78, "structur": 78, "f1": 78, "unsign": 78, "uint64": 78, "f2": 78, "u8": 78, "i4": 78, "protocol": [78, 118], "f8": 78, "s10": 78, "format": [78, 120, 396], "f0": 78, "void": 78, "flexibl": 78, "hello": 78, "world": [78, 289, 306], "i8": 78, "v10": 78, "subdivid": 78, "int8": 78, "gender": 78, "ag": 78, "uint8": 78, "u1": 78, "25": [78, 85, 128, 131, 162, 185, 279, 316, 325, 378, 379], "surnam": 78, "s25": 78, "new_ord": 78, "made": 78, "forc": 78, "swap": [78, 358], "code": 78, "opposit": 78, "endian": 78, "littl": 78, "big": 78, "nativ": 78, "new_dtyp": 78, "sy": 78, "sys_is_l": 78, "byteord": 78, "native_cod": 78, "swapped_cod": 78, "native_dt": 78, "swapped_dt": 78, "l": [78, 149, 153], "accord": [78, 153, 154], "subarrai": 78, "regardless": 78, "subdtyp": 78, "8f": 78, "charact": 78, "One": [78, 340], "applic": 78, "dt": 78, "relev": 78, "ascii": 78, "char": 78, "descr": 78, "__array_interface__": 78, "descript": [78, 392], "warn": [78, 305], "directli": [78, 172], "accur": 78, "reconstruct": [78, 161], "str_": 78, "grade": 78, "u16": 78, "fulli": 78, "titl": 78, "32": [78, 363], "present": 78, "unicod": 78, "meta": 78, "notic": 78, "s16": 78, "multiarrai": 78, "item_hasobject": 78, "list_pickl": 78, "item_is_point": 78, "needs_init": 78, "needs_pyapi": 78, "use_getitem": 78, "use_setitem": 78, "explan": 78, "thei": [78, 154, 392], "user": 78, "particular": 78, "hasobject": 78, "recal": 78, "actual": [78, 149], "address": 78, "pointer": 78, "distinguish": 78, "won": 78, "maintain": [78, 344], "so": [78, 84, 164, 325, 351], "togeth": 78, "produc": 78, "isbuiltin": 78, "relat": 78, "read": [78, 120, 340], "machineri": 78, "extend": [78, 392], "field1": 78, "isn": 78, "platform": 78, "anyth": 78, "80": [78, 382], "biufcmmosuv": 78, "identifi": 78, "gener": [78, 154, 287, 289, 292, 323, 378, 392, 396], "u": [78, 161], "timedelta": 78, "datetim": 78, "metadata": 78, "readonli": 78, "mappingproxi": 78, "approach": 78, "although": 78, "guarante": [78, 340], "certain": 78, "project": 78, "featur": 78, "long": 78, "undocu": 78, "well": [78, 120, 289, 306, 325], "aspect": 78, "ad": [78, 396], "datatyp": [78, 157], "dt2": 78, "key2": 78, "value2": 78, "arr2": 78, "clear": 78, "width": 78, "un": 78, "void640": 78, "increas": [78, 88, 378], "walk": 78, "num": [78, 85, 126, 162, 172, 377], "roughli": 78, "precis": 78, "str": 78, "19": 78, "typestr": 78, "item_dtyp": 78, "whose": [78, 154, 370, 373], "retriev": 78, "extra": 78, "impli": 78, "tack": 78, "end": [78, 162], "to_end": 79, "to_begin": 79, "between": [79, 154, 304, 318, 377], "consecut": 79, "einstein": [80, 81, 136, 173, 276, 363], "summat": [80, 81, 136, 173, 276, 363], "convent": [80, 81, 136, 173, 276, 363], "operand": [80, 81, 136, 276, 363], "lowest": [80, 81, 287, 315], "cost": [80, 81], "contract": [80, 81], "express": [80, 81], "subscript": 81, "greedi": 81, "consid": [81, 139, 157, 287, 315], "intermedi": 81, "dpnp_arrai": [83, 118, 125, 178, 191, 275, 287, 309, 314, 315, 316, 317, 318, 319, 320, 322, 323, 328, 331, 340, 368, 371, 384, 385], "scipi": 85, "math": 85, "75": [85, 128, 162], "99532227": 85, "99853728": 85, "99959305": 85, "99989938": 85, "99997791": 85, "expon": [86, 89, 279, 313, 396], "718281828": [86, 89], "389056099": [86, 89], "exponent2": 87, "expand": 88, "appear": 88, "whenev": [88, 365], "rank": [88, 90, 157, 358], "resid": 88, "singleton": [88, 353], "henc": 88, "resolv": 88, "newaxi": 88, "instead": [88, 113, 126, 162, 172, 271], "minu": [89, 113, 114, 338, 375], "condit": [90, 150, 278, 284, 345, 382], "elsewher": [91, 367, 382], "fourier": [93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 385], "transform": [93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 385], "batch": [94, 96, 100, 101, 105, 106, 108, 110], "sampl": [95, 109, 126, 162, 172, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 316, 318, 321, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 385, 396], "frequenc": [95, 97, 102, 109], "shift": [97, 102, 146, 342], "compon": [97, 102], "center": [97, 102], "spectrum": [97, 102], "signal": [98, 103], "hermitian": [98, 103, 149, 153, 157, 161, 396], "symmetri": [98, 103], "__next__": 112, "__iter__": 112, "toward": [113, 114, 338, 375], "spreadsheet": 113, "definit": [113, 149], "largest": [114, 338], "divis": [114, 115, 116, 117, 175, 181, 182, 279, 338, 374], "complementari": [114, 117, 182], "__dlpack__": 118, "dmlc": 118, "github": 118, "io": [118, 163], "dlpack": 118, "detail": [118, 369, 370, 372, 373, 392], "__dlpack_device__": 118, "file": [120, 127, 163], "text": [120, 123, 163], "binari": [120, 385, 396], "highli": 120, "effici": [120, 157], "known": [120, 325], "pars": 120, "simpli": 120, "written": 120, "coordin": [121, 178], "therefor": 121, "fn": 121, "fill_valu": [124, 125], "50": [126, 172, 363, 382], "scale": [126, 162, 172, 287, 294, 296, 298, 299, 300, 301, 309, 321, 326, 333], "progress": [126, 162], "1000": [126, 172, 288, 289, 294, 296, 298, 299, 300, 301, 302, 309, 310, 313, 315, 317, 320, 322, 328, 332, 333, 334, 335], "62341325": 126, "6227766": 126, "177": [126, 172], "827941": [126, 172], "directori": 127, "h": [127, 149, 178], "header": 127, "modul": [127, 385], "against": [127, 159], "vararg": 128, "y1": [128, 366], "bin": [131, 325], "densiti": 131, "dataset": 131, "hist": [131, 325], "bin_edg": 131, "4999999999999996": 131, "tup": [132, 381], "leg": 133, "triangl": [133, 368, 369, 370, 371, 372, 373], "hypotenus": 133, "spars": [135, 178], "nat": 141, "arg1": [143, 144], "arg2": [143, 144], "typecod": 143, "lower": [143, 149, 368, 369, 370, 373], "hierarchi": 143, "determin": [144, 151, 168, 170, 171], "kroneck": 145, "left": [146, 159, 330, 342, 344], "40": 146, "decomposit": [149, 161, 396], "ordinari": 149, "symmetr": [149, 153, 157], "No": 149, "perform": 149, "verifi": 149, "addit": 149, "array_lik": [149, 151, 154, 156, 157, 158, 159, 287, 346, 370, 373], "upper": [149, 160, 371, 372], "factor": [149, 160], "p": [150, 289, 292, 297, 303, 306], "fro": 150, "eigenvalu": [152, 153, 154, 396], "eigenvector": [152, 153, 154], "uplo": 153, "w": [153, 154], "ascend": 153, "17157288": 153, "82842712": 153, "92387953": 153, "38268343": 153, "vari": 153, "38268343j": 153, "92387953j": 153, "aren": 154, "necessarili": 154, "nor": 154, "matric": [154, 157, 159, 178], "suppli": [156, 158, 287, 316], "tol": [157, 305], "singular": [157, 161], "threshold": 157, "ep": 157, "epsilon": 157, "assum": 157, "enabl": 157, "treat": [158, 186, 188, 189, 392], "last": [158, 340, 353], "ord": 159, "abl": 159, "eight": 159, "infinit": 159, "unless": 159, "under": 159, "With": 159, "reduc": [160, 161], "q": [160, 177], "orthonorm": 160, "r": 160, "full_matric": 161, "compute_uv": 161, "2d": 161, "vh": 161, "smat": 161, "4d": 161, "retstep": 162, "logarithm": [162, 164, 165, 166, 167, 303, 396], "fname": 163, "stringio": 163, "behav": 163, "n2": 163, "natur": [164, 167], "plu": [164, 167], "30102999566": 165, "69314718": 166, "09861229": 166, "uniformli": [172, 287, 331], "215": 172, "443469": 172, "464": 172, "15888336": 172, "316": 172, "22776602": 172, "562": 172, "34132519": 172, "0396842": 172, "34960421": 172, "deviat": [176, 287, 302, 309, 355, 379], "while": [176, 190, 271, 355, 379], "overwrite_input": 177, "xi": 178, "xy": 178, "xn": 178, "nx": 178, "ny": 178, "xv": 178, "yv": 178, "matplotlib": [178, 325], "pyplot": [178, 325], "plt": [178, 325], "xx": 178, "yy": 178, "contourf": 178, "dpnp_iface_arraycr": [179, 273], "mgridclass": 179, "dens": 179, "5j": [179, 273], "fraction": 183, "destin": [184, 283, 360], "remain": [184, 340], "usm": [184, 287, 309, 314, 315, 316, 317, 318, 319, 320, 322, 328, 331, 353], "_novalu": [190, 355, 379], "alia": [191, 287, 317, 320, 322], "repr": 225, "136": 228, "272": 228, "408": 228, "out2": 271, "ogridclass": 273, "open": [273, 287, 317, 319, 320, 322, 331, 358], "ind": [282, 369, 372], "1d": [283, 360], "slice": [283, 360, 372, 392], "deg": 286, "52359878": 286, "04719755": 286, "0943951": 286, "61799388": 286, "mersenn": 287, "twister": 287, "pseudo": 287, "maximumum": [287, 323], "sycldevic": [287, 309, 314, 315, 316, 317, 318, 319, 320, 322, 323, 328, 331], "syclqueu": [287, 309, 314, 315, 316, 317, 318, 319, 320, 322, 323, 328, 331], "concept": [287, 309, 314, 315, 316, 317, 318, 319, 320, 322, 323, 328, 331, 392], "oneapi": [287, 309, 314, 315, 316, 317, 318, 319, 320, 322, 323, 328, 331], "filter": [287, 309, 314, 315, 316, 317, 318, 319, 320, 322, 323, 328, 331], "selector": [287, 309, 314, 315, 316, 317, 318, 319, 320, 322, 323, 328, 331], "intern": 287, "state": 287, "get_sycl_queu": 287, "loc": [287, 298, 300, 301, 309, 333], "draw": [287, 288, 289, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 315, 321, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334], "gaussian": [287, 309, 333], "share": [287, 309, 314, 315, 316, 317, 318, 319, 320, 322, 328, 331], "drawn": [287, 288, 289, 291, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 309, 310, 312, 313, 315, 318, 321, 327, 328, 329, 330, 331, 332, 333, 334, 335, 345], "parameter": [287, 309, 331], "58997253": 287, "84288406": 287, "33836967": 287, "16394577": 287, "40882036": 287, "39295758": 287, "48927254": 287, "74921661": 287, "13436424": 287, "56920387": 287, "84743374": 287, "80226506": 287, "76377462": 287, "06310682": 287, "25506903": 287, "1179187": 287, "49543509": 287, "76096244": 287, "low": [287, 315, 318, 331, 392], "high": [287, 315, 318, 331], "inclus": [287, 315, 318], "exclus": [287, 315], "half": [287, 317, 319, 320, 322, 331, 358], "omit": [287, 315, 382], "d0": [287, 314, 316], "d1": [287, 316], "dn": [287, 314, 316], "were": [287, 316], "84401099": 287, "four": [287, 316], "88997253": 287, "54288406": 287, "63836967": 287, "46394577": 287, "70882036": 287, "69295758": 287, "78927254": 287, "04921661": 287, "continu": [287, 319], "stdev": [287, 328], "81715362": 287, "54465213": 287, "18557831": 287, "28352814": 287, "67718303": 287, "11570901": 287, "21968665": 287, "18236388": 287, "08156915": 287, "21941987": 287, "24544512": 287, "63522211": 287, "673174": 287, "exclud": [287, 331], "54": 287, "48093112": 287, "52928804": 287, "1196081": 287, "6990877": 287, "34074171": 287, "conveni": 287, "accept": 287, "alpha": [288, 293, 294, 310, 313], "trial": 289, "probabl": [289, 297, 306], "coin": 289, "compani": [289, 306], "drill": [289, 306], "wild": [289, 306], "cat": [289, 306], "oil": [289, 306], "explor": [289, 306], "success": [289, 297, 306], "nine": 289, "fail": 289, "let": 289, "000": 289, "model": 289, "20000": 289, "answer": 289, "38885": 289, "38": 289, "fallback": [290, 292, 293, 303, 308, 324], "df": [291, 307, 329, 330], "chi": [291, 307], "89920014": 291, "00867716": 291, "13710533": 291, "62318272": 291, "dfnum": [295, 308], "dfden": [295, 308], "ten": 297, "thousand": 297, "individu": 297, "35": 297, "10000": [297, 312, 321, 331], "mu": [298, 302, 309, 332], "ngood": 299, "nbad": 299, "nsampl": 299, "nsamp": 299, "good": 299, "bad": 299, "decai": 300, "sigma": [302, 309], "seri": 303, "pval": 304, "iinfo": 304, "throw": 304, "dice": 304, "check_valid": 305, "multivari": 305, "after": 306, "100000": 306, "nonc": [307, 308], "noncentr": [307, 308], "todo": 307, "ii": 310, "lomax": 310, "randomli": 311, "lam": 312, "randomst": 315, "1923875335537315": 316, "rese": 323, "legaci": 323, "mt19937": 323, "engin": 323, "modifi": 324, "cauchi": 325, "lorentz": 325, "plot": 325, "1000000": [325, 327, 329, 330], "3x8000": 326, "8000": 326, "student": 329, "freedom": 329, "kappa": 332, "von": 332, "mise": 332, "dispers": 332, "33": 337, "3003003": 337, "newshap": 340, "infer": 340, "write": 340, "fastest": 340, "back": 340, "slowest": 340, "account": 340, "underli": 340, "never": 340, "reus": 340, "unspecifi": 340, "arrays_and_dtyp": 341, "promot": 341, "backward": 343, "li": 343, "side": 344, "sorter": 344, "condlist": 345, "choicelist": 345, "742278e": 348, "3012989": 349, "548739": 349, "traceback": 353, "recent": 353, "nd": 354, "nest": 354, "118033988749895": 355, "entir": 357, "bound": 359, "clamp": 359, "fanci": 359, "everi": 360, "22460635e": 361, "63317787e": 361, "996272": 362, "917152": 362, "dx": 366, "composit": 366, "trapezoid": 366, "By": [369, 372], "taken": [369, 372], "delta": 377, "complement": 377, "phase": 377, "49778714": 377, "28318531": 377, "vandermond": 378, "125": 378, "chosen": 382, "70": 382, "convers": 385, "algebra": [385, 396], "mathemat": [385, 396], "search": [385, 396], "statist": [385, 396], "summari": 385, "level": [385, 392], "util": 385, "counterpart": 392, "basic": [392, 396], "constructor": 392, "syntax": 392, "reflect": 392, "intrins": 392, "sometim": 392, "expos": 392, "them": 392, "reset": 392, "meaningfulli": 392, "associ": 392, "mani": 392, "fashion": 392, "typic": 392, "briefli": 392, "explain": 392, "docstr": 392, "proce": 392, "pow": 392, "short": 392, "unari": 392, "custom": 392, "represent": 392, "cover": 396, "elementwis": [396, 400], "pack": 396, "helper": 396, "equat": 396, "ration": 396, "extrema": 396, "variou": 400}, "objects": {"": [[3, 0, 0, "-", "dpnp"]], "dpnp": [[11, 1, 1, "", "abs"], [12, 1, 1, "", "absolute"], [13, 1, 1, "", "add"], [14, 1, 1, "", "all"], [15, 1, 1, "", "allclose"], [16, 1, 1, "", "amax"], [17, 1, 1, "", "amin"], [18, 1, 1, "", "any"], [19, 1, 1, "", "arange"], [20, 1, 1, "", "arccos"], [21, 1, 1, "", "arccosh"], [22, 1, 1, "", "arcsin"], [23, 1, 1, "", "arcsinh"], [24, 1, 1, "", "arctan"], [25, 1, 1, "", "arctan2"], [26, 1, 1, "", "arctanh"], [27, 1, 1, "", "argmax"], [28, 1, 1, "", "argmin"], [29, 1, 1, "", "argsort"], [30, 1, 1, "", "around"], [31, 1, 1, "", "array"], [32, 1, 1, "", "array_equal"], [33, 1, 1, "", "asanyarray"], [34, 1, 1, "", "asarray"], [35, 1, 1, "", "ascontiguousarray"], [36, 1, 1, "", "asfarray"], [37, 1, 1, "", "asfortranarray"], [38, 1, 1, "", "asnumpy"], [39, 1, 1, "", "atleast_1d"], [40, 1, 1, "", "atleast_2d"], [41, 1, 1, "", "atleast_3d"], [42, 1, 1, "", "average"], [43, 1, 1, "", "bincount"], [44, 1, 1, "", "bitwise_and"], [45, 1, 1, "", "bitwise_not"], [46, 1, 1, "", "bitwise_or"], [47, 1, 1, "", "bitwise_xor"], [48, 1, 1, "", "broadcast_to"], [49, 1, 1, "", "cbrt"], [50, 1, 1, "", "ceil"], [51, 1, 1, "", "choose"], [52, 1, 1, "", "concatenate"], [53, 1, 1, "", "conj"], [54, 1, 1, "", "conjugate"], [55, 1, 1, "", "convolve"], [56, 1, 1, "", "copy"], [57, 1, 1, "", "copysign"], [58, 1, 1, "", "copyto"], [59, 1, 1, "", "correlate"], [60, 1, 1, "", "cos"], [61, 1, 1, "", "cosh"], [62, 1, 1, "", "count_nonzero"], [63, 1, 1, "", "cov"], [64, 1, 1, "", "cross"], [65, 1, 1, "", "cumprod"], [66, 1, 1, "", "cumsum"], [67, 1, 1, "", "deg2rad"], [68, 1, 1, "", "degrees"], [69, 1, 1, "", "diag"], [70, 1, 1, "", "diag_indices"], [71, 1, 1, "", "diag_indices_from"], [72, 1, 1, "", "diagflat"], [73, 1, 1, "", "diagonal"], [74, 1, 1, "", "diff"], [75, 1, 1, "", "divide"], [76, 1, 1, "", "dot"], [78, 2, 1, "", "dtype"], [79, 1, 1, "", "ediff1d"], [80, 1, 1, "", "einsum"], [81, 1, 1, "", "einsum_path"], [82, 1, 1, "", "empty"], [83, 1, 1, "", "empty_like"], [84, 1, 1, "", "equal"], [85, 1, 1, "", "erf"], [86, 1, 1, "", "exp"], [87, 1, 1, "", "exp2"], [88, 1, 1, "", "expand_dims"], [89, 1, 1, "", "expm1"], [90, 1, 1, "", "extract"], [91, 1, 1, "", "eye"], [92, 1, 1, "", "fabs"], [10, 0, 0, "-", "fft"], [111, 1, 1, "", "fill_diagonal"], [112, 2, 1, "", "flatiter"], [113, 1, 1, "", "floor"], [114, 1, 1, "", "floor_divide"], [115, 1, 1, "", "fmax"], [116, 1, 1, "", "fmin"], [117, 1, 1, "", "fmod"], [118, 1, 1, "", "from_dlpack"], [119, 1, 1, "", "frombuffer"], [120, 1, 1, "", "fromfile"], [121, 1, 1, "", "fromfunction"], [122, 1, 1, "", "fromiter"], [123, 1, 1, "", "fromstring"], [124, 1, 1, "", "full"], [125, 1, 1, "", "full_like"], [126, 1, 1, "", "geomspace"], [127, 1, 1, "", "get_include"], [128, 1, 1, "", "gradient"], [129, 1, 1, "", "greater"], [130, 1, 1, "", "greater_equal"], [131, 1, 1, "", "histogram"], [132, 1, 1, "", "hstack"], [133, 1, 1, "", "hypot"], [134, 1, 1, "", "identity"], [135, 1, 1, "", "indices"], [136, 1, 1, "", "inner"], [137, 1, 1, "", "invert"], [138, 1, 1, "", "isclose"], [139, 1, 1, "", "isfinite"], [140, 1, 1, "", "isinf"], [141, 1, 1, "", "isnan"], [142, 1, 1, "", "isscalar"], [143, 1, 1, "", "issubdtype"], [144, 1, 1, "", "issubsctype"], [145, 1, 1, "", "kron"], [146, 1, 1, "", "left_shift"], [147, 1, 1, "", "less"], [148, 1, 1, "", "less_equal"], [162, 1, 1, "", "linspace"], [163, 1, 1, "", "loadtxt"], [164, 1, 1, "", "log"], [165, 1, 1, "", "log10"], [166, 1, 1, "", "log1p"], [167, 1, 1, "", "log2"], [168, 1, 1, "", "logical_and"], [169, 1, 1, "", "logical_not"], [170, 1, 1, "", "logical_or"], [171, 1, 1, "", "logical_xor"], [172, 1, 1, "", "logspace"], [173, 1, 1, "", "matmul"], [174, 1, 1, "", "max"], [175, 1, 1, "", "maximum"], [176, 1, 1, "", "mean"], [177, 1, 1, "", "median"], [178, 1, 1, "", "meshgrid"], [179, 5, 1, "", "mgrid"], [180, 1, 1, "", "min"], [181, 1, 1, "", "minimum"], [182, 1, 1, "", "mod"], [183, 1, 1, "", "modf"], [184, 1, 1, "", "moveaxis"], [185, 1, 1, "", "multiply"], [186, 1, 1, "", "nancumprod"], [187, 1, 1, "", "nancumsum"], [188, 1, 1, "", "nanprod"], [189, 1, 1, "", "nansum"], [190, 1, 1, "", "nanvar"], [191, 3, 1, "", "ndarray"], [270, 1, 1, "", "negative"], [271, 1, 1, "", "nonzero"], [272, 1, 1, "", "not_equal"], [273, 5, 1, "", "ogrid"], [274, 1, 1, "", "ones"], [275, 1, 1, "", "ones_like"], [276, 1, 1, "", "outer"], [277, 1, 1, "", "partition"], [278, 1, 1, "", "place"], [279, 1, 1, "", "power"], [280, 1, 1, "", "prod"], [281, 1, 1, "", "ptp"], [282, 1, 1, "", "put"], [283, 1, 1, "", "put_along_axis"], [284, 1, 1, "", "putmask"], [285, 1, 1, "", "rad2deg"], [286, 1, 1, "", "radians"], [395, 0, 0, "-", "random"], [336, 1, 1, "", "ravel"], [337, 1, 1, "", "reciprocal"], [338, 1, 1, "", "remainder"], [339, 1, 1, "", "repeat"], [340, 1, 1, "", "reshape"], [341, 1, 1, "", "result_type"], [342, 1, 1, "", "right_shift"], [343, 1, 1, "", "rollaxis"], [344, 1, 1, "", "searchsorted"], [345, 1, 1, "", "select"], [346, 1, 1, "", "shape"], [347, 1, 1, "", "sign"], [348, 1, 1, "", "sin"], [349, 1, 1, "", "sinh"], [350, 1, 1, "", "sort"], [351, 1, 1, "", "sqrt"], [352, 1, 1, "", "square"], [353, 1, 1, "", "squeeze"], [354, 1, 1, "", "stack"], [355, 1, 1, "", "std"], [356, 1, 1, "", "subtract"], [357, 1, 1, "", "sum"], [358, 1, 1, "", "swapaxes"], [359, 1, 1, "", "take"], [360, 1, 1, "", "take_along_axis"], [361, 1, 1, "", "tan"], [362, 1, 1, "", "tanh"], [363, 1, 1, "", "tensordot"], [364, 1, 1, "", "trace"], [365, 1, 1, "", "transpose"], [366, 1, 1, "", "trapz"], [367, 1, 1, "", "tri"], [368, 1, 1, "", "tril"], [369, 1, 1, "", "tril_indices"], [370, 1, 1, "", "tril_indices_from"], [371, 1, 1, "", "triu"], [372, 1, 1, "", "triu_indices"], [373, 1, 1, "", "triu_indices_from"], [374, 1, 1, "", "true_divide"], [375, 1, 1, "", "trunc"], [376, 1, 1, "", "unique"], [377, 1, 1, "", "unwrap"], [378, 1, 1, "", "vander"], [379, 1, 1, "", "var"], [380, 1, 1, "", "vdot"], [381, 1, 1, "", "vstack"], [382, 1, 1, "", "where"], [383, 1, 1, "", "zeros"], [384, 1, 1, "", "zeros_like"]], "dpnp.dpnp_array": [[77, 2, 1, "", "dpnp_array"]], "dpnp.dpnp_array.dpnp_array": [[77, 3, 1, "", "T"], [77, 4, 1, "", "__eq__"], [77, 4, 1, "", "__ge__"], [77, 4, 1, "", "__getitem__"], [77, 4, 1, "", "__gt__"], [77, 4, 1, "", "__le__"], [77, 4, 1, "", "__len__"], [77, 4, 1, "", "__lt__"], [77, 4, 1, "", "__ne__"], [77, 4, 1, "", "__setitem__"], [77, 4, 1, "", "all"], [77, 4, 1, "", "any"], [77, 4, 1, "", "argmax"], [77, 4, 1, "", "argmin"], [77, 4, 1, "", "argsort"], [77, 4, 1, "", "asnumpy"], [77, 4, 1, "", "astype"], [77, 4, 1, "", "choose"], [77, 4, 1, "", "conj"], [77, 4, 1, "", "conjugate"], [77, 4, 1, "", "cumsum"], [77, 3, 1, "", "device"], [77, 4, 1, "", "diagonal"], [77, 4, 1, "", "dot"], [77, 3, 1, "", "dtype"], [77, 4, 1, "", "fill"], [77, 3, 1, "", "flags"], [77, 3, 1, "", "flat"], [77, 4, 1, "", "flatten"], [77, 4, 1, "", "get_array"], [77, 4, 1, "", "item"], [77, 3, 1, "", "itemsize"], [77, 4, 1, "", "max"], [77, 4, 1, "", "mean"], [77, 4, 1, "", "min"], [77, 3, 1, "", "nbytes"], [77, 3, 1, "", "ndim"], [77, 4, 1, "", "nonzero"], [77, 4, 1, "", "partition"], [77, 4, 1, "", "prod"], [77, 4, 1, "", "reshape"], [77, 4, 1, "", "round"], [77, 3, 1, "", "shape"], [77, 3, 1, "", "size"], [77, 4, 1, "", "squeeze"], [77, 4, 1, "", "std"], [77, 3, 1, "", "strides"], [77, 4, 1, "", "sum"], [77, 4, 1, "", "swapaxes"], [77, 3, 1, "", "sycl_context"], [77, 3, 1, "", "sycl_device"], [77, 3, 1, "", "sycl_queue"], [77, 4, 1, "", "take"], [77, 4, 1, "", "to_device"], [77, 4, 1, "", "transpose"], [77, 3, 1, "", "usm_type"], [77, 4, 1, "", "var"]], "dpnp.dtype": [[78, 4, 1, "", "__eq__"], [78, 4, 1, "", "__ge__"], [78, 4, 1, "", "__getitem__"], [78, 4, 1, "", "__gt__"], [78, 4, 1, "", "__le__"], [78, 4, 1, "", "__len__"], [78, 4, 1, "", "__lt__"], [78, 4, 1, "", "__ne__"], [78, 3, 1, "", "alignment"], [78, 3, 1, "", "base"], [78, 3, 1, "", "byteorder"], [78, 3, 1, "", "char"], [78, 3, 1, "", "descr"], [78, 3, 1, "", "fields"], [78, 3, 1, "", "flags"], [78, 3, 1, "", "hasobject"], [78, 3, 1, "", "isalignedstruct"], [78, 3, 1, "", "isbuiltin"], [78, 3, 1, "", "isnative"], [78, 3, 1, "", "itemsize"], [78, 3, 1, "", "kind"], [78, 3, 1, "", "metadata"], [78, 3, 1, "", "name"], [78, 3, 1, "", "names"], [78, 3, 1, "", "ndim"], [78, 4, 1, "", "newbyteorder"], [78, 3, 1, "", "num"], [78, 3, 1, "", "shape"], [78, 3, 1, "", "str"], [78, 3, 1, "", "subdtype"], [78, 3, 1, "", "type"]], "dpnp.fft": [[93, 1, 1, "", "fft"], [94, 1, 1, "", "fft2"], [95, 1, 1, "", "fftfreq"], [96, 1, 1, "", "fftn"], [97, 1, 1, "", "fftshift"], [98, 1, 1, "", "hfft"], [99, 1, 1, "", "ifft"], [100, 1, 1, "", "ifft2"], [101, 1, 1, "", "ifftn"], [102, 1, 1, "", "ifftshift"], [103, 1, 1, "", "ihfft"], [104, 1, 1, "", "irfft"], [105, 1, 1, "", "irfft2"], [106, 1, 1, "", "irfftn"], [107, 1, 1, "", "rfft"], [108, 1, 1, "", "rfft2"], [109, 1, 1, "", "rfftfreq"], [110, 1, 1, "", "rfftn"]], "dpnp.flatiter": [[112, 4, 1, "", "__eq__"], [112, 4, 1, "", "__ge__"], [112, 4, 1, "", "__getitem__"], [112, 4, 1, "", "__gt__"], [112, 4, 1, "", "__iter__"], [112, 4, 1, "", "__le__"], [112, 4, 1, "", "__lt__"], [112, 4, 1, "", "__ne__"], [112, 4, 1, "", "__next__"], [112, 4, 1, "", "__setitem__"]], "dpnp.linalg": [[149, 1, 1, "", "cholesky"], [150, 1, 1, "", "cond"], [151, 1, 1, "", "det"], [152, 1, 1, "", "eig"], [153, 1, 1, "", "eigh"], [154, 1, 1, "", "eigvals"], [155, 1, 1, "", "inv"], [156, 1, 1, "", "matrix_power"], [157, 1, 1, "", "matrix_rank"], [158, 1, 1, "", "multi_dot"], [159, 1, 1, "", "norm"], [160, 1, 1, "", "qr"], [161, 1, 1, "", "svd"]], "dpnp.ndarray": [[192, 6, 1, "", "T"], [193, 4, 1, "", "__abs__"], [194, 4, 1, "", "__add__"], [195, 4, 1, "", "__and__"], [196, 4, 1, "", "__complex__"], [197, 4, 1, "", "__eq__"], [198, 4, 1, "", "__float__"], [199, 4, 1, "", "__ge__"], [200, 4, 1, "", "__getitem__"], [201, 4, 1, "", "__gt__"], [202, 4, 1, "", "__iadd__"], [203, 4, 1, "", "__iand__"], [204, 4, 1, "", "__ilshift__"], [205, 4, 1, "", "__imul__"], [206, 4, 1, "", "__int__"], [207, 4, 1, "", "__invert__"], [208, 4, 1, "", "__ior__"], [209, 4, 1, "", "__ipow__"], [210, 4, 1, "", "__irshift__"], [211, 4, 1, "", "__isub__"], [212, 4, 1, "", "__itruediv__"], [213, 4, 1, "", "__ixor__"], [214, 4, 1, "", "__le__"], [215, 4, 1, "", "__len__"], [216, 4, 1, "", "__lshift__"], [217, 4, 1, "", "__lt__"], [218, 4, 1, "", "__mod__"], [219, 4, 1, "", "__mul__"], [220, 4, 1, "", "__ne__"], [221, 4, 1, "", "__neg__"], [222, 4, 1, "", "__new__"], [223, 4, 1, "", "__or__"], [224, 4, 1, "", "__pow__"], [225, 4, 1, "", "__repr__"], [226, 4, 1, "", "__rshift__"], [227, 4, 1, "", "__setitem__"], [228, 4, 1, "", "__str__"], [229, 4, 1, "", "__sub__"], [230, 4, 1, "", "__truediv__"], [231, 4, 1, "", "__xor__"], [232, 4, 1, "", "all"], [233, 4, 1, "", "any"], [234, 4, 1, "", "argmax"], [235, 4, 1, "", "argmin"], [236, 4, 1, "", "argsort"], [237, 4, 1, "", "astype"], [238, 4, 1, "", "choose"], [239, 4, 1, "", "conj"], [240, 4, 1, "", "conjugate"], [241, 4, 1, "", "cumsum"], [242, 4, 1, "", "diagonal"], [243, 6, 1, "", "dtype"], [244, 4, 1, "", "fill"], [245, 6, 1, "", "flags"], [246, 6, 1, "", "flat"], [247, 4, 1, "", "flatten"], [248, 4, 1, "", "item"], [249, 6, 1, "", "itemsize"], [250, 4, 1, "", "max"], [251, 4, 1, "", "mean"], [252, 4, 1, "", "min"], [253, 6, 1, "", "nbytes"], [254, 6, 1, "", "ndim"], [255, 4, 1, "", "nonzero"], [256, 4, 1, "", "partition"], [257, 4, 1, "", "prod"], [258, 4, 1, "", "reshape"], [259, 4, 1, "", "round"], [260, 6, 1, "", "shape"], [261, 6, 1, "", "size"], [262, 4, 1, "", "squeeze"], [263, 4, 1, "", "std"], [264, 6, 1, "", "strides"], [265, 4, 1, "", "sum"], [266, 4, 1, "", "swapaxes"], [267, 4, 1, "", "take"], [268, 4, 1, "", "transpose"], [269, 4, 1, "", "var"]], "dpnp.random": [[287, 2, 1, "", "RandomState"], [288, 1, 1, "", "beta"], [289, 1, 1, "", "binomial"], [290, 1, 1, "", "bytes"], [291, 1, 1, "", "chisquare"], [292, 1, 1, "", "choice"], [293, 1, 1, "", "dirichlet"], [294, 1, 1, "", "exponential"], [295, 1, 1, "", "f"], [296, 1, 1, "", "gamma"], [297, 1, 1, "", "geometric"], [298, 1, 1, "", "gumbel"], [299, 1, 1, "", "hypergeometric"], [300, 1, 1, "", "laplace"], [301, 1, 1, "", "logistic"], [302, 1, 1, "", "lognormal"], [303, 1, 1, "", "logseries"], [304, 1, 1, "", "multinomial"], [305, 1, 1, "", "multivariate_normal"], [306, 1, 1, "", "negative_binomial"], [307, 1, 1, "", "noncentral_chisquare"], [308, 1, 1, "", "noncentral_f"], [309, 1, 1, "", "normal"], [310, 1, 1, "", "pareto"], [311, 1, 1, "", "permutation"], [312, 1, 1, "", "poisson"], [313, 1, 1, "", "power"], [314, 1, 1, "", "rand"], [315, 1, 1, "", "randint"], [316, 1, 1, "", "randn"], [317, 1, 1, "", "random"], [318, 1, 1, "", "random_integers"], [319, 1, 1, "", "random_sample"], [320, 1, 1, "", "ranf"], [321, 1, 1, "", "rayleigh"], [322, 1, 1, "", "sample"], [323, 1, 1, "", "seed"], [324, 1, 1, "", "shuffle"], [325, 1, 1, "", "standard_cauchy"], [326, 1, 1, "", "standard_exponential"], [327, 1, 1, "", "standard_gamma"], [328, 1, 1, "", "standard_normal"], [329, 1, 1, "", "standard_t"], [330, 1, 1, "", "triangular"], [331, 1, 1, "", "uniform"], [332, 1, 1, "", "vonmises"], [333, 1, 1, "", "wald"], [334, 1, 1, "", "weibull"], [335, 1, 1, "", "zipf"]], "dpnp.random.RandomState": [[287, 4, 1, "", "__eq__"], [287, 4, 1, "", "__ge__"], [287, 4, 1, "", "__gt__"], [287, 4, 1, "", "__le__"], [287, 4, 1, "", "__lt__"], [287, 4, 1, "", "__ne__"], [287, 4, 1, "", "get_state"], [287, 4, 1, "", "get_sycl_device"], [287, 4, 1, "", "get_sycl_queue"], [287, 4, 1, "", "normal"], [287, 4, 1, "", "rand"], [287, 4, 1, "", "randint"], [287, 4, 1, "", "randn"], [287, 4, 1, "", "random_sample"], [287, 4, 1, "", "standard_normal"], [287, 4, 1, "", "uniform"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:attribute", "4": "py:method", "5": "py:data", "6": "py:property"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "method", "Python method"], "5": ["py", "data", "Python data"], "6": ["py", "property", "Python property"]}, "titleterms": {"interplai": 0, "data": [0, 2, 7, 8, 9, 386, 392, 395], "parallel": [0, 2], "control": 0, "librari": 0, "exampl": [0, 4], "c": 1, "backend": 1, "api": [1, 385], "refer": [1, 385], "extens": 2, "numpi": [2, 6], "develop": 2, "inform": [2, 8], "overview": 3, "quick": 4, "start": 4, "guid": 4, "devic": 4, "driver": 4, "python": 4, "interpret": 4, "instal": 4, "packag": [4, 394], "from": [4, 7], "anaconda": 4, "build": 4, "conda": 4, "scikit": 4, "test": [4, 8, 388], "binari": 5, "oper": [5, 386, 388, 389, 390, 392, 400], "elementwis": 5, "bit": [5, 400], "pack": 5, "output": 5, "format": 5, "comparison": [6, 388, 392, 400], "tabl": 6, "dpnp": [6, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 395], "cupi": 6, "summari": 6, "modul": [6, 394], "level": 6, "multi": [6, 392], "dimension": [6, 392], "arrai": [6, 7, 9, 31, 386, 388, 389, 392], "linear": [6, 387], "algebra": [6, 387], "discret": 6, "fourier": 6, "transform": 6, "random": [6, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 395], "sampl": [6, 322, 395], "creation": 7, "routin": [7, 8, 10, 386, 389, 390, 391, 396], "basic": [7, 389, 394], "other": [7, 387, 390, 392], "numer": 7, "rang": 7, "matrix": [7, 387, 392], "The": 7, "class": 7, "type": [8, 9, 388, 392], "creat": 8, "miscellan": [8, 390, 391], "avail": [9, 400], "fft": [10, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110], "function": [10, 388, 390, 398, 399, 400], "standard": 10, "real": 10, "hermitian": 10, "helper": 10, "ab": 11, "absolut": 12, "add": 13, "all": [14, 232], "allclos": 15, "amax": 16, "amin": 17, "ani": [18, 233], "arang": 19, "arcco": 20, "arccosh": 21, "arcsin": 22, "arcsinh": 23, "arctan": 24, "arctan2": 25, "arctanh": 26, "argmax": [27, 234], "argmin": [28, 235], "argsort": [29, 236], "around": 30, "array_equ": 32, "asanyarrai": 33, "asarrai": 34, "ascontiguousarrai": 35, "asfarrai": 36, "asfortranarrai": 37, "asnumpi": 38, "atleast_1d": 39, "atleast_2d": 40, "atleast_3d": 41, "averag": [42, 399], "bincount": 43, "bitwise_and": 44, "bitwise_not": 45, "bitwise_or": 46, "bitwise_xor": 47, "broadcast_to": 48, "cbrt": 49, "ceil": 50, "choos": [51, 238], "concaten": 52, "conj": [53, 239], "conjug": [54, 240], "convolv": 55, "copi": 56, "copysign": 57, "copyto": 58, "correl": [59, 399], "co": 60, "cosh": 61, "count_nonzero": 62, "cov": 63, "cross": 64, "cumprod": 65, "cumsum": [66, 241], "deg2rad": 67, "degre": 68, "diag": 69, "diag_indic": 70, "diag_indices_from": 71, "diagflat": 72, "diagon": [73, 242], "diff": 74, "divid": 75, "dot": 76, "dpnp_arrai": 77, "dtype": [78, 243], "ediff1d": 79, "einsum": 80, "einsum_path": 81, "empti": 82, "empty_lik": 83, "equal": 84, "erf": 85, "exp": 86, "exp2": 87, "expand_dim": 88, "expm1": 89, "extract": 90, "ey": 91, "fab": 92, "fft2": 94, "fftfreq": 95, "fftn": 96, "fftshift": 97, "hfft": 98, "ifft": 99, "ifft2": 100, "ifftn": 101, "ifftshift": 102, "ihfft": 103, "irfft": 104, "irfft2": 105, "irfftn": 106, "rfft": 107, "rfft2": 108, "rfftfreq": 109, "rfftn": 110, "fill_diagon": 111, "flatit": 112, "floor": 113, "floor_divid": 114, "fmax": 115, "fmin": 116, "fmod": 117, "from_dlpack": 118, "frombuff": 119, "fromfil": 120, "fromfunct": 121, "fromit": 122, "fromstr": 123, "full": 124, "full_lik": 125, "geomspac": 126, "get_includ": 127, "gradient": 128, "greater": 129, "greater_equ": 130, "histogram": [131, 399], "hstack": 132, "hypot": 133, "ident": 134, "indic": 135, "inner": 136, "invert": 137, "isclos": 138, "isfinit": 139, "isinf": 140, "isnan": 141, "isscalar": 142, "issubdtyp": 143, "issubsctyp": 144, "kron": 145, "left_shift": 146, "less": 147, "less_equ": 148, "linalg": [149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161], "choleski": 149, "cond": 150, "det": 151, "eig": 152, "eigh": 153, "eigval": 154, "inv": 155, "matrix_pow": 156, "matrix_rank": 157, "multi_dot": 158, "norm": [159, 387], "qr": 160, "svd": 161, "linspac": 162, "loadtxt": 163, "log": 164, "log10": 165, "log1p": 166, "log2": 167, "logical_and": 168, "logical_not": 169, "logical_or": 170, "logical_xor": 171, "logspac": 172, "matmul": 173, "max": [174, 250], "maximum": 175, "mean": [176, 251], "median": 177, "meshgrid": 178, "mgrid": 179, "min": [180, 252], "minimum": 181, "mod": 182, "modf": 183, "moveaxi": 184, "multipli": 185, "nancumprod": 186, "nancumsum": 187, "nanprod": 188, "nansum": 189, "nanvar": 190, "ndarrai": [191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 392], "t": 192, "__abs__": 193, "__add__": 194, "__and__": 195, "__complex__": 196, "__eq__": 197, "__float__": 198, "__ge__": 199, "__getitem__": 200, "__gt__": 201, "__iadd__": 202, "__iand__": 203, "__ilshift__": 204, "__imul__": 205, "__int__": 206, "__invert__": 207, "__ior__": 208, "__ipow__": 209, "__irshift__": 210, "__isub__": 211, "__itruediv__": 212, "__ixor__": 213, "__le__": 214, "__len__": 215, "__lshift__": 216, "__lt__": 217, "__mod__": 218, "__mul__": 219, "__ne__": 220, "__neg__": 221, "__new__": 222, "__or__": 223, "__pow__": 224, "__repr__": 225, "__rshift__": 226, "__setitem__": 227, "__str__": 228, "__sub__": 229, "__truediv__": 230, "__xor__": 231, "astyp": 237, "fill": 244, "flag": 245, "flat": 246, "flatten": 247, "item": [248, 392], "items": 249, "nbyte": 253, "ndim": 254, "nonzero": [255, 271], "partit": [256, 277], "prod": [257, 280], "reshap": [258, 340], "round": [259, 390], "shape": [260, 346, 389, 392], "size": 261, "squeez": [262, 353], "std": [263, 355], "stride": 264, "sum": [265, 357, 390], "swapax": [266, 358], "take": [267, 359], "transpos": [268, 365, 389], "var": [269, 379], "neg": 270, "not_equ": 272, "ogrid": 273, "ones": 274, "ones_lik": 275, "outer": 276, "place": 278, "power": [279, 313], "ptp": 281, "put": 282, "put_along_axi": 283, "putmask": 284, "rad2deg": 285, "radian": 286, "randomst": 287, "beta": 288, "binomi": 289, "byte": 290, "chisquar": 291, "choic": 292, "dirichlet": 293, "exponenti": 294, "f": 295, "gamma": 296, "geometr": 297, "gumbel": 298, "hypergeometr": 299, "laplac": 300, "logist": 301, "lognorm": 302, "logseri": 303, "multinomi": 304, "multivariate_norm": 305, "negative_binomi": 306, "noncentral_chisquar": 307, "noncentral_f": 308, "normal": 309, "pareto": 310, "permut": [311, 395], "poisson": 312, "rand": 314, "randint": 315, "randn": 316, "random_integ": 318, "random_sampl": 319, "ranf": 320, "rayleigh": 321, "seed": 323, "shuffl": 324, "standard_cauchi": 325, "standard_exponenti": 326, "standard_gamma": 327, "standard_norm": 328, "standard_t": 329, "triangular": 330, "uniform": 331, "vonmis": 332, "wald": 333, "weibul": 334, "zipf": 335, "ravel": 336, "reciproc": 337, "remaind": 338, "repeat": 339, "result_typ": 341, "right_shift": 342, "rollaxi": 343, "searchsort": 344, "select": [345, 392], "sign": 347, "sin": 348, "sinh": 349, "sort": [350, 397], "sqrt": 351, "squar": 352, "stack": 354, "subtract": 356, "take_along_axi": 360, "tan": 361, "tanh": 362, "tensordot": 363, "trace": 364, "trapz": 366, "tri": 367, "tril": 368, "tril_indic": 369, "tril_indices_from": 370, "triu": 371, "triu_indic": 372, "triu_indices_from": 373, "true_divid": 374, "trunc": 375, "uniqu": 376, "unwrap": 377, "vander": 378, "vdot": 380, "vstack": 381, "where": 382, "zero": 383, "zeros_lik": 384, "index": [386, 392], "gener": [386, 395], "like": [386, 389], "insert": 386, "iter": 386, "over": 386, "vector": 387, "product": [387, 390], "decomposit": 387, "eigenvalu": 387, "number": [387, 389, 390], "solv": 387, "equat": 387, "logic": 388, "truth": 388, "valu": 388, "infin": 388, "nan": 388, "manipul": [389, 392], "chang": 389, "dimens": 389, "kind": 389, "join": 389, "split": 389, "tile": 389, "ad": 389, "remov": 389, "element": 389, "rearrang": 389, "mathemat": 390, "trigonometr": [390, 400], "hyperbol": 390, "differ": 390, "expon": 390, "logarithm": 390, "special": [390, 392, 398], "float": [390, 400], "point": 390, "ration": 390, "arithmet": [390, 392, 394], "handl": 390, "complex": 390, "extrema": 390, "find": 390, "util": 391, "construct": 392, "attribut": 392, "memori": 392, "layout": 392, "method": 392, "convers": 392, "calcul": 392, "multipl": 392, "pad": 393, "polynomi": 394, "polyutil": 394, "poly1d": 394, "simpl": 395, "distribut": 395, "search": 397, "count": 397, "error": 398, "statist": 399, "order": 399, "varianc": 399, "univers": 400, "ufunc": 400, "math": 400, "twiddl": 400}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1, "sphinx.ext.intersphinx": 1, "sphinx": 60}, "alltitles": {"Interplay with the Data Parallel Control Library": [[0, "interplay-with-the-data-parallel-control-library"]], "Example": [[0, "example"]], "C++ backend API Reference": [[1, "c-backend-api-reference"]], "Data Parallel Extension for NumPy*": [[2, "data-parallel-extension-for-numpy"]], "Development information": [[2, null]], "Overview": [[3, "id1"]], "Quick Start Guide": [[4, "id1"]], "Device Drivers": [[4, "device-drivers"]], "Python Interpreter": [[4, "python-interpreter"]], "Installation": [[4, "installation"]], "Install Package from Anaconda": [[4, "install-package-from-anaconda"]], "Build and Install Conda Package": [[4, "build-and-install-conda-package"]], "Build and Install with scikit-build": [[4, "build-and-install-with-scikit-build"]], "Testing": [[4, "testing"]], "Examples": [[4, "examples"]], "Binary Operations": [[5, "binary-operations"]], "Elementwise bit operations": [[5, "elementwise-bit-operations"]], "Bit packing": [[5, "bit-packing"]], "Output formatting": [[5, "output-formatting"]], "Comparison Table NumPy/ DPNP/ CuPy": [[6, "comparison-table-numpy-dpnp-cupy"]], "Summary": [[6, "summary"]], "Module-Level": [[6, "module-level"]], "Multi-Dimensional Array": [[6, "multi-dimensional-array"]], "Linear Algebra": [[6, "linear-algebra"], [387, "linear-algebra"]], "Discrete Fourier Transform": [[6, "discrete-fourier-transform"]], "Random Sampling": [[6, "random-sampling"]], "Array Creation Routines": [[7, "array-creation-routines"]], "Basic creation routines": [[7, "basic-creation-routines"]], "Creation from other data": [[7, "creation-from-other-data"]], "Numerical ranges": [[7, "numerical-ranges"]], "Matrix creation": [[7, "matrix-creation"]], "The Matrix class": [[7, "the-matrix-class"]], "Data type routines": [[8, "data-type-routines"]], "Creating data types": [[8, "creating-data-types"]], "Data type information": [[8, "data-type-information"]], "Data type testing": [[8, "data-type-testing"]], "Miscellaneous": [[8, "miscellaneous"], [390, "miscellaneous"]], "Available array data types": [[9, "available-array-data-types"]], "FFT Functions": [[10, "fft-functions"]], "Standard FFTs": [[10, "standard-ffts"]], "Real FFTs": [[10, "real-ffts"]], "Hermitian FFTs": [[10, "hermitian-ffts"]], "Helper routines": [[10, "helper-routines"]], "dpnp.abs": [[11, "dpnp-abs"]], "dpnp.absolute": [[12, "dpnp-absolute"]], "dpnp.add": [[13, "dpnp-add"]], "dpnp.all": [[14, "dpnp-all"]], "dpnp.allclose": [[15, "dpnp-allclose"]], "dpnp.amax": [[16, "dpnp-amax"]], "dpnp.amin": [[17, "dpnp-amin"]], "dpnp.any": [[18, "dpnp-any"]], "dpnp.arange": [[19, "dpnp-arange"]], "dpnp.arccos": [[20, "dpnp-arccos"]], "dpnp.arccosh": [[21, "dpnp-arccosh"]], "dpnp.arcsin": [[22, "dpnp-arcsin"]], "dpnp.arcsinh": [[23, "dpnp-arcsinh"]], "dpnp.arctan": [[24, "dpnp-arctan"]], "dpnp.arctan2": [[25, "dpnp-arctan2"]], "dpnp.arctanh": [[26, "dpnp-arctanh"]], "dpnp.argmax": [[27, "dpnp-argmax"]], "dpnp.argmin": [[28, "dpnp-argmin"]], "dpnp.argsort": [[29, "dpnp-argsort"]], "dpnp.around": [[30, "dpnp-around"]], "dpnp.array": [[31, "dpnp-array"]], "dpnp.array_equal": [[32, "dpnp-array-equal"]], "dpnp.asanyarray": [[33, "dpnp-asanyarray"]], "dpnp.asarray": [[34, "dpnp-asarray"]], "dpnp.ascontiguousarray": [[35, "dpnp-ascontiguousarray"]], "dpnp.asfarray": [[36, "dpnp-asfarray"]], "dpnp.asfortranarray": [[37, "dpnp-asfortranarray"]], "dpnp.asnumpy": [[38, "dpnp-asnumpy"]], "dpnp.atleast_1d": [[39, "dpnp-atleast-1d"]], "dpnp.atleast_2d": [[40, "dpnp-atleast-2d"]], "dpnp.atleast_3d": [[41, "dpnp-atleast-3d"]], "dpnp.average": [[42, "dpnp-average"]], "dpnp.bincount": [[43, "dpnp-bincount"]], "dpnp.bitwise_and": [[44, "dpnp-bitwise-and"]], "dpnp.bitwise_not": [[45, "dpnp-bitwise-not"]], "dpnp.bitwise_or": [[46, "dpnp-bitwise-or"]], "dpnp.bitwise_xor": [[47, "dpnp-bitwise-xor"]], "dpnp.broadcast_to": [[48, "dpnp-broadcast-to"]], "dpnp.cbrt": [[49, "dpnp-cbrt"]], "dpnp.ceil": [[50, "dpnp-ceil"]], "dpnp.choose": [[51, "dpnp-choose"]], "dpnp.concatenate": [[52, "dpnp-concatenate"]], "dpnp.conj": [[53, "dpnp-conj"]], "dpnp.conjugate": [[54, "dpnp-conjugate"]], "dpnp.convolve": [[55, "dpnp-convolve"]], "dpnp.copy": [[56, "dpnp-copy"]], "dpnp.copysign": [[57, "dpnp-copysign"]], "dpnp.copyto": [[58, "dpnp-copyto"]], "dpnp.correlate": [[59, "dpnp-correlate"]], "dpnp.cos": [[60, "dpnp-cos"]], "dpnp.cosh": [[61, "dpnp-cosh"]], "dpnp.count_nonzero": [[62, "dpnp-count-nonzero"]], "dpnp.cov": [[63, "dpnp-cov"]], "dpnp.cross": [[64, "dpnp-cross"]], "dpnp.cumprod": [[65, "dpnp-cumprod"]], "dpnp.cumsum": [[66, "dpnp-cumsum"]], "dpnp.deg2rad": [[67, "dpnp-deg2rad"]], "dpnp.degrees": [[68, "dpnp-degrees"]], "dpnp.diag": [[69, "dpnp-diag"]], "dpnp.diag_indices": [[70, "dpnp-diag-indices"]], "dpnp.diag_indices_from": [[71, "dpnp-diag-indices-from"]], "dpnp.diagflat": [[72, "dpnp-diagflat"]], "dpnp.diagonal": [[73, "dpnp-diagonal"]], "dpnp.diff": [[74, "dpnp-diff"]], "dpnp.divide": [[75, "dpnp-divide"]], "dpnp.dot": [[76, "dpnp-dot"]], "dpnp.dpnp_array.dpnp_array": [[77, "dpnp-dpnp-array-dpnp-array"]], "dpnp.dtype": [[78, "dpnp-dtype"]], "dpnp.ediff1d": [[79, "dpnp-ediff1d"]], "dpnp.einsum": [[80, "dpnp-einsum"]], "dpnp.einsum_path": [[81, "dpnp-einsum-path"]], "dpnp.empty": [[82, "dpnp-empty"]], "dpnp.empty_like": [[83, "dpnp-empty-like"]], "dpnp.equal": [[84, "dpnp-equal"]], "dpnp.erf": [[85, "dpnp-erf"]], "dpnp.exp": [[86, "dpnp-exp"]], "dpnp.exp2": [[87, "dpnp-exp2"]], "dpnp.expand_dims": [[88, "dpnp-expand-dims"]], "dpnp.expm1": [[89, "dpnp-expm1"]], "dpnp.extract": [[90, "dpnp-extract"]], "dpnp.eye": [[91, "dpnp-eye"]], "dpnp.fabs": [[92, "dpnp-fabs"]], "dpnp.fft.fft": [[93, "dpnp-fft-fft"]], "dpnp.fft.fft2": [[94, "dpnp-fft-fft2"]], "dpnp.fft.fftfreq": [[95, "dpnp-fft-fftfreq"]], "dpnp.fft.fftn": [[96, "dpnp-fft-fftn"]], "dpnp.fft.fftshift": [[97, "dpnp-fft-fftshift"]], "dpnp.fft.hfft": [[98, "dpnp-fft-hfft"]], "dpnp.fft.ifft": [[99, "dpnp-fft-ifft"]], "dpnp.fft.ifft2": [[100, "dpnp-fft-ifft2"]], "dpnp.fft.ifftn": [[101, "dpnp-fft-ifftn"]], "dpnp.fft.ifftshift": [[102, "dpnp-fft-ifftshift"]], "dpnp.fft.ihfft": [[103, "dpnp-fft-ihfft"]], "dpnp.fft.irfft": [[104, "dpnp-fft-irfft"]], "dpnp.fft.irfft2": [[105, "dpnp-fft-irfft2"]], "dpnp.fft.irfftn": [[106, "dpnp-fft-irfftn"]], "dpnp.fft.rfft": [[107, "dpnp-fft-rfft"]], "dpnp.fft.rfft2": [[108, "dpnp-fft-rfft2"]], "dpnp.fft.rfftfreq": [[109, "dpnp-fft-rfftfreq"]], "dpnp.fft.rfftn": [[110, "dpnp-fft-rfftn"]], "dpnp.fill_diagonal": [[111, "dpnp-fill-diagonal"]], "dpnp.flatiter": [[112, "dpnp-flatiter"]], "dpnp.floor": [[113, "dpnp-floor"]], "dpnp.floor_divide": [[114, "dpnp-floor-divide"]], "dpnp.fmax": [[115, "dpnp-fmax"]], "dpnp.fmin": [[116, "dpnp-fmin"]], "dpnp.fmod": [[117, "dpnp-fmod"]], "dpnp.from_dlpack": [[118, "dpnp-from-dlpack"]], "dpnp.frombuffer": [[119, "dpnp-frombuffer"]], "dpnp.fromfile": [[120, "dpnp-fromfile"]], "dpnp.fromfunction": [[121, "dpnp-fromfunction"]], "dpnp.fromiter": [[122, "dpnp-fromiter"]], "dpnp.fromstring": [[123, "dpnp-fromstring"]], "dpnp.full": [[124, "dpnp-full"]], "dpnp.full_like": [[125, "dpnp-full-like"]], "dpnp.geomspace": [[126, "dpnp-geomspace"]], "dpnp.get_include": [[127, "dpnp-get-include"]], "dpnp.gradient": [[128, "dpnp-gradient"]], "dpnp.greater": [[129, "dpnp-greater"]], "dpnp.greater_equal": [[130, "dpnp-greater-equal"]], "dpnp.histogram": [[131, "dpnp-histogram"]], "dpnp.hstack": [[132, "dpnp-hstack"]], "dpnp.hypot": [[133, "dpnp-hypot"]], "dpnp.identity": [[134, "dpnp-identity"]], "dpnp.indices": [[135, "dpnp-indices"]], "dpnp.inner": [[136, "dpnp-inner"]], "dpnp.invert": [[137, "dpnp-invert"]], "dpnp.isclose": [[138, "dpnp-isclose"]], "dpnp.isfinite": [[139, "dpnp-isfinite"]], "dpnp.isinf": [[140, "dpnp-isinf"]], "dpnp.isnan": [[141, "dpnp-isnan"]], "dpnp.isscalar": [[142, "dpnp-isscalar"]], "dpnp.issubdtype": [[143, "dpnp-issubdtype"]], "dpnp.issubsctype": [[144, "dpnp-issubsctype"]], "dpnp.kron": [[145, "dpnp-kron"]], "dpnp.left_shift": [[146, "dpnp-left-shift"]], "dpnp.less": [[147, "dpnp-less"]], "dpnp.less_equal": [[148, "dpnp-less-equal"]], "dpnp.linalg.cholesky": [[149, "dpnp-linalg-cholesky"]], "dpnp.linalg.cond": [[150, "dpnp-linalg-cond"]], "dpnp.linalg.det": [[151, "dpnp-linalg-det"]], "dpnp.linalg.eig": [[152, "dpnp-linalg-eig"]], "dpnp.linalg.eigh": [[153, "dpnp-linalg-eigh"]], "dpnp.linalg.eigvals": [[154, "dpnp-linalg-eigvals"]], "dpnp.linalg.inv": [[155, "dpnp-linalg-inv"]], "dpnp.linalg.matrix_power": [[156, "dpnp-linalg-matrix-power"]], "dpnp.linalg.matrix_rank": [[157, "dpnp-linalg-matrix-rank"]], "dpnp.linalg.multi_dot": [[158, "dpnp-linalg-multi-dot"]], "dpnp.linalg.norm": [[159, "dpnp-linalg-norm"]], "dpnp.linalg.qr": [[160, "dpnp-linalg-qr"]], "dpnp.linalg.svd": [[161, "dpnp-linalg-svd"]], "dpnp.linspace": [[162, "dpnp-linspace"]], "dpnp.loadtxt": [[163, "dpnp-loadtxt"]], "dpnp.log": [[164, "dpnp-log"]], "dpnp.log10": [[165, "dpnp-log10"]], "dpnp.log1p": [[166, "dpnp-log1p"]], "dpnp.log2": [[167, "dpnp-log2"]], "dpnp.logical_and": [[168, "dpnp-logical-and"]], "dpnp.logical_not": [[169, "dpnp-logical-not"]], "dpnp.logical_or": [[170, "dpnp-logical-or"]], "dpnp.logical_xor": [[171, "dpnp-logical-xor"]], "dpnp.logspace": [[172, "dpnp-logspace"]], "dpnp.matmul": [[173, "dpnp-matmul"]], "dpnp.max": [[174, "dpnp-max"]], "dpnp.maximum": [[175, "dpnp-maximum"]], "dpnp.mean": [[176, "dpnp-mean"]], "dpnp.median": [[177, "dpnp-median"]], "dpnp.meshgrid": [[178, "dpnp-meshgrid"]], "dpnp.mgrid": [[179, "dpnp-mgrid"]], "dpnp.min": [[180, "dpnp-min"]], "dpnp.minimum": [[181, "dpnp-minimum"]], "dpnp.mod": [[182, "dpnp-mod"]], "dpnp.modf": [[183, "dpnp-modf"]], "dpnp.moveaxis": [[184, "dpnp-moveaxis"]], "dpnp.multiply": [[185, "dpnp-multiply"]], "dpnp.nancumprod": [[186, "dpnp-nancumprod"]], "dpnp.nancumsum": [[187, "dpnp-nancumsum"]], "dpnp.nanprod": [[188, "dpnp-nanprod"]], "dpnp.nansum": [[189, "dpnp-nansum"]], "dpnp.nanvar": [[190, "dpnp-nanvar"]], "dpnp.ndarray": [[191, "dpnp-ndarray"]], "dpnp.ndarray.T": [[192, "dpnp-ndarray-t"]], "dpnp.ndarray.__abs__": [[193, "dpnp-ndarray-abs"]], "dpnp.ndarray.__add__": [[194, "dpnp-ndarray-add"]], "dpnp.ndarray.__and__": [[195, "dpnp-ndarray-and"]], "dpnp.ndarray.__complex__": [[196, "dpnp-ndarray-complex"]], "dpnp.ndarray.__eq__": [[197, "dpnp-ndarray-eq"]], "dpnp.ndarray.__float__": [[198, "dpnp-ndarray-float"]], "dpnp.ndarray.__ge__": [[199, "dpnp-ndarray-ge"]], "dpnp.ndarray.__getitem__": [[200, "dpnp-ndarray-getitem"]], "dpnp.ndarray.__gt__": [[201, "dpnp-ndarray-gt"]], "dpnp.ndarray.__iadd__": [[202, "dpnp-ndarray-iadd"]], "dpnp.ndarray.__iand__": [[203, "dpnp-ndarray-iand"]], "dpnp.ndarray.__ilshift__": [[204, "dpnp-ndarray-ilshift"]], "dpnp.ndarray.__imul__": [[205, "dpnp-ndarray-imul"]], "dpnp.ndarray.__int__": [[206, "dpnp-ndarray-int"]], "dpnp.ndarray.__invert__": [[207, "dpnp-ndarray-invert"]], "dpnp.ndarray.__ior__": [[208, "dpnp-ndarray-ior"]], "dpnp.ndarray.__ipow__": [[209, "dpnp-ndarray-ipow"]], "dpnp.ndarray.__irshift__": [[210, "dpnp-ndarray-irshift"]], "dpnp.ndarray.__isub__": [[211, "dpnp-ndarray-isub"]], "dpnp.ndarray.__itruediv__": [[212, "dpnp-ndarray-itruediv"]], "dpnp.ndarray.__ixor__": [[213, "dpnp-ndarray-ixor"]], "dpnp.ndarray.__le__": [[214, "dpnp-ndarray-le"]], "dpnp.ndarray.__len__": [[215, "dpnp-ndarray-len"]], "dpnp.ndarray.__lshift__": [[216, "dpnp-ndarray-lshift"]], "dpnp.ndarray.__lt__": [[217, "dpnp-ndarray-lt"]], "dpnp.ndarray.__mod__": [[218, "dpnp-ndarray-mod"]], "dpnp.ndarray.__mul__": [[219, "dpnp-ndarray-mul"]], "dpnp.ndarray.__ne__": [[220, "dpnp-ndarray-ne"]], "dpnp.ndarray.__neg__": [[221, "dpnp-ndarray-neg"]], "dpnp.ndarray.__new__": [[222, "dpnp-ndarray-new"]], "dpnp.ndarray.__or__": [[223, "dpnp-ndarray-or"]], "dpnp.ndarray.__pow__": [[224, "dpnp-ndarray-pow"]], "dpnp.ndarray.__repr__": [[225, "dpnp-ndarray-repr"]], "dpnp.ndarray.__rshift__": [[226, "dpnp-ndarray-rshift"]], "dpnp.ndarray.__setitem__": [[227, "dpnp-ndarray-setitem"]], "dpnp.ndarray.__str__": [[228, "dpnp-ndarray-str"]], "dpnp.ndarray.__sub__": [[229, "dpnp-ndarray-sub"]], "dpnp.ndarray.__truediv__": [[230, "dpnp-ndarray-truediv"]], "dpnp.ndarray.__xor__": [[231, "dpnp-ndarray-xor"]], "dpnp.ndarray.all": [[232, "dpnp-ndarray-all"]], "dpnp.ndarray.any": [[233, "dpnp-ndarray-any"]], "dpnp.ndarray.argmax": [[234, "dpnp-ndarray-argmax"]], "dpnp.ndarray.argmin": [[235, "dpnp-ndarray-argmin"]], "dpnp.ndarray.argsort": [[236, "dpnp-ndarray-argsort"]], "dpnp.ndarray.astype": [[237, "dpnp-ndarray-astype"]], "dpnp.ndarray.choose": [[238, "dpnp-ndarray-choose"]], "dpnp.ndarray.conj": [[239, "dpnp-ndarray-conj"]], "dpnp.ndarray.conjugate": [[240, "dpnp-ndarray-conjugate"]], "dpnp.ndarray.cumsum": [[241, "dpnp-ndarray-cumsum"]], "dpnp.ndarray.diagonal": [[242, "dpnp-ndarray-diagonal"]], "dpnp.ndarray.dtype": [[243, "dpnp-ndarray-dtype"]], "dpnp.ndarray.fill": [[244, "dpnp-ndarray-fill"]], "dpnp.ndarray.flags": [[245, "dpnp-ndarray-flags"]], "dpnp.ndarray.flat": [[246, "dpnp-ndarray-flat"]], "dpnp.ndarray.flatten": [[247, "dpnp-ndarray-flatten"]], "dpnp.ndarray.item": [[248, "dpnp-ndarray-item"]], "dpnp.ndarray.itemsize": [[249, "dpnp-ndarray-itemsize"]], "dpnp.ndarray.max": [[250, "dpnp-ndarray-max"]], "dpnp.ndarray.mean": [[251, "dpnp-ndarray-mean"]], "dpnp.ndarray.min": [[252, "dpnp-ndarray-min"]], "dpnp.ndarray.nbytes": [[253, "dpnp-ndarray-nbytes"]], "dpnp.ndarray.ndim": [[254, "dpnp-ndarray-ndim"]], "dpnp.ndarray.nonzero": [[255, "dpnp-ndarray-nonzero"]], "dpnp.ndarray.partition": [[256, "dpnp-ndarray-partition"]], "dpnp.ndarray.prod": [[257, "dpnp-ndarray-prod"]], "dpnp.ndarray.reshape": [[258, "dpnp-ndarray-reshape"]], "dpnp.ndarray.round": [[259, "dpnp-ndarray-round"]], "dpnp.ndarray.shape": [[260, "dpnp-ndarray-shape"]], "dpnp.ndarray.size": [[261, "dpnp-ndarray-size"]], "dpnp.ndarray.squeeze": [[262, "dpnp-ndarray-squeeze"]], "dpnp.ndarray.std": [[263, "dpnp-ndarray-std"]], "dpnp.ndarray.strides": [[264, "dpnp-ndarray-strides"]], "dpnp.ndarray.sum": [[265, "dpnp-ndarray-sum"]], "dpnp.ndarray.swapaxes": [[266, "dpnp-ndarray-swapaxes"]], "dpnp.ndarray.take": [[267, "dpnp-ndarray-take"]], "dpnp.ndarray.transpose": [[268, "dpnp-ndarray-transpose"]], "dpnp.ndarray.var": [[269, "dpnp-ndarray-var"]], "dpnp.negative": [[270, "dpnp-negative"]], "dpnp.nonzero": [[271, "dpnp-nonzero"]], "dpnp.not_equal": [[272, "dpnp-not-equal"]], "dpnp.ogrid": [[273, "dpnp-ogrid"]], "dpnp.ones": [[274, "dpnp-ones"]], "dpnp.ones_like": [[275, "dpnp-ones-like"]], "dpnp.outer": [[276, "dpnp-outer"]], "dpnp.partition": [[277, "dpnp-partition"]], "dpnp.place": [[278, "dpnp-place"]], "dpnp.power": [[279, "dpnp-power"]], "dpnp.prod": [[280, "dpnp-prod"]], "dpnp.ptp": [[281, "dpnp-ptp"]], "dpnp.put": [[282, "dpnp-put"]], "dpnp.put_along_axis": [[283, "dpnp-put-along-axis"]], "dpnp.putmask": [[284, "dpnp-putmask"]], "dpnp.rad2deg": [[285, "dpnp-rad2deg"]], "dpnp.radians": [[286, "dpnp-radians"]], "dpnp.random.RandomState": [[287, "dpnp-random-randomstate"]], "dpnp.random.beta": [[288, "dpnp-random-beta"]], "dpnp.random.binomial": [[289, "dpnp-random-binomial"]], "dpnp.random.bytes": [[290, "dpnp-random-bytes"]], "dpnp.random.chisquare": [[291, "dpnp-random-chisquare"]], "dpnp.random.choice": [[292, "dpnp-random-choice"]], "dpnp.random.dirichlet": [[293, "dpnp-random-dirichlet"]], "dpnp.random.exponential": [[294, "dpnp-random-exponential"]], "dpnp.random.f": [[295, "dpnp-random-f"]], "dpnp.random.gamma": [[296, "dpnp-random-gamma"]], "dpnp.random.geometric": [[297, "dpnp-random-geometric"]], "dpnp.random.gumbel": [[298, "dpnp-random-gumbel"]], "dpnp.random.hypergeometric": [[299, "dpnp-random-hypergeometric"]], "dpnp.random.laplace": [[300, "dpnp-random-laplace"]], "dpnp.random.logistic": [[301, "dpnp-random-logistic"]], "dpnp.random.lognormal": [[302, "dpnp-random-lognormal"]], "dpnp.random.logseries": [[303, "dpnp-random-logseries"]], "dpnp.random.multinomial": [[304, "dpnp-random-multinomial"]], "dpnp.random.multivariate_normal": [[305, "dpnp-random-multivariate-normal"]], "dpnp.random.negative_binomial": [[306, "dpnp-random-negative-binomial"]], "dpnp.random.noncentral_chisquare": [[307, "dpnp-random-noncentral-chisquare"]], "dpnp.random.noncentral_f": [[308, "dpnp-random-noncentral-f"]], "dpnp.random.normal": [[309, "dpnp-random-normal"]], "dpnp.random.pareto": [[310, "dpnp-random-pareto"]], "dpnp.random.permutation": [[311, "dpnp-random-permutation"]], "dpnp.random.poisson": [[312, "dpnp-random-poisson"]], "dpnp.random.power": [[313, "dpnp-random-power"]], "dpnp.random.rand": [[314, "dpnp-random-rand"]], "dpnp.random.randint": [[315, "dpnp-random-randint"]], "dpnp.random.randn": [[316, "dpnp-random-randn"]], "dpnp.random.random": [[317, "dpnp-random-random"]], "dpnp.random.random_integers": [[318, "dpnp-random-random-integers"]], "dpnp.random.random_sample": [[319, "dpnp-random-random-sample"]], "dpnp.random.ranf": [[320, "dpnp-random-ranf"]], "dpnp.random.rayleigh": [[321, "dpnp-random-rayleigh"]], "dpnp.random.sample": [[322, "dpnp-random-sample"]], "dpnp.random.seed": [[323, "dpnp-random-seed"]], "dpnp.random.shuffle": [[324, "dpnp-random-shuffle"]], "dpnp.random.standard_cauchy": [[325, "dpnp-random-standard-cauchy"]], "dpnp.random.standard_exponential": [[326, "dpnp-random-standard-exponential"]], "dpnp.random.standard_gamma": [[327, "dpnp-random-standard-gamma"]], "dpnp.random.standard_normal": [[328, "dpnp-random-standard-normal"]], "dpnp.random.standard_t": [[329, "dpnp-random-standard-t"]], "dpnp.random.triangular": [[330, "dpnp-random-triangular"]], "dpnp.random.uniform": [[331, "dpnp-random-uniform"]], "dpnp.random.vonmises": [[332, "dpnp-random-vonmises"]], "dpnp.random.wald": [[333, "dpnp-random-wald"]], "dpnp.random.weibull": [[334, "dpnp-random-weibull"]], "dpnp.random.zipf": [[335, "dpnp-random-zipf"]], "dpnp.ravel": [[336, "dpnp-ravel"]], "dpnp.reciprocal": [[337, "dpnp-reciprocal"]], "dpnp.remainder": [[338, "dpnp-remainder"]], "dpnp.repeat": [[339, "dpnp-repeat"]], "dpnp.reshape": [[340, "dpnp-reshape"]], "dpnp.result_type": [[341, "dpnp-result-type"]], "dpnp.right_shift": [[342, "dpnp-right-shift"]], "dpnp.rollaxis": [[343, "dpnp-rollaxis"]], "dpnp.searchsorted": [[344, "dpnp-searchsorted"]], "dpnp.select": [[345, "dpnp-select"]], "dpnp.shape": [[346, "dpnp-shape"]], "dpnp.sign": [[347, "dpnp-sign"]], "dpnp.sin": [[348, "dpnp-sin"]], "dpnp.sinh": [[349, "dpnp-sinh"]], "dpnp.sort": [[350, "dpnp-sort"]], "dpnp.sqrt": [[351, "dpnp-sqrt"]], "dpnp.square": [[352, "dpnp-square"]], "dpnp.squeeze": [[353, "dpnp-squeeze"]], "dpnp.stack": [[354, "dpnp-stack"]], "dpnp.std": [[355, "dpnp-std"]], "dpnp.subtract": [[356, "dpnp-subtract"]], "dpnp.sum": [[357, "dpnp-sum"]], "dpnp.swapaxes": [[358, "dpnp-swapaxes"]], "dpnp.take": [[359, "dpnp-take"]], "dpnp.take_along_axis": [[360, "dpnp-take-along-axis"]], "dpnp.tan": [[361, "dpnp-tan"]], "dpnp.tanh": [[362, "dpnp-tanh"]], "dpnp.tensordot": [[363, "dpnp-tensordot"]], "dpnp.trace": [[364, "dpnp-trace"]], "dpnp.transpose": [[365, "dpnp-transpose"]], "dpnp.trapz": [[366, "dpnp-trapz"]], "dpnp.tri": [[367, "dpnp-tri"]], "dpnp.tril": [[368, "dpnp-tril"]], "dpnp.tril_indices": [[369, "dpnp-tril-indices"]], "dpnp.tril_indices_from": [[370, "dpnp-tril-indices-from"]], "dpnp.triu": [[371, "dpnp-triu"]], "dpnp.triu_indices": [[372, "dpnp-triu-indices"]], "dpnp.triu_indices_from": [[373, "dpnp-triu-indices-from"]], "dpnp.true_divide": [[374, "dpnp-true-divide"]], "dpnp.trunc": [[375, "dpnp-trunc"]], "dpnp.unique": [[376, "dpnp-unique"]], "dpnp.unwrap": [[377, "dpnp-unwrap"]], "dpnp.vander": [[378, "dpnp-vander"]], "dpnp.var": [[379, "dpnp-var"]], "dpnp.vdot": [[380, "dpnp-vdot"]], "dpnp.vstack": [[381, "dpnp-vstack"]], "dpnp.where": [[382, "dpnp-where"]], "dpnp.zeros": [[383, "dpnp-zeros"]], "dpnp.zeros_like": [[384, "dpnp-zeros-like"]], "API Reference": [[385, "api-reference"]], "Array Indexing Routines": [[386, "array-indexing-routines"]], "Generating index arrays": [[386, "generating-index-arrays"]], "Indexing-like operations": [[386, "indexing-like-operations"]], "Inserting data into arrays": [[386, "inserting-data-into-arrays"]], "Iterating over arrays": [[386, "iterating-over-arrays"]], "Matrix and vector products": [[387, "matrix-and-vector-products"]], "Decompositions": [[387, "decompositions"]], "Matrix eigenvalues": [[387, "matrix-eigenvalues"]], "Norms and other numbers": [[387, "norms-and-other-numbers"]], "Solving linear equations": [[387, "solving-linear-equations"]], "Logic Functions": [[388, "logic-functions"]], "Truth value testing": [[388, "truth-value-testing"]], "Infinities and NaNs": [[388, "infinities-and-nans"]], "Array type testing": [[388, "array-type-testing"]], "Logic operations": [[388, "logic-operations"]], "Comparison": [[388, "comparison"]], "Array Manipulation Routines": [[389, "array-manipulation-routines"]], "Basic operations": [[389, "basic-operations"]], "Changing array shape": [[389, "changing-array-shape"]], "Transpose-like operations": [[389, "transpose-like-operations"]], "Changing number of dimensions": [[389, "changing-number-of-dimensions"]], "Changing kind of array": [[389, "changing-kind-of-array"]], "Joining arrays": [[389, "joining-arrays"]], "Splitting arrays": [[389, "splitting-arrays"]], "Tiling arrays": [[389, "tiling-arrays"]], "Adding and removing elements": [[389, "adding-and-removing-elements"]], "Rearranging elements": [[389, "rearranging-elements"]], "Mathematical Functions": [[390, "mathematical-functions"]], "Trigonometric functions": [[390, "trigonometric-functions"], [400, "trigonometric-functions"]], "Hyperbolic functions": [[390, "hyperbolic-functions"]], "Rounding": [[390, "rounding"]], "Sums, products, differences": [[390, "sums-products-differences"]], "Exponents and logarithms": [[390, "exponents-and-logarithms"]], "Other special functions": [[390, "other-special-functions"]], "Floating point routines": [[390, "floating-point-routines"]], "Rational routines": [[390, "rational-routines"]], "Arithmetic operations": [[390, "arithmetic-operations"]], "Handling complex numbers": [[390, "handling-complex-numbers"]], "Extrema Finding": [[390, "extrema-finding"]], "Miscellaneous routines": [[391, "miscellaneous-routines"]], "Utility": [[391, "utility"]], "Multi-Dimensional Array (ndarray)": [[392, "multi-dimensional-array-ndarray"]], "Constructing arrays": [[392, "constructing-arrays"]], "Indexing arrays": [[392, "indexing-arrays"]], "Array attributes": [[392, "array-attributes"]], "Memory layout": [[392, "memory-layout"]], "Data type": [[392, "data-type"]], "Other attributes": [[392, "other-attributes"]], "Array methods": [[392, "array-methods"]], "Array conversion": [[392, "array-conversion"]], "Shape manipulation": [[392, "shape-manipulation"]], "Item selection and manipulation": [[392, "item-selection-and-manipulation"]], "Calculation": [[392, "calculation"]], "Arithmetic, matrix multiplication, and comparison operations": [[392, "arithmetic-matrix-multiplication-and-comparison-operations"]], "Special methods": [[392, "special-methods"]], "Padding": [[393, "padding"]], "Polynomials": [[394, "polynomials"]], "Polynomial Package": [[394, "polynomial-package"]], "Polynomial Module": [[394, "polynomial-module"]], "Polyutils": [[394, "polyutils"]], "Poly1d": [[394, "poly1d"]], "Basics": [[394, "basics"]], "Arithmetic": [[394, "arithmetic"]], "Random Sampling (dpnp.random)": [[395, "random-sampling-dpnp-random"]], "Simple random data": [[395, "simple-random-data"]], "Permutations": [[395, "permutations"]], "Distributions": [[395, "distributions"]], "Random generator": [[395, "random-generator"]], "Routines": [[396, "routines"]], "Sorting, Searching, and Counting": [[397, "sorting-searching-and-counting"]], "Sorting": [[397, "sorting"]], "Searching": [[397, "searching"]], "Counting": [[397, "counting"]], "Special Functions": [[398, "special-functions"]], "Error Function": [[398, "error-function"]], "Statistical Functions": [[399, "statistical-functions"]], "Order statistics": [[399, "order-statistics"]], "Averages and variances": [[399, "averages-and-variances"]], "Histograms": [[399, "histograms"]], "Correlations": [[399, "correlations"]], "Universal Functions (ufunc)": [[400, "universal-functions-ufunc"]], "Available ufuncs": [[400, "available-ufuncs"]], "Math operations": [[400, "math-operations"]], "Bit-twiddling functions": [[400, "bit-twiddling-functions"]], "Comparison functions": [[400, "comparison-functions"]], "Floating functions": [[400, "floating-functions"]]}, "indexentries": {"dpnp": [[2, "module-dpnp"], [3, "module-dpnp"]], "module": [[2, "module-dpnp"], [3, "module-dpnp"], [10, "module-dpnp.fft"], [395, "module-dpnp.random"]], "dpnp.fft": [[10, "module-dpnp.fft"]], "abs() (in module dpnp)": [[11, "dpnp.abs"]], "absolute() (in module dpnp)": [[12, "dpnp.absolute"]], "add() (in module dpnp)": [[13, "dpnp.add"]], "all() (in module dpnp)": [[14, "dpnp.all"]], "allclose() (in module dpnp)": [[15, "dpnp.allclose"]], "amax() (in module dpnp)": [[16, "dpnp.amax"]], "amin() (in module dpnp)": [[17, "dpnp.amin"]], "any() (in module dpnp)": [[18, "dpnp.any"]], "arange() (in module dpnp)": [[19, "dpnp.arange"]], "arccos() (in module dpnp)": [[20, "dpnp.arccos"]], "arccosh() (in module dpnp)": [[21, "dpnp.arccosh"]], "arcsin() (in module dpnp)": [[22, "dpnp.arcsin"]], "arcsinh() (in module dpnp)": [[23, "dpnp.arcsinh"]], "arctan() (in module dpnp)": [[24, "dpnp.arctan"]], "arctan2() (in module dpnp)": [[25, "dpnp.arctan2"]], "arctanh() (in module dpnp)": [[26, "dpnp.arctanh"]], "argmax() (in module dpnp)": [[27, "dpnp.argmax"]], "argmin() (in module dpnp)": [[28, "dpnp.argmin"]], "argsort() (in module dpnp)": [[29, "dpnp.argsort"]], "around() (in module dpnp)": [[30, "dpnp.around"]], "array() (in module dpnp)": [[31, "dpnp.array"]], "array_equal() (in module dpnp)": [[32, "dpnp.array_equal"]], "asanyarray() (in module dpnp)": [[33, "dpnp.asanyarray"]], "asarray() (in module dpnp)": [[34, "dpnp.asarray"]], "ascontiguousarray() (in module dpnp)": [[35, "dpnp.ascontiguousarray"]], "asfarray() (in module dpnp)": [[36, "dpnp.asfarray"]], "asfortranarray() (in module dpnp)": [[37, "dpnp.asfortranarray"]], "asnumpy() (in module dpnp)": [[38, "dpnp.asnumpy"]], "atleast_1d() (in module dpnp)": [[39, "dpnp.atleast_1d"]], "atleast_2d() (in module dpnp)": [[40, "dpnp.atleast_2d"]], "atleast_3d() (in module dpnp)": [[41, "dpnp.atleast_3d"]], "average() (in module dpnp)": [[42, "dpnp.average"]], "bincount() (in module dpnp)": [[43, "dpnp.bincount"]], "bitwise_and() (in module dpnp)": [[44, "dpnp.bitwise_and"]], "bitwise_not() (in module dpnp)": [[45, "dpnp.bitwise_not"]], "bitwise_or() (in module dpnp)": [[46, "dpnp.bitwise_or"]], "bitwise_xor() (in module dpnp)": [[47, "dpnp.bitwise_xor"]], "broadcast_to() (in module dpnp)": [[48, "dpnp.broadcast_to"]], "cbrt() (in module dpnp)": [[49, "dpnp.cbrt"]], "ceil() (in module dpnp)": [[50, "dpnp.ceil"]], "choose() (in module dpnp)": [[51, "dpnp.choose"]], "concatenate() (in module dpnp)": [[52, "dpnp.concatenate"]], "conj() (in module dpnp)": [[53, "dpnp.conj"]], "conjugate() (in module dpnp)": [[54, "dpnp.conjugate"]], "convolve() (in module dpnp)": [[55, "dpnp.convolve"]], "copy() (in module dpnp)": [[56, "dpnp.copy"]], "copysign() (in module dpnp)": [[57, "dpnp.copysign"]], "copyto() (in module dpnp)": [[58, "dpnp.copyto"]], "correlate() (in module dpnp)": [[59, "dpnp.correlate"]], "cos() (in module dpnp)": [[60, "dpnp.cos"]], "cosh() (in module dpnp)": [[61, "dpnp.cosh"]], "count_nonzero() (in module dpnp)": [[62, "dpnp.count_nonzero"]], "cov() (in module dpnp)": [[63, "dpnp.cov"]], "cross() (in module dpnp)": [[64, "dpnp.cross"]], "cumprod() (in module dpnp)": [[65, "dpnp.cumprod"]], "cumsum() (in module dpnp)": [[66, "dpnp.cumsum"]], "deg2rad() (in module dpnp)": [[67, "dpnp.deg2rad"]], "degrees() (in module dpnp)": [[68, "dpnp.degrees"]], "diag() (in module dpnp)": [[69, "dpnp.diag"]], "diag_indices() (in module dpnp)": [[70, "dpnp.diag_indices"]], "diag_indices_from() (in module dpnp)": [[71, "dpnp.diag_indices_from"]], "diagflat() (in module dpnp)": [[72, "dpnp.diagflat"]], "diagonal() (in module dpnp)": [[73, "dpnp.diagonal"]], "diff() (in module dpnp)": [[74, "dpnp.diff"]], "divide() (in module dpnp)": [[75, "dpnp.divide"]], "dot() (in module dpnp)": [[76, "dpnp.dot"]], "t (dpnp.dpnp_array.dpnp_array attribute)": [[77, "dpnp.dpnp_array.dpnp_array.T"]], "__eq__() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.__eq__"]], "__ge__() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.__ge__"]], "__getitem__() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.__getitem__"]], "__gt__() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.__gt__"]], "__le__() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.__le__"]], "__len__() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.__len__"]], "__lt__() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.__lt__"]], "__ne__() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.__ne__"]], "__setitem__() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.__setitem__"]], "all() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.all"]], "any() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.any"]], "argmax() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.argmax"]], "argmin() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.argmin"]], "argsort() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.argsort"]], "asnumpy() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.asnumpy"]], "astype() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.astype"]], "choose() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.choose"]], "conj() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.conj"]], "conjugate() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.conjugate"]], "cumsum() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.cumsum"]], "device (dpnp.dpnp_array.dpnp_array attribute)": [[77, "dpnp.dpnp_array.dpnp_array.device"]], "diagonal() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.diagonal"]], "dot() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.dot"]], "dpnp_array (class in dpnp.dpnp_array)": [[77, "dpnp.dpnp_array.dpnp_array"]], "dtype (dpnp.dpnp_array.dpnp_array attribute)": [[77, "dpnp.dpnp_array.dpnp_array.dtype"]], "fill() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.fill"]], "flags (dpnp.dpnp_array.dpnp_array attribute)": [[77, "dpnp.dpnp_array.dpnp_array.flags"]], "flat (dpnp.dpnp_array.dpnp_array attribute)": [[77, "dpnp.dpnp_array.dpnp_array.flat"]], "flatten() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.flatten"]], "get_array() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.get_array"]], "item() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.item"]], "itemsize (dpnp.dpnp_array.dpnp_array attribute)": [[77, "dpnp.dpnp_array.dpnp_array.itemsize"]], "max() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.max"]], "mean() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.mean"]], "min() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.min"]], "nbytes (dpnp.dpnp_array.dpnp_array attribute)": [[77, "dpnp.dpnp_array.dpnp_array.nbytes"]], "ndim (dpnp.dpnp_array.dpnp_array attribute)": [[77, "dpnp.dpnp_array.dpnp_array.ndim"]], "nonzero() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.nonzero"]], "partition() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.partition"]], "prod() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.prod"]], "reshape() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.reshape"]], "round() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.round"]], "shape (dpnp.dpnp_array.dpnp_array attribute)": [[77, "dpnp.dpnp_array.dpnp_array.shape"]], "size (dpnp.dpnp_array.dpnp_array attribute)": [[77, "dpnp.dpnp_array.dpnp_array.size"]], "squeeze() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.squeeze"]], "std() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.std"]], "strides (dpnp.dpnp_array.dpnp_array attribute)": [[77, "dpnp.dpnp_array.dpnp_array.strides"]], "sum() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.sum"]], "swapaxes() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.swapaxes"]], "sycl_context (dpnp.dpnp_array.dpnp_array attribute)": [[77, "dpnp.dpnp_array.dpnp_array.sycl_context"]], "sycl_device (dpnp.dpnp_array.dpnp_array attribute)": [[77, "dpnp.dpnp_array.dpnp_array.sycl_device"]], "sycl_queue (dpnp.dpnp_array.dpnp_array attribute)": [[77, "dpnp.dpnp_array.dpnp_array.sycl_queue"]], "take() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.take"]], "to_device() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.to_device"]], "transpose() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.transpose"]], "usm_type (dpnp.dpnp_array.dpnp_array attribute)": [[77, "dpnp.dpnp_array.dpnp_array.usm_type"]], "var() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.var"]], "__eq__() (dpnp.dtype method)": [[78, "dpnp.dtype.__eq__"]], "__ge__() (dpnp.dtype method)": [[78, "dpnp.dtype.__ge__"]], "__getitem__() (dpnp.dtype method)": [[78, "dpnp.dtype.__getitem__"]], "__gt__() (dpnp.dtype method)": [[78, "dpnp.dtype.__gt__"]], "__le__() (dpnp.dtype method)": [[78, "dpnp.dtype.__le__"]], "__len__() (dpnp.dtype method)": [[78, "dpnp.dtype.__len__"]], "__lt__() (dpnp.dtype method)": [[78, "dpnp.dtype.__lt__"]], "__ne__() (dpnp.dtype method)": [[78, "dpnp.dtype.__ne__"]], "alignment (dpnp.dtype attribute)": [[78, "dpnp.dtype.alignment"]], "base (dpnp.dtype attribute)": [[78, "dpnp.dtype.base"]], "byteorder (dpnp.dtype attribute)": [[78, "dpnp.dtype.byteorder"]], "char (dpnp.dtype attribute)": [[78, "dpnp.dtype.char"]], "descr (dpnp.dtype attribute)": [[78, "dpnp.dtype.descr"]], "dtype (class in dpnp)": [[78, "dpnp.dtype"]], "fields (dpnp.dtype attribute)": [[78, "dpnp.dtype.fields"]], "flags (dpnp.dtype attribute)": [[78, "dpnp.dtype.flags"]], "hasobject (dpnp.dtype attribute)": [[78, "dpnp.dtype.hasobject"]], "isalignedstruct (dpnp.dtype attribute)": [[78, "dpnp.dtype.isalignedstruct"]], "isbuiltin (dpnp.dtype attribute)": [[78, "dpnp.dtype.isbuiltin"]], "isnative (dpnp.dtype attribute)": [[78, "dpnp.dtype.isnative"]], "itemsize (dpnp.dtype attribute)": [[78, "dpnp.dtype.itemsize"]], "kind (dpnp.dtype attribute)": [[78, "dpnp.dtype.kind"]], "metadata (dpnp.dtype attribute)": [[78, "dpnp.dtype.metadata"]], "name (dpnp.dtype attribute)": [[78, "dpnp.dtype.name"]], "names (dpnp.dtype attribute)": [[78, "dpnp.dtype.names"]], "ndim (dpnp.dtype attribute)": [[78, "dpnp.dtype.ndim"]], "newbyteorder() (dpnp.dtype method)": [[78, "dpnp.dtype.newbyteorder"]], "num (dpnp.dtype attribute)": [[78, "dpnp.dtype.num"]], "shape (dpnp.dtype attribute)": [[78, "dpnp.dtype.shape"]], "str (dpnp.dtype attribute)": [[78, "dpnp.dtype.str"]], "subdtype (dpnp.dtype attribute)": [[78, "dpnp.dtype.subdtype"]], "type (dpnp.dtype attribute)": [[78, "dpnp.dtype.type"]], "ediff1d() (in module dpnp)": [[79, "dpnp.ediff1d"]], "einsum() (in module dpnp)": [[80, "dpnp.einsum"]], "einsum_path() (in module dpnp)": [[81, "dpnp.einsum_path"]], "empty() (in module dpnp)": [[82, "dpnp.empty"]], "empty_like() (in module dpnp)": [[83, "dpnp.empty_like"]], "equal() (in module dpnp)": [[84, "dpnp.equal"]], "erf() (in module dpnp)": [[85, "dpnp.erf"]], "exp() (in module dpnp)": [[86, "dpnp.exp"]], "exp2() (in module dpnp)": [[87, "dpnp.exp2"]], "expand_dims() (in module dpnp)": [[88, "dpnp.expand_dims"]], "expm1() (in module dpnp)": [[89, "dpnp.expm1"]], "extract() (in module dpnp)": [[90, "dpnp.extract"]], "eye() (in module dpnp)": [[91, "dpnp.eye"]], "fabs() (in module dpnp)": [[92, "dpnp.fabs"]], "fft() (in module dpnp.fft)": [[93, "dpnp.fft.fft"]], "fft2() (in module dpnp.fft)": [[94, "dpnp.fft.fft2"]], "fftfreq() (in module dpnp.fft)": [[95, "dpnp.fft.fftfreq"]], "fftn() (in module dpnp.fft)": [[96, "dpnp.fft.fftn"]], "fftshift() (in module dpnp.fft)": [[97, "dpnp.fft.fftshift"]], "hfft() (in module dpnp.fft)": [[98, "dpnp.fft.hfft"]], "ifft() (in module dpnp.fft)": [[99, "dpnp.fft.ifft"]], "ifft2() (in module dpnp.fft)": [[100, "dpnp.fft.ifft2"]], "ifftn() (in module dpnp.fft)": [[101, "dpnp.fft.ifftn"]], "ifftshift() (in module dpnp.fft)": [[102, "dpnp.fft.ifftshift"]], "ihfft() (in module dpnp.fft)": [[103, "dpnp.fft.ihfft"]], "irfft() (in module dpnp.fft)": [[104, "dpnp.fft.irfft"]], "irfft2() (in module dpnp.fft)": [[105, "dpnp.fft.irfft2"]], "irfftn() (in module dpnp.fft)": [[106, "dpnp.fft.irfftn"]], "rfft() (in module dpnp.fft)": [[107, "dpnp.fft.rfft"]], "rfft2() (in module dpnp.fft)": [[108, "dpnp.fft.rfft2"]], "rfftfreq() (in module dpnp.fft)": [[109, "dpnp.fft.rfftfreq"]], "rfftn() (in module dpnp.fft)": [[110, "dpnp.fft.rfftn"]], "fill_diagonal() (in module dpnp)": [[111, "dpnp.fill_diagonal"]], "__eq__() (dpnp.flatiter method)": [[112, "dpnp.flatiter.__eq__"]], "__ge__() (dpnp.flatiter method)": [[112, "dpnp.flatiter.__ge__"]], "__getitem__() (dpnp.flatiter method)": [[112, "dpnp.flatiter.__getitem__"]], "__gt__() (dpnp.flatiter method)": [[112, "dpnp.flatiter.__gt__"]], "__iter__() (dpnp.flatiter method)": [[112, "dpnp.flatiter.__iter__"]], "__le__() (dpnp.flatiter method)": [[112, "dpnp.flatiter.__le__"]], "__lt__() (dpnp.flatiter method)": [[112, "dpnp.flatiter.__lt__"]], "__ne__() (dpnp.flatiter method)": [[112, "dpnp.flatiter.__ne__"]], "__next__() (dpnp.flatiter method)": [[112, "dpnp.flatiter.__next__"]], "__setitem__() (dpnp.flatiter method)": [[112, "dpnp.flatiter.__setitem__"]], "flatiter (class in dpnp)": [[112, "dpnp.flatiter"]], "floor() (in module dpnp)": [[113, "dpnp.floor"]], "floor_divide() (in module dpnp)": [[114, "dpnp.floor_divide"]], "fmax() (in module dpnp)": [[115, "dpnp.fmax"]], "fmin() (in module dpnp)": [[116, "dpnp.fmin"]], "fmod() (in module dpnp)": [[117, "dpnp.fmod"]], "from_dlpack() (in module dpnp)": [[118, "dpnp.from_dlpack"]], "frombuffer() (in module dpnp)": [[119, "dpnp.frombuffer"]], "fromfile() (in module dpnp)": [[120, "dpnp.fromfile"]], "fromfunction() (in module dpnp)": [[121, "dpnp.fromfunction"]], "fromiter() (in module dpnp)": [[122, "dpnp.fromiter"]], "fromstring() (in module dpnp)": [[123, "dpnp.fromstring"]], "full() (in module dpnp)": [[124, "dpnp.full"]], "full_like() (in module dpnp)": [[125, "dpnp.full_like"]], "geomspace() (in module dpnp)": [[126, "dpnp.geomspace"]], "get_include() (in module dpnp)": [[127, "dpnp.get_include"]], "gradient() (in module dpnp)": [[128, "dpnp.gradient"]], "greater() (in module dpnp)": [[129, "dpnp.greater"]], "greater_equal() (in module dpnp)": [[130, "dpnp.greater_equal"]], "histogram() (in module dpnp)": [[131, "dpnp.histogram"]], "hstack() (in module dpnp)": [[132, "dpnp.hstack"]], "hypot() (in module dpnp)": [[133, "dpnp.hypot"]], "identity() (in module dpnp)": [[134, "dpnp.identity"]], "indices() (in module dpnp)": [[135, "dpnp.indices"]], "inner() (in module dpnp)": [[136, "dpnp.inner"]], "invert() (in module dpnp)": [[137, "dpnp.invert"]], "isclose() (in module dpnp)": [[138, "dpnp.isclose"]], "isfinite() (in module dpnp)": [[139, "dpnp.isfinite"]], "isinf() (in module dpnp)": [[140, "dpnp.isinf"]], "isnan() (in module dpnp)": [[141, "dpnp.isnan"]], "isscalar() (in module dpnp)": [[142, "dpnp.isscalar"]], "issubdtype() (in module dpnp)": [[143, "dpnp.issubdtype"]], "issubsctype() (in module dpnp)": [[144, "dpnp.issubsctype"]], "kron() (in module dpnp)": [[145, "dpnp.kron"]], "left_shift() (in module dpnp)": [[146, "dpnp.left_shift"]], "less() (in module dpnp)": [[147, "dpnp.less"]], "less_equal() (in module dpnp)": [[148, "dpnp.less_equal"]], "cholesky() (in module dpnp.linalg)": [[149, "dpnp.linalg.cholesky"]], "cond() (in module dpnp.linalg)": [[150, "dpnp.linalg.cond"]], "det() (in module dpnp.linalg)": [[151, "dpnp.linalg.det"]], "eig() (in module dpnp.linalg)": [[152, "dpnp.linalg.eig"]], "eigh() (in module dpnp.linalg)": [[153, "dpnp.linalg.eigh"]], "eigvals() (in module dpnp.linalg)": [[154, "dpnp.linalg.eigvals"]], "inv() (in module dpnp.linalg)": [[155, "dpnp.linalg.inv"]], "matrix_power() (in module dpnp.linalg)": [[156, "dpnp.linalg.matrix_power"]], "matrix_rank() (in module dpnp.linalg)": [[157, "dpnp.linalg.matrix_rank"]], "multi_dot() (in module dpnp.linalg)": [[158, "dpnp.linalg.multi_dot"]], "norm() (in module dpnp.linalg)": [[159, "dpnp.linalg.norm"]], "qr() (in module dpnp.linalg)": [[160, "dpnp.linalg.qr"]], "svd() (in module dpnp.linalg)": [[161, "dpnp.linalg.svd"]], "linspace() (in module dpnp)": [[162, "dpnp.linspace"]], "loadtxt() (in module dpnp)": [[163, "dpnp.loadtxt"]], "log() (in module dpnp)": [[164, "dpnp.log"]], "log10() (in module dpnp)": [[165, "dpnp.log10"]], "log1p() (in module dpnp)": [[166, "dpnp.log1p"]], "log2() (in module dpnp)": [[167, "dpnp.log2"]], "logical_and() (in module dpnp)": [[168, "dpnp.logical_and"]], "logical_not() (in module dpnp)": [[169, "dpnp.logical_not"]], "logical_or() (in module dpnp)": [[170, "dpnp.logical_or"]], "logical_xor() (in module dpnp)": [[171, "dpnp.logical_xor"]], "logspace() (in module dpnp)": [[172, "dpnp.logspace"]], "matmul() (in module dpnp)": [[173, "dpnp.matmul"]], "max() (in module dpnp)": [[174, "dpnp.max"]], "maximum() (in module dpnp)": [[175, "dpnp.maximum"]], "mean() (in module dpnp)": [[176, "dpnp.mean"]], "median() (in module dpnp)": [[177, "dpnp.median"]], "meshgrid() (in module dpnp)": [[178, "dpnp.meshgrid"]], "mgrid (in module dpnp)": [[179, "dpnp.mgrid"]], "min() (in module dpnp)": [[180, "dpnp.min"]], "minimum() (in module dpnp)": [[181, "dpnp.minimum"]], "mod() (in module dpnp)": [[182, "dpnp.mod"]], "modf() (in module dpnp)": [[183, "dpnp.modf"]], "moveaxis() (in module dpnp)": [[184, "dpnp.moveaxis"]], "multiply() (in module dpnp)": [[185, "dpnp.multiply"]], "nancumprod() (in module dpnp)": [[186, "dpnp.nancumprod"]], "nancumsum() (in module dpnp)": [[187, "dpnp.nancumsum"]], "nanprod() (in module dpnp)": [[188, "dpnp.nanprod"]], "nansum() (in module dpnp)": [[189, "dpnp.nansum"]], "nanvar() (in module dpnp)": [[190, "dpnp.nanvar"]], "ndarray (in module dpnp)": [[191, "dpnp.ndarray"]], "t (dpnp.ndarray property)": [[192, "dpnp.ndarray.T"]], "__abs__() (dpnp.ndarray method)": [[193, "dpnp.ndarray.__abs__"]], "__add__() (dpnp.ndarray method)": [[194, "dpnp.ndarray.__add__"]], "__and__() (dpnp.ndarray method)": [[195, "dpnp.ndarray.__and__"]], "__complex__() (dpnp.ndarray method)": [[196, "dpnp.ndarray.__complex__"]], "__eq__() (dpnp.ndarray method)": [[197, "dpnp.ndarray.__eq__"]], "__float__() (dpnp.ndarray method)": [[198, "dpnp.ndarray.__float__"]], "__ge__() (dpnp.ndarray method)": [[199, "dpnp.ndarray.__ge__"]], "__getitem__() (dpnp.ndarray method)": [[200, "dpnp.ndarray.__getitem__"]], "__gt__() (dpnp.ndarray method)": [[201, "dpnp.ndarray.__gt__"]], "__iadd__() (dpnp.ndarray method)": [[202, "dpnp.ndarray.__iadd__"]], "__iand__() (dpnp.ndarray method)": [[203, "dpnp.ndarray.__iand__"]], "__ilshift__() (dpnp.ndarray method)": [[204, "dpnp.ndarray.__ilshift__"]], "__imul__() (dpnp.ndarray method)": [[205, "dpnp.ndarray.__imul__"]], "__int__() (dpnp.ndarray method)": [[206, "dpnp.ndarray.__int__"]], "__invert__() (dpnp.ndarray method)": [[207, "dpnp.ndarray.__invert__"]], "__ior__() (dpnp.ndarray method)": [[208, "dpnp.ndarray.__ior__"]], "__ipow__() (dpnp.ndarray method)": [[209, "dpnp.ndarray.__ipow__"]], "__irshift__() (dpnp.ndarray method)": [[210, "dpnp.ndarray.__irshift__"]], "__isub__() (dpnp.ndarray method)": [[211, "dpnp.ndarray.__isub__"]], "__itruediv__() (dpnp.ndarray method)": [[212, "dpnp.ndarray.__itruediv__"]], "__ixor__() (dpnp.ndarray method)": [[213, "dpnp.ndarray.__ixor__"]], "__le__() (dpnp.ndarray method)": [[214, "dpnp.ndarray.__le__"]], "__len__() (dpnp.ndarray method)": [[215, "dpnp.ndarray.__len__"]], "__lshift__() (dpnp.ndarray method)": [[216, "dpnp.ndarray.__lshift__"]], "__lt__() (dpnp.ndarray method)": [[217, "dpnp.ndarray.__lt__"]], "__mod__() (dpnp.ndarray method)": [[218, "dpnp.ndarray.__mod__"]], "__mul__() (dpnp.ndarray method)": [[219, "dpnp.ndarray.__mul__"]], "__ne__() (dpnp.ndarray method)": [[220, "dpnp.ndarray.__ne__"]], "__neg__() (dpnp.ndarray method)": [[221, "dpnp.ndarray.__neg__"]], "__new__() (dpnp.ndarray method)": [[222, "dpnp.ndarray.__new__"]], "__or__() (dpnp.ndarray method)": [[223, "dpnp.ndarray.__or__"]], "__pow__() (dpnp.ndarray method)": [[224, "dpnp.ndarray.__pow__"]], "__repr__() (dpnp.ndarray method)": [[225, "dpnp.ndarray.__repr__"]], "__rshift__() (dpnp.ndarray method)": [[226, "dpnp.ndarray.__rshift__"]], "__setitem__() (dpnp.ndarray method)": [[227, "dpnp.ndarray.__setitem__"]], "__str__() (dpnp.ndarray method)": [[228, "dpnp.ndarray.__str__"]], "__sub__() (dpnp.ndarray method)": [[229, "dpnp.ndarray.__sub__"]], "__truediv__() (dpnp.ndarray method)": [[230, "dpnp.ndarray.__truediv__"]], "__xor__() (dpnp.ndarray method)": [[231, "dpnp.ndarray.__xor__"]], "all() (dpnp.ndarray method)": [[232, "dpnp.ndarray.all"]], "any() (dpnp.ndarray method)": [[233, "dpnp.ndarray.any"]], "argmax() (dpnp.ndarray method)": [[234, "dpnp.ndarray.argmax"]], "argmin() (dpnp.ndarray method)": [[235, "dpnp.ndarray.argmin"]], "argsort() (dpnp.ndarray method)": [[236, "dpnp.ndarray.argsort"]], "astype() (dpnp.ndarray method)": [[237, "dpnp.ndarray.astype"]], "choose() (dpnp.ndarray method)": [[238, "dpnp.ndarray.choose"]], "conj() (dpnp.ndarray method)": [[239, "dpnp.ndarray.conj"]], "conjugate() (dpnp.ndarray method)": [[240, "dpnp.ndarray.conjugate"]], "cumsum() (dpnp.ndarray method)": [[241, "dpnp.ndarray.cumsum"]], "diagonal() (dpnp.ndarray method)": [[242, "dpnp.ndarray.diagonal"]], "dtype (dpnp.ndarray property)": [[243, "dpnp.ndarray.dtype"]], "fill() (dpnp.ndarray method)": [[244, "dpnp.ndarray.fill"]], "flags (dpnp.ndarray property)": [[245, "dpnp.ndarray.flags"]], "flat (dpnp.ndarray property)": [[246, "dpnp.ndarray.flat"]], "flatten() (dpnp.ndarray method)": [[247, "dpnp.ndarray.flatten"]], "item() (dpnp.ndarray method)": [[248, "dpnp.ndarray.item"]], "itemsize (dpnp.ndarray property)": [[249, "dpnp.ndarray.itemsize"]], "max() (dpnp.ndarray method)": [[250, "dpnp.ndarray.max"]], "mean() (dpnp.ndarray method)": [[251, "dpnp.ndarray.mean"]], "min() (dpnp.ndarray method)": [[252, "dpnp.ndarray.min"]], "nbytes (dpnp.ndarray property)": [[253, "dpnp.ndarray.nbytes"]], "ndim (dpnp.ndarray property)": [[254, "dpnp.ndarray.ndim"]], "nonzero() (dpnp.ndarray method)": [[255, "dpnp.ndarray.nonzero"]], "partition() (dpnp.ndarray method)": [[256, "dpnp.ndarray.partition"]], "prod() (dpnp.ndarray method)": [[257, "dpnp.ndarray.prod"]], "reshape() (dpnp.ndarray method)": [[258, "dpnp.ndarray.reshape"]], "round() (dpnp.ndarray method)": [[259, "dpnp.ndarray.round"]], "shape (dpnp.ndarray property)": [[260, "dpnp.ndarray.shape"]], "size (dpnp.ndarray property)": [[261, "dpnp.ndarray.size"]], "squeeze() (dpnp.ndarray method)": [[262, "dpnp.ndarray.squeeze"]], "std() (dpnp.ndarray method)": [[263, "dpnp.ndarray.std"]], "strides (dpnp.ndarray property)": [[264, "dpnp.ndarray.strides"]], "sum() (dpnp.ndarray method)": [[265, "dpnp.ndarray.sum"]], "swapaxes() (dpnp.ndarray method)": [[266, "dpnp.ndarray.swapaxes"]], "take() (dpnp.ndarray method)": [[267, "dpnp.ndarray.take"]], "transpose() (dpnp.ndarray method)": [[268, "dpnp.ndarray.transpose"]], "var() (dpnp.ndarray method)": [[269, "dpnp.ndarray.var"]], "negative() (in module dpnp)": [[270, "dpnp.negative"]], "nonzero() (in module dpnp)": [[271, "dpnp.nonzero"]], "not_equal() (in module dpnp)": [[272, "dpnp.not_equal"]], "ogrid (in module dpnp)": [[273, "dpnp.ogrid"]], "ones() (in module dpnp)": [[274, "dpnp.ones"]], "ones_like() (in module dpnp)": [[275, "dpnp.ones_like"]], "outer() (in module dpnp)": [[276, "dpnp.outer"]], "partition() (in module dpnp)": [[277, "dpnp.partition"]], "place() (in module dpnp)": [[278, "dpnp.place"]], "power() (in module dpnp)": [[279, "dpnp.power"]], "prod() (in module dpnp)": [[280, "dpnp.prod"]], "ptp() (in module dpnp)": [[281, "dpnp.ptp"]], "put() (in module dpnp)": [[282, "dpnp.put"]], "put_along_axis() (in module dpnp)": [[283, "dpnp.put_along_axis"]], "putmask() (in module dpnp)": [[284, "dpnp.putmask"]], "rad2deg() (in module dpnp)": [[285, "dpnp.rad2deg"]], "radians() (in module dpnp)": [[286, "dpnp.radians"]], "randomstate (class in dpnp.random)": [[287, "dpnp.random.RandomState"]], "__eq__() (dpnp.random.randomstate method)": [[287, "dpnp.random.RandomState.__eq__"]], "__ge__() (dpnp.random.randomstate method)": [[287, "dpnp.random.RandomState.__ge__"]], "__gt__() (dpnp.random.randomstate method)": [[287, "dpnp.random.RandomState.__gt__"]], "__le__() (dpnp.random.randomstate method)": [[287, "dpnp.random.RandomState.__le__"]], "__lt__() (dpnp.random.randomstate method)": [[287, "dpnp.random.RandomState.__lt__"]], "__ne__() (dpnp.random.randomstate method)": [[287, "dpnp.random.RandomState.__ne__"]], "get_state() (dpnp.random.randomstate method)": [[287, "dpnp.random.RandomState.get_state"]], "get_sycl_device() (dpnp.random.randomstate method)": [[287, "dpnp.random.RandomState.get_sycl_device"]], "get_sycl_queue() (dpnp.random.randomstate method)": [[287, "dpnp.random.RandomState.get_sycl_queue"]], "normal() (dpnp.random.randomstate method)": [[287, "dpnp.random.RandomState.normal"]], "rand() (dpnp.random.randomstate method)": [[287, "dpnp.random.RandomState.rand"]], "randint() (dpnp.random.randomstate method)": [[287, "dpnp.random.RandomState.randint"]], "randn() (dpnp.random.randomstate method)": [[287, "dpnp.random.RandomState.randn"]], "random_sample() (dpnp.random.randomstate method)": [[287, "dpnp.random.RandomState.random_sample"]], "standard_normal() (dpnp.random.randomstate method)": [[287, "dpnp.random.RandomState.standard_normal"]], "uniform() (dpnp.random.randomstate method)": [[287, "dpnp.random.RandomState.uniform"]], "beta() (in module dpnp.random)": [[288, "dpnp.random.beta"]], "binomial() (in module dpnp.random)": [[289, "dpnp.random.binomial"]], "bytes() (in module dpnp.random)": [[290, "dpnp.random.bytes"]], "chisquare() (in module dpnp.random)": [[291, "dpnp.random.chisquare"]], "choice() (in module dpnp.random)": [[292, "dpnp.random.choice"]], "dirichlet() (in module dpnp.random)": [[293, "dpnp.random.dirichlet"]], "exponential() (in module dpnp.random)": [[294, "dpnp.random.exponential"]], "f() (in module dpnp.random)": [[295, "dpnp.random.f"]], "gamma() (in module dpnp.random)": [[296, "dpnp.random.gamma"]], "geometric() (in module dpnp.random)": [[297, "dpnp.random.geometric"]], "gumbel() (in module dpnp.random)": [[298, "dpnp.random.gumbel"]], "hypergeometric() (in module dpnp.random)": [[299, "dpnp.random.hypergeometric"]], "laplace() (in module dpnp.random)": [[300, "dpnp.random.laplace"]], "logistic() (in module dpnp.random)": [[301, "dpnp.random.logistic"]], "lognormal() (in module dpnp.random)": [[302, "dpnp.random.lognormal"]], "logseries() (in module dpnp.random)": [[303, "dpnp.random.logseries"]], "multinomial() (in module dpnp.random)": [[304, "dpnp.random.multinomial"]], "multivariate_normal() (in module dpnp.random)": [[305, "dpnp.random.multivariate_normal"]], "negative_binomial() (in module dpnp.random)": [[306, "dpnp.random.negative_binomial"]], "noncentral_chisquare() (in module dpnp.random)": [[307, "dpnp.random.noncentral_chisquare"]], "noncentral_f() (in module dpnp.random)": [[308, "dpnp.random.noncentral_f"]], "normal() (in module dpnp.random)": [[309, "dpnp.random.normal"]], "pareto() (in module dpnp.random)": [[310, "dpnp.random.pareto"]], "permutation() (in module dpnp.random)": [[311, "dpnp.random.permutation"]], "poisson() (in module dpnp.random)": [[312, "dpnp.random.poisson"]], "power() (in module dpnp.random)": [[313, "dpnp.random.power"]], "rand() (in module dpnp.random)": [[314, "dpnp.random.rand"]], "randint() (in module dpnp.random)": [[315, "dpnp.random.randint"]], "randn() (in module dpnp.random)": [[316, "dpnp.random.randn"]], "random() (in module dpnp.random)": [[317, "dpnp.random.random"]], "random_integers() (in module dpnp.random)": [[318, "dpnp.random.random_integers"]], "random_sample() (in module dpnp.random)": [[319, "dpnp.random.random_sample"]], "ranf() (in module dpnp.random)": [[320, "dpnp.random.ranf"]], "rayleigh() (in module dpnp.random)": [[321, "dpnp.random.rayleigh"]], "sample() (in module dpnp.random)": [[322, "dpnp.random.sample"]], "seed() (in module dpnp.random)": [[323, "dpnp.random.seed"]], "shuffle() (in module dpnp.random)": [[324, "dpnp.random.shuffle"]], "standard_cauchy() (in module dpnp.random)": [[325, "dpnp.random.standard_cauchy"]], "standard_exponential() (in module dpnp.random)": [[326, "dpnp.random.standard_exponential"]], "standard_gamma() (in module dpnp.random)": [[327, "dpnp.random.standard_gamma"]], "standard_normal() (in module dpnp.random)": [[328, "dpnp.random.standard_normal"]], "standard_t() (in module dpnp.random)": [[329, "dpnp.random.standard_t"]], "triangular() (in module dpnp.random)": [[330, "dpnp.random.triangular"]], "uniform() (in module dpnp.random)": [[331, "dpnp.random.uniform"]], "vonmises() (in module dpnp.random)": [[332, "dpnp.random.vonmises"]], "wald() (in module dpnp.random)": [[333, "dpnp.random.wald"]], "weibull() (in module dpnp.random)": [[334, "dpnp.random.weibull"]], "zipf() (in module dpnp.random)": [[335, "dpnp.random.zipf"]], "ravel() (in module dpnp)": [[336, "dpnp.ravel"]], "reciprocal() (in module dpnp)": [[337, "dpnp.reciprocal"]], "remainder() (in module dpnp)": [[338, "dpnp.remainder"]], "repeat() (in module dpnp)": [[339, "dpnp.repeat"]], "reshape() (in module dpnp)": [[340, "dpnp.reshape"]], "result_type() (in module dpnp)": [[341, "dpnp.result_type"]], "right_shift() (in module dpnp)": [[342, "dpnp.right_shift"]], "rollaxis() (in module dpnp)": [[343, "dpnp.rollaxis"]], "searchsorted() (in module dpnp)": [[344, "dpnp.searchsorted"]], "select() (in module dpnp)": [[345, "dpnp.select"]], "shape() (in module dpnp)": [[346, "dpnp.shape"]], "sign() (in module dpnp)": [[347, "dpnp.sign"]], "sin() (in module dpnp)": [[348, "dpnp.sin"]], "sinh() (in module dpnp)": [[349, "dpnp.sinh"]], "sort() (in module dpnp)": [[350, "dpnp.sort"]], "sqrt() (in module dpnp)": [[351, "dpnp.sqrt"]], "square() (in module dpnp)": [[352, "dpnp.square"]], "squeeze() (in module dpnp)": [[353, "dpnp.squeeze"]], "stack() (in module dpnp)": [[354, "dpnp.stack"]], "std() (in module dpnp)": [[355, "dpnp.std"]], "subtract() (in module dpnp)": [[356, "dpnp.subtract"]], "sum() (in module dpnp)": [[357, "dpnp.sum"]], "swapaxes() (in module dpnp)": [[358, "dpnp.swapaxes"]], "take() (in module dpnp)": [[359, "dpnp.take"]], "take_along_axis() (in module dpnp)": [[360, "dpnp.take_along_axis"]], "tan() (in module dpnp)": [[361, "dpnp.tan"]], "tanh() (in module dpnp)": [[362, "dpnp.tanh"]], "tensordot() (in module dpnp)": [[363, "dpnp.tensordot"]], "trace() (in module dpnp)": [[364, "dpnp.trace"]], "transpose() (in module dpnp)": [[365, "dpnp.transpose"]], "trapz() (in module dpnp)": [[366, "dpnp.trapz"]], "tri() (in module dpnp)": [[367, "dpnp.tri"]], "tril() (in module dpnp)": [[368, "dpnp.tril"]], "tril_indices() (in module dpnp)": [[369, "dpnp.tril_indices"]], "tril_indices_from() (in module dpnp)": [[370, "dpnp.tril_indices_from"]], "triu() (in module dpnp)": [[371, "dpnp.triu"]], "triu_indices() (in module dpnp)": [[372, "dpnp.triu_indices"]], "triu_indices_from() (in module dpnp)": [[373, "dpnp.triu_indices_from"]], "true_divide() (in module dpnp)": [[374, "dpnp.true_divide"]], "trunc() (in module dpnp)": [[375, "dpnp.trunc"]], "unique() (in module dpnp)": [[376, "dpnp.unique"]], "unwrap() (in module dpnp)": [[377, "dpnp.unwrap"]], "vander() (in module dpnp)": [[378, "dpnp.vander"]], "var() (in module dpnp)": [[379, "dpnp.var"]], "vdot() (in module dpnp)": [[380, "dpnp.vdot"]], "vstack() (in module dpnp)": [[381, "dpnp.vstack"]], "where() (in module dpnp)": [[382, "dpnp.where"]], "zeros() (in module dpnp)": [[383, "dpnp.zeros"]], "zeros_like() (in module dpnp)": [[384, "dpnp.zeros_like"]], "dpnp.random": [[395, "module-dpnp.random"]]}})