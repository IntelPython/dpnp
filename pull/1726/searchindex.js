Search.setIndex({"docnames": ["dpctl", "dpnp_backend_api", "index", "overview", "quick_start_guide", "reference/binary", "reference/comparison", "reference/creation", "reference/dtype", "reference/dtypes_table", "reference/fft", "reference/generated/dpnp.abs", "reference/generated/dpnp.absolute", "reference/generated/dpnp.add", "reference/generated/dpnp.all", "reference/generated/dpnp.allclose", "reference/generated/dpnp.amax", "reference/generated/dpnp.amin", "reference/generated/dpnp.angle", "reference/generated/dpnp.any", "reference/generated/dpnp.arange", "reference/generated/dpnp.arccos", "reference/generated/dpnp.arccosh", "reference/generated/dpnp.arcsin", "reference/generated/dpnp.arcsinh", "reference/generated/dpnp.arctan", "reference/generated/dpnp.arctan2", "reference/generated/dpnp.arctanh", "reference/generated/dpnp.argmax", "reference/generated/dpnp.argmin", "reference/generated/dpnp.argsort", "reference/generated/dpnp.around", "reference/generated/dpnp.array", "reference/generated/dpnp.array_equal", "reference/generated/dpnp.asanyarray", "reference/generated/dpnp.asarray", "reference/generated/dpnp.ascontiguousarray", "reference/generated/dpnp.asfarray", "reference/generated/dpnp.asfortranarray", "reference/generated/dpnp.asnumpy", "reference/generated/dpnp.atleast_1d", "reference/generated/dpnp.atleast_2d", "reference/generated/dpnp.atleast_3d", "reference/generated/dpnp.average", "reference/generated/dpnp.bincount", "reference/generated/dpnp.bitwise_and", "reference/generated/dpnp.bitwise_not", "reference/generated/dpnp.bitwise_or", "reference/generated/dpnp.bitwise_xor", "reference/generated/dpnp.broadcast_arrays", "reference/generated/dpnp.broadcast_to", "reference/generated/dpnp.can_cast", "reference/generated/dpnp.cbrt", "reference/generated/dpnp.ceil", "reference/generated/dpnp.choose", "reference/generated/dpnp.clip", "reference/generated/dpnp.column_stack", "reference/generated/dpnp.concatenate", "reference/generated/dpnp.conj", "reference/generated/dpnp.conjugate", "reference/generated/dpnp.convolve", "reference/generated/dpnp.copy", "reference/generated/dpnp.copysign", "reference/generated/dpnp.copyto", "reference/generated/dpnp.correlate", "reference/generated/dpnp.cos", "reference/generated/dpnp.cosh", "reference/generated/dpnp.count_nonzero", "reference/generated/dpnp.cov", "reference/generated/dpnp.cross", "reference/generated/dpnp.cumprod", "reference/generated/dpnp.cumsum", "reference/generated/dpnp.deg2rad", "reference/generated/dpnp.degrees", "reference/generated/dpnp.diag", "reference/generated/dpnp.diag_indices", "reference/generated/dpnp.diag_indices_from", "reference/generated/dpnp.diagflat", "reference/generated/dpnp.diagonal", "reference/generated/dpnp.diff", "reference/generated/dpnp.divide", "reference/generated/dpnp.dot", "reference/generated/dpnp.dpnp_array.dpnp_array", "reference/generated/dpnp.dstack", "reference/generated/dpnp.dtype", "reference/generated/dpnp.ediff1d", "reference/generated/dpnp.einsum", "reference/generated/dpnp.einsum_path", "reference/generated/dpnp.empty", "reference/generated/dpnp.empty_like", "reference/generated/dpnp.equal", "reference/generated/dpnp.erf", "reference/generated/dpnp.exp", "reference/generated/dpnp.exp2", "reference/generated/dpnp.expand_dims", "reference/generated/dpnp.expm1", "reference/generated/dpnp.extract", "reference/generated/dpnp.eye", "reference/generated/dpnp.fabs", "reference/generated/dpnp.fft.fft", "reference/generated/dpnp.fft.fft2", "reference/generated/dpnp.fft.fftfreq", "reference/generated/dpnp.fft.fftn", "reference/generated/dpnp.fft.fftshift", "reference/generated/dpnp.fft.hfft", "reference/generated/dpnp.fft.ifft", "reference/generated/dpnp.fft.ifft2", "reference/generated/dpnp.fft.ifftn", "reference/generated/dpnp.fft.ifftshift", "reference/generated/dpnp.fft.ihfft", "reference/generated/dpnp.fft.irfft", "reference/generated/dpnp.fft.irfft2", "reference/generated/dpnp.fft.irfftn", "reference/generated/dpnp.fft.rfft", "reference/generated/dpnp.fft.rfft2", "reference/generated/dpnp.fft.rfftfreq", "reference/generated/dpnp.fft.rfftn", "reference/generated/dpnp.fill_diagonal", "reference/generated/dpnp.finfo", "reference/generated/dpnp.flatiter", "reference/generated/dpnp.flip", "reference/generated/dpnp.fliplr", "reference/generated/dpnp.flipud", "reference/generated/dpnp.floor", "reference/generated/dpnp.floor_divide", "reference/generated/dpnp.fmax", "reference/generated/dpnp.fmin", "reference/generated/dpnp.fmod", "reference/generated/dpnp.from_dlpack", "reference/generated/dpnp.frombuffer", "reference/generated/dpnp.fromfile", "reference/generated/dpnp.fromfunction", "reference/generated/dpnp.fromiter", "reference/generated/dpnp.fromstring", "reference/generated/dpnp.full", "reference/generated/dpnp.full_like", "reference/generated/dpnp.geomspace", "reference/generated/dpnp.get_include", "reference/generated/dpnp.gradient", "reference/generated/dpnp.greater", "reference/generated/dpnp.greater_equal", "reference/generated/dpnp.histogram", "reference/generated/dpnp.hstack", "reference/generated/dpnp.hypot", "reference/generated/dpnp.identity", "reference/generated/dpnp.iinfo", "reference/generated/dpnp.imag", "reference/generated/dpnp.indices", "reference/generated/dpnp.inner", "reference/generated/dpnp.invert", "reference/generated/dpnp.isclose", "reference/generated/dpnp.isfinite", "reference/generated/dpnp.isinf", "reference/generated/dpnp.isnan", "reference/generated/dpnp.isscalar", "reference/generated/dpnp.issubdtype", "reference/generated/dpnp.issubsctype", "reference/generated/dpnp.kron", "reference/generated/dpnp.left_shift", "reference/generated/dpnp.less", "reference/generated/dpnp.less_equal", "reference/generated/dpnp.linalg.cholesky", "reference/generated/dpnp.linalg.cond", "reference/generated/dpnp.linalg.det", "reference/generated/dpnp.linalg.eig", "reference/generated/dpnp.linalg.eigh", "reference/generated/dpnp.linalg.eigvals", "reference/generated/dpnp.linalg.inv", "reference/generated/dpnp.linalg.matrix_power", "reference/generated/dpnp.linalg.matrix_rank", "reference/generated/dpnp.linalg.multi_dot", "reference/generated/dpnp.linalg.norm", "reference/generated/dpnp.linalg.pinv", "reference/generated/dpnp.linalg.qr", "reference/generated/dpnp.linalg.slogdet", "reference/generated/dpnp.linalg.solve", "reference/generated/dpnp.linalg.svd", "reference/generated/dpnp.linspace", "reference/generated/dpnp.loadtxt", "reference/generated/dpnp.log", "reference/generated/dpnp.log10", "reference/generated/dpnp.log1p", "reference/generated/dpnp.log2", "reference/generated/dpnp.logaddexp", "reference/generated/dpnp.logical_and", "reference/generated/dpnp.logical_not", "reference/generated/dpnp.logical_or", "reference/generated/dpnp.logical_xor", "reference/generated/dpnp.logspace", "reference/generated/dpnp.logsumexp", "reference/generated/dpnp.matmul", "reference/generated/dpnp.max", "reference/generated/dpnp.maximum", "reference/generated/dpnp.mean", "reference/generated/dpnp.median", "reference/generated/dpnp.meshgrid", "reference/generated/dpnp.mgrid", "reference/generated/dpnp.min", "reference/generated/dpnp.minimum", "reference/generated/dpnp.mod", "reference/generated/dpnp.modf", "reference/generated/dpnp.moveaxis", "reference/generated/dpnp.multiply", "reference/generated/dpnp.nanargmax", "reference/generated/dpnp.nanargmin", "reference/generated/dpnp.nancumprod", "reference/generated/dpnp.nancumsum", "reference/generated/dpnp.nanmax", "reference/generated/dpnp.nanmean", "reference/generated/dpnp.nanmin", "reference/generated/dpnp.nanprod", "reference/generated/dpnp.nanstd", "reference/generated/dpnp.nansum", "reference/generated/dpnp.nanvar", "reference/generated/dpnp.ndarray", "reference/generated/dpnp.ndarray.T", "reference/generated/dpnp.ndarray.__abs__", "reference/generated/dpnp.ndarray.__add__", "reference/generated/dpnp.ndarray.__and__", "reference/generated/dpnp.ndarray.__complex__", "reference/generated/dpnp.ndarray.__copy__", "reference/generated/dpnp.ndarray.__eq__", "reference/generated/dpnp.ndarray.__float__", "reference/generated/dpnp.ndarray.__floordiv__", "reference/generated/dpnp.ndarray.__ge__", "reference/generated/dpnp.ndarray.__getitem__", "reference/generated/dpnp.ndarray.__gt__", "reference/generated/dpnp.ndarray.__iadd__", "reference/generated/dpnp.ndarray.__iand__", "reference/generated/dpnp.ndarray.__ifloordiv__", "reference/generated/dpnp.ndarray.__ilshift__", "reference/generated/dpnp.ndarray.__imod__", "reference/generated/dpnp.ndarray.__imul__", "reference/generated/dpnp.ndarray.__int__", "reference/generated/dpnp.ndarray.__invert__", "reference/generated/dpnp.ndarray.__ior__", "reference/generated/dpnp.ndarray.__ipow__", "reference/generated/dpnp.ndarray.__irshift__", "reference/generated/dpnp.ndarray.__isub__", "reference/generated/dpnp.ndarray.__itruediv__", "reference/generated/dpnp.ndarray.__ixor__", "reference/generated/dpnp.ndarray.__le__", "reference/generated/dpnp.ndarray.__len__", "reference/generated/dpnp.ndarray.__lshift__", "reference/generated/dpnp.ndarray.__lt__", "reference/generated/dpnp.ndarray.__mod__", "reference/generated/dpnp.ndarray.__mul__", "reference/generated/dpnp.ndarray.__ne__", "reference/generated/dpnp.ndarray.__neg__", "reference/generated/dpnp.ndarray.__new__", "reference/generated/dpnp.ndarray.__or__", "reference/generated/dpnp.ndarray.__pos__", "reference/generated/dpnp.ndarray.__pow__", "reference/generated/dpnp.ndarray.__repr__", "reference/generated/dpnp.ndarray.__rshift__", "reference/generated/dpnp.ndarray.__setitem__", "reference/generated/dpnp.ndarray.__str__", "reference/generated/dpnp.ndarray.__sub__", "reference/generated/dpnp.ndarray.__truediv__", "reference/generated/dpnp.ndarray.__xor__", "reference/generated/dpnp.ndarray.all", "reference/generated/dpnp.ndarray.any", "reference/generated/dpnp.ndarray.argmax", "reference/generated/dpnp.ndarray.argmin", "reference/generated/dpnp.ndarray.argsort", "reference/generated/dpnp.ndarray.astype", "reference/generated/dpnp.ndarray.choose", "reference/generated/dpnp.ndarray.clip", "reference/generated/dpnp.ndarray.conj", "reference/generated/dpnp.ndarray.conjugate", "reference/generated/dpnp.ndarray.copy", "reference/generated/dpnp.ndarray.cumsum", "reference/generated/dpnp.ndarray.diagonal", "reference/generated/dpnp.ndarray.dtype", "reference/generated/dpnp.ndarray.fill", "reference/generated/dpnp.ndarray.flags", "reference/generated/dpnp.ndarray.flat", "reference/generated/dpnp.ndarray.flatten", "reference/generated/dpnp.ndarray.imag", "reference/generated/dpnp.ndarray.item", "reference/generated/dpnp.ndarray.itemsize", "reference/generated/dpnp.ndarray.max", "reference/generated/dpnp.ndarray.mean", "reference/generated/dpnp.ndarray.min", "reference/generated/dpnp.ndarray.nbytes", "reference/generated/dpnp.ndarray.ndim", "reference/generated/dpnp.ndarray.nonzero", "reference/generated/dpnp.ndarray.partition", "reference/generated/dpnp.ndarray.prod", "reference/generated/dpnp.ndarray.put", "reference/generated/dpnp.ndarray.ravel", "reference/generated/dpnp.ndarray.real", "reference/generated/dpnp.ndarray.repeat", "reference/generated/dpnp.ndarray.reshape", "reference/generated/dpnp.ndarray.round", "reference/generated/dpnp.ndarray.shape", "reference/generated/dpnp.ndarray.size", "reference/generated/dpnp.ndarray.sort", "reference/generated/dpnp.ndarray.squeeze", "reference/generated/dpnp.ndarray.std", "reference/generated/dpnp.ndarray.strides", "reference/generated/dpnp.ndarray.sum", "reference/generated/dpnp.ndarray.swapaxes", "reference/generated/dpnp.ndarray.take", "reference/generated/dpnp.ndarray.transpose", "reference/generated/dpnp.ndarray.var", "reference/generated/dpnp.negative", "reference/generated/dpnp.nonzero", "reference/generated/dpnp.not_equal", "reference/generated/dpnp.ogrid", "reference/generated/dpnp.ones", "reference/generated/dpnp.ones_like", "reference/generated/dpnp.outer", "reference/generated/dpnp.partition", "reference/generated/dpnp.place", "reference/generated/dpnp.positive", "reference/generated/dpnp.power", "reference/generated/dpnp.prod", "reference/generated/dpnp.proj", "reference/generated/dpnp.ptp", "reference/generated/dpnp.put", "reference/generated/dpnp.put_along_axis", "reference/generated/dpnp.putmask", "reference/generated/dpnp.rad2deg", "reference/generated/dpnp.radians", "reference/generated/dpnp.random.RandomState", "reference/generated/dpnp.random.beta", "reference/generated/dpnp.random.binomial", "reference/generated/dpnp.random.bytes", "reference/generated/dpnp.random.chisquare", "reference/generated/dpnp.random.choice", "reference/generated/dpnp.random.dirichlet", "reference/generated/dpnp.random.exponential", "reference/generated/dpnp.random.f", "reference/generated/dpnp.random.gamma", "reference/generated/dpnp.random.geometric", "reference/generated/dpnp.random.gumbel", "reference/generated/dpnp.random.hypergeometric", "reference/generated/dpnp.random.laplace", "reference/generated/dpnp.random.logistic", "reference/generated/dpnp.random.lognormal", "reference/generated/dpnp.random.logseries", "reference/generated/dpnp.random.multinomial", "reference/generated/dpnp.random.multivariate_normal", "reference/generated/dpnp.random.negative_binomial", "reference/generated/dpnp.random.noncentral_chisquare", "reference/generated/dpnp.random.noncentral_f", "reference/generated/dpnp.random.normal", "reference/generated/dpnp.random.pareto", "reference/generated/dpnp.random.permutation", "reference/generated/dpnp.random.poisson", "reference/generated/dpnp.random.power", "reference/generated/dpnp.random.rand", "reference/generated/dpnp.random.randint", "reference/generated/dpnp.random.randn", "reference/generated/dpnp.random.random", "reference/generated/dpnp.random.random_integers", "reference/generated/dpnp.random.random_sample", "reference/generated/dpnp.random.ranf", "reference/generated/dpnp.random.rayleigh", "reference/generated/dpnp.random.sample", "reference/generated/dpnp.random.seed", "reference/generated/dpnp.random.shuffle", "reference/generated/dpnp.random.standard_cauchy", "reference/generated/dpnp.random.standard_exponential", "reference/generated/dpnp.random.standard_gamma", "reference/generated/dpnp.random.standard_normal", "reference/generated/dpnp.random.standard_t", "reference/generated/dpnp.random.triangular", "reference/generated/dpnp.random.uniform", "reference/generated/dpnp.random.vonmises", "reference/generated/dpnp.random.wald", "reference/generated/dpnp.random.weibull", "reference/generated/dpnp.random.zipf", "reference/generated/dpnp.ravel", "reference/generated/dpnp.real", "reference/generated/dpnp.reciprocal", "reference/generated/dpnp.reduce_hypot", "reference/generated/dpnp.remainder", "reference/generated/dpnp.repeat", "reference/generated/dpnp.reshape", "reference/generated/dpnp.result_type", "reference/generated/dpnp.right_shift", "reference/generated/dpnp.rint", "reference/generated/dpnp.roll", "reference/generated/dpnp.rollaxis", "reference/generated/dpnp.round", "reference/generated/dpnp.row_stack", "reference/generated/dpnp.rsqrt", "reference/generated/dpnp.searchsorted", "reference/generated/dpnp.select", "reference/generated/dpnp.shape", "reference/generated/dpnp.sign", "reference/generated/dpnp.signbit", "reference/generated/dpnp.sin", "reference/generated/dpnp.sinh", "reference/generated/dpnp.sort", "reference/generated/dpnp.sqrt", "reference/generated/dpnp.square", "reference/generated/dpnp.squeeze", "reference/generated/dpnp.stack", "reference/generated/dpnp.std", "reference/generated/dpnp.subtract", "reference/generated/dpnp.sum", "reference/generated/dpnp.swapaxes", "reference/generated/dpnp.take", "reference/generated/dpnp.take_along_axis", "reference/generated/dpnp.tan", "reference/generated/dpnp.tanh", "reference/generated/dpnp.tensordot", "reference/generated/dpnp.tile", "reference/generated/dpnp.trace", "reference/generated/dpnp.transpose", "reference/generated/dpnp.trapz", "reference/generated/dpnp.tri", "reference/generated/dpnp.tril", "reference/generated/dpnp.tril_indices", "reference/generated/dpnp.tril_indices_from", "reference/generated/dpnp.triu", "reference/generated/dpnp.triu_indices", "reference/generated/dpnp.triu_indices_from", "reference/generated/dpnp.true_divide", "reference/generated/dpnp.trunc", "reference/generated/dpnp.unique", "reference/generated/dpnp.unwrap", "reference/generated/dpnp.vander", "reference/generated/dpnp.var", "reference/generated/dpnp.vdot", "reference/generated/dpnp.vstack", "reference/generated/dpnp.where", "reference/generated/dpnp.zeros", "reference/generated/dpnp.zeros_like", "reference/index", "reference/indexing", "reference/linalg", "reference/logic", "reference/manipulation", "reference/math", "reference/misc", "reference/ndarray", "reference/pad", "reference/polynomials", "reference/random", "reference/routines", "reference/sorting", "reference/special", "reference/statistics", "reference/ufunc"], "filenames": ["dpctl.rst", "dpnp_backend_api.rst", "index.rst", "overview.rst", "quick_start_guide.rst", "reference/binary.rst", "reference/comparison.rst", "reference/creation.rst", "reference/dtype.rst", "reference/dtypes_table.rst", "reference/fft.rst", "reference/generated/dpnp.abs.rst", "reference/generated/dpnp.absolute.rst", "reference/generated/dpnp.add.rst", "reference/generated/dpnp.all.rst", "reference/generated/dpnp.allclose.rst", "reference/generated/dpnp.amax.rst", "reference/generated/dpnp.amin.rst", "reference/generated/dpnp.angle.rst", "reference/generated/dpnp.any.rst", "reference/generated/dpnp.arange.rst", "reference/generated/dpnp.arccos.rst", "reference/generated/dpnp.arccosh.rst", "reference/generated/dpnp.arcsin.rst", "reference/generated/dpnp.arcsinh.rst", "reference/generated/dpnp.arctan.rst", "reference/generated/dpnp.arctan2.rst", "reference/generated/dpnp.arctanh.rst", "reference/generated/dpnp.argmax.rst", "reference/generated/dpnp.argmin.rst", "reference/generated/dpnp.argsort.rst", "reference/generated/dpnp.around.rst", "reference/generated/dpnp.array.rst", "reference/generated/dpnp.array_equal.rst", "reference/generated/dpnp.asanyarray.rst", "reference/generated/dpnp.asarray.rst", "reference/generated/dpnp.ascontiguousarray.rst", "reference/generated/dpnp.asfarray.rst", "reference/generated/dpnp.asfortranarray.rst", "reference/generated/dpnp.asnumpy.rst", "reference/generated/dpnp.atleast_1d.rst", "reference/generated/dpnp.atleast_2d.rst", "reference/generated/dpnp.atleast_3d.rst", "reference/generated/dpnp.average.rst", "reference/generated/dpnp.bincount.rst", "reference/generated/dpnp.bitwise_and.rst", "reference/generated/dpnp.bitwise_not.rst", "reference/generated/dpnp.bitwise_or.rst", "reference/generated/dpnp.bitwise_xor.rst", "reference/generated/dpnp.broadcast_arrays.rst", "reference/generated/dpnp.broadcast_to.rst", "reference/generated/dpnp.can_cast.rst", "reference/generated/dpnp.cbrt.rst", "reference/generated/dpnp.ceil.rst", "reference/generated/dpnp.choose.rst", "reference/generated/dpnp.clip.rst", "reference/generated/dpnp.column_stack.rst", "reference/generated/dpnp.concatenate.rst", "reference/generated/dpnp.conj.rst", "reference/generated/dpnp.conjugate.rst", "reference/generated/dpnp.convolve.rst", "reference/generated/dpnp.copy.rst", "reference/generated/dpnp.copysign.rst", "reference/generated/dpnp.copyto.rst", "reference/generated/dpnp.correlate.rst", "reference/generated/dpnp.cos.rst", "reference/generated/dpnp.cosh.rst", "reference/generated/dpnp.count_nonzero.rst", "reference/generated/dpnp.cov.rst", "reference/generated/dpnp.cross.rst", "reference/generated/dpnp.cumprod.rst", "reference/generated/dpnp.cumsum.rst", "reference/generated/dpnp.deg2rad.rst", "reference/generated/dpnp.degrees.rst", "reference/generated/dpnp.diag.rst", "reference/generated/dpnp.diag_indices.rst", "reference/generated/dpnp.diag_indices_from.rst", "reference/generated/dpnp.diagflat.rst", "reference/generated/dpnp.diagonal.rst", "reference/generated/dpnp.diff.rst", "reference/generated/dpnp.divide.rst", "reference/generated/dpnp.dot.rst", "reference/generated/dpnp.dpnp_array.dpnp_array.rst", "reference/generated/dpnp.dstack.rst", "reference/generated/dpnp.dtype.rst", "reference/generated/dpnp.ediff1d.rst", "reference/generated/dpnp.einsum.rst", "reference/generated/dpnp.einsum_path.rst", "reference/generated/dpnp.empty.rst", "reference/generated/dpnp.empty_like.rst", "reference/generated/dpnp.equal.rst", "reference/generated/dpnp.erf.rst", "reference/generated/dpnp.exp.rst", "reference/generated/dpnp.exp2.rst", "reference/generated/dpnp.expand_dims.rst", "reference/generated/dpnp.expm1.rst", "reference/generated/dpnp.extract.rst", "reference/generated/dpnp.eye.rst", "reference/generated/dpnp.fabs.rst", "reference/generated/dpnp.fft.fft.rst", "reference/generated/dpnp.fft.fft2.rst", "reference/generated/dpnp.fft.fftfreq.rst", "reference/generated/dpnp.fft.fftn.rst", "reference/generated/dpnp.fft.fftshift.rst", "reference/generated/dpnp.fft.hfft.rst", "reference/generated/dpnp.fft.ifft.rst", "reference/generated/dpnp.fft.ifft2.rst", "reference/generated/dpnp.fft.ifftn.rst", "reference/generated/dpnp.fft.ifftshift.rst", "reference/generated/dpnp.fft.ihfft.rst", "reference/generated/dpnp.fft.irfft.rst", "reference/generated/dpnp.fft.irfft2.rst", "reference/generated/dpnp.fft.irfftn.rst", "reference/generated/dpnp.fft.rfft.rst", "reference/generated/dpnp.fft.rfft2.rst", "reference/generated/dpnp.fft.rfftfreq.rst", "reference/generated/dpnp.fft.rfftn.rst", "reference/generated/dpnp.fill_diagonal.rst", "reference/generated/dpnp.finfo.rst", "reference/generated/dpnp.flatiter.rst", "reference/generated/dpnp.flip.rst", "reference/generated/dpnp.fliplr.rst", "reference/generated/dpnp.flipud.rst", "reference/generated/dpnp.floor.rst", "reference/generated/dpnp.floor_divide.rst", "reference/generated/dpnp.fmax.rst", "reference/generated/dpnp.fmin.rst", "reference/generated/dpnp.fmod.rst", "reference/generated/dpnp.from_dlpack.rst", "reference/generated/dpnp.frombuffer.rst", "reference/generated/dpnp.fromfile.rst", "reference/generated/dpnp.fromfunction.rst", "reference/generated/dpnp.fromiter.rst", "reference/generated/dpnp.fromstring.rst", "reference/generated/dpnp.full.rst", "reference/generated/dpnp.full_like.rst", "reference/generated/dpnp.geomspace.rst", "reference/generated/dpnp.get_include.rst", "reference/generated/dpnp.gradient.rst", "reference/generated/dpnp.greater.rst", "reference/generated/dpnp.greater_equal.rst", "reference/generated/dpnp.histogram.rst", "reference/generated/dpnp.hstack.rst", "reference/generated/dpnp.hypot.rst", "reference/generated/dpnp.identity.rst", "reference/generated/dpnp.iinfo.rst", "reference/generated/dpnp.imag.rst", "reference/generated/dpnp.indices.rst", "reference/generated/dpnp.inner.rst", "reference/generated/dpnp.invert.rst", "reference/generated/dpnp.isclose.rst", "reference/generated/dpnp.isfinite.rst", "reference/generated/dpnp.isinf.rst", "reference/generated/dpnp.isnan.rst", "reference/generated/dpnp.isscalar.rst", "reference/generated/dpnp.issubdtype.rst", "reference/generated/dpnp.issubsctype.rst", "reference/generated/dpnp.kron.rst", "reference/generated/dpnp.left_shift.rst", "reference/generated/dpnp.less.rst", "reference/generated/dpnp.less_equal.rst", "reference/generated/dpnp.linalg.cholesky.rst", "reference/generated/dpnp.linalg.cond.rst", "reference/generated/dpnp.linalg.det.rst", "reference/generated/dpnp.linalg.eig.rst", "reference/generated/dpnp.linalg.eigh.rst", "reference/generated/dpnp.linalg.eigvals.rst", "reference/generated/dpnp.linalg.inv.rst", "reference/generated/dpnp.linalg.matrix_power.rst", "reference/generated/dpnp.linalg.matrix_rank.rst", "reference/generated/dpnp.linalg.multi_dot.rst", "reference/generated/dpnp.linalg.norm.rst", "reference/generated/dpnp.linalg.pinv.rst", "reference/generated/dpnp.linalg.qr.rst", "reference/generated/dpnp.linalg.slogdet.rst", "reference/generated/dpnp.linalg.solve.rst", "reference/generated/dpnp.linalg.svd.rst", "reference/generated/dpnp.linspace.rst", "reference/generated/dpnp.loadtxt.rst", "reference/generated/dpnp.log.rst", "reference/generated/dpnp.log10.rst", "reference/generated/dpnp.log1p.rst", "reference/generated/dpnp.log2.rst", "reference/generated/dpnp.logaddexp.rst", "reference/generated/dpnp.logical_and.rst", "reference/generated/dpnp.logical_not.rst", "reference/generated/dpnp.logical_or.rst", "reference/generated/dpnp.logical_xor.rst", "reference/generated/dpnp.logspace.rst", "reference/generated/dpnp.logsumexp.rst", "reference/generated/dpnp.matmul.rst", "reference/generated/dpnp.max.rst", "reference/generated/dpnp.maximum.rst", "reference/generated/dpnp.mean.rst", "reference/generated/dpnp.median.rst", "reference/generated/dpnp.meshgrid.rst", "reference/generated/dpnp.mgrid.rst", "reference/generated/dpnp.min.rst", "reference/generated/dpnp.minimum.rst", "reference/generated/dpnp.mod.rst", "reference/generated/dpnp.modf.rst", "reference/generated/dpnp.moveaxis.rst", "reference/generated/dpnp.multiply.rst", "reference/generated/dpnp.nanargmax.rst", "reference/generated/dpnp.nanargmin.rst", "reference/generated/dpnp.nancumprod.rst", "reference/generated/dpnp.nancumsum.rst", "reference/generated/dpnp.nanmax.rst", "reference/generated/dpnp.nanmean.rst", "reference/generated/dpnp.nanmin.rst", "reference/generated/dpnp.nanprod.rst", "reference/generated/dpnp.nanstd.rst", "reference/generated/dpnp.nansum.rst", "reference/generated/dpnp.nanvar.rst", "reference/generated/dpnp.ndarray.rst", "reference/generated/dpnp.ndarray.T.rst", "reference/generated/dpnp.ndarray.__abs__.rst", "reference/generated/dpnp.ndarray.__add__.rst", "reference/generated/dpnp.ndarray.__and__.rst", "reference/generated/dpnp.ndarray.__complex__.rst", "reference/generated/dpnp.ndarray.__copy__.rst", "reference/generated/dpnp.ndarray.__eq__.rst", "reference/generated/dpnp.ndarray.__float__.rst", "reference/generated/dpnp.ndarray.__floordiv__.rst", "reference/generated/dpnp.ndarray.__ge__.rst", "reference/generated/dpnp.ndarray.__getitem__.rst", "reference/generated/dpnp.ndarray.__gt__.rst", "reference/generated/dpnp.ndarray.__iadd__.rst", "reference/generated/dpnp.ndarray.__iand__.rst", "reference/generated/dpnp.ndarray.__ifloordiv__.rst", "reference/generated/dpnp.ndarray.__ilshift__.rst", "reference/generated/dpnp.ndarray.__imod__.rst", "reference/generated/dpnp.ndarray.__imul__.rst", "reference/generated/dpnp.ndarray.__int__.rst", "reference/generated/dpnp.ndarray.__invert__.rst", "reference/generated/dpnp.ndarray.__ior__.rst", "reference/generated/dpnp.ndarray.__ipow__.rst", "reference/generated/dpnp.ndarray.__irshift__.rst", "reference/generated/dpnp.ndarray.__isub__.rst", "reference/generated/dpnp.ndarray.__itruediv__.rst", "reference/generated/dpnp.ndarray.__ixor__.rst", "reference/generated/dpnp.ndarray.__le__.rst", "reference/generated/dpnp.ndarray.__len__.rst", "reference/generated/dpnp.ndarray.__lshift__.rst", "reference/generated/dpnp.ndarray.__lt__.rst", "reference/generated/dpnp.ndarray.__mod__.rst", "reference/generated/dpnp.ndarray.__mul__.rst", "reference/generated/dpnp.ndarray.__ne__.rst", "reference/generated/dpnp.ndarray.__neg__.rst", "reference/generated/dpnp.ndarray.__new__.rst", "reference/generated/dpnp.ndarray.__or__.rst", "reference/generated/dpnp.ndarray.__pos__.rst", "reference/generated/dpnp.ndarray.__pow__.rst", "reference/generated/dpnp.ndarray.__repr__.rst", "reference/generated/dpnp.ndarray.__rshift__.rst", "reference/generated/dpnp.ndarray.__setitem__.rst", "reference/generated/dpnp.ndarray.__str__.rst", "reference/generated/dpnp.ndarray.__sub__.rst", "reference/generated/dpnp.ndarray.__truediv__.rst", "reference/generated/dpnp.ndarray.__xor__.rst", "reference/generated/dpnp.ndarray.all.rst", "reference/generated/dpnp.ndarray.any.rst", "reference/generated/dpnp.ndarray.argmax.rst", "reference/generated/dpnp.ndarray.argmin.rst", "reference/generated/dpnp.ndarray.argsort.rst", "reference/generated/dpnp.ndarray.astype.rst", "reference/generated/dpnp.ndarray.choose.rst", "reference/generated/dpnp.ndarray.clip.rst", "reference/generated/dpnp.ndarray.conj.rst", "reference/generated/dpnp.ndarray.conjugate.rst", "reference/generated/dpnp.ndarray.copy.rst", "reference/generated/dpnp.ndarray.cumsum.rst", "reference/generated/dpnp.ndarray.diagonal.rst", "reference/generated/dpnp.ndarray.dtype.rst", "reference/generated/dpnp.ndarray.fill.rst", "reference/generated/dpnp.ndarray.flags.rst", "reference/generated/dpnp.ndarray.flat.rst", "reference/generated/dpnp.ndarray.flatten.rst", "reference/generated/dpnp.ndarray.imag.rst", "reference/generated/dpnp.ndarray.item.rst", "reference/generated/dpnp.ndarray.itemsize.rst", "reference/generated/dpnp.ndarray.max.rst", "reference/generated/dpnp.ndarray.mean.rst", "reference/generated/dpnp.ndarray.min.rst", "reference/generated/dpnp.ndarray.nbytes.rst", "reference/generated/dpnp.ndarray.ndim.rst", "reference/generated/dpnp.ndarray.nonzero.rst", "reference/generated/dpnp.ndarray.partition.rst", "reference/generated/dpnp.ndarray.prod.rst", "reference/generated/dpnp.ndarray.put.rst", "reference/generated/dpnp.ndarray.ravel.rst", "reference/generated/dpnp.ndarray.real.rst", "reference/generated/dpnp.ndarray.repeat.rst", "reference/generated/dpnp.ndarray.reshape.rst", "reference/generated/dpnp.ndarray.round.rst", "reference/generated/dpnp.ndarray.shape.rst", "reference/generated/dpnp.ndarray.size.rst", "reference/generated/dpnp.ndarray.sort.rst", "reference/generated/dpnp.ndarray.squeeze.rst", "reference/generated/dpnp.ndarray.std.rst", "reference/generated/dpnp.ndarray.strides.rst", "reference/generated/dpnp.ndarray.sum.rst", "reference/generated/dpnp.ndarray.swapaxes.rst", "reference/generated/dpnp.ndarray.take.rst", "reference/generated/dpnp.ndarray.transpose.rst", "reference/generated/dpnp.ndarray.var.rst", "reference/generated/dpnp.negative.rst", "reference/generated/dpnp.nonzero.rst", "reference/generated/dpnp.not_equal.rst", "reference/generated/dpnp.ogrid.rst", "reference/generated/dpnp.ones.rst", "reference/generated/dpnp.ones_like.rst", "reference/generated/dpnp.outer.rst", "reference/generated/dpnp.partition.rst", "reference/generated/dpnp.place.rst", "reference/generated/dpnp.positive.rst", "reference/generated/dpnp.power.rst", "reference/generated/dpnp.prod.rst", "reference/generated/dpnp.proj.rst", "reference/generated/dpnp.ptp.rst", "reference/generated/dpnp.put.rst", "reference/generated/dpnp.put_along_axis.rst", "reference/generated/dpnp.putmask.rst", "reference/generated/dpnp.rad2deg.rst", "reference/generated/dpnp.radians.rst", "reference/generated/dpnp.random.RandomState.rst", "reference/generated/dpnp.random.beta.rst", "reference/generated/dpnp.random.binomial.rst", "reference/generated/dpnp.random.bytes.rst", "reference/generated/dpnp.random.chisquare.rst", "reference/generated/dpnp.random.choice.rst", "reference/generated/dpnp.random.dirichlet.rst", "reference/generated/dpnp.random.exponential.rst", "reference/generated/dpnp.random.f.rst", "reference/generated/dpnp.random.gamma.rst", "reference/generated/dpnp.random.geometric.rst", "reference/generated/dpnp.random.gumbel.rst", "reference/generated/dpnp.random.hypergeometric.rst", "reference/generated/dpnp.random.laplace.rst", "reference/generated/dpnp.random.logistic.rst", "reference/generated/dpnp.random.lognormal.rst", "reference/generated/dpnp.random.logseries.rst", "reference/generated/dpnp.random.multinomial.rst", "reference/generated/dpnp.random.multivariate_normal.rst", "reference/generated/dpnp.random.negative_binomial.rst", "reference/generated/dpnp.random.noncentral_chisquare.rst", "reference/generated/dpnp.random.noncentral_f.rst", "reference/generated/dpnp.random.normal.rst", "reference/generated/dpnp.random.pareto.rst", "reference/generated/dpnp.random.permutation.rst", "reference/generated/dpnp.random.poisson.rst", "reference/generated/dpnp.random.power.rst", "reference/generated/dpnp.random.rand.rst", "reference/generated/dpnp.random.randint.rst", "reference/generated/dpnp.random.randn.rst", "reference/generated/dpnp.random.random.rst", "reference/generated/dpnp.random.random_integers.rst", "reference/generated/dpnp.random.random_sample.rst", "reference/generated/dpnp.random.ranf.rst", "reference/generated/dpnp.random.rayleigh.rst", "reference/generated/dpnp.random.sample.rst", "reference/generated/dpnp.random.seed.rst", "reference/generated/dpnp.random.shuffle.rst", "reference/generated/dpnp.random.standard_cauchy.rst", "reference/generated/dpnp.random.standard_exponential.rst", "reference/generated/dpnp.random.standard_gamma.rst", "reference/generated/dpnp.random.standard_normal.rst", "reference/generated/dpnp.random.standard_t.rst", "reference/generated/dpnp.random.triangular.rst", "reference/generated/dpnp.random.uniform.rst", "reference/generated/dpnp.random.vonmises.rst", "reference/generated/dpnp.random.wald.rst", "reference/generated/dpnp.random.weibull.rst", "reference/generated/dpnp.random.zipf.rst", "reference/generated/dpnp.ravel.rst", "reference/generated/dpnp.real.rst", "reference/generated/dpnp.reciprocal.rst", "reference/generated/dpnp.reduce_hypot.rst", "reference/generated/dpnp.remainder.rst", "reference/generated/dpnp.repeat.rst", "reference/generated/dpnp.reshape.rst", "reference/generated/dpnp.result_type.rst", "reference/generated/dpnp.right_shift.rst", "reference/generated/dpnp.rint.rst", "reference/generated/dpnp.roll.rst", "reference/generated/dpnp.rollaxis.rst", "reference/generated/dpnp.round.rst", "reference/generated/dpnp.row_stack.rst", "reference/generated/dpnp.rsqrt.rst", "reference/generated/dpnp.searchsorted.rst", "reference/generated/dpnp.select.rst", "reference/generated/dpnp.shape.rst", "reference/generated/dpnp.sign.rst", "reference/generated/dpnp.signbit.rst", "reference/generated/dpnp.sin.rst", "reference/generated/dpnp.sinh.rst", "reference/generated/dpnp.sort.rst", "reference/generated/dpnp.sqrt.rst", "reference/generated/dpnp.square.rst", "reference/generated/dpnp.squeeze.rst", "reference/generated/dpnp.stack.rst", "reference/generated/dpnp.std.rst", "reference/generated/dpnp.subtract.rst", "reference/generated/dpnp.sum.rst", "reference/generated/dpnp.swapaxes.rst", "reference/generated/dpnp.take.rst", "reference/generated/dpnp.take_along_axis.rst", "reference/generated/dpnp.tan.rst", "reference/generated/dpnp.tanh.rst", "reference/generated/dpnp.tensordot.rst", "reference/generated/dpnp.tile.rst", "reference/generated/dpnp.trace.rst", "reference/generated/dpnp.transpose.rst", "reference/generated/dpnp.trapz.rst", "reference/generated/dpnp.tri.rst", "reference/generated/dpnp.tril.rst", "reference/generated/dpnp.tril_indices.rst", "reference/generated/dpnp.tril_indices_from.rst", "reference/generated/dpnp.triu.rst", "reference/generated/dpnp.triu_indices.rst", "reference/generated/dpnp.triu_indices_from.rst", "reference/generated/dpnp.true_divide.rst", "reference/generated/dpnp.trunc.rst", "reference/generated/dpnp.unique.rst", "reference/generated/dpnp.unwrap.rst", "reference/generated/dpnp.vander.rst", "reference/generated/dpnp.var.rst", "reference/generated/dpnp.vdot.rst", "reference/generated/dpnp.vstack.rst", "reference/generated/dpnp.where.rst", "reference/generated/dpnp.zeros.rst", "reference/generated/dpnp.zeros_like.rst", "reference/index.rst", "reference/indexing.rst", "reference/linalg.rst", "reference/logic.rst", "reference/manipulation.rst", "reference/math.rst", "reference/misc.rst", "reference/ndarray.rst", "reference/pad.rst", "reference/polynomials.rst", "reference/random.rst", "reference/routines.rst", "reference/sorting.rst", "reference/special.rst", "reference/statistics.rst", "reference/ufunc.rst"], "titles": ["Interplay with the Data Parallel Control Library", "C++ backend API Reference", "Data Parallel Extension for NumPy*", "Overview", "Quick Start Guide", "Binary Operations", "Comparison Table NumPy/ DPNP/ CuPy", "Array Creation Routines", "Data type routines", "Available array data types", "FFT Functions", "dpnp.abs", "dpnp.absolute", "dpnp.add", "dpnp.all", "dpnp.allclose", "dpnp.amax", "dpnp.amin", "dpnp.angle", "dpnp.any", "dpnp.arange", "dpnp.arccos", "dpnp.arccosh", "dpnp.arcsin", "dpnp.arcsinh", "dpnp.arctan", "dpnp.arctan2", "dpnp.arctanh", "dpnp.argmax", "dpnp.argmin", "dpnp.argsort", "dpnp.around", "dpnp.array", "dpnp.array_equal", "dpnp.asanyarray", "dpnp.asarray", "dpnp.ascontiguousarray", "dpnp.asfarray", "dpnp.asfortranarray", "dpnp.asnumpy", "dpnp.atleast_1d", "dpnp.atleast_2d", "dpnp.atleast_3d", "dpnp.average", "dpnp.bincount", "dpnp.bitwise_and", "dpnp.bitwise_not", "dpnp.bitwise_or", "dpnp.bitwise_xor", "dpnp.broadcast_arrays", "dpnp.broadcast_to", "dpnp.can_cast", "dpnp.cbrt", "dpnp.ceil", "dpnp.choose", "dpnp.clip", "dpnp.column_stack", "dpnp.concatenate", "dpnp.conj", "dpnp.conjugate", "dpnp.convolve", "dpnp.copy", "dpnp.copysign", "dpnp.copyto", "dpnp.correlate", "dpnp.cos", "dpnp.cosh", "dpnp.count_nonzero", "dpnp.cov", "dpnp.cross", "dpnp.cumprod", "dpnp.cumsum", "dpnp.deg2rad", "dpnp.degrees", "dpnp.diag", "dpnp.diag_indices", "dpnp.diag_indices_from", "dpnp.diagflat", "dpnp.diagonal", "dpnp.diff", "dpnp.divide", "dpnp.dot", "dpnp.dpnp_array.dpnp_array", "dpnp.dstack", "dpnp.dtype", "dpnp.ediff1d", "dpnp.einsum", "dpnp.einsum_path", "dpnp.empty", "dpnp.empty_like", "dpnp.equal", "dpnp.erf", "dpnp.exp", "dpnp.exp2", "dpnp.expand_dims", "dpnp.expm1", "dpnp.extract", "dpnp.eye", "dpnp.fabs", "dpnp.fft.fft", "dpnp.fft.fft2", "dpnp.fft.fftfreq", "dpnp.fft.fftn", "dpnp.fft.fftshift", "dpnp.fft.hfft", "dpnp.fft.ifft", "dpnp.fft.ifft2", "dpnp.fft.ifftn", "dpnp.fft.ifftshift", "dpnp.fft.ihfft", "dpnp.fft.irfft", "dpnp.fft.irfft2", "dpnp.fft.irfftn", "dpnp.fft.rfft", "dpnp.fft.rfft2", "dpnp.fft.rfftfreq", "dpnp.fft.rfftn", "dpnp.fill_diagonal", "dpnp.finfo", "dpnp.flatiter", "dpnp.flip", "dpnp.fliplr", "dpnp.flipud", "dpnp.floor", "dpnp.floor_divide", "dpnp.fmax", "dpnp.fmin", "dpnp.fmod", "dpnp.from_dlpack", "dpnp.frombuffer", "dpnp.fromfile", "dpnp.fromfunction", "dpnp.fromiter", "dpnp.fromstring", "dpnp.full", "dpnp.full_like", "dpnp.geomspace", "dpnp.get_include", "dpnp.gradient", "dpnp.greater", "dpnp.greater_equal", "dpnp.histogram", "dpnp.hstack", "dpnp.hypot", "dpnp.identity", "dpnp.iinfo", "dpnp.imag", "dpnp.indices", "dpnp.inner", "dpnp.invert", "dpnp.isclose", "dpnp.isfinite", "dpnp.isinf", "dpnp.isnan", "dpnp.isscalar", "dpnp.issubdtype", "dpnp.issubsctype", "dpnp.kron", "dpnp.left_shift", "dpnp.less", "dpnp.less_equal", "dpnp.linalg.cholesky", "dpnp.linalg.cond", "dpnp.linalg.det", "dpnp.linalg.eig", "dpnp.linalg.eigh", "dpnp.linalg.eigvals", "dpnp.linalg.inv", "dpnp.linalg.matrix_power", "dpnp.linalg.matrix_rank", "dpnp.linalg.multi_dot", "dpnp.linalg.norm", "dpnp.linalg.pinv", "dpnp.linalg.qr", "dpnp.linalg.slogdet", "dpnp.linalg.solve", "dpnp.linalg.svd", "dpnp.linspace", "dpnp.loadtxt", "dpnp.log", "dpnp.log10", "dpnp.log1p", "dpnp.log2", "dpnp.logaddexp", "dpnp.logical_and", "dpnp.logical_not", "dpnp.logical_or", "dpnp.logical_xor", "dpnp.logspace", "dpnp.logsumexp", "dpnp.matmul", "dpnp.max", "dpnp.maximum", "dpnp.mean", "dpnp.median", "dpnp.meshgrid", "dpnp.mgrid", "dpnp.min", "dpnp.minimum", "dpnp.mod", "dpnp.modf", "dpnp.moveaxis", "dpnp.multiply", "dpnp.nanargmax", "dpnp.nanargmin", "dpnp.nancumprod", "dpnp.nancumsum", "dpnp.nanmax", "dpnp.nanmean", "dpnp.nanmin", "dpnp.nanprod", "dpnp.nanstd", "dpnp.nansum", "dpnp.nanvar", "dpnp.ndarray", "dpnp.ndarray.T", "dpnp.ndarray.__abs__", "dpnp.ndarray.__add__", "dpnp.ndarray.__and__", "dpnp.ndarray.__complex__", "dpnp.ndarray.__copy__", "dpnp.ndarray.__eq__", "dpnp.ndarray.__float__", "dpnp.ndarray.__floordiv__", "dpnp.ndarray.__ge__", "dpnp.ndarray.__getitem__", "dpnp.ndarray.__gt__", "dpnp.ndarray.__iadd__", "dpnp.ndarray.__iand__", "dpnp.ndarray.__ifloordiv__", "dpnp.ndarray.__ilshift__", "dpnp.ndarray.__imod__", "dpnp.ndarray.__imul__", "dpnp.ndarray.__int__", "dpnp.ndarray.__invert__", "dpnp.ndarray.__ior__", "dpnp.ndarray.__ipow__", "dpnp.ndarray.__irshift__", "dpnp.ndarray.__isub__", "dpnp.ndarray.__itruediv__", "dpnp.ndarray.__ixor__", "dpnp.ndarray.__le__", "dpnp.ndarray.__len__", "dpnp.ndarray.__lshift__", "dpnp.ndarray.__lt__", "dpnp.ndarray.__mod__", "dpnp.ndarray.__mul__", "dpnp.ndarray.__ne__", "dpnp.ndarray.__neg__", "dpnp.ndarray.__new__", "dpnp.ndarray.__or__", "dpnp.ndarray.__pos__", "dpnp.ndarray.__pow__", "dpnp.ndarray.__repr__", "dpnp.ndarray.__rshift__", "dpnp.ndarray.__setitem__", "dpnp.ndarray.__str__", "dpnp.ndarray.__sub__", "dpnp.ndarray.__truediv__", "dpnp.ndarray.__xor__", "dpnp.ndarray.all", "dpnp.ndarray.any", "dpnp.ndarray.argmax", "dpnp.ndarray.argmin", "dpnp.ndarray.argsort", "dpnp.ndarray.astype", "dpnp.ndarray.choose", "dpnp.ndarray.clip", "dpnp.ndarray.conj", "dpnp.ndarray.conjugate", "dpnp.ndarray.copy", "dpnp.ndarray.cumsum", "dpnp.ndarray.diagonal", "dpnp.ndarray.dtype", "dpnp.ndarray.fill", "dpnp.ndarray.flags", "dpnp.ndarray.flat", "dpnp.ndarray.flatten", "dpnp.ndarray.imag", "dpnp.ndarray.item", "dpnp.ndarray.itemsize", "dpnp.ndarray.max", "dpnp.ndarray.mean", "dpnp.ndarray.min", "dpnp.ndarray.nbytes", "dpnp.ndarray.ndim", "dpnp.ndarray.nonzero", "dpnp.ndarray.partition", "dpnp.ndarray.prod", "dpnp.ndarray.put", "dpnp.ndarray.ravel", "dpnp.ndarray.real", "dpnp.ndarray.repeat", "dpnp.ndarray.reshape", "dpnp.ndarray.round", "dpnp.ndarray.shape", "dpnp.ndarray.size", "dpnp.ndarray.sort", "dpnp.ndarray.squeeze", "dpnp.ndarray.std", "dpnp.ndarray.strides", "dpnp.ndarray.sum", "dpnp.ndarray.swapaxes", "dpnp.ndarray.take", "dpnp.ndarray.transpose", "dpnp.ndarray.var", "dpnp.negative", "dpnp.nonzero", "dpnp.not_equal", "dpnp.ogrid", "dpnp.ones", "dpnp.ones_like", "dpnp.outer", "dpnp.partition", "dpnp.place", "dpnp.positive", "dpnp.power", "dpnp.prod", "dpnp.proj", "dpnp.ptp", "dpnp.put", "dpnp.put_along_axis", "dpnp.putmask", "dpnp.rad2deg", "dpnp.radians", "dpnp.random.RandomState", "dpnp.random.beta", "dpnp.random.binomial", "dpnp.random.bytes", "dpnp.random.chisquare", "dpnp.random.choice", "dpnp.random.dirichlet", "dpnp.random.exponential", "dpnp.random.f", "dpnp.random.gamma", "dpnp.random.geometric", "dpnp.random.gumbel", "dpnp.random.hypergeometric", "dpnp.random.laplace", "dpnp.random.logistic", "dpnp.random.lognormal", "dpnp.random.logseries", "dpnp.random.multinomial", "dpnp.random.multivariate_normal", "dpnp.random.negative_binomial", "dpnp.random.noncentral_chisquare", "dpnp.random.noncentral_f", "dpnp.random.normal", "dpnp.random.pareto", "dpnp.random.permutation", "dpnp.random.poisson", "dpnp.random.power", "dpnp.random.rand", "dpnp.random.randint", "dpnp.random.randn", "dpnp.random.random", "dpnp.random.random_integers", "dpnp.random.random_sample", "dpnp.random.ranf", "dpnp.random.rayleigh", "dpnp.random.sample", "dpnp.random.seed", "dpnp.random.shuffle", "dpnp.random.standard_cauchy", "dpnp.random.standard_exponential", "dpnp.random.standard_gamma", "dpnp.random.standard_normal", "dpnp.random.standard_t", "dpnp.random.triangular", "dpnp.random.uniform", "dpnp.random.vonmises", "dpnp.random.wald", "dpnp.random.weibull", "dpnp.random.zipf", "dpnp.ravel", "dpnp.real", "dpnp.reciprocal", "dpnp.reduce_hypot", "dpnp.remainder", "dpnp.repeat", "dpnp.reshape", "dpnp.result_type", "dpnp.right_shift", "dpnp.rint", "dpnp.roll", "dpnp.rollaxis", "dpnp.round", "dpnp.row_stack", "dpnp.rsqrt", "dpnp.searchsorted", "dpnp.select", "dpnp.shape", "dpnp.sign", "dpnp.signbit", "dpnp.sin", "dpnp.sinh", "dpnp.sort", "dpnp.sqrt", "dpnp.square", "dpnp.squeeze", "dpnp.stack", "dpnp.std", "dpnp.subtract", "dpnp.sum", "dpnp.swapaxes", "dpnp.take", "dpnp.take_along_axis", "dpnp.tan", "dpnp.tanh", "dpnp.tensordot", "dpnp.tile", "dpnp.trace", "dpnp.transpose", "dpnp.trapz", "dpnp.tri", "dpnp.tril", "dpnp.tril_indices", "dpnp.tril_indices_from", "dpnp.triu", "dpnp.triu_indices", "dpnp.triu_indices_from", "dpnp.true_divide", "dpnp.trunc", "dpnp.unique", "dpnp.unwrap", "dpnp.vander", "dpnp.var", "dpnp.vdot", "dpnp.vstack", "dpnp.where", "dpnp.zeros", "dpnp.zeros_like", "API Reference", "Array Indexing Routines", "Linear Algebra", "Logic Functions", "Array Manipulation Routines", "Mathematical Functions", "Miscellaneous routines", "Multi-Dimensional Array (ndarray)", "Padding", "Polynomials", "Random Sampling (<code class=\"docutils literal notranslate\"><span class=\"pre\">dpnp.random</span></code>)", "Routines", "Sorting, Searching, and Counting", "Special Functions", "Statistical Functions", "Universal Functions (ufunc)"], "terms": {"provid": [0, 6, 28, 29, 57, 63, 82, 94, 142, 189, 191, 197, 203, 204, 207, 209, 325, 353, 356, 377, 387, 400, 405, 428, 429, 447], "api": [0, 2, 3, 6, 20, 32, 34, 35, 36, 37, 38, 61, 74, 77, 84, 88, 89, 97, 129, 130, 133, 134, 135, 136, 144, 147, 177, 188, 196, 309, 310, 311, 325, 347, 352, 353, 354, 355, 356, 357, 358, 360, 361, 366, 369, 414, 425, 430, 431], "manag": 0, "specif": [0, 4, 84], "sycl": [0, 3, 20, 32, 34, 35, 36, 37, 38, 61, 74, 77, 88, 89, 97, 129, 130, 133, 134, 135, 136, 144, 147, 177, 188, 196, 309, 310, 311, 325, 347, 352, 353, 354, 355, 356, 357, 358, 360, 361, 366, 369, 414, 425, 430, 431], "resourc": 0, "base": [0, 4, 84, 136, 176, 179, 180, 181, 182, 188, 190, 314, 316, 320, 322], "python": [0, 2, 3, 37, 82, 84, 128, 279, 439], "packag": [0, 3], "an": [0, 3, 4, 11, 12, 14, 16, 17, 19, 20, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 54, 55, 56, 57, 61, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 94, 96, 97, 117, 118, 120, 121, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 142, 144, 145, 147, 148, 149, 158, 163, 169, 171, 173, 174, 177, 188, 189, 191, 192, 193, 196, 197, 198, 200, 201, 203, 204, 207, 208, 209, 211, 212, 213, 220, 264, 266, 267, 270, 279, 281, 287, 289, 292, 293, 295, 297, 298, 300, 302, 303, 304, 309, 310, 311, 313, 314, 316, 319, 320, 321, 322, 325, 327, 332, 333, 335, 344, 347, 352, 353, 354, 355, 356, 357, 358, 360, 361, 366, 369, 373, 374, 376, 377, 379, 380, 381, 382, 384, 385, 387, 388, 390, 391, 392, 393, 396, 397, 398, 399, 400, 401, 403, 404, 405, 406, 409, 410, 412, 414, 415, 416, 418, 419, 421, 423, 425, 426, 428, 429, 430, 431, 439], "below": [0, 4, 9, 74, 77, 84, 169, 171, 414, 415, 418, 439], "demonstr": [0, 4, 84], "how": [0, 4, 84, 405], "extens": [0, 1, 3, 4, 9, 137, 432], "numpi": [0, 1, 3, 4, 9, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 265, 268, 269, 273, 278, 279, 289, 291, 293, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 439, 443], "can": [0, 3, 4, 13, 15, 20, 26, 30, 32, 34, 35, 36, 37, 38, 39, 43, 45, 46, 47, 48, 51, 61, 62, 69, 74, 75, 77, 80, 81, 82, 84, 88, 89, 90, 97, 124, 125, 126, 127, 129, 130, 133, 134, 135, 136, 139, 140, 142, 143, 144, 147, 148, 149, 158, 159, 160, 161, 167, 177, 183, 184, 186, 187, 188, 190, 192, 196, 198, 199, 202, 265, 297, 306, 307, 308, 309, 310, 311, 312, 315, 316, 321, 325, 347, 352, 353, 354, 355, 356, 357, 358, 360, 361, 366, 369, 378, 380, 382, 396, 402, 405, 406, 409, 414, 419, 421, 425, 427, 430, 431, 439], "easili": 0, "combin": [0, 84, 94], "devic": [0, 2, 3, 20, 32, 34, 35, 36, 37, 38, 43, 61, 74, 77, 82, 88, 89, 97, 128, 129, 130, 133, 134, 135, 136, 144, 147, 177, 188, 189, 190, 193, 196, 208, 211, 212, 213, 309, 310, 311, 325, 347, 352, 353, 354, 355, 356, 357, 358, 360, 361, 366, 369, 376, 377, 399, 401, 403, 414, 425, 426, 430, 431], "interfac": [0, 129], "dpctl": [0, 4, 11, 12, 13, 14, 15, 19, 20, 21, 22, 23, 24, 25, 26, 27, 31, 32, 34, 35, 36, 37, 38, 45, 46, 47, 48, 52, 53, 58, 59, 61, 62, 65, 66, 67, 74, 77, 80, 82, 88, 89, 90, 92, 93, 95, 96, 97, 123, 124, 125, 126, 127, 129, 130, 133, 134, 135, 136, 139, 140, 143, 144, 147, 149, 151, 152, 153, 158, 159, 160, 165, 175, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192, 196, 197, 198, 199, 202, 203, 204, 207, 209, 210, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 325, 347, 352, 353, 354, 355, 356, 357, 358, 360, 361, 366, 369, 378, 382, 383, 386, 388, 392, 393, 394, 395, 397, 398, 402, 405, 407, 408, 414, 421, 422, 425, 429, 430, 431], "liter": 0, "queue": [0, 20, 32, 34, 35, 36, 37, 38, 61, 74, 77, 88, 89, 97, 129, 130, 133, 134, 135, 136, 144, 147, 177, 188, 196, 309, 310, 311, 325, 347, 352, 353, 354, 355, 356, 357, 358, 360, 361, 366, 369, 414, 425, 430, 431], "from": [0, 3, 18, 28, 29, 30, 34, 35, 49, 51, 54, 57, 63, 72, 73, 82, 83, 84, 93, 96, 120, 128, 129, 130, 132, 133, 142, 144, 169, 178, 189, 195, 212, 256, 266, 270, 298, 303, 316, 321, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 356, 357, 359, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 377, 380, 381, 387, 390, 398, 399, 400, 403, 405, 406, 424, 425, 428, 429, 443], "allow": [0, 82, 265, 293, 439], "set": [0, 28, 29, 32, 54, 75, 77, 82, 84, 88, 134, 144, 147, 169, 171, 172, 177, 255, 265, 266, 276, 310, 311, 392, 393, 430, 431, 439], "input": [0, 11, 12, 13, 14, 15, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 52, 53, 55, 58, 59, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 77, 78, 79, 80, 81, 82, 85, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 110, 111, 112, 113, 114, 116, 120, 121, 122, 123, 124, 125, 126, 127, 129, 133, 134, 135, 138, 139, 140, 142, 143, 144, 146, 148, 149, 150, 151, 152, 153, 158, 159, 160, 161, 162, 163, 165, 166, 168, 169, 171, 173, 174, 175, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 265, 277, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 347, 353, 369, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 418, 421, 422, 424, 425, 426, 427, 429, 430, 431], "current": [0, 11, 12, 13, 15, 21, 22, 23, 24, 25, 26, 27, 45, 46, 47, 48, 52, 53, 55, 62, 65, 66, 70, 71, 80, 84, 85, 92, 93, 95, 98, 123, 124, 125, 126, 127, 130, 138, 143, 144, 149, 158, 180, 181, 182, 183, 192, 198, 199, 200, 202, 205, 206, 306, 315, 316, 318, 376, 378, 382, 383, 388, 392, 393, 394, 395, 402, 407, 408, 413, 421, 422], "usabl": 0, "insid": 0, "context": 0, "": [0, 3, 4, 69, 82, 84, 100, 102, 106, 107, 111, 112, 114, 116, 129, 130, 143, 169, 171, 176, 273, 325, 326, 327, 332, 333, 334, 336, 337, 338, 339, 340, 342, 344, 347, 348, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 410, 439], "scope": [0, 4], "thi": [0, 11, 12, 16, 17, 20, 28, 29, 31, 32, 34, 35, 36, 37, 38, 39, 55, 57, 61, 72, 74, 75, 77, 79, 82, 83, 84, 118, 121, 122, 129, 130, 133, 134, 135, 136, 137, 142, 171, 174, 177, 188, 189, 190, 191, 197, 199, 201, 203, 204, 207, 209, 265, 270, 274, 287, 293, 295, 321, 323, 358, 360, 374, 377, 380, 385, 387, 400, 405, 406, 410, 425, 428, 429], "wai": [0, 3, 4, 82, 130, 287, 409], "arrai": [0, 2, 3, 4, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 102, 106, 107, 111, 112, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 220, 256, 262, 263, 264, 265, 266, 267, 270, 273, 274, 275, 277, 278, 279, 280, 282, 284, 285, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 344, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 443], "creation": [0, 84, 87, 432, 439, 443], "function": [0, 2, 3, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 34, 35, 36, 38, 39, 45, 46, 47, 48, 52, 53, 58, 59, 61, 62, 64, 65, 66, 68, 70, 71, 72, 78, 80, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 123, 124, 125, 126, 127, 129, 130, 131, 133, 134, 135, 137, 138, 139, 140, 143, 144, 149, 150, 151, 152, 153, 158, 159, 160, 170, 171, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 192, 194, 195, 198, 199, 200, 202, 203, 204, 205, 206, 210, 260, 261, 270, 293, 304, 306, 307, 308, 310, 311, 312, 314, 315, 316, 317, 318, 320, 323, 324, 325, 328, 330, 331, 341, 346, 362, 376, 377, 378, 382, 383, 386, 387, 388, 392, 393, 394, 395, 397, 398, 401, 402, 405, 406, 407, 408, 410, 413, 421, 422, 426, 428, 429, 430, 431, 432, 439, 443], "dpnp": [0, 2, 3, 4, 432, 439, 443, 444, 447], "which": [0, 3, 4, 28, 29, 30, 34, 35, 43, 49, 57, 63, 77, 79, 81, 82, 84, 94, 118, 120, 136, 142, 161, 169, 171, 188, 189, 190, 191, 193, 197, 203, 204, 207, 208, 209, 210, 211, 212, 213, 265, 307, 317, 320, 377, 379, 384, 396, 399, 400, 401, 403, 412, 414, 415, 416, 418, 419, 426, 439], "i": [0, 3, 4, 6, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 43, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 123, 124, 125, 126, 127, 129, 130, 133, 134, 135, 136, 138, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 161, 162, 163, 165, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 220, 265, 270, 277, 287, 293, 297, 306, 307, 309, 310, 311, 313, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 329, 332, 333, 334, 335, 336, 337, 338, 339, 340, 344, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 439], "defin": [0, 69, 84, 89, 135, 311, 315, 431, 439], "alloc": [0, 3, 4, 20, 32, 34, 35, 36, 37, 38, 43, 61, 74, 77, 82, 88, 89, 97, 129, 130, 133, 134, 135, 136, 144, 147, 177, 188, 189, 193, 196, 208, 211, 212, 213, 265, 309, 310, 311, 325, 347, 352, 353, 354, 355, 356, 357, 358, 360, 366, 369, 376, 377, 399, 401, 403, 414, 425, 426, 430, 431], "us": [0, 4, 13, 20, 32, 34, 35, 36, 37, 38, 39, 45, 46, 47, 48, 51, 55, 57, 61, 69, 74, 75, 77, 80, 82, 84, 88, 89, 90, 94, 97, 123, 124, 129, 130, 133, 134, 135, 136, 137, 139, 140, 144, 146, 147, 148, 149, 158, 159, 160, 161, 169, 172, 177, 184, 186, 188, 190, 193, 195, 196, 202, 208, 211, 213, 220, 265, 270, 306, 307, 308, 309, 310, 311, 315, 316, 321, 325, 328, 330, 331, 341, 346, 347, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 366, 369, 374, 375, 378, 379, 380, 382, 384, 401, 402, 403, 405, 406, 409, 410, 413, 414, 419, 421, 425, 426, 430, 431, 439], "import": [0, 3, 4, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 77, 79, 80, 81, 82, 83, 84, 85, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 158, 159, 160, 161, 163, 165, 167, 169, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 265, 270, 278, 287, 291, 297, 304, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 324, 350, 359, 363, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431], "np": [0, 3, 4, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 77, 79, 80, 81, 82, 83, 84, 85, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 133, 134, 135, 136, 138, 139, 140, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 158, 159, 160, 161, 167, 169, 172, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 265, 270, 274, 278, 279, 287, 291, 297, 306, 307, 308, 309, 310, 311, 312, 315, 317, 318, 319, 320, 321, 324, 350, 359, 372, 373, 374, 375, 376, 377, 378, 379, 382, 383, 384, 385, 386, 387, 388, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 413, 414, 415, 418, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431], "device_context": 0, "opencl": [0, 20, 32, 34, 35, 36, 38, 61, 74, 77, 88, 89, 97, 129, 130, 134, 135, 136, 144, 177, 188, 196, 309, 310, 311, 414, 425, 430, 431], "gpu": [0, 3, 4, 20, 32, 34, 35, 36, 38, 61, 74, 77, 88, 89, 97, 129, 130, 134, 135, 136, 144, 177, 188, 196, 309, 310, 311, 414, 425, 430, 431], "x": [0, 3, 4, 11, 12, 14, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 38, 40, 41, 42, 46, 49, 50, 52, 53, 58, 59, 61, 62, 64, 65, 66, 68, 69, 70, 71, 74, 77, 79, 82, 84, 85, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 119, 123, 124, 129, 130, 131, 134, 135, 136, 138, 144, 146, 147, 149, 151, 152, 153, 171, 173, 175, 177, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 195, 196, 200, 201, 205, 206, 265, 270, 278, 279, 291, 306, 307, 309, 310, 311, 312, 314, 315, 317, 318, 319, 320, 343, 349, 374, 375, 376, 377, 379, 383, 384, 385, 386, 388, 392, 393, 394, 395, 397, 398, 399, 404, 405, 407, 408, 413, 414, 422, 423, 425, 429, 430, 431], "1": [0, 3, 4, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 32, 34, 35, 36, 38, 40, 41, 42, 43, 44, 49, 50, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 132, 133, 135, 136, 138, 140, 141, 142, 144, 146, 147, 148, 150, 158, 159, 160, 161, 162, 163, 165, 167, 169, 170, 171, 173, 174, 175, 177, 178, 179, 181, 182, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 264, 265, 270, 272, 274, 278, 279, 287, 291, 297, 304, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 324, 325, 327, 329, 330, 332, 334, 336, 338, 339, 340, 342, 343, 344, 347, 349, 350, 351, 352, 353, 355, 357, 358, 359, 360, 364, 366, 369, 374, 375, 376, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 439], "2": [0, 3, 4, 11, 12, 13, 20, 22, 24, 28, 29, 30, 32, 34, 35, 36, 37, 38, 40, 41, 43, 45, 47, 49, 50, 52, 53, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 77, 79, 80, 81, 82, 83, 84, 85, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 100, 106, 111, 114, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 133, 134, 136, 138, 139, 140, 141, 142, 144, 146, 147, 148, 158, 159, 160, 161, 162, 163, 165, 167, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 265, 270, 274, 279, 287, 304, 307, 308, 309, 310, 311, 312, 316, 317, 318, 319, 320, 324, 325, 329, 333, 337, 343, 349, 352, 354, 365, 367, 368, 371, 373, 374, 375, 376, 378, 379, 380, 382, 383, 384, 385, 386, 387, 391, 393, 394, 395, 397, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 412, 413, 414, 415, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431], "3": [0, 3, 4, 13, 20, 21, 26, 28, 29, 30, 32, 34, 35, 36, 37, 38, 40, 41, 42, 43, 45, 48, 49, 50, 52, 55, 56, 57, 60, 61, 62, 63, 64, 67, 68, 69, 70, 71, 74, 75, 77, 79, 80, 81, 82, 83, 84, 85, 88, 89, 90, 91, 92, 93, 95, 97, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 134, 136, 138, 141, 142, 143, 144, 146, 147, 148, 158, 163, 167, 169, 173, 174, 175, 176, 177, 178, 180, 181, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 270, 279, 287, 297, 304, 307, 308, 309, 310, 311, 312, 316, 317, 318, 320, 325, 329, 333, 340, 343, 349, 352, 353, 354, 364, 368, 371, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 391, 393, 396, 397, 399, 400, 401, 402, 404, 405, 409, 410, 412, 413, 414, 415, 418, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431], "sum": [0, 3, 4, 6, 13, 43, 71, 74, 77, 79, 81, 82, 141, 143, 148, 183, 189, 190, 206, 212, 271, 327, 342, 344, 377, 409, 411, 439, 443], "For": [0, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 167, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 265, 268, 269, 278, 279, 288, 289, 290, 291, 292, 293, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 439], "more": [0, 3, 4, 30, 32, 40, 41, 42, 83, 84, 121, 122, 128, 130, 142, 147, 169, 170, 172, 176, 400, 409, 439], "inform": [0, 36, 38, 82, 84, 118, 275, 439, 443], "pleas": [0, 3, 439], "refer": [0, 2, 3, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 167, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 260, 261, 262, 263, 264, 265, 267, 268, 269, 278, 279, 281, 282, 283, 287, 288, 289, 290, 291, 292, 293, 297, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 439], "document": [0, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 167, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 260, 261, 262, 263, 264, 265, 267, 268, 269, 278, 279, 281, 282, 283, 287, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 439], "time": [0, 13, 15, 26, 45, 47, 48, 62, 79, 80, 81, 90, 124, 125, 126, 127, 139, 140, 143, 148, 153, 158, 159, 160, 183, 184, 186, 187, 192, 198, 199, 202, 308, 312, 316, 327, 342, 378, 379, 382, 402, 406, 409, 410, 421, 427], "def": 0, "run": [0, 4], "executor": 0, "size": [0, 6, 20, 32, 43, 57, 64, 68, 82, 84, 130, 136, 142, 171, 173, 176, 177, 188, 193, 208, 279, 280, 295, 310, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 353, 355, 356, 357, 358, 359, 360, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 384, 387, 399, 400, 409, 419, 428, 430], "test_typ": 0, "repetit": [0, 379, 410], "reshap": [0, 6, 13, 28, 29, 40, 42, 43, 74, 75, 80, 81, 82, 83, 94, 120, 127, 147, 148, 190, 191, 197, 202, 295, 304, 349, 374, 384, 402, 409, 421, 439], "arang": [0, 6, 13, 28, 29, 40, 41, 42, 43, 44, 55, 62, 73, 74, 75, 80, 81, 90, 92, 93, 95, 120, 127, 135, 136, 141, 147, 148, 177, 180, 181, 184, 185, 186, 187, 188, 190, 191, 195, 197, 202, 308, 311, 316, 320, 324, 349, 378, 381, 384, 402, 409, 421, 429, 431], "dtype": [0, 9, 11, 12, 13, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 34, 35, 36, 37, 38, 43, 45, 46, 47, 48, 51, 52, 53, 57, 58, 59, 62, 65, 66, 68, 75, 80, 82, 88, 89, 90, 92, 93, 95, 97, 118, 123, 124, 125, 126, 127, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 142, 143, 144, 145, 147, 149, 151, 152, 153, 158, 159, 160, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 197, 198, 199, 202, 203, 204, 207, 208, 209, 210, 211, 212, 213, 265, 271, 282, 288, 299, 301, 305, 306, 308, 310, 311, 315, 316, 317, 318, 325, 347, 353, 369, 376, 377, 378, 381, 382, 383, 387, 388, 392, 393, 394, 395, 397, 398, 400, 401, 402, 403, 407, 408, 411, 414, 415, 418, 421, 422, 426, 428, 430, 431, 439], "_": [0, 400], "rang": [0, 18, 141, 319, 320, 344, 349, 400, 409, 412, 424, 443], "start_tim": 0, "perf_count": 0, "result": [0, 4, 14, 19, 28, 29, 43, 45, 46, 47, 48, 51, 55, 57, 70, 71, 81, 84, 85, 89, 98, 129, 130, 131, 133, 135, 136, 138, 147, 149, 151, 152, 153, 158, 161, 171, 173, 177, 184, 185, 186, 187, 188, 189, 190, 191, 193, 197, 200, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 311, 312, 316, 317, 325, 327, 357, 377, 380, 381, 382, 385, 400, 401, 403, 406, 409, 410, 426, 431, 439], "end_tim": 0, "append": [0, 6, 79, 94], "return": [0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 216, 217, 218, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 257, 258, 259, 260, 261, 262, 263, 264, 265, 269, 270, 271, 272, 273, 275, 276, 277, 279, 281, 282, 283, 286, 287, 288, 290, 293, 294, 299, 300, 301, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 325, 328, 347, 349, 352, 353, 354, 355, 356, 357, 358, 360, 361, 366, 369, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425, 426, 427, 428, 429, 430, 431, 439], "median": [0, 6], "get_dtyp": 0, "_dtypes_list": 0, "int32": [0, 9, 37, 51, 84, 88, 89, 97, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 129, 131, 132, 134, 135, 144, 178, 310, 311, 325, 327, 335, 337, 342, 344, 350, 353, 369, 381, 403, 414, 430, 431], "int64": [0, 9, 51, 84, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 131, 132, 178, 381], "float32": [0, 37, 51, 82, 84, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 131, 132, 178, 265, 325, 347, 352, 354, 355, 357, 358, 360, 366, 369, 381], "select_default_devic": 0, "has_aspect_fp64": 0, "float64": [0, 37, 43, 51, 82, 84, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 131, 132, 178, 265, 325, 326, 332, 333, 334, 336, 338, 339, 340, 347, 348, 351, 352, 354, 355, 357, 358, 359, 360, 365, 366, 367, 368, 369, 370, 371, 372, 373, 381, 414], "test_repetit": 0, "5": [0, 6, 13, 14, 20, 27, 28, 40, 43, 44, 45, 47, 48, 49, 53, 55, 57, 60, 63, 64, 67, 69, 70, 71, 74, 75, 79, 80, 81, 82, 85, 91, 120, 121, 122, 123, 124, 125, 126, 127, 136, 138, 141, 142, 143, 146, 147, 148, 158, 161, 165, 167, 175, 177, 184, 185, 186, 187, 188, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 208, 211, 265, 270, 307, 309, 310, 311, 316, 319, 320, 325, 326, 327, 329, 332, 344, 348, 349, 350, 351, 354, 357, 372, 374, 375, 376, 378, 380, 382, 383, 384, 385, 386, 387, 392, 400, 401, 403, 404, 405, 409, 410, 412, 414, 415, 418, 421, 422, 424, 425, 427, 428, 429, 430, 431], "type_nam": 0, "name": [0, 6, 84], "print": [0, 4, 43, 44, 60, 84, 141, 256, 325, 344, 349, 423], "f": [0, 6, 32, 34, 35, 36, 38, 39, 52, 55, 61, 62, 82, 84, 88, 89, 93, 97, 134, 135, 190, 265, 270, 277, 310, 311, 346, 374, 376, 380, 388, 430, 431], "test": [0, 2, 14, 15, 19, 151, 152, 153, 210, 327, 443], "type": [0, 2, 3, 4, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 77, 79, 80, 81, 82, 83, 84, 85, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 161, 163, 165, 166, 167, 168, 169, 170, 171, 172, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 265, 270, 273, 277, 293, 304, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 324, 325, 326, 327, 329, 332, 333, 334, 335, 336, 337, 338, 339, 340, 344, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 418, 419, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 443], "each": [0, 11, 12, 21, 22, 23, 24, 25, 27, 40, 41, 42, 43, 44, 49, 50, 52, 53, 58, 59, 62, 65, 66, 82, 84, 121, 122, 123, 124, 131, 165, 166, 178, 190, 201, 294, 295, 306, 315, 318, 321, 327, 344, 379, 384, 388, 392, 393, 394, 395, 397, 400, 406, 407, 408, 410, 416, 419, 422, 439], "64": [0, 4, 136, 316, 386], "128": [0, 136], "256": [0, 136], "512": 0, "1024": 0, "2048": 0, "4096": 0, "time_numpi": 0, "result_numpi": 0, "time_dpnp": 0, "result_dpnp": 0, "verif": 0, "true": [0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 36, 38, 40, 43, 45, 46, 47, 48, 51, 52, 53, 58, 59, 61, 62, 63, 65, 66, 67, 68, 80, 82, 84, 90, 92, 93, 94, 95, 96, 120, 121, 122, 123, 124, 125, 126, 127, 136, 139, 140, 141, 143, 147, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 161, 167, 169, 171, 172, 173, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 197, 198, 199, 202, 203, 204, 207, 208, 209, 210, 211, 212, 213, 260, 261, 265, 270, 281, 282, 283, 288, 299, 301, 305, 306, 308, 315, 316, 317, 318, 321, 330, 376, 377, 378, 380, 382, 383, 388, 392, 393, 394, 395, 397, 398, 401, 402, 403, 406, 407, 408, 409, 421, 422, 425, 426, 429], "els": [0, 174], "msg": 0, "n": [0, 4, 71, 75, 76, 79, 83, 84, 85, 94, 97, 99, 101, 102, 104, 105, 107, 109, 110, 112, 113, 115, 116, 117, 138, 144, 169, 171, 172, 173, 176, 190, 195, 211, 213, 320, 327, 342, 344, 354, 364, 391, 398, 401, 404, 405, 409, 412, 414, 415, 416, 418, 419, 425, 426, 439], "4": [0, 13, 14, 20, 28, 29, 32, 40, 42, 43, 45, 47, 49, 55, 56, 57, 60, 63, 65, 67, 69, 70, 71, 74, 75, 77, 79, 80, 81, 82, 83, 84, 85, 88, 90, 93, 120, 124, 125, 126, 130, 134, 136, 138, 139, 140, 141, 142, 143, 146, 147, 148, 160, 163, 167, 169, 174, 177, 182, 184, 188, 190, 191, 192, 193, 194, 196, 197, 198, 201, 202, 203, 204, 205, 206, 208, 211, 213, 270, 287, 297, 304, 307, 309, 311, 316, 317, 319, 320, 325, 326, 329, 349, 354, 370, 374, 375, 378, 379, 380, 384, 385, 386, 387, 392, 396, 397, 400, 401, 402, 404, 405, 409, 410, 412, 413, 415, 418, 421, 425, 426, 427, 428, 429, 431], "3e": 0, "ratio": 0, "6": [0, 4, 6, 13, 20, 28, 29, 40, 43, 47, 48, 55, 57, 63, 69, 70, 71, 73, 74, 75, 79, 80, 81, 82, 84, 85, 90, 95, 98, 120, 135, 142, 146, 147, 148, 172, 173, 176, 177, 188, 205, 206, 210, 270, 279, 307, 311, 316, 319, 324, 325, 342, 344, 349, 354, 374, 375, 380, 384, 385, 386, 387, 400, 402, 403, 404, 405, 409, 413, 415, 418, 421, 424, 427, 428, 429, 431], "2f": 0, "__name__": 0, "__main__": 0, "try": [0, 4], "gpu_queu": 0, "get_sycl_devic": [0, 325], "print_device_info": 0, "except": [0, 4, 15, 20, 30, 32, 34, 35, 36, 38, 49, 50, 55, 57, 61, 67, 79, 81, 82, 88, 89, 97, 99, 105, 113, 129, 130, 133, 134, 135, 142, 144, 190, 191, 193, 197, 207, 208, 209, 211, 212, 213, 265, 295, 310, 311, 379, 380, 396, 401, 403, 426, 430, 431], "importerror": 0, "data": [1, 3, 4, 11, 12, 13, 14, 15, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 43, 45, 46, 47, 48, 50, 51, 52, 53, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 73, 74, 77, 80, 81, 82, 84, 85, 88, 89, 90, 91, 92, 93, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 118, 123, 124, 125, 126, 127, 128, 129, 130, 133, 134, 135, 138, 139, 140, 142, 143, 144, 145, 147, 149, 150, 151, 152, 153, 158, 159, 160, 165, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 265, 293, 304, 306, 307, 308, 310, 311, 312, 315, 316, 317, 318, 320, 321, 324, 325, 326, 327, 329, 332, 333, 334, 335, 336, 337, 338, 339, 340, 344, 347, 348, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 380, 382, 383, 384, 385, 386, 387, 388, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 405, 406, 407, 408, 413, 414, 421, 422, 424, 426, 428, 429, 430, 431, 432, 443], "parallel": [1, 3, 4, 9, 432], "overview": 2, "quick": [2, 3], "start": [2, 3, 20, 36, 38, 129, 136, 177, 188, 385], "guid": [2, 3], "driver": 2, "interpret": [2, 34, 35, 39, 50, 61, 84, 129, 439], "instal": 2, "exampl": [2, 3, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 77, 79, 80, 81, 82, 83, 84, 85, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 158, 159, 160, 161, 163, 165, 167, 169, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 256, 265, 270, 274, 278, 279, 287, 291, 293, 297, 304, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 329, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431], "multi": [2, 82, 100, 102, 106, 107, 111, 112, 114, 116, 196, 300, 309, 432], "dimension": [2, 4, 28, 29, 30, 60, 64, 67, 75, 76, 77, 79, 82, 99, 100, 101, 102, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 129, 130, 132, 173, 189, 191, 195, 196, 197, 203, 204, 207, 209, 211, 212, 213, 298, 309, 377, 396, 401, 403, 410, 426, 427, 432], "ndarrai": [2, 3, 6, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 77, 78, 79, 80, 81, 82, 83, 84, 85, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 133, 134, 135, 136, 138, 139, 140, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 158, 159, 160, 161, 162, 163, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 347, 352, 353, 354, 355, 356, 357, 358, 360, 366, 369, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 418, 419, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432], "univers": [2, 432, 439], "ufunc": [2, 432, 439], "routin": [2, 432, 439], "special": [2, 84, 91, 432, 443], "avail": [2, 3, 4, 84, 432, 439], "comparison": [2, 90, 139, 140, 159, 160, 308, 432, 443], "tabl": [2, 9, 171, 432], "cupi": [2, 432], "miscellan": [2, 432, 443], "c": [2, 4, 32, 34, 35, 36, 38, 39, 52, 55, 61, 62, 69, 81, 82, 84, 88, 89, 93, 97, 134, 135, 137, 148, 163, 174, 178, 190, 265, 270, 277, 290, 310, 311, 316, 374, 376, 380, 388, 409, 410, 430, 431], "backend": [2, 137, 328, 330, 331, 341, 346, 362], "The": [3, 4, 13, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 43, 45, 46, 47, 48, 50, 52, 53, 55, 56, 57, 58, 59, 61, 62, 63, 65, 66, 68, 69, 74, 77, 79, 80, 82, 83, 84, 85, 88, 89, 90, 92, 94, 95, 97, 99, 105, 113, 120, 123, 124, 125, 126, 127, 129, 130, 131, 133, 134, 135, 136, 139, 140, 142, 143, 144, 146, 147, 149, 158, 159, 160, 161, 163, 165, 166, 170, 171, 172, 173, 174, 176, 177, 179, 180, 181, 182, 184, 186, 188, 189, 190, 191, 192, 196, 197, 198, 199, 201, 202, 203, 204, 207, 209, 211, 212, 213, 270, 277, 278, 287, 291, 306, 308, 309, 310, 311, 315, 316, 318, 319, 321, 325, 328, 330, 331, 341, 346, 347, 352, 353, 354, 355, 356, 357, 358, 360, 361, 366, 369, 374, 375, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 391, 392, 394, 395, 396, 400, 401, 402, 403, 406, 407, 408, 409, 410, 412, 414, 416, 417, 419, 420, 421, 422, 425, 426, 428, 429, 430, 431, 439, 443], "librari": [3, 4, 439], "implement": [3, 6, 37, 128], "subset": [3, 399, 443], "execut": [3, 4, 11, 12, 13, 14, 15, 19, 21, 22, 23, 24, 25, 26, 27, 31, 34, 35, 45, 46, 47, 48, 52, 53, 58, 59, 62, 64, 65, 66, 68, 70, 71, 78, 80, 85, 86, 87, 90, 91, 92, 93, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 123, 124, 125, 126, 127, 131, 138, 139, 140, 143, 149, 150, 151, 152, 153, 158, 159, 160, 179, 180, 181, 182, 183, 184, 185, 186, 187, 192, 194, 198, 199, 200, 202, 205, 206, 210, 306, 307, 308, 312, 314, 315, 316, 317, 320, 328, 330, 331, 341, 346, 362, 376, 378, 382, 383, 386, 388, 392, 393, 394, 395, 397, 398, 402, 405, 407, 408, 413, 421, 422, 429], "ani": [3, 6, 14, 15, 30, 32, 34, 35, 36, 37, 38, 49, 50, 61, 74, 77, 79, 82, 84, 117, 134, 135, 136, 142, 177, 188, 207, 209, 265, 325, 369, 396, 397, 425, 439], "drop": [3, 84], "replac": [3, 37, 55, 321, 330, 439], "core": [3, 84, 439], "numer": [3, 4, 62, 84, 306, 315, 443], "being": [3, 84], "develop": [3, 4], "part": [3, 58, 59, 82, 146, 200, 278, 291, 318, 375, 439], "intel": [3, 4], "ai": [3, 321, 406], "analyt": 3, "toolkit": 3, "distribut": [3, 4, 188, 325, 326, 327, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 356, 357, 359, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 443], "also": [3, 20, 62, 84, 94, 133, 161, 201, 363, 439], "anaconda": 3, "cloud": 3, "page": [3, 443], "learn": [3, 4], "Being": 3, "mean": [3, 6, 43, 82, 129, 130, 171, 194, 208, 211, 213, 265, 277, 325, 338, 340, 343, 347, 366, 370, 371, 374, 380, 401, 403, 426, 439], "usag": [3, 4], "veri": [3, 195], "similar": [3, 34, 35, 82, 84, 136, 177, 188, 270, 325, 353], "class": [3, 82, 84, 85, 119, 129, 130, 133, 147, 325, 353, 397, 398, 414, 443], "compat": [3, 28, 29, 43, 82, 189, 191, 193, 197, 203, 204, 207, 208, 209, 211, 212, 213, 265, 377, 380, 401, 403, 426, 443], "altern": [3, 4, 81, 190, 193, 208, 211, 212, 213, 401, 403, 426], "abov": [3, 74, 77, 147, 173, 189, 212, 377, 403, 414, 415, 418], "instanc": [3, 20, 32, 34, 35, 36, 37, 38, 61, 74, 77, 82, 88, 89, 97, 129, 130, 133, 134, 135, 136, 144, 147, 177, 188, 190, 196, 309, 310, 311, 325, 347, 352, 353, 354, 355, 356, 357, 358, 360, 361, 366, 369, 414, 425, 430, 431], "creat": [3, 4, 20, 32, 34, 35, 36, 37, 38, 61, 74, 75, 77, 82, 84, 88, 89, 97, 128, 129, 130, 132, 133, 134, 135, 136, 144, 147, 177, 188, 196, 270, 309, 310, 311, 321, 325, 347, 352, 353, 354, 355, 356, 357, 358, 360, 361, 366, 369, 414, 425, 430, 431, 439, 443], "ident": [3, 6, 84, 175, 364], "one": [3, 4, 30, 32, 37, 40, 41, 42, 43, 55, 60, 63, 64, 82, 84, 88, 90, 94, 95, 97, 99, 101, 104, 105, 109, 110, 113, 115, 121, 122, 130, 134, 142, 144, 147, 171, 179, 180, 181, 182, 195, 196, 205, 270, 277, 280, 309, 311, 318, 344, 385, 396, 399, 400, 409, 416, 419, 430, 439], "kei": [3, 30, 82, 84, 119, 225, 255, 396], "differ": [3, 20, 32, 34, 35, 36, 38, 43, 61, 71, 74, 77, 79, 82, 84, 85, 88, 89, 97, 118, 121, 122, 129, 130, 134, 135, 136, 138, 144, 166, 171, 177, 188, 189, 190, 196, 212, 270, 309, 310, 311, 316, 377, 402, 403, 414, 425, 430, 431, 443], "memori": [3, 32, 34, 35, 36, 38, 39, 52, 55, 61, 62, 82, 84, 88, 89, 93, 97, 134, 135, 190, 195, 275, 277, 300, 310, 311, 376, 380, 388, 430, 431, 432], "default": [3, 11, 12, 13, 14, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 43, 45, 46, 47, 48, 49, 50, 52, 53, 55, 57, 58, 59, 61, 62, 64, 65, 66, 68, 69, 74, 77, 78, 79, 80, 82, 84, 85, 88, 89, 90, 92, 93, 95, 97, 99, 105, 117, 120, 123, 124, 125, 126, 127, 129, 130, 133, 134, 135, 136, 139, 140, 142, 143, 144, 147, 149, 151, 152, 153, 158, 159, 160, 161, 169, 171, 172, 173, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 202, 203, 204, 207, 208, 209, 210, 211, 212, 213, 265, 270, 277, 306, 308, 309, 310, 311, 313, 315, 316, 317, 318, 320, 325, 329, 347, 352, 353, 354, 355, 356, 357, 358, 360, 361, 363, 364, 366, 369, 374, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 405, 407, 408, 409, 411, 412, 414, 415, 416, 418, 419, 421, 422, 425, 426, 428, 430, 431, 439], "system": [3, 4, 175], "integr": [3, 4, 43, 82, 189, 193, 200, 208, 211, 212, 213, 297, 316, 376, 377, 401, 403, 413, 426], "discret": [3, 60, 64, 71, 79, 85, 99, 100, 101, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 138, 325, 432], "otherwis": [3, 11, 12, 13, 14, 15, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 58, 59, 61, 62, 64, 65, 66, 67, 68, 70, 71, 78, 79, 80, 82, 84, 85, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 123, 124, 125, 126, 127, 129, 130, 133, 134, 135, 136, 138, 139, 140, 143, 144, 148, 149, 150, 151, 152, 153, 158, 159, 160, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 265, 277, 293, 306, 307, 308, 310, 311, 312, 314, 315, 316, 317, 320, 325, 326, 327, 329, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 365, 366, 367, 368, 369, 370, 371, 372, 373, 376, 377, 378, 380, 382, 383, 386, 388, 392, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 405, 407, 408, 413, 421, 422, 426, 429, 430, 431], "host": [3, 4, 20, 32, 34, 35, 36, 37, 38, 61, 74, 77, 88, 89, 97, 129, 130, 133, 134, 135, 136, 144, 147, 177, 188, 196, 309, 310, 311, 325, 347, 352, 353, 354, 355, 356, 357, 358, 360, 366, 369, 414, 425, 430, 431], "do": [3, 4, 84, 327, 385], "have": [3, 4, 18, 28, 29, 33, 40, 41, 42, 43, 50, 52, 56, 57, 62, 69, 81, 83, 84, 93, 118, 142, 178, 189, 190, 191, 193, 197, 203, 204, 207, 208, 209, 211, 212, 213, 344, 376, 377, 387, 388, 400, 401, 403, 410, 426, 428, 439], "most": [3, 4, 79, 84, 399], "manipul": [3, 75, 432, 443], "ar": [3, 4, 11, 12, 13, 14, 15, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 40, 41, 42, 43, 45, 46, 47, 48, 49, 52, 53, 55, 56, 57, 58, 59, 62, 63, 64, 65, 66, 67, 68, 70, 71, 73, 78, 79, 80, 81, 82, 84, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 120, 121, 122, 123, 124, 125, 126, 127, 131, 132, 136, 138, 139, 140, 143, 148, 149, 150, 151, 152, 153, 158, 159, 160, 161, 165, 166, 169, 171, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 265, 286, 287, 306, 307, 308, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 324, 325, 326, 327, 329, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 347, 348, 350, 351, 353, 356, 357, 359, 365, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 382, 383, 384, 386, 387, 388, 390, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 405, 407, 408, 409, 411, 413, 417, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 439], "done": [3, 82, 265], "see": [3, 31, 84, 128, 171, 342, 386, 416, 417, 419, 420, 439], "complet": [3, 4, 130, 173, 385, 439], "list": [3, 6, 9, 32, 34, 35, 36, 38, 40, 41, 42, 49, 57, 61, 74, 77, 83, 84, 134, 135, 136, 142, 177, 188, 190, 381, 387, 390, 400, 409, 412, 425, 428], "support": [3, 9, 11, 12, 13, 14, 15, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 34, 35, 36, 37, 38, 45, 46, 47, 48, 49, 50, 52, 53, 58, 59, 61, 62, 64, 65, 66, 67, 68, 70, 71, 73, 78, 80, 82, 84, 85, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 143, 144, 149, 150, 151, 152, 153, 158, 159, 160, 162, 165, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 190, 191, 192, 193, 194, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 265, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 324, 325, 326, 327, 329, 332, 333, 334, 335, 336, 337, 338, 339, 340, 343, 344, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 365, 366, 367, 368, 369, 370, 371, 372, 373, 376, 378, 380, 382, 383, 386, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 401, 402, 403, 405, 407, 408, 411, 413, 421, 422, 424, 426, 429, 430, 431, 447], "along": [3, 4, 14, 16, 17, 19, 28, 29, 30, 43, 56, 57, 67, 70, 71, 74, 77, 79, 82, 83, 85, 120, 121, 122, 125, 126, 136, 138, 142, 147, 171, 173, 177, 188, 189, 191, 192, 193, 194, 195, 197, 198, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 262, 263, 264, 271, 281, 283, 288, 289, 299, 301, 303, 305, 319, 320, 321, 377, 379, 384, 385, 387, 396, 400, 401, 403, 405, 406, 409, 410, 411, 413, 416, 419, 426, 428, 439], "limit": [3, 11, 12, 13, 14, 15, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 34, 35, 36, 38, 45, 46, 47, 48, 49, 50, 52, 53, 55, 58, 59, 61, 62, 64, 65, 66, 67, 68, 70, 71, 73, 78, 80, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 143, 144, 145, 149, 150, 151, 152, 153, 158, 159, 160, 162, 165, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 190, 191, 192, 193, 194, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 265, 267, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 324, 325, 326, 327, 329, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 347, 348, 350, 351, 353, 356, 359, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 376, 378, 380, 382, 383, 386, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 401, 402, 403, 405, 407, 408, 411, 413, 421, 422, 424, 426, 429, 430, 431], "To": 4, "program": [4, 123], "beyond": [4, 384], "cpu": [4, 11, 12, 13, 14, 15, 19, 20, 21, 22, 23, 24, 25, 26, 27, 31, 32, 34, 35, 36, 38, 45, 46, 47, 48, 52, 53, 58, 59, 61, 62, 64, 65, 66, 68, 70, 71, 74, 77, 78, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 123, 124, 125, 126, 127, 129, 130, 134, 135, 136, 138, 139, 140, 143, 144, 149, 150, 151, 152, 153, 158, 159, 160, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 192, 194, 196, 198, 199, 200, 202, 205, 206, 210, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 320, 376, 378, 382, 383, 386, 388, 392, 393, 394, 395, 397, 398, 402, 405, 407, 408, 413, 414, 421, 422, 425, 429, 430, 431], "you": [4, 406, 439], "need": [4, 137, 406], "appropri": [4, 28, 29, 137, 189, 191, 197, 203, 204, 207, 209, 325, 353, 356, 377, 439], "hardwar": 4, "work": [4, 31, 39, 72, 199, 323, 406, 439], "fine": 4, "laptop": 4, "graphic": 4, "In": [4, 28, 29, 161, 173, 188, 208, 320, 325, 369, 380, 405], "major": [4, 34, 35, 36, 38, 39, 82, 265, 277, 374], "case": [4, 20, 28, 29, 32, 34, 35, 36, 38, 43, 61, 74, 77, 79, 88, 89, 97, 129, 130, 134, 135, 136, 144, 173, 176, 177, 188, 196, 210, 309, 310, 311, 317, 318, 380, 409, 414, 425, 430, 431], "your": 4, "window": 4, "alreadi": [4, 35, 40, 41, 42], "ha": [4, 18, 30, 43, 45, 46, 47, 48, 84, 94, 104, 109, 131, 142, 146, 149, 174, 176, 189, 193, 208, 211, 212, 213, 320, 375, 376, 377, 379, 385, 399, 400, 401, 403, 404, 410, 426, 439], "all": [4, 6, 9, 15, 19, 33, 43, 56, 67, 79, 82, 83, 84, 92, 93, 95, 97, 120, 121, 122, 129, 130, 136, 142, 144, 161, 169, 172, 177, 188, 203, 204, 207, 209, 212, 265, 268, 274, 287, 318, 327, 384, 387, 397, 399, 428, 439], "necessari": [4, 20, 32, 34, 35, 36, 38, 40, 63, 136, 177, 188, 190, 193, 208, 211, 212, 213, 380, 401, 403, 426], "But": [4, 84], "want": [4, 406], "up": [4, 84, 122], "date": 4, "alwai": [4, 30, 34, 82, 211, 213, 265, 380, 401, 426], "updat": 4, "latest": [4, 128], "follow": [4, 43, 84, 94, 118, 145, 172, 409, 439, 443], "instruct": 4, "step": [4, 20, 136, 177, 188], "8": [4, 13, 15, 40, 52, 55, 63, 69, 74, 75, 79, 82, 84, 120, 136, 146, 150, 163, 174, 176, 177, 188, 205, 316, 317, 319, 325, 349, 368, 375, 384, 388, 394, 405, 409, 413, 415, 418, 425, 429], "9": [4, 13, 40, 55, 63, 69, 74, 75, 80, 82, 88, 98, 124, 136, 172, 173, 176, 188, 202, 279, 319, 325, 327, 329, 349, 375, 384, 397, 402, 409, 415, 418, 421, 425, 429], "10": [4, 13, 22, 24, 28, 29, 43, 55, 61, 71, 75, 79, 82, 84, 95, 134, 136, 141, 146, 158, 179, 180, 181, 182, 188, 189, 194, 202, 293, 319, 321, 325, 327, 337, 349, 377, 381, 382, 384, 386, 400, 406, 415, 418, 429], "If": [4, 15, 20, 28, 29, 30, 32, 34, 35, 36, 37, 38, 43, 55, 57, 69, 74, 79, 81, 82, 84, 94, 97, 118, 120, 133, 136, 142, 146, 147, 148, 161, 169, 170, 171, 172, 173, 176, 177, 188, 189, 191, 193, 195, 197, 203, 204, 207, 208, 209, 211, 212, 213, 265, 295, 297, 321, 325, 347, 369, 375, 376, 377, 380, 384, 387, 396, 397, 399, 400, 401, 403, 404, 406, 409, 410, 412, 425, 426, 427, 428, 439], "yet": [4, 6], "easiest": 4, "It": [4, 28, 29, 55, 81, 189, 190, 191, 193, 197, 203, 204, 207, 208, 209, 211, 212, 213, 377, 401, 403, 426], "essenti": 4, "machin": [4, 118, 145], "optim": [4, 87], "includ": [4, 20, 28, 29, 32, 34, 35, 36, 37, 38, 43, 61, 74, 77, 134, 135, 136, 137, 172, 177, 188, 189, 191, 193, 197, 203, 204, 207, 208, 209, 211, 212, 213, 318, 325, 369, 377, 401, 403, 425, 426], "anoth": [4, 63, 82, 128, 270, 289, 320, 385], "vendor": 4, "too": 4, "manual": [4, 84, 410], "shown": 4, "next": [4, 118], "section": [4, 84, 439], "recommend": [4, 307, 410], "org": 4, "channel": 4, "command": 4, "forg": 4, "pip": 4, "http": [4, 128], "pypi": 4, "simpl": [4, 187, 443], "These": [4, 84, 94, 201, 439, 443], "its": [4, 6, 15, 30, 31, 43, 58, 59, 74, 82, 99, 105, 118, 143, 144, 165, 166, 172, 193, 208, 211, 213, 304, 362, 374, 377, 380, 386, 396, 401, 412, 414, 426, 439], "depend": [4, 165, 171, 173, 176, 177, 390, 429], "control": [4, 51, 57, 63, 82, 142, 190, 265, 387, 400, 428], "requir": [4, 6, 32, 36, 38, 82, 84, 147, 265], "compil": [4, 84, 137], "runtim": 4, "onemkl": 4, "befor": [4, 30, 57, 82, 121, 122, 189, 211, 212, 213, 287, 297, 377, 384, 385, 396, 401, 403, 410, 426, 427], "strongli": [4, 410], "advis": 4, "version": [4, 82, 84, 276, 307], "activ": 4, "local": 4, "environ": 4, "env": 4, "And": [4, 39, 75, 82, 265], "sourc": [4, 6, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431], "recip": 4, "finanli": 4, "setuptool": 4, "o": [4, 84], "On": 4, "linux": 4, "cython": 4, "dpcpp_linux": 4, "mkl": 4, "devel": 4, "dpcpp": 4, "tbb": 4, "onedpl": 4, "cmake": 4, "ninja": 4, "pytest": 4, "dpcpp_win": 4, "setup": 4, "py": 4, "g": [4, 82, 84, 88, 89, 97, 134, 135, 144, 300, 310, 311, 325, 414, 430, 431], "dcmake_c_compil": 4, "path": [4, 130], "icx": 4, "dcmake_cxx_compil": 4, "icpx": 4, "script": 4, "build_loc": 4, "suit": 4, "element": [4, 11, 12, 13, 14, 15, 18, 19, 21, 22, 23, 24, 25, 26, 27, 30, 31, 33, 43, 44, 45, 46, 47, 48, 52, 53, 55, 58, 59, 62, 63, 65, 66, 70, 71, 79, 80, 82, 84, 85, 90, 92, 93, 95, 96, 97, 98, 120, 121, 122, 123, 124, 125, 126, 127, 133, 139, 140, 143, 144, 146, 147, 149, 150, 151, 152, 153, 158, 159, 160, 161, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 197, 198, 199, 200, 202, 205, 206, 207, 209, 210, 211, 212, 213, 260, 261, 268, 269, 271, 273, 274, 277, 279, 280, 282, 284, 286, 287, 292, 293, 294, 296, 299, 300, 303, 305, 306, 307, 308, 314, 315, 316, 317, 318, 320, 322, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 401, 402, 403, 405, 407, 408, 409, 410, 415, 418, 421, 422, 423, 426, 429, 439, 443], "asarrai": [4, 6, 34, 36, 38, 39], "y": [4, 20, 32, 34, 35, 36, 38, 40, 49, 61, 68, 69, 74, 77, 82, 84, 88, 89, 94, 97, 129, 130, 131, 134, 135, 136, 138, 144, 177, 188, 195, 196, 200, 270, 293, 304, 309, 310, 311, 397, 413, 414, 425, 429, 430, 431], "locat": [4, 137, 336, 338], "same": [4, 13, 15, 26, 30, 31, 33, 36, 38, 39, 43, 45, 47, 48, 50, 56, 57, 62, 72, 79, 80, 81, 82, 83, 89, 90, 94, 96, 124, 125, 126, 127, 128, 135, 139, 140, 142, 143, 148, 158, 159, 160, 173, 178, 183, 184, 185, 186, 187, 191, 192, 193, 197, 198, 199, 202, 207, 208, 209, 211, 212, 213, 265, 293, 308, 311, 312, 316, 320, 321, 323, 325, 347, 353, 369, 374, 376, 378, 379, 382, 384, 385, 387, 396, 397, 398, 399, 400, 401, 402, 403, 406, 409, 415, 417, 418, 420, 421, 426, 427, 428, 431], "shape": [4, 6, 28, 29, 32, 33, 36, 42, 43, 49, 50, 52, 55, 57, 62, 64, 68, 75, 79, 81, 82, 83, 84, 88, 89, 93, 94, 96, 120, 131, 134, 135, 142, 147, 148, 163, 167, 169, 173, 174, 175, 176, 184, 185, 186, 187, 189, 190, 191, 193, 195, 196, 197, 201, 203, 204, 207, 208, 209, 211, 212, 213, 265, 293, 298, 304, 309, 310, 311, 320, 321, 325, 334, 337, 342, 343, 348, 352, 353, 354, 355, 356, 357, 358, 360, 365, 366, 372, 374, 376, 377, 379, 380, 384, 385, 387, 388, 396, 397, 398, 399, 400, 401, 403, 405, 409, 410, 412, 414, 415, 418, 419, 426, 428, 430, 431, 432, 443], "0": [4, 6, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 38, 40, 41, 42, 43, 44, 51, 53, 55, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 73, 74, 75, 77, 78, 79, 80, 81, 82, 84, 85, 88, 89, 90, 91, 92, 94, 95, 97, 98, 101, 115, 118, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 134, 135, 136, 138, 141, 144, 147, 148, 151, 152, 153, 161, 165, 167, 169, 174, 177, 178, 179, 180, 181, 182, 185, 187, 188, 190, 191, 192, 193, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 270, 272, 274, 278, 279, 291, 294, 297, 299, 300, 301, 304, 305, 307, 309, 310, 311, 316, 317, 318, 319, 320, 321, 324, 325, 327, 332, 334, 335, 336, 338, 339, 340, 342, 343, 344, 347, 349, 350, 351, 352, 355, 357, 358, 359, 360, 363, 366, 368, 369, 370, 376, 378, 379, 383, 384, 385, 386, 388, 390, 391, 392, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 429, 430, 431], "expect": [4, 18, 52, 62, 81, 84, 93, 189, 193, 208, 211, 212, 213, 376, 377, 388, 401, 403, 426], "comput": [4, 26, 31, 43, 45, 46, 47, 48, 53, 79, 94, 98, 99, 100, 101, 102, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 123, 124, 141, 147, 149, 162, 163, 164, 166, 167, 170, 171, 172, 173, 174, 176, 184, 185, 186, 187, 189, 190, 191, 193, 194, 197, 199, 207, 208, 209, 211, 212, 213, 377, 378, 383, 386, 388, 401, 403, 408, 409, 422, 426], "empti": [4, 6, 32, 82, 89, 130, 134, 135, 212, 274, 310, 311, 430, 431], "found": [4, 439], "here": [6, 30, 84, 396], "correspond": [6, 20, 28, 29, 32, 34, 35, 36, 37, 38, 55, 57, 61, 74, 77, 82, 88, 89, 97, 129, 130, 133, 134, 135, 136, 144, 147, 165, 177, 188, 190, 196, 273, 309, 310, 311, 325, 347, 352, 353, 354, 355, 356, 357, 358, 360, 361, 366, 369, 384, 391, 401, 409, 412, 414, 425, 426, 430, 431, 439], "column": [6, 34, 35, 36, 38, 39, 56, 57, 82, 83, 97, 121, 122, 142, 144, 165, 170, 173, 176, 265, 277, 374, 387, 400, 414, 416, 419, 425, 428], "v1": 6, "23": [6, 325], "v0": 6, "15": [6, 28, 29, 71, 75, 172, 180, 349], "0dev0": 6, "12": [6, 28, 29, 42, 69, 75, 84, 146, 188, 317, 319, 349, 415, 418], "gb8f051d52c": 6, "v9": 6, "397": 6, "233": 6, "299": 6, "56": 6, "36": [6, 69], "47": 6, "20": [6, 147, 158, 321, 327, 342, 406], "16": [6, 45, 75, 84, 136, 138, 202, 316, 407], "18": [6, 84, 85, 188], "51": 6, "48": [6, 69, 205], "49": 6, "total": [6, 67, 82, 284, 401, 426], "542": 6, "351": 6, "429": 6, "ab": [6, 12], "absolut": [6, 11, 18, 98, 174, 211, 213, 318, 401, 426], "add": [6, 84], "add_docstr": 6, "add_newdoc": 6, "add_newdoc_ufunc": 6, "allclos": [6, 33, 150, 167, 172, 173, 175, 176], "alltru": 6, "amax": [6, 191], "amin": [6, 197], "angl": [6, 25, 26, 72, 73, 323, 324, 424], "apply_along_axi": 6, "apply_over_ax": 6, "arcco": [6, 22, 23, 25, 26, 65], "arccosh": [6, 21, 24, 27, 66], "arcsin": [6, 21, 24, 25, 26, 394], "arcsinh": [6, 22, 23, 27, 395], "arctan": [6, 18, 21, 23, 26, 27, 407], "arctan2": [6, 18, 25], "arctanh": [6, 22, 24, 25, 26, 408], "argmax": [6, 29, 82, 203, 321, 406, 439], "argmin": [6, 28, 82, 204, 406, 439], "argpartit": [6, 30, 439], "argsort": [6, 82, 396, 406, 412, 439], "argwher": 6, "around": [6, 82, 136, 294, 320, 386], "array2str": 6, "array_equ": 6, "array_equiv": [6, 33], "array_repr": 6, "array_split": [6, 57], "array_str": 6, "asanyarrai": [6, 35, 38], "asarray_chkfinit": [6, 34, 35], "ascontiguousarrai": [6, 34, 35, 38], "asfarrai": [6, 34, 35], "asfortranarrai": [6, 34, 35, 36], "asmatrix": 6, "atleast_1d": [6, 41, 42, 94], "atleast_2d": [6, 40, 42, 94], "atleast_3d": [6, 40, 41, 94], "averag": [6, 82, 193, 208, 282, 403, 443], "bartlett": 6, "base_repr": 6, "binary_repr": 6, "bincount": 6, "bitwise_and": [6, 46, 47, 48, 149, 184], "bitwise_not": 6, "bitwise_or": [6, 45, 46, 48, 149, 186], "bitwise_xor": [6, 45, 46, 47, 149, 187], "blackman": 6, "block": [6, 57, 83, 142, 387, 400, 428], "bmat": 6, "broadcast_arrai": [6, 50], "broadcast_shap": 6, "broadcast_to": [6, 49, 410], "busday_count": 6, "busday_offset": 6, "byte_bound": 6, "can_cast": [6, 443], "cbrt": [6, 397], "ceil": [6, 31, 123, 124, 383, 386, 422], "choos": [6, 18, 25, 26, 82, 439], "clip": [6, 82, 320, 405, 439], "column_stack": [6, 57, 83, 142, 387, 400, 428], "common_typ": 6, "compare_chararrai": 6, "compress": [6, 405, 439], "concaten": [6, 56, 83, 142, 387, 400, 406, 428], "conj": [6, 82, 146, 161, 318, 375], "conjug": [6, 58, 81, 82, 146, 161, 165, 190, 268, 318, 375, 427], "convolv": [6, 64], "copi": [6, 20, 30, 32, 34, 35, 36, 37, 38, 40, 41, 42, 63, 74, 77, 82, 84, 88, 89, 97, 129, 130, 133, 134, 135, 136, 144, 147, 177, 188, 195, 196, 220, 265, 277, 279, 287, 293, 295, 309, 310, 311, 313, 315, 325, 347, 352, 353, 354, 355, 356, 357, 358, 360, 366, 369, 380, 396, 399, 414, 415, 418, 425, 430, 431, 439], "copysign": [6, 306, 315], "copyto": [6, 82, 270], "corrcoef": [6, 68], "correl": [6, 443], "co": [6, 21, 66, 394, 407], "cosh": [6, 22, 65, 395, 408], "count_nonzero": [6, 307], "cov": [6, 343], "cross": [6, 64], "cumprod": [6, 205, 439], "cumproduct": 6, "cumsum": [6, 79, 82, 206, 403, 439], "datetime_as_str": 6, "datetime_data": 6, "deg2rad": [6, 323, 324, 424], "degre": [6, 18, 72, 211, 213, 323, 324, 367, 401, 424, 426], "delet": 6, "deprec": 6, "deprecate_with_doc": 6, "diag": [6, 77, 121, 122, 144, 176], "diag_indic": [6, 76, 117], "diag_indices_from": [6, 75, 117], "diagflat": [6, 74], "diagon": [6, 74, 75, 76, 77, 82, 97, 117, 144, 161, 411, 414, 415, 416, 417, 418, 419, 420, 439], "diff": [6, 71, 85, 138, 141], "digit": [6, 118], "disp": 6, "divid": [6, 83, 124, 127, 199, 378, 421], "divmod": [6, 439], "dot": [6, 82, 86, 87, 148, 161, 167, 168, 170, 172, 173, 175, 176, 190, 409, 427], "dsplit": [6, 57, 83], "dstack": [6, 56, 57, 142, 387, 400, 428], "ediff1d": [6, 79], "einsum": [6, 81, 87, 148, 190, 312, 409], "einsum_path": [6, 86], "empty_lik": [6, 32, 88, 135, 311, 431], "equal": [6, 14, 15, 19, 33, 43, 57, 64, 68, 82, 97, 124, 136, 139, 140, 142, 150, 155, 159, 160, 172, 173, 177, 188, 287, 308, 325, 335, 369, 378, 387, 399, 400, 414, 416, 419, 428], "exp": [6, 93, 95, 174, 179, 181, 183, 189], "exp2": [6, 92, 95], "expand_dim": [6, 28, 29], "expm1": [6, 92, 93, 181], "extract": [6, 74, 77, 147], "ey": [6, 58, 59, 67, 82, 125, 126, 144, 148, 167, 169, 187, 192, 198, 391], "fab": [6, 11, 12], "fastcopyandtranspos": 6, "fill_diagon": 6, "find_common_typ": 6, "fix": [6, 84, 320], "flatnonzero": [6, 307], "flip": [6, 121, 122, 327], "fliplr": [6, 120, 122], "flipud": [6, 120, 121], "float_pow": 6, "floor": [6, 31, 53, 124, 378, 383, 386, 422], "floor_divid": [6, 127, 199, 378], "fmax": [6, 126, 191, 192, 198, 207, 316], "fmin": [6, 125, 192, 197, 198, 209, 316], "fmod": [6, 125, 126, 199, 316, 378], "format_float_posit": 6, "format_float_scientif": 6, "frexp": 6, "from_dlpack": 6, "frombuff": [6, 130, 133], "fromfil": [6, 129, 133], "fromfunct": [6, 34, 35], "fromit": [6, 34, 35, 129, 130, 133], "frompyfunc": 6, "fromregex": 6, "fromstr": [6, 129, 130], "full": [6, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 167, 169, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 260, 261, 262, 263, 264, 265, 267, 268, 269, 278, 279, 281, 282, 283, 287, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431], "full_lik": [6, 32, 89, 134, 311, 431], "gcd": 6, "genfromtxt": 6, "geomspac": [6, 177, 188], "get_array_wrap": 6, "get_includ": 6, "get_printopt": 6, "getbufs": 6, "geterr": 6, "geterrcal": 6, "geterrobj": 6, "gradient": [6, 79], "greater": [6, 82, 90, 140, 159, 160, 169, 173, 287, 308, 399], "greater_equ": [6, 90, 139, 159, 160, 308], "ham": 6, "han": 6, "heavisid": 6, "histogram": [6, 443], "histogram2d": 6, "histogram_bin_edg": 6, "histogramdd": 6, "hsplit": [6, 57], "hstack": [6, 56, 57, 83, 387, 400, 428], "hypot": [6, 377], "i0": 6, "imag": [6, 82, 375, 439], "in1d": 6, "indic": [6, 28, 29, 30, 75, 76, 82, 84, 117, 190, 196, 203, 204, 262, 263, 264, 286, 289, 303, 307, 320, 321, 380, 389, 392, 393, 396, 405, 406, 412, 416, 417, 419, 420], "info": 6, "inner": [6, 69, 86, 87, 190, 312], "insert": [6, 28, 29, 94, 136, 177, 188, 189, 191, 197, 203, 204, 207, 209, 321, 377, 389, 443], "interp": 6, "intersect1d": 6, "invert": [6, 46, 167, 172], "is_busdai": 6, "isclos": [6, 15], "iscomplex": 6, "iscomplexobj": 6, "isfinit": [6, 152, 153, 207, 209, 212], "isfortran": 6, "isin": 6, "isinf": [6, 151, 153], "isnan": [6, 151, 152, 207, 209, 210, 212], "isnat": [6, 153], "isneginf": [6, 151, 152, 153], "isposinf": [6, 151, 152, 153], "isreal": 6, "isrealobj": 6, "isscalar": 6, "issctyp": 6, "issubclass_": 6, "issubdtyp": 6, "issubsctyp": 6, "iter": [6, 34, 35, 82, 119, 129, 130, 132, 133, 276, 443], "ix_": 6, "kaiser": 6, "kron": 6, "lcm": 6, "ldexp": 6, "left_shift": [6, 382], "less": [6, 90, 139, 140, 160, 172, 308, 392, 393], "less_equ": [6, 90, 139, 140, 159, 308], "lexsort": [6, 30, 396], "linspac": [6, 20, 91, 136, 188, 195, 424], "load": [6, 130, 178], "loadtxt": [6, 130], "log": [6, 95, 136, 174, 177, 180, 181, 182, 183, 188, 189, 340], "log10": [6, 179, 181, 182], "log1p": [6, 93, 95, 179, 180, 182], "log2": [6, 179, 180, 181], "logaddexp": [6, 189], "logaddexp2": 6, "logical_and": [6, 45, 185, 186, 187], "logical_not": [6, 46, 149, 184, 186, 187], "logical_or": [6, 47, 184, 185, 187], "logical_xor": [6, 48, 184, 185, 186], "logspac": [6, 136, 177], "lookfor": 6, "mask_indic": 6, "mat": 6, "matmul": [6, 81, 173, 176, 427], "max": [6, 16, 28, 82, 118, 125, 145, 169, 192, 197, 198, 207, 267, 342, 406, 410, 439], "maximum": [6, 16, 28, 29, 55, 82, 125, 126, 191, 197, 198, 203, 204, 207, 209, 262, 281, 316, 319, 321], "maximum_sctyp": 6, "may_share_memori": 6, "meshgrid": [6, 196, 309], "min": [6, 17, 29, 55, 82, 118, 126, 145, 173, 176, 191, 192, 198, 209, 267, 406, 439], "min_scalar_typ": 6, "minimum": [6, 17, 28, 29, 55, 82, 125, 126, 191, 192, 197, 203, 204, 207, 209, 263, 283, 316, 319], "mintypecod": 6, "mod": [6, 378], "modf": 6, "moveaxi": [6, 384, 385, 412], "msort": 6, "multipli": 6, "nan_to_num": 6, "nanargmax": [6, 28, 204], "nanargmin": [6, 29, 203], "nancumprod": [6, 206], "nancumsum": 6, "nanmax": [6, 125, 191, 192, 198, 209], "nanmean": [6, 193, 211, 213, 401, 426], "nanmedian": 6, "nanmin": [6, 126, 192, 197, 198, 207], "nanpercentil": 6, "nanprod": [6, 317], "nanquantil": 6, "nanstd": [6, 193, 208, 213, 401, 426], "nansum": 6, "nanvar": [6, 193, 208, 211, 401, 426], "ndim": [6, 32, 36, 38, 40, 41, 42, 68, 75, 82, 84, 176, 310, 410, 412, 430], "neg": [6, 14, 19, 44, 62, 77, 94, 97, 120, 133, 151, 152, 153, 207, 209, 212, 315, 316, 344, 397, 405], "nested_it": 6, "nextaft": 6, "nonzero": [6, 67, 82, 429, 439], "not_equ": [6, 90, 139, 140, 159, 160], "obj2sctyp": 6, "ones": [6, 32, 36, 38, 43, 80, 82, 88, 89, 90, 94, 97, 134, 135, 143, 144, 169, 189, 210, 311, 317, 377, 381, 385, 412, 414, 421, 430, 431], "ones_lik": [6, 32, 89, 135, 310, 431], "outer": [6, 69, 86, 87, 157], "packbit": 6, "pad": [6, 84], "partit": [6, 20, 32, 34, 35, 36, 37, 38, 61, 74, 77, 82, 88, 89, 97, 129, 130, 133, 134, 135, 136, 144, 147, 177, 188, 196, 309, 310, 311, 325, 347, 352, 353, 354, 355, 356, 357, 358, 360, 361, 366, 369, 396, 414, 425, 430, 431, 439], "percentil": [6, 194], "piecewis": 6, "place": [6, 55, 57, 81, 82, 94, 147, 190, 193, 208, 211, 212, 213, 297, 309, 320, 362, 380, 384, 396, 400, 401, 403, 426, 439], "poli": 6, "polyadd": 6, "polyd": 6, "polydiv": 6, "polyfit": 6, "polyint": 6, "polymul": 6, "polysub": 6, "polyv": 6, "posit": [6, 14, 18, 19, 20, 34, 35, 52, 62, 77, 82, 94, 97, 118, 130, 151, 152, 153, 161, 201, 207, 209, 212, 287, 306, 316, 318, 327, 351, 384, 385, 388, 397, 398, 412], "power": [6, 93, 168, 398, 425], "printopt": 6, "prod": [6, 82, 210, 439], "product": [6, 69, 70, 81, 82, 86, 87, 148, 157, 168, 170, 175, 190, 202, 205, 210, 312, 317, 409, 427, 443], "promote_typ": 6, "ptp": [6, 439], "put": [6, 82, 321, 406, 439], "put_along_axi": [6, 320, 406], "putmask": [6, 320], "quantil": 6, "rad2deg": [6, 72, 73, 424], "radian": [6, 18, 72, 73, 323, 424], "ravel": [6, 82, 171, 277, 439], "ravel_multi_index": 6, "real": [6, 18, 20, 25, 26, 52, 53, 62, 82, 110, 111, 112, 113, 114, 116, 118, 123, 125, 126, 143, 146, 161, 165, 166, 169, 172, 173, 174, 176, 183, 189, 211, 212, 213, 318, 327, 344, 376, 377, 388, 393, 397, 401, 403, 422, 426, 439, 443], "real_if_clos": 6, "recfromcsv": 6, "recfromtxt": 6, "reciproc": [6, 388, 397], "remaind": [6, 124, 125, 126, 127, 199, 316], "repeat": [6, 82, 165, 166, 195, 410, 439], "resiz": [6, 94, 439], "result_typ": [6, 51, 84, 443], "right_shift": [6, 158], "rint": [6, 31, 386], "roll": [6, 385], "rollaxi": [6, 384], "root": [6, 52, 143, 376, 377, 388, 397, 398], "rot90": 6, "round": [6, 20, 31, 82, 123, 124, 378, 383, 422, 439, 443], "round_": 6, "row_stack": [6, 428], "safe_ev": 6, "save": [6, 130], "savetxt": 6, "savez": 6, "savez_compress": 6, "sctype2char": 6, "searchsort": [6, 396, 439], "select": [6, 63, 399, 432], "set_numeric_op": 6, "set_printopt": 6, "set_string_funct": 6, "setbufs": 6, "setdiff1d": 6, "seterr": 6, "seterrcal": 6, "seterrobj": 6, "setxor1d": 6, "shares_memori": 6, "show_config": 6, "sign": [6, 58, 59, 62, 84, 163, 174, 212, 306, 315, 393, 403], "signbit": [6, 392], "sin": [6, 23, 65, 195, 395, 407], "sinc": [6, 82, 297], "sinh": [6, 24, 66, 394, 408], "sometru": 6, "sort": [6, 30, 82, 176, 264, 287, 389, 406, 412, 432, 439, 443], "sort_complex": 6, "space": [6, 20, 130, 136, 177, 188], "split": [6, 57, 83, 142, 387, 400, 428, 443], "sqrt": [6, 52, 82, 278, 291, 377, 388, 398], "squar": [6, 52, 143, 144, 161, 164, 165, 167, 168, 174, 211, 213, 329, 345, 376, 377, 388, 397, 401, 417, 420, 425, 426], "squeez": [6, 82, 94, 439], "stack": [6, 56, 57, 83, 142, 163, 169, 172, 173, 174, 190, 387, 406, 428], "std": [6, 82, 193, 208, 211, 213, 426, 439], "subtract": 6, "swapax": [6, 82, 201, 439], "take": [6, 56, 82, 321, 380, 406, 439], "take_along_axi": [6, 28, 29, 30, 54, 321, 405], "tan": [6, 25, 26, 65, 394, 408], "tanh": [6, 27, 66, 395, 407], "tensordot": [6, 81, 148, 190], "tile": [6, 379, 443], "trace": [6, 74, 77, 439], "transpos": [6, 82, 161, 201, 215, 439, 443], "trapz": [6, 403], "tri": 6, "tril": [6, 74, 414, 416, 417, 420], "tril_indic": [6, 417, 420], "tril_indices_from": 6, "trim_zero": 6, "triu": [6, 74, 414, 419], "triu_indic": 6, "triu_indices_from": 6, "true_divid": [6, 80], "trunc": [6, 31, 53, 123, 383, 386], "typenam": 6, "union1d": 6, "uniqu": [6, 43, 44, 84, 189, 193, 201, 208, 211, 212, 213, 377, 401, 403, 426], "unpackbit": 6, "unravel_index": [6, 28, 29], "unwrap": [6, 72, 323], "vander": 6, "var": [6, 82, 193, 208, 211, 213, 401, 439], "vdot": [6, 81, 190], "vsplit": [6, 57], "vstack": [6, 56, 57, 83, 142, 387, 400], "where": [6, 11, 12, 13, 14, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 32, 34, 35, 36, 37, 38, 41, 42, 43, 45, 46, 47, 48, 52, 53, 55, 58, 59, 61, 62, 63, 65, 66, 74, 77, 79, 80, 82, 88, 89, 90, 92, 93, 94, 95, 96, 97, 123, 124, 125, 126, 127, 129, 130, 133, 134, 135, 136, 139, 140, 143, 144, 147, 148, 149, 150, 151, 152, 153, 158, 159, 160, 161, 173, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 196, 197, 198, 199, 202, 207, 208, 209, 210, 211, 212, 213, 260, 261, 281, 282, 283, 288, 299, 301, 305, 306, 308, 309, 310, 311, 315, 316, 317, 318, 325, 347, 352, 353, 354, 355, 356, 357, 358, 360, 361, 366, 369, 376, 377, 378, 382, 383, 385, 388, 389, 392, 393, 394, 395, 397, 398, 401, 402, 403, 407, 408, 412, 414, 421, 422, 425, 426, 430, 431], "who": 6, "zero": [6, 14, 19, 28, 29, 30, 32, 67, 75, 79, 82, 88, 89, 97, 103, 108, 123, 130, 134, 135, 144, 169, 172, 176, 189, 191, 193, 197, 201, 203, 204, 207, 208, 209, 211, 212, 213, 286, 307, 310, 311, 316, 318, 325, 327, 355, 357, 358, 360, 377, 392, 393, 396, 401, 403, 409, 414, 415, 418, 426, 431], "zeros_lik": [6, 32, 89, 135, 311, 430], "astyp": [6, 82, 136, 307], "byteswap": 6, "dump": 6, "fill": [6, 32, 82, 88, 89, 117, 134, 135, 195, 270, 310, 311, 405, 414, 430, 431], "flatten": [6, 28, 29, 30, 57, 74, 77, 82, 203, 204, 276, 290, 297, 307, 321, 374, 379, 384, 396, 406, 427], "getfield": [6, 84], "item": [6, 82, 129, 130, 432], "itemset": 6, "newbyteord": [6, 84], "setfield": [6, 84], "setflag": 6, "tobyt": 6, "tofil": [6, 130], "tolist": 6, "tostr": 6, "view": [6, 40, 41, 42, 49, 82, 94, 120, 121, 122, 195, 201, 215, 293, 304, 321, 380, 399, 404, 412], "linalg": [6, 81, 398], "choleski": 6, "cond": 6, "det": [6, 174], "eig": [6, 165, 166], "eigh": 6, "eigval": [6, 165], "eigvalsh": 6, "inv": [6, 172], "lstsq": 6, "matrix_pow": [6, 398], "matrix_rank": 6, "multi_dot": [6, 81], "norm": [6, 99, 100, 102, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 116, 162, 443], "pinv": 6, "qr": 6, "slogdet": [6, 163], "solv": [6, 443], "svd": [6, 169, 172], "tensorinv": 6, "tensorsolv": 6, "fft": [6, 432, 443], "fft2": 6, "fftfreq": 6, "fftn": 6, "fftshift": 6, "hfft": 6, "ifft": 6, "ifft2": 6, "ifftn": 6, "ifftshift": 6, "ihfft": 6, "irfft": 6, "irfft2": 6, "irfftn": 6, "rfft": 6, "rfft2": 6, "rfftfreq": 6, "rfftn": 6, "beta": [6, 336], "binomi": [6, 344], "byte": [6, 82, 84, 129, 130, 265, 280, 284], "chisquar": 6, "choic": [6, 54, 82, 266], "default_rng": 6, "dirichlet": 6, "exponenti": [6, 92, 93, 95, 179, 183, 189, 338, 364], "gamma": [6, 365], "geometr": [6, 136, 177], "get_stat": [6, 325], "gumbel": 6, "hypergeometr": 6, "laplac": 6, "logist": 6, "lognorm": 6, "logseri": 6, "multinomi": 6, "multivariate_norm": 6, "negative_binomi": 6, "noncentral_chisquar": 6, "noncentral_f": 6, "normal": [6, 68, 165, 173, 325, 340, 343, 354, 366], "pareto": 6, "permut": [6, 82, 201, 304, 412, 443], "poisson": 6, "rand": [6, 325, 355, 357, 358, 360], "randint": [6, 82, 279, 325, 356], "randn": [6, 120, 121, 122, 172, 173, 176, 325, 400], "random_integ": [6, 325, 353], "random_sampl": [6, 325, 352, 355, 358, 360], "ranf": 6, "rayleigh": 6, "seed": [6, 82, 279, 325], "set_stat": 6, "shuffl": 6, "standard_cauchi": 6, "standard_exponenti": 6, "standard_gamma": 6, "standard_norm": [6, 325, 354], "standard_t": 6, "triangular": [6, 161, 173], "uniform": [6, 84, 188, 325, 352, 355, 357, 358, 360], "vonmis": 6, "wald": 6, "weibul": [6, 373], "zipf": 6, "show": [9, 84, 143, 187, 195, 207, 209, 212, 363], "constant": [9, 84], "alias": 9, "bool": [9, 14, 18, 19, 28, 29, 32, 37, 43, 51, 63, 82, 84, 90, 99, 105, 113, 136, 139, 140, 151, 152, 153, 159, 160, 161, 169, 171, 172, 176, 177, 188, 189, 191, 193, 195, 197, 203, 204, 207, 208, 209, 211, 212, 213, 265, 307, 308, 377, 380, 401, 403, 425, 426], "complex64": [9, 43, 99, 105], "complex128": [9, 43, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 381], "bool_": 9, "cdoubl": 9, "complex": [9, 11, 12, 18, 25, 26, 51, 58, 59, 81, 82, 84, 91, 118, 146, 165, 166, 173, 174, 176, 189, 190, 211, 212, 213, 268, 269, 318, 375, 377, 392, 397, 401, 403, 426, 427, 439, 443], "cfloat": 9, "csingl": 9, "doubl": [9, 338, 409], "float": [9, 15, 18, 20, 25, 34, 35, 37, 43, 51, 62, 84, 88, 89, 93, 97, 118, 129, 130, 133, 134, 135, 138, 144, 146, 169, 171, 172, 177, 188, 189, 191, 193, 197, 208, 211, 212, 213, 310, 311, 325, 329, 354, 355, 357, 358, 360, 363, 364, 366, 369, 375, 376, 377, 388, 401, 403, 414, 426, 430, 431, 439, 443], "float_": 9, "float16": 9, "int": [9, 20, 28, 29, 30, 37, 43, 44, 50, 57, 69, 74, 75, 77, 79, 82, 84, 88, 89, 90, 94, 97, 118, 120, 129, 130, 133, 134, 135, 136, 138, 144, 145, 147, 177, 188, 189, 191, 193, 197, 201, 203, 204, 207, 208, 209, 211, 212, 213, 265, 310, 311, 313, 317, 321, 325, 353, 356, 377, 379, 380, 384, 385, 386, 391, 396, 399, 400, 401, 403, 404, 406, 409, 410, 412, 414, 415, 416, 417, 418, 419, 420, 425, 426, 430, 431, 439], "int_": 9, "intc": 9, "singl": [9, 30, 50, 56, 82, 170, 298, 325, 344, 353, 354, 355, 356, 357, 358, 360, 366, 439], "singlecomplex": 9, "e": [9, 22, 24, 82, 84, 88, 89, 94, 97, 130, 134, 135, 144, 174, 179, 300, 310, 311, 325, 404, 414, 430, 431], "euler_gamma": 9, "inf": [9, 15, 26, 34, 35, 62, 80, 151, 152, 153, 162, 171, 179, 180, 182, 192, 198, 203, 204, 207, 209, 212, 318, 397, 421], "infin": [9, 14, 19, 123, 124, 151, 152, 153, 207, 209, 212, 378, 422, 443], "infti": 9, "nan": [9, 14, 15, 19, 28, 29, 34, 35, 80, 125, 126, 151, 152, 153, 180, 191, 192, 193, 197, 198, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 316, 317, 318, 397, 401, 421, 426, 443], "ninf": [9, 207, 209, 212], "nzero": 9, "pi": [9, 18, 26, 65, 66, 73, 394, 395, 407, 408, 424], "pinf": 9, "pzero": 9, "out": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 65, 66, 67, 68, 69, 73, 74, 77, 79, 80, 81, 82, 83, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 133, 134, 135, 136, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 158, 159, 160, 167, 170, 172, 175, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 201, 202, 203, 204, 207, 208, 209, 210, 211, 212, 213, 260, 261, 262, 263, 266, 267, 270, 271, 277, 281, 282, 283, 288, 294, 299, 301, 303, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 324, 325, 347, 352, 353, 354, 355, 356, 357, 358, 360, 366, 369, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 418, 421, 422, 424, 425, 426, 427, 428, 430, 431], "none": [11, 12, 13, 14, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 43, 44, 45, 46, 47, 48, 52, 53, 54, 55, 57, 58, 59, 61, 62, 65, 66, 67, 68, 69, 74, 77, 79, 80, 81, 82, 84, 85, 88, 89, 90, 92, 93, 94, 95, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 120, 123, 124, 125, 126, 127, 129, 130, 133, 134, 135, 136, 139, 140, 141, 142, 143, 144, 147, 149, 151, 152, 153, 158, 159, 160, 162, 169, 170, 171, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 202, 203, 204, 207, 208, 209, 210, 211, 212, 213, 260, 261, 262, 263, 264, 266, 267, 271, 279, 281, 282, 283, 287, 288, 289, 292, 294, 297, 298, 299, 301, 303, 305, 306, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 376, 377, 378, 379, 380, 382, 383, 384, 386, 387, 388, 389, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 406, 407, 408, 411, 412, 413, 414, 416, 419, 421, 422, 425, 426, 428, 429, 430, 431, 439], "order": [11, 12, 13, 21, 22, 23, 24, 25, 26, 27, 30, 32, 34, 35, 36, 38, 39, 45, 46, 47, 48, 52, 53, 55, 58, 59, 61, 62, 65, 66, 80, 82, 84, 86, 87, 88, 89, 90, 92, 93, 95, 97, 120, 121, 122, 123, 124, 130, 134, 135, 139, 140, 143, 149, 151, 152, 153, 158, 159, 160, 165, 166, 171, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 190, 192, 195, 198, 199, 201, 202, 220, 264, 265, 270, 277, 287, 290, 297, 306, 308, 310, 311, 313, 315, 316, 318, 374, 376, 378, 380, 382, 383, 388, 389, 392, 393, 394, 395, 396, 397, 398, 402, 407, 408, 409, 412, 421, 422, 425, 430, 431, 443], "k": [11, 12, 13, 21, 22, 23, 24, 25, 26, 27, 32, 34, 35, 39, 45, 46, 47, 48, 52, 53, 55, 58, 59, 61, 62, 65, 66, 74, 77, 80, 82, 90, 92, 93, 95, 97, 123, 124, 139, 140, 143, 149, 151, 152, 153, 158, 159, 160, 173, 175, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 190, 192, 198, 199, 202, 220, 265, 270, 277, 306, 308, 315, 316, 318, 376, 378, 382, 383, 388, 392, 393, 394, 395, 397, 398, 402, 407, 408, 409, 414, 415, 416, 417, 418, 419, 420, 421, 422, 447], "subok": [11, 12, 13, 21, 22, 23, 24, 25, 26, 27, 32, 45, 46, 47, 48, 49, 50, 52, 53, 58, 59, 61, 62, 65, 66, 80, 82, 89, 90, 92, 93, 95, 123, 124, 125, 126, 127, 135, 139, 140, 143, 149, 151, 152, 153, 158, 159, 160, 179, 180, 181, 182, 183, 184, 185, 186, 187, 190, 192, 198, 199, 202, 265, 306, 308, 311, 315, 316, 318, 376, 378, 382, 383, 388, 392, 393, 394, 395, 397, 398, 402, 407, 408, 421, 422, 431], "kwarg": [11, 12, 13, 15, 21, 22, 23, 24, 25, 26, 27, 45, 46, 47, 48, 52, 53, 55, 58, 59, 62, 65, 66, 70, 71, 80, 82, 86, 90, 92, 93, 95, 98, 123, 124, 125, 126, 127, 131, 138, 139, 140, 143, 149, 151, 152, 153, 158, 159, 160, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 192, 198, 199, 200, 202, 205, 206, 249, 267, 293, 306, 308, 315, 316, 318, 376, 378, 382, 383, 388, 392, 393, 394, 395, 397, 398, 402, 407, 408, 413, 421, 422, 423], "calcul": [11, 12, 18, 43, 71, 79, 85, 92, 93, 95, 98, 123, 125, 126, 138, 172, 183, 189, 190, 193, 199, 208, 211, 212, 213, 316, 377, 378, 397, 401, 426, 427, 432], "valu": [11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 38, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 78, 79, 80, 82, 84, 85, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 105, 117, 118, 119, 123, 124, 125, 126, 127, 129, 130, 131, 133, 134, 135, 136, 139, 140, 143, 144, 147, 149, 151, 152, 153, 158, 159, 160, 161, 166, 169, 171, 172, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 197, 198, 199, 202, 203, 204, 207, 208, 209, 210, 211, 212, 213, 217, 218, 221, 223, 224, 226, 227, 228, 229, 230, 231, 232, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 250, 252, 254, 255, 256, 257, 258, 259, 262, 263, 265, 267, 270, 274, 276, 287, 289, 306, 307, 308, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 325, 335, 352, 353, 369, 376, 377, 378, 379, 380, 382, 383, 384, 386, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 401, 402, 403, 405, 406, 407, 408, 411, 421, 422, 424, 426, 430, 431, 439, 443], "wise": [11, 12, 13, 15, 18, 21, 22, 23, 24, 25, 26, 27, 31, 33, 45, 46, 47, 48, 52, 53, 56, 57, 58, 59, 62, 65, 66, 80, 82, 83, 90, 92, 93, 95, 98, 123, 125, 126, 127, 139, 140, 142, 146, 149, 150, 151, 152, 153, 158, 159, 160, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 191, 192, 197, 198, 199, 200, 202, 207, 209, 210, 269, 306, 308, 315, 316, 318, 375, 376, 378, 382, 383, 386, 387, 388, 392, 393, 394, 395, 397, 398, 400, 402, 407, 408, 421, 422, 428, 439], "contain": [11, 12, 14, 19, 20, 28, 29, 45, 46, 47, 48, 55, 63, 69, 82, 84, 128, 133, 137, 147, 149, 158, 165, 173, 176, 189, 191, 193, 197, 203, 204, 207, 208, 209, 211, 212, 213, 293, 325, 376, 377, 382, 397, 401, 403, 412, 416, 419, 426, 439], "paramet": [11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 77, 78, 79, 80, 81, 82, 83, 84, 85, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 133, 134, 135, 136, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 265, 274, 277, 293, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 325, 326, 327, 329, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425, 426, 427, 428, 429, 430, 431], "onli": [11, 12, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 38, 40, 43, 52, 53, 55, 58, 59, 61, 64, 65, 66, 68, 78, 82, 84, 85, 88, 89, 92, 93, 95, 97, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 123, 129, 130, 131, 132, 133, 134, 135, 136, 147, 151, 152, 153, 158, 161, 173, 176, 177, 178, 179, 180, 181, 182, 185, 188, 190, 191, 193, 194, 197, 203, 204, 207, 208, 209, 210, 211, 213, 265, 297, 306, 310, 311, 313, 315, 317, 318, 320, 325, 347, 353, 369, 380, 382, 383, 386, 388, 389, 390, 392, 393, 394, 395, 396, 401, 403, 405, 406, 407, 408, 411, 422, 426, 429, 430, 431, 439], "either": [11, 12, 13, 14, 15, 19, 21, 22, 23, 24, 25, 26, 27, 31, 38, 43, 45, 46, 47, 48, 52, 53, 58, 59, 62, 65, 66, 67, 80, 84, 90, 92, 93, 95, 96, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 123, 124, 125, 126, 127, 139, 140, 143, 148, 149, 150, 151, 152, 153, 158, 159, 160, 171, 173, 175, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 191, 192, 197, 198, 199, 202, 203, 204, 207, 209, 210, 212, 306, 307, 308, 312, 314, 315, 316, 317, 318, 320, 361, 377, 378, 382, 383, 386, 388, 392, 393, 394, 395, 397, 398, 402, 403, 405, 406, 407, 408, 421, 422, 429], "tensor": [11, 12, 13, 14, 15, 19, 21, 22, 23, 24, 25, 26, 27, 31, 37, 45, 46, 47, 48, 52, 53, 58, 59, 62, 65, 66, 67, 80, 82, 90, 92, 93, 95, 96, 123, 124, 125, 126, 127, 139, 140, 143, 149, 151, 152, 153, 158, 159, 160, 165, 175, 179, 180, 181, 182, 183, 184, 185, 186, 187, 191, 192, 197, 198, 199, 202, 203, 204, 207, 209, 210, 306, 307, 308, 312, 314, 315, 316, 317, 318, 319, 320, 378, 382, 383, 386, 388, 392, 393, 394, 395, 397, 398, 402, 405, 407, 408, 409, 421, 422, 429], "usm_ndarrai": [11, 12, 13, 14, 15, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 37, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 62, 63, 65, 66, 67, 69, 79, 80, 81, 82, 83, 89, 90, 92, 93, 94, 95, 96, 120, 121, 122, 123, 124, 125, 126, 127, 135, 139, 140, 142, 143, 146, 148, 149, 151, 152, 153, 158, 159, 160, 161, 163, 165, 167, 169, 172, 173, 174, 175, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 195, 197, 198, 199, 201, 202, 203, 204, 207, 208, 209, 210, 211, 212, 213, 265, 306, 307, 308, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 415, 418, 421, 422, 426, 427, 428, 429, 431], "keyword": [11, 12, 13, 15, 21, 22, 23, 24, 25, 26, 27, 45, 46, 47, 48, 52, 53, 55, 62, 65, 66, 69, 70, 71, 80, 85, 92, 93, 95, 98, 123, 124, 125, 126, 127, 138, 143, 149, 158, 180, 181, 182, 183, 190, 192, 198, 199, 200, 202, 205, 206, 306, 315, 316, 318, 376, 378, 382, 383, 388, 392, 393, 394, 395, 402, 407, 408, 413, 421, 422, 439], "argument": [11, 12, 13, 15, 18, 20, 21, 22, 23, 24, 25, 26, 27, 45, 46, 47, 48, 51, 52, 53, 55, 57, 62, 65, 66, 70, 71, 80, 81, 82, 84, 85, 91, 92, 93, 95, 98, 123, 124, 125, 126, 127, 138, 143, 146, 149, 155, 156, 158, 170, 180, 181, 182, 183, 190, 192, 198, 199, 200, 202, 205, 206, 293, 306, 315, 316, 318, 375, 376, 378, 381, 382, 383, 388, 392, 393, 394, 395, 400, 402, 407, 408, 409, 413, 421, 422, 439], "unsupport": [11, 12, 13, 15, 21, 22, 23, 24, 25, 26, 27, 45, 46, 47, 48, 52, 53, 55, 62, 65, 66, 70, 71, 80, 92, 93, 95, 98, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 123, 124, 125, 126, 127, 138, 143, 149, 158, 170, 180, 181, 182, 183, 192, 198, 199, 200, 202, 205, 206, 306, 315, 316, 318, 376, 378, 382, 383, 388, 392, 393, 394, 395, 402, 407, 408, 413, 421, 422], "sequenti": [11, 12, 13, 14, 15, 19, 21, 22, 23, 24, 25, 26, 27, 31, 45, 46, 47, 48, 52, 53, 58, 59, 62, 64, 65, 66, 68, 70, 71, 78, 80, 85, 86, 87, 90, 91, 92, 93, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 123, 124, 125, 126, 127, 138, 139, 140, 143, 149, 150, 151, 152, 153, 158, 159, 160, 179, 180, 181, 182, 183, 184, 185, 186, 187, 192, 194, 198, 199, 200, 202, 205, 206, 210, 306, 307, 308, 312, 314, 315, 316, 317, 320, 376, 378, 382, 383, 386, 388, 392, 393, 394, 395, 397, 398, 402, 405, 407, 408, 413, 421, 422, 429], "exclud": [11, 12, 177, 325, 369], "note": [11, 12, 13, 14, 18, 19, 28, 29, 30, 31, 39, 61, 69, 72, 80, 82, 84, 94, 123, 129, 130, 133, 147, 151, 171, 188, 199, 202, 211, 212, 213, 270, 293, 307, 320, 323, 328, 330, 331, 341, 346, 376, 380, 396, 401, 402, 404, 405, 409, 410, 421, 426, 427], "shorthand": [11, 12, 13, 45, 46, 47, 48, 80, 90, 124, 139, 140, 149, 158, 159, 160, 184, 186, 190, 202, 306, 308, 315, 316, 378, 382, 402, 421, 429], "1j": [11, 12, 18, 58, 59, 82, 146, 176, 278, 291, 375, 398], "5620499351813308": [11, 12], "x1": [13, 15, 18, 25, 26, 44, 45, 47, 48, 54, 62, 64, 70, 71, 72, 73, 76, 78, 80, 82, 85, 90, 98, 117, 124, 125, 126, 127, 138, 139, 140, 143, 150, 157, 158, 159, 160, 164, 171, 183, 184, 185, 186, 187, 190, 192, 194, 195, 198, 199, 200, 202, 205, 206, 265, 306, 308, 312, 313, 315, 316, 322, 323, 324, 362, 378, 382, 384, 389, 402, 411, 413, 417, 420, 421, 424], "x2": [13, 14, 15, 18, 19, 25, 26, 32, 45, 47, 48, 62, 64, 80, 90, 124, 125, 126, 127, 139, 140, 143, 150, 157, 158, 159, 160, 183, 184, 185, 186, 187, 190, 192, 195, 198, 199, 202, 306, 307, 308, 312, 315, 316, 378, 382, 384, 389, 397, 402, 421], "scalar": [13, 15, 26, 32, 34, 35, 36, 37, 38, 45, 47, 48, 51, 61, 62, 63, 69, 74, 77, 79, 80, 81, 82, 84, 90, 124, 125, 126, 127, 134, 135, 136, 139, 140, 143, 148, 154, 158, 159, 160, 175, 177, 183, 184, 186, 187, 188, 190, 192, 195, 198, 199, 202, 274, 279, 308, 312, 316, 321, 325, 326, 327, 329, 332, 333, 334, 335, 336, 337, 338, 339, 340, 344, 347, 348, 350, 351, 353, 356, 359, 361, 365, 367, 368, 369, 370, 371, 372, 373, 378, 382, 402, 409, 421, 425, 427, 429, 439], "both": [13, 15, 26, 43, 45, 47, 48, 55, 62, 69, 80, 81, 90, 124, 125, 126, 127, 139, 140, 143, 148, 158, 159, 160, 171, 183, 184, 186, 187, 190, 192, 198, 199, 202, 212, 308, 312, 316, 378, 382, 402, 409, 421, 427], "equival": [13, 14, 16, 17, 19, 28, 29, 30, 31, 43, 61, 69, 80, 81, 82, 83, 94, 189, 202, 220, 260, 261, 293, 304, 315, 324, 325, 353, 377, 380, 386, 391, 396, 402, 403, 409, 412, 421, 439], "term": [13, 80, 202, 402, 421], "broadcast": [13, 43, 49, 50, 55, 63, 80, 125, 126, 143, 171, 172, 184, 186, 187, 189, 190, 192, 193, 198, 202, 208, 211, 212, 213, 316, 320, 321, 377, 379, 401, 402, 403, 406, 410, 421, 426], "b": [13, 15, 28, 29, 45, 48, 56, 57, 63, 69, 70, 71, 81, 82, 83, 84, 85, 90, 127, 129, 130, 139, 140, 142, 148, 159, 160, 163, 172, 174, 175, 176, 184, 186, 190, 191, 197, 205, 206, 308, 312, 316, 326, 381, 387, 400, 409, 410, 413, 427, 428], "7": [13, 15, 20, 40, 53, 55, 63, 67, 69, 71, 74, 75, 79, 80, 82, 85, 92, 120, 123, 136, 138, 148, 150, 176, 194, 202, 206, 279, 307, 318, 319, 325, 349, 375, 378, 381, 383, 384, 402, 403, 404, 405, 409, 415, 418, 421, 422, 427, 429], "oper": [13, 45, 46, 47, 48, 80, 84, 90, 94, 124, 139, 140, 149, 158, 159, 160, 161, 184, 185, 186, 187, 190, 202, 306, 308, 315, 316, 320, 378, 382, 402, 410, 421, 432, 443], "axi": [14, 16, 17, 18, 19, 28, 29, 30, 43, 56, 57, 67, 69, 70, 71, 79, 82, 83, 85, 94, 99, 104, 105, 109, 110, 113, 120, 121, 122, 125, 126, 136, 138, 142, 147, 171, 177, 188, 189, 190, 191, 192, 193, 194, 197, 198, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 260, 261, 262, 263, 264, 271, 281, 282, 283, 287, 288, 289, 292, 297, 298, 299, 301, 303, 305, 313, 317, 319, 320, 321, 374, 377, 379, 380, 384, 385, 387, 396, 399, 400, 401, 403, 404, 405, 406, 409, 410, 412, 413, 426, 428, 439], "keepdim": [14, 16, 17, 19, 28, 29, 43, 67, 82, 171, 189, 191, 193, 194, 197, 203, 204, 207, 208, 209, 210, 211, 212, 213, 260, 261, 262, 263, 281, 282, 283, 288, 299, 301, 305, 317, 319, 321, 377, 401, 403, 406, 426], "fals": [14, 15, 16, 17, 18, 19, 28, 29, 32, 33, 36, 38, 43, 45, 46, 48, 49, 50, 51, 61, 67, 68, 82, 84, 89, 90, 117, 135, 136, 139, 140, 147, 149, 150, 151, 152, 153, 159, 160, 161, 169, 171, 172, 176, 177, 184, 185, 186, 187, 188, 189, 191, 193, 194, 195, 197, 203, 204, 207, 208, 209, 210, 211, 212, 213, 260, 261, 262, 263, 265, 281, 282, 283, 288, 299, 301, 305, 308, 311, 317, 319, 377, 380, 393, 401, 403, 425, 426, 431], "whether": [14, 15, 19, 84, 161, 173, 177, 380], "given": [14, 19, 20, 28, 29, 31, 32, 34, 35, 36, 38, 43, 56, 61, 67, 68, 70, 71, 79, 81, 82, 83, 84, 85, 88, 89, 117, 120, 125, 126, 134, 135, 136, 138, 143, 167, 177, 188, 191, 192, 195, 197, 198, 205, 206, 207, 209, 210, 211, 212, 213, 262, 263, 265, 271, 283, 288, 289, 294, 299, 301, 305, 310, 311, 317, 319, 320, 325, 330, 352, 369, 377, 379, 383, 384, 385, 386, 387, 401, 403, 409, 410, 413, 414, 426, 428, 430, 431, 439], "evalu": [14, 15, 19, 82, 86, 87, 90, 195, 260, 261, 312, 409], "logic": [14, 19, 184, 186, 187, 432, 443], "AND": [14, 45, 46, 47, 48, 149, 184, 185, 186, 187], "reduct": [14, 19], "method": [14, 16, 17, 19, 30, 61, 81, 82, 84, 119, 128, 130, 169, 172, 176, 265, 270, 293, 325, 380, 391, 403, 412, 432], "Not": [14, 19, 151, 205, 207, 209, 210, 212, 317], "number": [14, 18, 19, 20, 31, 43, 44, 49, 50, 58, 59, 67, 77, 79, 82, 84, 94, 97, 118, 123, 124, 129, 130, 133, 136, 144, 145, 151, 162, 169, 171, 173, 174, 176, 177, 178, 188, 205, 207, 209, 210, 211, 212, 213, 285, 294, 295, 296, 307, 317, 318, 325, 327, 337, 361, 378, 379, 383, 384, 385, 386, 392, 393, 401, 404, 410, 412, 414, 422, 425, 426, 443], "becaus": [14, 19], "x3": [14, 19], "rtol": [15, 150], "1e": [15, 95, 150, 172, 180, 181, 183, 343], "05": [15, 150], "atol": [15, 150], "08": [15, 65, 150, 343, 394], "two": [15, 33, 40, 41, 45, 46, 47, 48, 60, 64, 69, 77, 79, 81, 82, 84, 86, 87, 94, 148, 149, 150, 157, 165, 170, 175, 184, 186, 187, 190, 191, 192, 197, 198, 201, 207, 209, 287, 302, 312, 325, 354, 404, 409, 416, 419, 427], "within": [15, 20, 33, 82, 150, 265, 320, 325, 369], "toler": [15, 33, 150], "A": [15, 20, 32, 34, 35, 36, 37, 38, 39, 49, 50, 52, 55, 56, 61, 62, 63, 74, 77, 82, 84, 88, 89, 93, 94, 97, 120, 121, 122, 128, 129, 130, 133, 134, 135, 136, 144, 147, 161, 166, 169, 173, 174, 177, 188, 190, 196, 210, 212, 265, 270, 277, 295, 309, 310, 311, 317, 325, 327, 344, 347, 352, 353, 354, 355, 356, 357, 358, 360, 361, 366, 369, 374, 376, 379, 388, 393, 404, 409, 410, 412, 414, 425, 430, 431], "boolean": [15, 45, 47, 48, 63, 84, 147, 150, 151, 152, 153, 184, 185, 186, 187, 189, 193, 208, 210, 211, 212, 213, 377, 380, 393, 401, 403, 405, 426], "dim": 15, "typeerror": [15, 43, 63, 67, 99, 105, 113], "rais": [15, 20, 30, 32, 34, 35, 36, 38, 49, 50, 54, 55, 61, 63, 67, 81, 82, 88, 89, 93, 97, 99, 105, 113, 129, 130, 133, 134, 135, 144, 168, 189, 190, 191, 193, 197, 203, 204, 207, 208, 209, 211, 212, 213, 265, 266, 295, 310, 311, 316, 377, 380, 396, 398, 399, 401, 403, 426, 430, 431], "integ": [15, 20, 31, 43, 45, 46, 47, 48, 50, 82, 84, 123, 124, 145, 149, 150, 158, 168, 171, 189, 191, 193, 197, 207, 208, 209, 211, 212, 213, 297, 316, 320, 325, 353, 356, 361, 377, 378, 380, 382, 383, 386, 398, 401, 403, 405, 409, 422, 426, 439], "1e10": [15, 150], "00001e10": [15, 150], "initi": [16, 17, 82, 88, 133, 191, 197, 207, 209, 210, 212, 281, 283, 288, 301, 317, 325, 403], "alia": [16, 17, 80, 118, 214, 325, 355, 358, 360, 387, 421, 428], "z": [18, 20, 32, 34, 35, 36, 38, 61, 74, 77, 88, 89, 97, 129, 130, 131, 134, 135, 136, 144, 177, 188, 195, 196, 309, 310, 311, 335, 414, 425, 430, 431], "deg": [18, 324], "point": [18, 20, 25, 34, 35, 43, 62, 84, 88, 89, 93, 97, 118, 129, 130, 133, 134, 135, 144, 177, 189, 193, 208, 211, 212, 213, 310, 311, 325, 354, 366, 376, 377, 388, 401, 403, 414, 426, 430, 431, 443], "option": [18, 20, 28, 29, 30, 32, 34, 35, 36, 37, 38, 43, 51, 52, 55, 57, 61, 62, 63, 69, 74, 77, 79, 81, 82, 84, 88, 89, 93, 97, 120, 129, 130, 133, 134, 135, 136, 142, 144, 147, 161, 169, 170, 171, 172, 173, 176, 177, 188, 189, 190, 191, 193, 195, 196, 197, 203, 204, 207, 208, 209, 211, 212, 213, 265, 277, 309, 310, 311, 325, 347, 352, 353, 354, 355, 356, 357, 358, 360, 361, 366, 369, 374, 376, 377, 379, 380, 384, 385, 387, 388, 396, 399, 400, 401, 403, 405, 412, 414, 415, 416, 417, 418, 419, 420, 425, 426, 428, 430, 431], "counterclockwis": 18, "plane": 18, "determin": [18, 130, 133, 156, 163, 173, 174, 184, 186, 187, 190], "promot": [18, 20, 32, 34, 35, 36, 38, 51, 136, 177, 188, 190, 381, 410], "rule": [18, 20, 32, 34, 35, 36, 38, 43, 51, 63, 69, 136, 177, 188, 189, 190, 193, 208, 211, 212, 213, 377, 381, 401, 403, 413, 426], "although": [18, 84, 410], "undefin": [18, 82, 287], "arc": [18, 25, 26], "tangent": [18, 21, 22, 23, 24, 25, 26, 27, 65, 66, 394, 395, 407, 408], "quadrant": [18, 25, 26], "correctli": [18, 25, 26, 171, 307], "trigonometr": [18, 21, 22, 23, 24, 25, 26, 27, 65, 66, 394, 395, 407, 408, 443], "invers": [18, 21, 22, 23, 24, 25, 26, 27, 46, 65, 66, 93, 94, 95, 105, 106, 107, 108, 109, 110, 111, 112, 149, 167, 172, 179, 181, 371, 394, 395, 407, 408], "0j": [18, 81, 82, 190, 278, 291, 392], "57079633": [18, 26, 324, 424], "78539816": [18, 25, 26, 424], "mai": [18, 51, 55, 57, 63, 82, 84, 94, 142, 165, 173, 188, 190, 208, 211, 213, 265, 321, 387, 400, 410, 428, 439], "vari": [18, 147, 165, 208, 211, 213], "90": [18, 73, 429], "45": [18, 26], "OR": [19, 45, 46, 47, 48, 149, 184, 185, 186, 187], "stop": [20, 136, 177, 188], "like": [20, 32, 34, 35, 36, 38, 40, 41, 42, 56, 82, 83, 88, 97, 129, 130, 133, 134, 136, 144, 177, 178, 188, 265, 310, 325, 369, 380, 430, 443], "usm_typ": [20, 32, 34, 35, 36, 37, 38, 61, 74, 77, 82, 88, 89, 97, 129, 130, 133, 134, 135, 136, 144, 147, 177, 188, 196, 309, 310, 311, 325, 347, 352, 353, 354, 355, 356, 357, 358, 360, 366, 369, 414, 425, 430, 431], "sycl_queu": [20, 32, 34, 35, 36, 37, 38, 61, 74, 77, 82, 88, 89, 97, 129, 130, 133, 134, 135, 136, 144, 147, 177, 188, 196, 309, 310, 311, 325, 347, 352, 353, 354, 355, 356, 357, 358, 360, 361, 366, 369, 414, 425, 430, 431], "evenli": [20, 136, 177, 188, 383, 386], "interv": [20, 94, 136, 177, 188, 325, 353, 355, 357, 358, 360, 368, 369, 404], "end": [20, 84, 136, 177, 188], "doe": [20, 51, 173], "some": [20, 84, 94, 96, 123, 148, 439], "off": 20, "affect": 20, "length": [20, 43, 79, 82, 90, 133, 136, 142, 176, 188, 195, 295, 328, 380, 381, 387, 391, 399, 409, 410, 428], "between": [20, 51, 79, 85, 118, 130, 133, 148, 166, 177, 188, 342, 356, 424], "specifi": [20, 30, 32, 34, 35, 36, 38, 43, 50, 51, 57, 61, 74, 77, 78, 82, 88, 89, 97, 120, 129, 130, 134, 135, 136, 144, 171, 177, 188, 189, 193, 194, 196, 208, 210, 211, 212, 213, 264, 272, 309, 310, 311, 317, 325, 338, 348, 366, 374, 377, 384, 385, 400, 401, 403, 409, 412, 414, 425, 426, 430, 431], "must": [20, 28, 29, 43, 50, 52, 55, 56, 57, 62, 79, 81, 83, 93, 94, 96, 121, 130, 133, 142, 161, 170, 171, 178, 189, 190, 191, 193, 197, 201, 203, 204, 207, 208, 209, 211, 212, 213, 320, 321, 376, 377, 384, 387, 388, 400, 401, 403, 404, 406, 409, 412, 426, 428], "desir": [20, 32, 34, 35, 36, 38, 39, 50, 88, 89, 97, 134, 135, 136, 144, 177, 188, 310, 311, 385, 410, 414, 430, 431], "repres": [20, 32, 34, 35, 36, 37, 38, 43, 82, 84, 128, 136, 147, 174, 177, 188, 195, 213, 295, 325, 439], "consid": [20, 32, 34, 35, 36, 38, 87, 136, 151, 169, 177, 188, 190, 325, 353], "capabl": [20, 32, 34, 35, 36, 38, 43, 136, 177, 188, 190], "when": [20, 32, 34, 35, 36, 38, 39, 43, 61, 63, 82, 84, 136, 171, 173, 177, 188, 190, 207, 209, 265, 385, 405, 409, 429], "string": [20, 32, 34, 35, 36, 37, 38, 61, 74, 77, 84, 88, 89, 97, 129, 130, 133, 134, 135, 136, 144, 147, 177, 188, 196, 309, 310, 311, 325, 347, 352, 353, 354, 355, 356, 357, 358, 360, 361, 366, 369, 414, 425, 430, 431, 439], "sycldevic": [20, 32, 34, 35, 36, 37, 38, 61, 74, 77, 88, 89, 97, 129, 130, 133, 134, 135, 136, 144, 147, 177, 188, 196, 309, 310, 311, 325, 347, 352, 353, 354, 355, 356, 357, 358, 360, 361, 366, 369, 414, 425, 430, 431], "syclqueu": [20, 32, 34, 35, 36, 37, 38, 61, 74, 77, 88, 89, 97, 129, 130, 133, 134, 135, 136, 144, 147, 177, 188, 196, 309, 310, 311, 325, 347, 352, 353, 354, 355, 356, 357, 358, 360, 361, 366, 369, 414, 425, 430, 431], "concept": [20, 32, 34, 35, 36, 37, 38, 61, 74, 77, 88, 89, 97, 129, 130, 133, 134, 135, 136, 144, 147, 177, 188, 196, 309, 310, 311, 325, 347, 352, 353, 354, 355, 356, 357, 358, 360, 361, 366, 369, 414, 425, 430, 431, 439], "output": [20, 30, 32, 34, 35, 36, 37, 38, 52, 55, 61, 62, 74, 77, 79, 81, 84, 88, 89, 90, 93, 97, 129, 130, 133, 134, 135, 136, 139, 140, 144, 146, 147, 159, 160, 168, 170, 177, 188, 190, 193, 195, 196, 204, 208, 211, 212, 213, 256, 308, 309, 310, 311, 325, 326, 327, 329, 332, 333, 334, 335, 336, 337, 338, 339, 340, 344, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 379, 388, 396, 399, 401, 403, 410, 414, 425, 426, 430, 431, 443], "oneapi": [20, 32, 34, 35, 36, 37, 38, 61, 74, 77, 88, 89, 97, 129, 130, 133, 134, 135, 136, 144, 147, 177, 188, 196, 309, 310, 311, 325, 347, 352, 353, 354, 355, 356, 357, 358, 360, 361, 366, 369, 414, 425, 430, 431], "filter": [20, 32, 34, 35, 36, 37, 38, 61, 74, 77, 88, 89, 97, 129, 130, 133, 134, 135, 136, 144, 147, 177, 188, 196, 309, 310, 311, 325, 347, 352, 353, 354, 355, 356, 357, 358, 360, 361, 366, 369, 414, 425, 430, 431], "selector": [20, 32, 34, 35, 36, 37, 38, 61, 74, 77, 88, 89, 97, 129, 130, 133, 134, 135, 136, 144, 147, 177, 188, 196, 309, 310, 311, 325, 347, 352, 353, 354, 355, 356, 357, 358, 360, 361, 366, 369, 414, 425, 430, 431], "non": [20, 28, 29, 32, 34, 35, 36, 37, 38, 43, 44, 61, 67, 74, 77, 82, 88, 89, 97, 129, 130, 133, 134, 135, 136, 144, 147, 151, 165, 177, 188, 191, 196, 197, 203, 204, 207, 209, 211, 213, 286, 307, 309, 310, 311, 316, 325, 347, 352, 353, 354, 355, 356, 357, 358, 360, 361, 366, 369, 397, 409, 414, 425, 430, 431], "object": [20, 32, 34, 35, 36, 37, 38, 39, 61, 74, 77, 82, 84, 88, 89, 94, 97, 118, 119, 128, 129, 130, 132, 133, 134, 135, 136, 144, 145, 147, 165, 171, 177, 178, 188, 196, 293, 309, 310, 311, 325, 347, 352, 353, 354, 355, 356, 357, 358, 360, 361, 366, 369, 380, 414, 425, 430, 431, 439], "dpnp_arrai": [20, 32, 34, 35, 36, 38, 61, 74, 77, 88, 89, 97, 118, 128, 129, 130, 133, 134, 135, 136, 144, 145, 147, 177, 188, 190, 196, 213, 214, 309, 310, 311, 325, 347, 352, 353, 354, 355, 356, 357, 358, 360, 361, 366, 369, 401, 414, 415, 418, 425, 426, 430, 431, 432], "properti": [20, 32, 34, 35, 36, 37, 38, 61, 74, 77, 82, 88, 89, 97, 129, 130, 133, 134, 135, 136, 144, 147, 173, 177, 188, 196, 215, 273, 275, 276, 278, 280, 284, 285, 291, 295, 296, 300, 304, 309, 310, 311, 325, 347, 352, 353, 354, 355, 356, 357, 358, 360, 361, 366, 369, 414, 425, 430, 431, 439], "share": [20, 32, 34, 35, 36, 37, 38, 61, 74, 77, 88, 89, 97, 129, 130, 133, 134, 135, 136, 144, 147, 177, 188, 196, 309, 310, 311, 325, 347, 352, 353, 354, 355, 356, 357, 358, 360, 366, 369, 414, 425, 430, 431], "usm": [20, 32, 34, 35, 36, 37, 38, 61, 74, 77, 88, 89, 97, 129, 130, 133, 134, 135, 136, 144, 147, 177, 188, 196, 309, 310, 311, 325, 347, 352, 353, 354, 355, 356, 357, 358, 360, 366, 369, 399, 414, 425, 430, 431], "d": [20, 43, 56, 57, 74, 75, 77, 81, 83, 84, 97, 100, 101, 102, 106, 107, 111, 112, 114, 115, 116, 121, 122, 133, 142, 144, 148, 163, 165, 170, 171, 174, 190, 195, 307, 316, 320, 330, 374, 380, 387, 391, 400, 405, 409, 410, 425, 428, 429, 439], "notimplementederror": [20, 30, 32, 34, 35, 36, 38, 49, 50, 55, 61, 82, 88, 89, 97, 129, 130, 133, 134, 135, 144, 190, 191, 193, 197, 207, 208, 209, 211, 212, 213, 265, 310, 311, 396, 401, 403, 426, 430, 431], "care": 20, "handl": [20, 84, 307, 405, 443], "endpoint": [20, 136, 177, 188], "level_zero": [20, 32, 34, 35, 36, 38, 61, 74, 77, 88, 89, 97, 129, 130, 134, 135, 136, 144, 177, 188, 196, 309, 310, 311, 414, 425, 430, 431], "cosin": [21, 22, 23, 24, 25, 26, 27, 65, 66, 394, 395, 407, 408], "sine": [21, 22, 23, 24, 25, 26, 27, 65, 66, 394, 395, 407, 408], "hyperbol": [21, 22, 23, 24, 25, 26, 27, 65, 66, 394, 395, 407, 408, 443], "14159265": [21, 26], "65745445": 22, "99322285": 22, "5707963267948966": 23, "72538256": 24, "99822295": 24, "180": 26, "135": 26, "54930614": 27, "search": [28, 29, 203, 204, 432, 443], "index": [28, 29, 30, 54, 82, 84, 97, 147, 195, 203, 204, 266, 300, 320, 321, 374, 380, 405, 406, 432, 443], "should": [28, 29, 81, 82, 130, 137, 150, 189, 190, 191, 197, 201, 203, 204, 207, 209, 265, 342, 377, 380, 389, 409, 439], "reduc": [28, 29, 43, 173, 176, 189, 191, 193, 195, 197, 203, 204, 207, 208, 209, 211, 212, 213, 377, 401, 403, 426], "ax": [28, 29, 43, 79, 81, 82, 94, 100, 102, 103, 106, 107, 108, 111, 112, 114, 116, 120, 148, 171, 175, 189, 190, 191, 193, 197, 201, 203, 204, 207, 208, 209, 211, 212, 213, 295, 302, 304, 377, 384, 385, 399, 401, 403, 404, 409, 410, 412, 426], "dimens": [28, 29, 32, 40, 41, 42, 43, 56, 57, 63, 68, 69, 75, 79, 82, 84, 94, 121, 122, 142, 147, 148, 169, 171, 173, 189, 191, 193, 195, 196, 197, 201, 203, 204, 207, 208, 209, 211, 212, 213, 277, 285, 295, 309, 321, 325, 355, 357, 358, 360, 377, 380, 391, 399, 400, 401, 403, 404, 406, 410, 416, 417, 419, 420, 426, 439, 443], "singleton": [28, 29, 43, 94, 189, 191, 193, 197, 203, 204, 207, 208, 209, 211, 212, 213, 377, 399, 401, 403, 426], "accordingli": [28, 29, 191, 197, 203, 204, 207, 209], "first": [28, 29, 30, 43, 56, 57, 62, 69, 81, 84, 93, 120, 148, 155, 156, 170, 190, 191, 195, 197, 203, 204, 316, 374, 380, 384, 387, 396, 398, 404, 406, 409, 427, 428], "occurr": [28, 29, 44, 203, 204], "igonr": [28, 29, 203, 204], "convert": [28, 29, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 61, 72, 73, 74, 77, 84, 94, 134, 135, 136, 177, 188, 323, 324, 424, 425], "flat": [28, 29, 82, 119, 277, 379], "tupl": [28, 29, 32, 34, 35, 36, 38, 43, 50, 61, 74, 75, 77, 82, 84, 94, 120, 134, 135, 136, 147, 171, 173, 177, 188, 189, 190, 191, 193, 195, 196, 197, 207, 208, 209, 211, 212, 213, 295, 307, 309, 377, 380, 384, 391, 399, 401, 403, 410, 412, 416, 419, 425, 426, 439], "appli": [28, 29, 30, 43, 51, 184, 186, 187, 381, 409], "index_arrai": [28, 29, 30], "call": [28, 29, 30, 36, 38, 84, 170, 220, 399, 410, 429], "multipl": [28, 29, 30, 43, 57, 69, 84, 142, 165, 166, 167, 189, 191, 193, 197, 207, 208, 209, 211, 212, 213, 377, 387, 396, 400, 401, 403, 426, 428, 432], "11": [28, 29, 43, 66, 75, 82, 138, 293, 344, 353, 386, 395, 415, 418], "13": [28, 29, 46, 75, 81, 84, 149, 190, 206], "14": [28, 29, 45, 46, 75, 81, 148, 149, 409], "24": [28, 29, 69, 70, 85, 148, 317, 409], "re": [28, 29, 44, 141, 384, 423], "kind": [30, 51, 57, 63, 82, 84, 118, 142, 189, 190, 212, 264, 265, 287, 297, 313, 377, 387, 396, 400, 403, 428, 443], "would": [30, 57, 82, 84, 147, 190, 287, 325, 396, 400, 406, 412], "last": [30, 69, 79, 120, 136, 148, 170, 177, 188, 190, 374, 380, 384, 396, 399, 409], "stabl": [30, 396], "unlik": [30, 82, 293, 396], "other": [30, 49, 50, 79, 82, 84, 123, 144, 170, 201, 217, 218, 221, 223, 224, 226, 227, 228, 229, 230, 231, 232, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 250, 252, 254, 257, 258, 259, 265, 318, 325, 369, 385, 396, 432, 443], "accept": [30, 325, 396], "yield": [30, 325, 439], "gener": [30, 43, 84, 136, 166, 172, 173, 188, 325, 327, 330, 361, 425, 439, 443], "irrespect": 30, "axiserror": [30, 396], "indirect": [30, 396], "partial": [30, 396], "ind": [30, 416, 419], "decim": [31, 82, 118, 294, 383, 386], "detail": [31, 128, 386, 416, 417, 419, 420, 439], "nearest": [31, 123, 124, 378, 383, 386, 422], "truncat": [31, 53, 123, 363, 383, 386, 422], "ndmin": 32, "array_lik": [32, 34, 35, 36, 37, 38, 39, 43, 61, 63, 74, 77, 134, 135, 136, 166, 168, 170, 171, 177, 188, 321, 325, 391, 409, 417, 420, 425], "form": [32, 34, 35, 36, 37, 38, 56, 61, 74, 77, 83, 134, 135, 136, 177, 188, 387, 425, 428], "layout": [32, 34, 35, 36, 38, 39, 52, 55, 61, 62, 82, 88, 89, 93, 97, 134, 135, 190, 275, 310, 311, 376, 380, 388, 430, 431, 432], "newli": [32, 34, 35, 52, 55, 61, 62, 82, 88, 89, 93, 97, 134, 135, 190, 265, 310, 311, 376, 388, 430, 431], "satisfi": [32, 36, 38, 82, 96, 167, 265], "new": [32, 49, 50, 56, 57, 82, 83, 84, 88, 89, 94, 128, 132, 133, 134, 135, 136, 142, 144, 177, 188, 201, 210, 265, 293, 304, 310, 311, 317, 380, 384, 385, 387, 400, 410, 412, 428, 430, 431, 439], "uniniti": [32, 88, 89, 134, 310, 430], "than": [32, 82, 118, 121, 122, 142, 169, 172, 173, 287, 392, 393, 399, 400, 409], "a1": 33, "a2": 33, "equal_nan": [33, 150], "consist": [33, 130, 177, 406, 409], "contigu": [34, 35, 36, 38, 81, 82, 277, 290, 374, 380], "check": [34, 35, 51, 161, 172, 175], "construct": [34, 35, 54, 74, 77, 82, 84, 129, 130, 131, 133, 196, 266, 309, 379, 410, 432], "grid": [34, 35, 147, 195, 196, 309], "No": [35, 161], "perform": [35, 55, 79, 120, 161], "match": [35, 57, 63, 79, 84, 130, 148, 190, 320, 321, 400, 405, 406, 409], "pass": [35, 82, 84, 293], "through": [35, 84, 439], "subclass": [35, 156], "content": [36, 82, 362], "flag": [36, 38, 82, 84, 270], "about": [36, 38, 82, 118, 275, 439], "f_contigu": [36, 38], "make": [36, 38, 56, 84, 195], "now": [36, 38, 75], "c_contigu": [36, 38, 82, 270], "Then": [36, 38], "x0": [36, 38, 61, 74, 77, 311, 425, 431], "__sycl_usm_array_interface__": 37, "protocol": [37, 84, 128], "buffer": [37, 82, 129, 130, 133, 380], "possibli": 37, "nest": [37, 83, 142, 387, 400, 428], "sequenc": [37, 40, 41, 42, 56, 57, 60, 64, 83, 88, 89, 134, 135, 136, 142, 147, 168, 170, 177, 188, 201, 310, 311, 349, 362, 381, 387, 400, 409, 428, 430, 431], "str": [37, 57, 84, 130, 133, 142, 387, 400, 428], "code": [37, 84], "coerc": [37, 129, 130, 133], "laid": 38, "fortran": [38, 82, 265, 277, 374, 380], "row": [38, 56, 57, 82, 83, 97, 121, 122, 142, 144, 147, 170, 176, 178, 265, 277, 374, 387, 400, 414, 416, 428], "arbitrari": [39, 81, 84, 148, 190, 381], "keep": [39, 82, 265], "stride": [39, 82, 265], "close": [39, 82, 94, 177, 265, 325, 353], "possibl": [39, 41, 42, 82, 94, 265, 293, 380, 399, 404, 412], "exactli": [39, 72, 133, 323, 325, 353], "ari": [40, 41, 42], "least": [40, 41, 42, 43, 83, 84, 94, 121, 130, 150, 173, 387, 428], "One": [40, 41, 42, 69, 83, 84, 380], "preserv": [40, 41, 42, 55, 82, 84, 120, 121, 122, 265], "made": [40, 84], "three": [40, 41, 42, 94, 325, 361, 409], "avoid": [41, 42], "weight": [43, 44, 68, 141, 193, 208, 403], "over": [43, 81, 119, 120, 131, 136, 148, 171, 177, 188, 189, 190, 191, 193, 195, 197, 205, 207, 208, 209, 210, 211, 212, 213, 317, 325, 352, 357, 368, 369, 377, 401, 403, 409, 426, 443], "entir": [43, 189, 191, 193, 197, 207, 208, 209, 211, 212, 213, 377, 401, 403, 426], "associ": [43, 439], "contribut": 43, "accord": [43, 51, 84, 118, 165, 166, 189, 193, 208, 211, 212, 213, 377, 401, 403, 426], "assum": [43, 169, 172, 176], "avg": 43, "constraint": 43, "sum_of_weight": 43, "taken": [43, 79, 190, 211, 213, 401, 414, 416, 419, 426, 427], "so": [43, 84, 90, 177, 179, 189, 193, 195, 208, 211, 212, 213, 363, 377, 397, 401, 403, 409, 410, 426], "remain": [43, 189, 193, 201, 208, 211, 212, 213, 377, 380, 401, 403, 426], "second": [43, 62, 69, 81, 84, 93, 142, 148, 156, 190, 191, 195, 197, 316, 398, 404, 409, 427], "pattern": 43, "lowest": [43, 86, 87, 325, 353], "precis": [43, 84, 118], "happen": [43, 82, 265, 327], "previou": 43, "still": 43, "arithmet": [43, 136, 193, 194, 208, 211, 213, 315, 401, 403, 426, 432, 443], "75": [43, 91, 138, 167, 177], "With": [43, 171], "w": [43, 165, 166], "minlength": 44, "count": [44, 67, 84, 120, 129, 130, 132, 133, 168, 307, 327, 432, 443], "find": [44, 169, 172, 176, 389, 396, 423, 443], "bit": [45, 46, 47, 48, 84, 118, 145, 149, 158, 184, 186, 187, 382, 443], "truth": [45, 46, 47, 48, 90, 139, 140, 149, 159, 160, 184, 185, 186, 187, 308, 443], "xor": [45, 46, 47, 48, 149, 184, 185, 186, 187], "255": [45, 47], "NOT": [46, 149, 184, 185, 186, 187], "31": [48, 136], "26": 48, "arg": [49, 86, 325], "against": [49, 50, 55, 137, 171, 172, 321, 406], "origin": [49, 82, 171, 195, 201, 380, 384], "from_": 51, "cast": [51, 57, 63, 82, 142, 189, 190, 193, 208, 211, 212, 213, 265, 377, 387, 400, 401, 403, 426, 428], "safe": [51, 57, 63, 82, 142, 190, 265, 387, 400, 428], "occur": [51, 57, 63, 82, 142, 190, 265, 277, 387, 400, 428], "target": [51, 82, 265], "equiv": [51, 57, 63, 82, 142, 190, 265, 387, 400, 428], "same_kind": [51, 57, 63, 82, 142, 190, 265, 387, 400, 428], "unsaf": [51, 57, 63, 82, 142, 190, 265, 387, 400, 428], "what": [51, 57, 63, 82, 84, 90, 142, 190, 265, 327, 344, 387, 400, 428], "basic": [51, 439, 443], "i8": [51, 84], "f8": [51, 84], "f4": 51, "1000": [51, 136, 188, 326, 327, 332, 334, 336, 337, 338, 339, 340, 347, 348, 351, 353, 355, 358, 360, 366, 370, 371, 372, 373], "i4": [51, 84], "u4": 51, "cube": [52, 397], "popul": [52, 62, 82, 93, 325, 352, 376, 388], "correct": [52, 57, 62, 93, 175, 376, 388, 400], "27": [52, 188, 316, 388, 425], "mode": [54, 60, 64, 82, 173, 266, 289, 303, 320, 363, 368, 405], "prefer": [54, 61, 82, 270], "a_min": 55, "a_max": 55, "edg": 55, "right": [55, 69, 121, 122, 143, 158, 164, 165, 368, 377, 382, 389, 425], "hold": [55, 171, 210, 317], "Its": [55, 321], "those": [55, 321], "tup": [56, 83, 142, 387, 428], "them": [56, 439], "just": [56, 84], "turn": 56, "join": [56, 57, 83, 142, 387, 400, 428, 443], "depth": [56, 57, 83, 142, 387, 400, 428], "third": [56, 57, 83, 142, 387, 400, 428], "horizont": [56, 57, 83, 120, 142, 387, 400, 428], "vertic": [56, 57, 83, 120, 121, 142, 387, 400, 428], "exist": [56, 57, 83, 84, 94, 142, 380, 387, 400, 428], "destin": [57, 142, 201, 320, 321, 387, 400, 406, 428], "were": [57, 325, 354, 400], "cannot": [57, 82, 203, 204, 295, 399, 400], "togeth": [57, 84, 400], "sub": [57, 84, 142, 387, 400, 414, 428], "3rd": 57, "assembl": [57, 83, 142, 387, 400, 428], "t": [57, 68, 82, 84, 161, 166, 304, 367], "obtain": [58, 59, 161, 307], "chang": [58, 59, 61, 62, 69, 82, 84, 265, 300, 304, 306, 314, 315, 320, 321, 322, 374, 380, 385, 424, 443], "imaginari": [58, 59, 82, 146, 278, 318, 375], "2j": [58, 59, 81, 146, 165, 190, 375, 392, 427], "j": [58, 59, 146, 147, 161, 165, 182, 190, 318, 321, 375, 398, 406, 409], "v": [60, 74, 77, 84, 165], "linear": [60, 64, 175, 188, 432, 443], "convolut": [60, 64], "ca": 60, "we": [61, 75, 321, 406], "modifi": [61, 362], "dst": 63, "src": 63, "violat": 63, "wherev": 63, "valid": [64, 94, 404, 416, 417, 419, 420], "000000e": [65, 394], "00": [65, 394], "371139e": 65, "5091786": 66, "591953": 66, "coordin": [67, 131, 195], "19": [67, 84], "m": [68, 83, 84, 97, 120, 121, 122, 161, 163, 165, 166, 167, 169, 172, 173, 174, 175, 176, 190, 321, 406, 414, 415, 416, 418, 419], "rowvar": 68, "bia": 68, "ddof": [68, 82, 211, 213, 299, 305, 401, 426], "fweight": 68, "aweight": 68, "estim": [68, 327, 344], "covari": 68, "matrix": [68, 81, 148, 161, 162, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 190, 195, 398, 418, 425, 427, 432, 443], "variabl": 68, "axisa": 69, "axisb": 69, "axisc": 69, "vector": [69, 148, 162, 169, 170, 171, 176, 190, 195, 427, 443], "By": [69, 82, 136, 177, 188, 190, 191, 193, 197, 207, 208, 209, 211, 213, 265, 374, 379, 384, 401, 414, 416, 419, 426], "ignor": [69, 84, 125, 126, 133, 191, 192, 193, 197, 198, 203, 204, 207, 208, 209, 211, 213, 401, 426], "overrid": [69, 89, 135, 311, 431], "direct": [69, 79, 121, 122], "hand": 69, "orient": 69, "definit": [69, 123, 161], "30": [69, 73, 321, 324, 406, 427], "60": [69, 73, 321, 406, 409, 429], "72": 69, "cumul": [70, 71, 79, 82, 205, 206, 271, 403], "120": [70, 73], "720": 70, "th": [71, 74, 77, 79, 85, 97, 138, 194, 412, 415, 418], "21": [71, 84], "remov": [72, 82, 94, 298, 323, 399, 443], "larg": [72, 84, 172, 323], "jump": [72, 323], "wrap": [72, 82, 117, 289, 303, 320, 323, 405], "rad": 73, "150": 73, "question": 74, "main": [74, 75, 76, 77, 97, 117, 144, 166, 414, 415, 418], "upper": [74, 97, 161, 173, 414, 418, 419], "triangl": [74, 143, 377, 414, 415, 416, 417, 418, 419, 420], "lower": [74, 97, 155, 161, 414, 415, 416, 417, 420], "access": [75, 76, 117, 439], "usual": [75, 84, 190], "di": 75, "100": [75, 136, 188, 337, 363], "d3": 75, "give": [77, 82, 304, 380, 391], "offset": [78, 82, 84, 129, 130, 272, 411, 416, 417, 419, 420], "axis1": [78, 82, 272, 302, 404, 411], "axis2": [78, 82, 272, 302, 404, 411], "prepend": [79, 94, 410], "differenc": 79, "prior": 79, "expand": [79, 94], "smaller": [79, 82, 118, 124, 287, 378], "consecut": [79, 85], "quotient": [80, 199, 378, 421], "dp": [80, 82, 163, 165, 174, 175, 304, 316, 380, 381, 391, 402, 412, 421, 429], "condit": [81, 82, 96, 162, 265, 314, 320, 322, 390, 429], "met": 81, "instead": [81, 82, 94, 123, 136, 147, 177, 188, 265, 307], "attempt": 81, "flexibl": [81, 84, 130], "einstein": [81, 86, 87, 148, 190, 312, 409], "summat": [81, 86, 87, 148, 190, 312, 409], "convent": [81, 86, 87, 148, 190, 312, 409], "chain": [81, 82], "neither": [81, 176, 190, 207, 209], "3j": [81, 190], "499128": 81, "wrapper": 82, "compliant": 82, "__getitem__": [82, 84, 119], "self": [82, 84, 119, 216, 217, 218, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 257, 258, 259, 276, 325], "__setitem__": [82, 119], "val": [82, 117, 119, 146, 255, 289, 314, 320, 375], "__len__": [82, 84], "len": [82, 84, 147, 195, 196, 242, 391, 425], "asnumpi": 82, "style": [82, 265, 277, 374], "itself": [82, 84, 265, 439], "backward": [82, 265, 384, 385], "convers": [82, 265, 432], "arr_t": [82, 265], "unless": [82, 169, 171, 188, 210, 265, 317], "behavior": [82, 270, 410], "conveni": [82, 325], "assign": [82, 274], "collaps": [82, 277], "get_arrai": 82, "get": [82, 136, 177, 188, 300, 406, 439], "id": [82, 279], "standard": [82, 118, 124, 127, 193, 199, 208, 211, 213, 256, 279, 299, 325, 340, 347, 354, 363, 364, 365, 366, 367, 378, 401, 426, 439, 443], "random": [82, 120, 121, 122, 172, 173, 176, 279, 400, 432, 443], "123": [82, 279], "kth": [82, 287, 313], "introselect": [82, 287, 313], "rearrang": [82, 287, 443], "move": [82, 201, 287, 384, 385, 412], "behind": [82, 287], "sh": [82, 293], "free": [82, 293], "separ": [82, 84, 130, 133, 293], "could": [82, 297], "howev": [82, 297, 392], "entri": [82, 84, 88, 120, 121, 122, 298, 399], "deviat": [82, 193, 208, 211, 213, 299, 325, 340, 347, 401, 426], "interchang": [82, 201, 302, 404], "to_devic": 82, "target_devic": 82, "transfer": 82, "suitabl": [82, 304], "without": [82, 88, 295, 304, 374, 380, 439], "varianc": [82, 193, 208, 211, 213, 305, 401, 426, 443], "__eq__": [82, 84, 119, 325], "__ne__": [82, 84, 119, 325], "__lt__": [82, 84, 119, 325], "__le__": [82, 84, 119, 325], "__gt__": [82, 84, 119, 325], "__ge__": [82, 84, 119, 325], "attribut": [82, 84, 89, 118, 135, 145, 173, 311, 431, 432], "70710677": [82, 278, 291], "items": [82, 84], "nbyte": 82, "consum": [82, 284], "setter": [82, 295], "involv": [82, 295], "displac": [82, 300], "upon": [82, 300], "unit": [82, 174, 300], "respect": [82, 300], "s1": [82, 84, 300], "s2": [82, 84, 300], "s3": [82, 300], "i1": [82, 84, 300], "i2": [82, 84, 300], "i3": [82, 300], "sycl_context": 82, "sycl_devic": 82, "after": [83, 344, 384], "been": [83, 321, 385, 406], "rebuild": 83, "nd": [83, 142, 387, 400, 428], "align": 84, "homogen": 84, "describ": [84, 171, 189, 212, 377, 403, 443], "fundament": 84, "field": [84, 195], "struct": 84, "obj": [84, 128, 154], "dictionari": 84, "comma": 84, "sticki": 84, "isalignedstruct": 84, "built": 84, "int16": 84, "structur": 84, "f1": 84, "unsign": [84, 212, 403], "uint64": 84, "f2": 84, "u8": 84, "s10": 84, "format": [84, 130, 133, 443], "f0": 84, "void": 84, "hello": 84, "world": [84, 327, 344], "v10": 84, "subdivid": 84, "int8": [84, 317], "gender": 84, "ag": 84, "uint8": [84, 129, 130], "u1": [84, 129, 130], "25": [84, 91, 138, 141, 167, 177, 202, 213, 354, 363, 425, 426], "surnam": 84, "s25": 84, "new_ord": 84, "forc": 84, "swap": [84, 404], "opposit": 84, "endian": 84, "littl": 84, "big": 84, "nativ": 84, "new_dtyp": 84, "sy": 84, "sys_is_l": 84, "byteord": 84, "native_cod": 84, "swapped_cod": 84, "native_dt": 84, "swapped_dt": 84, "l": [84, 161, 165], "subarrai": [84, 147], "regardless": 84, "subdtyp": 84, "8f": 84, "charact": [84, 130], "applic": 84, "dt": 84, "relev": [84, 136, 177, 188], "ascii": 84, "even": [84, 386], "char": 84, "descr": 84, "__array_interface__": 84, "descript": [84, 189, 212, 377, 403, 439], "warn": [84, 203, 204, 343], "directli": [84, 147, 188, 406], "accur": 84, "reconstruct": [84, 176], "str_": 84, "grade": 84, "u16": 84, "fulli": 84, "titl": 84, "32": [84, 136, 409], "present": [84, 207, 209, 212], "unicod": 84, "meta": 84, "notic": 84, "s16": 84, "mask": [84, 314, 322, 405], "multiarrai": 84, "item_hasobject": 84, "list_pickl": 84, "item_is_point": 84, "needs_init": 84, "needs_pyapi": 84, "use_getitem": 84, "use_setitem": 84, "explan": 84, "thei": [84, 166, 387, 409, 425, 428, 439], "user": 84, "particular": 84, "hasobject": 84, "recal": 84, "actual": [84, 161], "address": 84, "pointer": [84, 212, 403], "distinguish": 84, "won": 84, "maintain": [84, 389, 406], "produc": 84, "isbuiltin": 84, "relat": 84, "read": [84, 129, 130, 133, 374, 380], "etc": [84, 344], "machineri": 84, "extend": [84, 439], "field1": 84, "isn": 84, "platform": 84, "anyth": 84, "arr": [84, 307, 322, 349, 417, 420], "80": [84, 429], "biufcmmosuv": 84, "identifi": 84, "u": [84, 161, 176], "timedelta": 84, "datetim": 84, "metadata": 84, "readonli": 84, "mappingproxi": 84, "approach": 84, "propag": [84, 125, 126, 191, 192, 197, 198, 207, 209, 210, 212], "guarante": [84, 380], "certain": 84, "project": [84, 318], "featur": 84, "wa": [84, 189, 191, 197, 207, 209, 211, 213, 325, 366, 377, 401, 426], "long": 84, "undocu": 84, "well": [84, 130, 327, 344, 363], "aspect": 84, "futur": 84, "ad": [84, 163, 174, 443], "datatyp": [84, 169], "dt2": 84, "key2": 84, "value2": 84, "arr2": 84, "clear": 84, "width": 84, "un": 84, "void640": 84, "increas": [84, 94, 425], "walk": 84, "num": [84, 91, 136, 177, 188, 424], "roughli": 84, "typestr": 84, "item_dtyp": 84, "whose": [84, 97, 166, 201, 384, 417, 420], "retriev": 84, "extra": [84, 133], "impli": 84, "tack": 84, "to_end": 85, "to_begin": 85, "operand": [86, 87, 312, 409], "cost": [86, 87], "contract": [86, 87, 409], "express": [86, 87], "subscript": 87, "greedi": 87, "intermedi": 87, "03088525e": 88, "312": 88, "prototyp": 89, "compar": 90, "in_array1": 91, "error": [91, 189, 377, 399, 432], "scipi": 91, "math": 91, "99532227": 91, "99853728": 91, "99959305": 91, "99989938": 91, "99997791": 91, "718281828": [92, 95], "389056099": [92, 95], "p": [93, 162, 327, 330, 335, 341, 344], "appear": [94, 121, 122], "whenev": [94, 404, 412], "rank": [94, 96, 169, 404], "resid": 94, "henc": 94, "resolv": [94, 189, 212, 377, 403], "newaxi": 94, "minu": [95, 123, 124, 378, 422], "callcul": 95, "00000000005e": 95, "000000082740371e": 95, "elsewher": [97, 144, 414, 429], "fourier": [99, 100, 101, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 432], "transform": [99, 100, 101, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 432], "batch": [100, 102, 106, 107, 111, 112, 114, 116], "sampl": [101, 115, 136, 177, 188, 321, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 356, 359, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 406, 432, 443], "frequenc": [101, 103, 108, 115], "shift": [103, 108, 158, 382, 384], "compon": [103, 108, 118, 146, 318, 375], "center": [103, 108], "spectrum": [103, 108], "signal": [104, 109], "hermitian": [104, 109, 161, 165, 169, 172, 176, 443], "symmetri": [104, 109], "occupi": [118, 145], "ep": [118, 169], "smallest": [118, 145], "represent": [118, 145, 147, 439], "larger": 118, "ieee": 118, "754": 118, "epsneg": 118, "largest": [118, 124, 145, 378], "approxim": 118, "resolut": 118, "tini": 118, "smallest_norm": 118, "finfo_object": 118, "__next__": 119, "__iter__": 119, "revers": [120, 121, 122, 412, 425], "reorder": [120, 201], "left": [121, 122, 158, 171, 368, 382, 389, 425], "down": 122, "toward": [123, 124, 378, 422], "spreadsheet": 123, "word": [123, 325, 369], "divis": [124, 125, 126, 127, 199, 316, 378], "floordivid": 124, "complementari": [124, 127, 199], "__dlpack__": 128, "dmlc": 128, "github": 128, "io": [128, 178], "dlpack": 128, "__dlpack_device__": 128, "buffer_lik": 129, "expos": [129, 439], "text": [129, 130, 133, 178], "binari": [129, 130, 133, 432, 443], "file": [129, 130, 133, 137, 178], "x01": [129, 130], "x02": [129, 130], "x03": [129, 130], "x04": [129, 130], "67305985": 129, "x05": 129, "sep": [130, 133], "highli": 130, "effici": [130, 169, 172, 176], "known": [130, 363], "pars": 130, "simpli": 130, "written": 130, "open": [130, 177, 309, 325, 355, 357, 358, 360, 369, 404], "filenam": 130, "treat": [130, 170, 205, 210, 212, 317, 318, 321, 406, 410, 439], "whitespac": [130, 133], "permit": 130, "pickl": 130, "write": [130, 380], "temporari": 130, "tempfil": 130, "fh": 130, "temporaryfil": 130, "x00": 130, "flush": 130, "seek": 130, "therefor": 131, "fn": 131, "fill_valu": [134, 135], "50": [136, 183, 188, 321, 406, 409, 429], "scale": [136, 173, 177, 188, 325, 332, 334, 336, 337, 338, 339, 347, 359, 364, 371], "progress": [136, 177], "final": [136, 188], "store": [136, 177, 188, 190], "begin": [136, 177, 188], "62341325": 136, "6227766": 136, "177": [136, 188], "827941": [136, 188], "63": 136, "127": 136, "directori": 137, "h": [137, 161, 173, 195], "header": 137, "modul": [137, 432], "vararg": 138, "y1": [138, 413], "bin": [141, 363], "densiti": 141, "dataset": 141, "hist": [141, 363], "bin_edg": 141, "4999999999999996": 141, "leg": [143, 377], "hypotenus": [143, 377], "reduce_hypot": 143, "iinfo_object": 145, "4j": [146, 375, 427], "6j": [146, 375, 427], "spars": [147, 195], "dens": [147, 196], "ith": [147, 309], "col": 147, "straightforward": 147, "whichev": 148, "generalis": 148, "ordinari": [148, 161], "multidimension": 148, "38": [148, 327], "62": 148, "86": 148, "110": 148, "134": 148, "finit": [151, 152, 153, 318], "nat": 153, "arg1": [155, 156], "arg2": [155, 156], "typecod": 155, "hierarchi": 155, "kroneck": 157, "40": [158, 321, 406], "decomposit": [161, 169, 172, 176, 443], "symmetr": [161, 165, 169, 172, 176], "verifi": 161, "addit": [161, 208], "factor": [161, 173], "fro": 162, "logarithm": [163, 174, 177, 179, 180, 181, 182, 183, 189, 341, 443], "bc": [163, 174], "matric": [163, 166, 167, 169, 171, 172, 173, 174, 176, 190, 195], "eigenvalu": [164, 165, 166, 443], "eigenvector": [164, 165, 166], "uplo": 165, "ascend": 165, "17157288": 165, "82842712": 165, "92387953": 165, "38268343": 165, "38268343j": 165, "92387953j": 165, "aren": 166, "necessarili": 166, "nor": [166, 207, 209], "ainv": 167, "sever": 167, "onc": 167, "suppli": [168, 170, 325, 354], "tol": [169, 343], "singular": [169, 172, 176], "threshold": 169, "epsilon": 169, "enabl": [169, 172, 176], "defici": 169, "ord": 171, "abl": 171, "eight": 171, "infinit": [171, 318], "under": 171, "rcond": 172, "moor": 172, "penros": 172, "pseudo": [172, 325], "cutoff": 172, "small": 172, "largest_singular_valu": 172, "q": [173, 194], "orthonorm": 173, "r": 173, "raw": 173, "tau": 173, "namedtupl": 173, "orthogon": 173, "unitari": [173, 176], "household": 173, "reflector": 173, "r2": 173, "natur": [174, 179, 180, 181, 182, 183, 189], "circl": 174, "logabsdet": 174, "69314718": [174, 181], "09861229": [174, 181], "07944154": 174, "equat": [175, 443], "solut": 175, "full_matric": 176, "compute_uv": 176, "vh": 176, "descend": 176, "2d": [176, 190], "smat": 176, "4d": 176, "retstep": 177, "There": 177, "half": [177, 325, 355, 357, 358, 360, 369, 404], "fname": 178, "stringio": 178, "behav": 178, "n2": [178, 195], "plu": [179, 180, 181, 182], "30102999566": 180, "99": [181, 321], "xi": [182, 195], "26618007j": 182, "logsumdexp": 183, "prob1": 183, "prob2": 183, "5e": 183, "prob12": 183, "113": 183, "87649168": 183, "ln": 188, "log_bas": 188, "uniformli": [188, 325, 369], "215": 188, "443469": 188, "464": 188, "15888336": 188, "316": 188, "22776602": 188, "562": 188, "34132519": 188, "0396842": 188, "34960421": 188, "98024613": 188, "72075441": 188, "infer": [189, 212, 377, 380, 403], "30258509": 189, "signatur": 190, "extobj": 190, "mix": 190, "98": 190, "maxima": 191, "while": [193, 208, 211, 213, 307, 384, 401, 414, 426], "overwrite_input": 194, "xy": 195, "xn": 195, "ij": 195, "cartesian": 195, "n1": 195, "ni": [195, 321, 406], "nn": 195, "conserv": 195, "n3": 195, "nx": 195, "ny": 195, "xv": 195, "yv": 195, "matplotlib": [195, 363], "pyplot": [195, 363], "plt": [195, 363], "xx": 195, "yy": 195, "contourf": 195, "dpnp_iface_arraycr": [196, 309], "mgridclass": 196, "5j": [196, 309], "minima": 197, "fraction": 200, "slice": [203, 204, 207, 208, 209, 211, 212, 213, 320, 321, 406, 419, 439], "valueerror": [203, 204, 380, 399], "trust": [203, 204], "encount": [207, 209], "runtimewarn": [207, 209], "6666666666666665": 208, "across": [210, 212], "delta": [211, 213, 401, 424, 426], "freedom": [211, 213, 367, 401, 426], "divisor": [211, 213, 401, 426], "nonneg": [211, 213, 401, 426], "247219128924647": 211, "5555555555555554": 213, "repr": 253, "136": 256, "272": 256, "408": 256, "out2": 307, "ogridclass": 309, "expon": [316, 351, 443], "125": [316, 425], "effect": 316, "onto": 318, "riemann": 318, "sphere": 318, "magnitud": 318, "7j": 318, "1d": [320, 321, 406], "contrast": 320, "cyclic": 320, "clamp": [320, 405], "boundari": 320, "44": 320, "55": 320, "22": 320, "nk": [321, 406], "nj": [321, 406], "had": [321, 406], "everi": [321, 406], "52359878": 324, "04719755": 324, "0943951": 324, "61799388": 324, "mersenn": 325, "twister": 325, "maximumum": [325, 361], "intern": 325, "state": 325, "get_sycl_queu": 325, "loc": [325, 336, 338, 339, 347, 371], "draw": [325, 326, 327, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 353, 359, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372], "gaussian": [325, 347, 371], "drawn": [325, 326, 327, 329, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 347, 348, 350, 351, 353, 356, 359, 365, 366, 367, 368, 369, 370, 371, 372, 373, 390], "parameter": [325, 347, 369], "58997253": 325, "84288406": 325, "33836967": 325, "16394577": 325, "40882036": 325, "39295758": 325, "48927254": 325, "74921661": 325, "13436424": 325, "56920387": 325, "84743374": 325, "80226506": 325, "76377462": 325, "06310682": 325, "25506903": 325, "1179187": 325, "49543509": 325, "76096244": 325, "low": [325, 353, 356, 369, 439], "high": [325, 353, 356, 369], "inclus": [325, 353, 356], "exclus": [325, 353], "omit": [325, 353, 429], "d0": [325, 352, 354], "d1": [325, 354], "dn": [325, 352, 354], "84401099": 325, "four": [325, 354], "88997253": 325, "54288406": 325, "63836967": 325, "46394577": 325, "70882036": 325, "69295758": 325, "78927254": 325, "04921661": 325, "continu": [325, 357], "stdev": [325, 366], "81715362": 325, "54465213": 325, "18557831": 325, "28352814": 325, "67718303": 325, "11570901": 325, "21968665": 325, "18236388": 325, "08156915": 325, "21941987": 325, "24544512": 325, "63522211": 325, "673174": 325, "54": 325, "48093112": 325, "52928804": 325, "1196081": 325, "6990877": 325, "34074171": 325, "alpha": [326, 331, 332, 348, 351], "trial": 327, "probabl": [327, 335, 344], "coin": 327, "compani": [327, 344], "drill": [327, 344], "wild": [327, 344], "cat": [327, 344], "oil": [327, 344], "explor": [327, 344], "success": [327, 335, 344], "nine": 327, "fail": 327, "let": 327, "000": 327, "model": 327, "20000": 327, "answer": 327, "38885": 327, "fallback": [328, 330, 331, 341, 346, 362], "df": [329, 345, 367, 368], "chi": [329, 345], "89920014": 329, "00867716": 329, "13710533": 329, "62318272": 329, "dfnum": [333, 346], "dfden": [333, 346], "ten": 335, "thousand": 335, "individu": 335, "35": 335, "10000": [335, 350, 359, 369], "mu": [336, 340, 347, 370], "ngood": 337, "nbad": 337, "nsampl": 337, "nsamp": 337, "good": 337, "bad": 337, "decai": 338, "sigma": [340, 347], "seri": 341, "pval": 342, "iinfo": 342, "throw": 342, "dice": 342, "check_valid": 343, "multivari": 343, "100000": 344, "nonc": [345, 346], "noncentr": [345, 346], "todo": 345, "ii": 348, "lomax": 348, "randomli": 349, "lam": 350, "randomst": 353, "1923875335537315": 354, "rese": 361, "legaci": 361, "mt19937": 361, "engin": 361, "cauchi": 363, "lorentz": 363, "plot": 363, "1000000": [363, 365, 367, 368], "3x8000": 364, "8000": 364, "student": 367, "kappa": 370, "von": 370, "mise": 370, "dispers": 370, "pack": [374, 443], "fastest": [374, 380], "back": [374, 380, 385], "slowest": [374, 380], "subtyp": 374, "rsqrt": [376, 397], "33": 376, "3003003": 376, "16227766": 377, "fit": 379, "rep": [379, 410], "newshap": 380, "account": 380, "underli": 380, "never": 380, "reus": 380, "unspecifi": 380, "arrays_and_dtyp": 381, "introduc": 384, "restor": 384, "rel": [384, 385], "until": [384, 385], "li": [384, 385], "reposit": 385, "37": 386, "x_i": 388, "35355338": 388, "19245009": 388, "side": 389, "sorter": 389, "condlist": 390, "choicelist": 390, "742278e": 394, "3012989": 395, "548739": 395, "traceback": 399, "recent": 399, "118033988749895": 401, "composit": [403, 413], "trapezoid": [403, 413], "bound": 405, "fanci": 405, "trivial": 406, "ai_min": 406, "ai_max": 406, "22460635e": 407, "63317787e": 407, "996272": 408, "917152": 408, "integer_lik": 409, "Or": 409, "common": 409, "otim": 409, "cdot": 409, "nth": 409, "0th": 409, "1th": 409, "forth": 409, "4400": 409, "4730": 409, "4532": 409, "4874": 409, "4664": 409, "5018": 409, "4796": 409, "5162": 409, "4928": 409, "5306": 409, "slower": 409, "replic": 410, "thu": 410, "dx": 413, "complement": 424, "phase": 424, "49778714": 424, "28318531": 424, "vandermond": 425, "8j": 427, "70": [427, 429], "higher": 427, "chosen": 429, "algebra": [432, 443], "mathemat": [432, 443], "statist": [432, 443], "summari": 432, "level": [432, 439], "util": 432, "counterpart": 439, "constructor": 439, "syntax": 439, "reflect": 439, "intrins": 439, "sometim": 439, "reset": 439, "meaningfulli": 439, "mani": 439, "fashion": 439, "typic": 439, "briefli": 439, "explain": 439, "docstr": 439, "proce": 439, "pow": 439, "short": 439, "unari": 439, "custom": 439, "cover": 443, "elementwis": [443, 447], "helper": 443, "ration": 443, "extrema": 443, "dparrai": 444, "variou": 447}, "objects": {"": [[3, 0, 0, "-", "dpnp"]], "dpnp": [[11, 1, 1, "", "abs"], [12, 1, 1, "", "absolute"], [13, 1, 1, "", "add"], [14, 1, 1, "", "all"], [15, 1, 1, "", "allclose"], [16, 1, 1, "", "amax"], [17, 1, 1, "", "amin"], [18, 1, 1, "", "angle"], [19, 1, 1, "", "any"], [20, 1, 1, "", "arange"], [21, 1, 1, "", "arccos"], [22, 1, 1, "", "arccosh"], [23, 1, 1, "", "arcsin"], [24, 1, 1, "", "arcsinh"], [25, 1, 1, "", "arctan"], [26, 1, 1, "", "arctan2"], [27, 1, 1, "", "arctanh"], [28, 1, 1, "", "argmax"], [29, 1, 1, "", "argmin"], [30, 1, 1, "", "argsort"], [31, 1, 1, "", "around"], [32, 1, 1, "", "array"], [33, 1, 1, "", "array_equal"], [34, 1, 1, "", "asanyarray"], [35, 1, 1, "", "asarray"], [36, 1, 1, "", "ascontiguousarray"], [37, 1, 1, "", "asfarray"], [38, 1, 1, "", "asfortranarray"], [39, 1, 1, "", "asnumpy"], [40, 1, 1, "", "atleast_1d"], [41, 1, 1, "", "atleast_2d"], [42, 1, 1, "", "atleast_3d"], [43, 1, 1, "", "average"], [44, 1, 1, "", "bincount"], [45, 1, 1, "", "bitwise_and"], [46, 1, 1, "", "bitwise_not"], [47, 1, 1, "", "bitwise_or"], [48, 1, 1, "", "bitwise_xor"], [49, 1, 1, "", "broadcast_arrays"], [50, 1, 1, "", "broadcast_to"], [51, 1, 1, "", "can_cast"], [52, 1, 1, "", "cbrt"], [53, 1, 1, "", "ceil"], [54, 1, 1, "", "choose"], [55, 1, 1, "", "clip"], [56, 1, 1, "", "column_stack"], [57, 1, 1, "", "concatenate"], [58, 1, 1, "", "conj"], [59, 1, 1, "", "conjugate"], [60, 1, 1, "", "convolve"], [61, 1, 1, "", "copy"], [62, 1, 1, "", "copysign"], [63, 1, 1, "", "copyto"], [64, 1, 1, "", "correlate"], [65, 1, 1, "", "cos"], [66, 1, 1, "", "cosh"], [67, 1, 1, "", "count_nonzero"], [68, 1, 1, "", "cov"], [69, 1, 1, "", "cross"], [70, 1, 1, "", "cumprod"], [71, 1, 1, "", "cumsum"], [72, 1, 1, "", "deg2rad"], [73, 1, 1, "", "degrees"], [74, 1, 1, "", "diag"], [75, 1, 1, "", "diag_indices"], [76, 1, 1, "", "diag_indices_from"], [77, 1, 1, "", "diagflat"], [78, 1, 1, "", "diagonal"], [79, 1, 1, "", "diff"], [80, 1, 1, "", "divide"], [81, 1, 1, "", "dot"], [83, 1, 1, "", "dstack"], [84, 2, 1, "", "dtype"], [85, 1, 1, "", "ediff1d"], [86, 1, 1, "", "einsum"], [87, 1, 1, "", "einsum_path"], [88, 1, 1, "", "empty"], [89, 1, 1, "", "empty_like"], [90, 1, 1, "", "equal"], [91, 1, 1, "", "erf"], [92, 1, 1, "", "exp"], [93, 1, 1, "", "exp2"], [94, 1, 1, "", "expand_dims"], [95, 1, 1, "", "expm1"], [96, 1, 1, "", "extract"], [97, 1, 1, "", "eye"], [98, 1, 1, "", "fabs"], [10, 0, 0, "-", "fft"], [117, 1, 1, "", "fill_diagonal"], [118, 1, 1, "", "finfo"], [119, 2, 1, "", "flatiter"], [120, 1, 1, "", "flip"], [121, 1, 1, "", "fliplr"], [122, 1, 1, "", "flipud"], [123, 1, 1, "", "floor"], [124, 1, 1, "", "floor_divide"], [125, 1, 1, "", "fmax"], [126, 1, 1, "", "fmin"], [127, 1, 1, "", "fmod"], [128, 1, 1, "", "from_dlpack"], [129, 1, 1, "", "frombuffer"], [130, 1, 1, "", "fromfile"], [131, 1, 1, "", "fromfunction"], [132, 1, 1, "", "fromiter"], [133, 1, 1, "", "fromstring"], [134, 1, 1, "", "full"], [135, 1, 1, "", "full_like"], [136, 1, 1, "", "geomspace"], [137, 1, 1, "", "get_include"], [138, 1, 1, "", "gradient"], [139, 1, 1, "", "greater"], [140, 1, 1, "", "greater_equal"], [141, 1, 1, "", "histogram"], [142, 1, 1, "", "hstack"], [143, 1, 1, "", "hypot"], [144, 1, 1, "", "identity"], [145, 1, 1, "", "iinfo"], [146, 1, 1, "", "imag"], [147, 1, 1, "", "indices"], [148, 1, 1, "", "inner"], [149, 1, 1, "", "invert"], [150, 1, 1, "", "isclose"], [151, 1, 1, "", "isfinite"], [152, 1, 1, "", "isinf"], [153, 1, 1, "", "isnan"], [154, 1, 1, "", "isscalar"], [155, 1, 1, "", "issubdtype"], [156, 1, 1, "", "issubsctype"], [157, 1, 1, "", "kron"], [158, 1, 1, "", "left_shift"], [159, 1, 1, "", "less"], [160, 1, 1, "", "less_equal"], [177, 1, 1, "", "linspace"], [178, 1, 1, "", "loadtxt"], [179, 1, 1, "", "log"], [180, 1, 1, "", "log10"], [181, 1, 1, "", "log1p"], [182, 1, 1, "", "log2"], [183, 1, 1, "", "logaddexp"], [184, 1, 1, "", "logical_and"], [185, 1, 1, "", "logical_not"], [186, 1, 1, "", "logical_or"], [187, 1, 1, "", "logical_xor"], [188, 1, 1, "", "logspace"], [189, 1, 1, "", "logsumexp"], [190, 1, 1, "", "matmul"], [191, 1, 1, "", "max"], [192, 1, 1, "", "maximum"], [193, 1, 1, "", "mean"], [194, 1, 1, "", "median"], [195, 1, 1, "", "meshgrid"], [196, 5, 1, "", "mgrid"], [197, 1, 1, "", "min"], [198, 1, 1, "", "minimum"], [199, 1, 1, "", "mod"], [200, 1, 1, "", "modf"], [201, 1, 1, "", "moveaxis"], [202, 1, 1, "", "multiply"], [203, 1, 1, "", "nanargmax"], [204, 1, 1, "", "nanargmin"], [205, 1, 1, "", "nancumprod"], [206, 1, 1, "", "nancumsum"], [207, 1, 1, "", "nanmax"], [208, 1, 1, "", "nanmean"], [209, 1, 1, "", "nanmin"], [210, 1, 1, "", "nanprod"], [211, 1, 1, "", "nanstd"], [212, 1, 1, "", "nansum"], [213, 1, 1, "", "nanvar"], [214, 3, 1, "", "ndarray"], [306, 1, 1, "", "negative"], [307, 1, 1, "", "nonzero"], [308, 1, 1, "", "not_equal"], [309, 5, 1, "", "ogrid"], [310, 1, 1, "", "ones"], [311, 1, 1, "", "ones_like"], [312, 1, 1, "", "outer"], [313, 1, 1, "", "partition"], [314, 1, 1, "", "place"], [315, 1, 1, "", "positive"], [316, 1, 1, "", "power"], [317, 1, 1, "", "prod"], [318, 1, 1, "", "proj"], [319, 1, 1, "", "ptp"], [320, 1, 1, "", "put"], [321, 1, 1, "", "put_along_axis"], [322, 1, 1, "", "putmask"], [323, 1, 1, "", "rad2deg"], [324, 1, 1, "", "radians"], [442, 0, 0, "-", "random"], [374, 1, 1, "", "ravel"], [375, 1, 1, "", "real"], [376, 1, 1, "", "reciprocal"], [377, 1, 1, "", "reduce_hypot"], [378, 1, 1, "", "remainder"], [379, 1, 1, "", "repeat"], [380, 1, 1, "", "reshape"], [381, 1, 1, "", "result_type"], [382, 1, 1, "", "right_shift"], [383, 1, 1, "", "rint"], [384, 1, 1, "", "roll"], [385, 1, 1, "", "rollaxis"], [386, 1, 1, "", "round"], [387, 1, 1, "", "row_stack"], [388, 1, 1, "", "rsqrt"], [389, 1, 1, "", "searchsorted"], [390, 1, 1, "", "select"], [391, 1, 1, "", "shape"], [392, 1, 1, "", "sign"], [393, 1, 1, "", "signbit"], [394, 1, 1, "", "sin"], [395, 1, 1, "", "sinh"], [396, 1, 1, "", "sort"], [397, 1, 1, "", "sqrt"], [398, 1, 1, "", "square"], [399, 1, 1, "", "squeeze"], [400, 1, 1, "", "stack"], [401, 1, 1, "", "std"], [402, 1, 1, "", "subtract"], [403, 1, 1, "", "sum"], [404, 1, 1, "", "swapaxes"], [405, 1, 1, "", "take"], [406, 1, 1, "", "take_along_axis"], [407, 1, 1, "", "tan"], [408, 1, 1, "", "tanh"], [409, 1, 1, "", "tensordot"], [410, 1, 1, "", "tile"], [411, 1, 1, "", "trace"], [412, 1, 1, "", "transpose"], [413, 1, 1, "", "trapz"], [414, 1, 1, "", "tri"], [415, 1, 1, "", "tril"], [416, 1, 1, "", "tril_indices"], [417, 1, 1, "", "tril_indices_from"], [418, 1, 1, "", "triu"], [419, 1, 1, "", "triu_indices"], [420, 1, 1, "", "triu_indices_from"], [421, 1, 1, "", "true_divide"], [422, 1, 1, "", "trunc"], [423, 1, 1, "", "unique"], [424, 1, 1, "", "unwrap"], [425, 1, 1, "", "vander"], [426, 1, 1, "", "var"], [427, 1, 1, "", "vdot"], [428, 1, 1, "", "vstack"], [429, 1, 1, "", "where"], [430, 1, 1, "", "zeros"], [431, 1, 1, "", "zeros_like"]], "dpnp.dpnp_array": [[82, 2, 1, "", "dpnp_array"]], "dpnp.dpnp_array.dpnp_array": [[82, 3, 1, "", "T"], [82, 4, 1, "", "__eq__"], [82, 4, 1, "", "__ge__"], [82, 4, 1, "", "__getitem__"], [82, 4, 1, "", "__gt__"], [82, 4, 1, "", "__le__"], [82, 4, 1, "", "__len__"], [82, 4, 1, "", "__lt__"], [82, 4, 1, "", "__ne__"], [82, 4, 1, "", "__setitem__"], [82, 4, 1, "", "all"], [82, 4, 1, "", "any"], [82, 4, 1, "", "argmax"], [82, 4, 1, "", "argmin"], [82, 4, 1, "", "argsort"], [82, 4, 1, "", "asnumpy"], [82, 4, 1, "", "astype"], [82, 4, 1, "", "choose"], [82, 4, 1, "", "clip"], [82, 4, 1, "", "conj"], [82, 4, 1, "", "conjugate"], [82, 4, 1, "", "copy"], [82, 4, 1, "", "cumsum"], [82, 3, 1, "", "device"], [82, 4, 1, "", "diagonal"], [82, 4, 1, "", "dot"], [82, 3, 1, "", "dtype"], [82, 4, 1, "", "fill"], [82, 3, 1, "", "flags"], [82, 3, 1, "", "flat"], [82, 4, 1, "", "flatten"], [82, 4, 1, "", "get_array"], [82, 3, 1, "", "imag"], [82, 4, 1, "", "item"], [82, 3, 1, "", "itemsize"], [82, 4, 1, "", "max"], [82, 4, 1, "", "mean"], [82, 4, 1, "", "min"], [82, 3, 1, "", "nbytes"], [82, 3, 1, "", "ndim"], [82, 4, 1, "", "nonzero"], [82, 4, 1, "", "partition"], [82, 4, 1, "", "prod"], [82, 4, 1, "", "put"], [82, 4, 1, "", "ravel"], [82, 3, 1, "", "real"], [82, 4, 1, "", "repeat"], [82, 4, 1, "", "reshape"], [82, 4, 1, "", "round"], [82, 3, 1, "", "shape"], [82, 3, 1, "", "size"], [82, 4, 1, "", "sort"], [82, 4, 1, "", "squeeze"], [82, 4, 1, "", "std"], [82, 3, 1, "", "strides"], [82, 4, 1, "", "sum"], [82, 4, 1, "", "swapaxes"], [82, 3, 1, "", "sycl_context"], [82, 3, 1, "", "sycl_device"], [82, 3, 1, "", "sycl_queue"], [82, 4, 1, "", "take"], [82, 4, 1, "", "to_device"], [82, 4, 1, "", "transpose"], [82, 3, 1, "", "usm_type"], [82, 4, 1, "", "var"]], "dpnp.dtype": [[84, 4, 1, "", "__eq__"], [84, 4, 1, "", "__ge__"], [84, 4, 1, "", "__getitem__"], [84, 4, 1, "", "__gt__"], [84, 4, 1, "", "__le__"], [84, 4, 1, "", "__len__"], [84, 4, 1, "", "__lt__"], [84, 4, 1, "", "__ne__"], [84, 3, 1, "", "alignment"], [84, 3, 1, "", "base"], [84, 3, 1, "", "byteorder"], [84, 3, 1, "", "char"], [84, 3, 1, "", "descr"], [84, 3, 1, "", "fields"], [84, 3, 1, "", "flags"], [84, 3, 1, "", "hasobject"], [84, 3, 1, "", "isalignedstruct"], [84, 3, 1, "", "isbuiltin"], [84, 3, 1, "", "isnative"], [84, 3, 1, "", "itemsize"], [84, 3, 1, "", "kind"], [84, 3, 1, "", "metadata"], [84, 3, 1, "", "name"], [84, 3, 1, "", "names"], [84, 3, 1, "", "ndim"], [84, 4, 1, "", "newbyteorder"], [84, 3, 1, "", "num"], [84, 3, 1, "", "shape"], [84, 3, 1, "", "str"], [84, 3, 1, "", "subdtype"], [84, 3, 1, "", "type"]], "dpnp.fft": [[99, 1, 1, "", "fft"], [100, 1, 1, "", "fft2"], [101, 1, 1, "", "fftfreq"], [102, 1, 1, "", "fftn"], [103, 1, 1, "", "fftshift"], [104, 1, 1, "", "hfft"], [105, 1, 1, "", "ifft"], [106, 1, 1, "", "ifft2"], [107, 1, 1, "", "ifftn"], [108, 1, 1, "", "ifftshift"], [109, 1, 1, "", "ihfft"], [110, 1, 1, "", "irfft"], [111, 1, 1, "", "irfft2"], [112, 1, 1, "", "irfftn"], [113, 1, 1, "", "rfft"], [114, 1, 1, "", "rfft2"], [115, 1, 1, "", "rfftfreq"], [116, 1, 1, "", "rfftn"]], "dpnp.flatiter": [[119, 4, 1, "", "__eq__"], [119, 4, 1, "", "__ge__"], [119, 4, 1, "", "__getitem__"], [119, 4, 1, "", "__gt__"], [119, 4, 1, "", "__iter__"], [119, 4, 1, "", "__le__"], [119, 4, 1, "", "__lt__"], [119, 4, 1, "", "__ne__"], [119, 4, 1, "", "__next__"], [119, 4, 1, "", "__setitem__"]], "dpnp.linalg": [[161, 1, 1, "", "cholesky"], [162, 1, 1, "", "cond"], [163, 1, 1, "", "det"], [164, 1, 1, "", "eig"], [165, 1, 1, "", "eigh"], [166, 1, 1, "", "eigvals"], [167, 1, 1, "", "inv"], [168, 1, 1, "", "matrix_power"], [169, 1, 1, "", "matrix_rank"], [170, 1, 1, "", "multi_dot"], [171, 1, 1, "", "norm"], [172, 1, 1, "", "pinv"], [173, 1, 1, "", "qr"], [174, 1, 1, "", "slogdet"], [175, 1, 1, "", "solve"], [176, 1, 1, "", "svd"]], "dpnp.ndarray": [[215, 6, 1, "", "T"], [216, 4, 1, "", "__abs__"], [217, 4, 1, "", "__add__"], [218, 4, 1, "", "__and__"], [219, 4, 1, "", "__complex__"], [220, 4, 1, "", "__copy__"], [221, 4, 1, "", "__eq__"], [222, 4, 1, "", "__float__"], [223, 4, 1, "", "__floordiv__"], [224, 4, 1, "", "__ge__"], [225, 4, 1, "", "__getitem__"], [226, 4, 1, "", "__gt__"], [227, 4, 1, "", "__iadd__"], [228, 4, 1, "", "__iand__"], [229, 4, 1, "", "__ifloordiv__"], [230, 4, 1, "", "__ilshift__"], [231, 4, 1, "", "__imod__"], [232, 4, 1, "", "__imul__"], [233, 4, 1, "", "__int__"], [234, 4, 1, "", "__invert__"], [235, 4, 1, "", "__ior__"], [236, 4, 1, "", "__ipow__"], [237, 4, 1, "", "__irshift__"], [238, 4, 1, "", "__isub__"], [239, 4, 1, "", "__itruediv__"], [240, 4, 1, "", "__ixor__"], [241, 4, 1, "", "__le__"], [242, 4, 1, "", "__len__"], [243, 4, 1, "", "__lshift__"], [244, 4, 1, "", "__lt__"], [245, 4, 1, "", "__mod__"], [246, 4, 1, "", "__mul__"], [247, 4, 1, "", "__ne__"], [248, 4, 1, "", "__neg__"], [249, 4, 1, "", "__new__"], [250, 4, 1, "", "__or__"], [251, 4, 1, "", "__pos__"], [252, 4, 1, "", "__pow__"], [253, 4, 1, "", "__repr__"], [254, 4, 1, "", "__rshift__"], [255, 4, 1, "", "__setitem__"], [256, 4, 1, "", "__str__"], [257, 4, 1, "", "__sub__"], [258, 4, 1, "", "__truediv__"], [259, 4, 1, "", "__xor__"], [260, 4, 1, "", "all"], [261, 4, 1, "", "any"], [262, 4, 1, "", "argmax"], [263, 4, 1, "", "argmin"], [264, 4, 1, "", "argsort"], [265, 4, 1, "", "astype"], [266, 4, 1, "", "choose"], [267, 4, 1, "", "clip"], [268, 4, 1, "", "conj"], [269, 4, 1, "", "conjugate"], [270, 4, 1, "", "copy"], [271, 4, 1, "", "cumsum"], [272, 4, 1, "", "diagonal"], [273, 6, 1, "", "dtype"], [274, 4, 1, "", "fill"], [275, 6, 1, "", "flags"], [276, 6, 1, "", "flat"], [277, 4, 1, "", "flatten"], [278, 6, 1, "", "imag"], [279, 4, 1, "", "item"], [280, 6, 1, "", "itemsize"], [281, 4, 1, "", "max"], [282, 4, 1, "", "mean"], [283, 4, 1, "", "min"], [284, 6, 1, "", "nbytes"], [285, 6, 1, "", "ndim"], [286, 4, 1, "", "nonzero"], [287, 4, 1, "", "partition"], [288, 4, 1, "", "prod"], [289, 4, 1, "", "put"], [290, 4, 1, "", "ravel"], [291, 6, 1, "", "real"], [292, 4, 1, "", "repeat"], [293, 4, 1, "", "reshape"], [294, 4, 1, "", "round"], [295, 6, 1, "", "shape"], [296, 6, 1, "", "size"], [297, 4, 1, "", "sort"], [298, 4, 1, "", "squeeze"], [299, 4, 1, "", "std"], [300, 6, 1, "", "strides"], [301, 4, 1, "", "sum"], [302, 4, 1, "", "swapaxes"], [303, 4, 1, "", "take"], [304, 4, 1, "", "transpose"], [305, 4, 1, "", "var"]], "dpnp.random": [[325, 2, 1, "", "RandomState"], [326, 1, 1, "", "beta"], [327, 1, 1, "", "binomial"], [328, 1, 1, "", "bytes"], [329, 1, 1, "", "chisquare"], [330, 1, 1, "", "choice"], [331, 1, 1, "", "dirichlet"], [332, 1, 1, "", "exponential"], [333, 1, 1, "", "f"], [334, 1, 1, "", "gamma"], [335, 1, 1, "", "geometric"], [336, 1, 1, "", "gumbel"], [337, 1, 1, "", "hypergeometric"], [338, 1, 1, "", "laplace"], [339, 1, 1, "", "logistic"], [340, 1, 1, "", "lognormal"], [341, 1, 1, "", "logseries"], [342, 1, 1, "", "multinomial"], [343, 1, 1, "", "multivariate_normal"], [344, 1, 1, "", "negative_binomial"], [345, 1, 1, "", "noncentral_chisquare"], [346, 1, 1, "", "noncentral_f"], [347, 1, 1, "", "normal"], [348, 1, 1, "", "pareto"], [349, 1, 1, "", "permutation"], [350, 1, 1, "", "poisson"], [351, 1, 1, "", "power"], [352, 1, 1, "", "rand"], [353, 1, 1, "", "randint"], [354, 1, 1, "", "randn"], [355, 1, 1, "", "random"], [356, 1, 1, "", "random_integers"], [357, 1, 1, "", "random_sample"], [358, 1, 1, "", "ranf"], [359, 1, 1, "", "rayleigh"], [360, 1, 1, "", "sample"], [361, 1, 1, "", "seed"], [362, 1, 1, "", "shuffle"], [363, 1, 1, "", "standard_cauchy"], [364, 1, 1, "", "standard_exponential"], [365, 1, 1, "", "standard_gamma"], [366, 1, 1, "", "standard_normal"], [367, 1, 1, "", "standard_t"], [368, 1, 1, "", "triangular"], [369, 1, 1, "", "uniform"], [370, 1, 1, "", "vonmises"], [371, 1, 1, "", "wald"], [372, 1, 1, "", "weibull"], [373, 1, 1, "", "zipf"]], "dpnp.random.RandomState": [[325, 4, 1, "", "__eq__"], [325, 4, 1, "", "__ge__"], [325, 4, 1, "", "__gt__"], [325, 4, 1, "", "__le__"], [325, 4, 1, "", "__lt__"], [325, 4, 1, "", "__ne__"], [325, 4, 1, "", "get_state"], [325, 4, 1, "", "get_sycl_device"], [325, 4, 1, "", "get_sycl_queue"], [325, 4, 1, "", "normal"], [325, 4, 1, "", "rand"], [325, 4, 1, "", "randint"], [325, 4, 1, "", "randn"], [325, 4, 1, "", "random_sample"], [325, 4, 1, "", "standard_normal"], [325, 4, 1, "", "uniform"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:attribute", "4": "py:method", "5": "py:data", "6": "py:property"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "method", "Python method"], "5": ["py", "data", "Python data"], "6": ["py", "property", "Python property"]}, "titleterms": {"interplai": 0, "data": [0, 2, 7, 8, 9, 433, 439, 442], "parallel": [0, 2], "control": 0, "librari": 0, "exampl": [0, 4], "c": 1, "backend": 1, "api": [1, 432], "refer": [1, 432], "extens": 2, "numpi": [2, 6], "develop": 2, "inform": [2, 8], "overview": 3, "quick": 4, "start": 4, "guid": 4, "devic": 4, "driver": 4, "python": 4, "interpret": 4, "instal": 4, "packag": [4, 441], "from": [4, 7], "anaconda": 4, "build": 4, "conda": 4, "scikit": 4, "test": [4, 8, 435], "binari": 5, "oper": [5, 433, 435, 436, 437, 439, 447], "elementwis": 5, "bit": [5, 447], "pack": 5, "output": 5, "format": 5, "comparison": [6, 435, 439, 447], "tabl": 6, "dpnp": [6, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 442], "cupi": 6, "summari": 6, "modul": [6, 441], "level": 6, "multi": [6, 439], "dimension": [6, 439], "arrai": [6, 7, 9, 32, 433, 435, 436, 439], "linear": [6, 434], "algebra": [6, 434], "discret": 6, "fourier": 6, "transform": 6, "random": [6, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 442], "sampl": [6, 360, 442], "creation": 7, "routin": [7, 8, 10, 433, 436, 437, 438, 443], "basic": [7, 436, 441], "other": [7, 434, 437, 439], "numer": 7, "rang": 7, "matrix": [7, 434, 439], "The": 7, "class": 7, "type": [8, 9, 435, 439], "creat": 8, "miscellan": [8, 437, 438], "avail": [9, 447], "fft": [10, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116], "function": [10, 435, 437, 445, 446, 447], "standard": 10, "real": [10, 291, 375], "hermitian": 10, "helper": 10, "ab": 11, "absolut": 12, "add": 13, "all": [14, 260], "allclos": 15, "amax": 16, "amin": 17, "angl": 18, "ani": [19, 261], "arang": 20, "arcco": 21, "arccosh": 22, "arcsin": 23, "arcsinh": 24, "arctan": 25, "arctan2": 26, "arctanh": 27, "argmax": [28, 262], "argmin": [29, 263], "argsort": [30, 264], "around": 31, "array_equ": 33, "asanyarrai": 34, "asarrai": 35, "ascontiguousarrai": 36, "asfarrai": 37, "asfortranarrai": 38, "asnumpi": 39, "atleast_1d": 40, "atleast_2d": 41, "atleast_3d": 42, "averag": [43, 446], "bincount": 44, "bitwise_and": 45, "bitwise_not": 46, "bitwise_or": 47, "bitwise_xor": 48, "broadcast_arrai": 49, "broadcast_to": 50, "can_cast": 51, "cbrt": 52, "ceil": 53, "choos": [54, 266], "clip": [55, 267], "column_stack": 56, "concaten": 57, "conj": [58, 268], "conjug": [59, 269], "convolv": 60, "copi": [61, 270], "copysign": 62, "copyto": 63, "correl": [64, 446], "co": 65, "cosh": 66, "count_nonzero": 67, "cov": 68, "cross": 69, "cumprod": 70, "cumsum": [71, 271], "deg2rad": 72, "degre": 73, "diag": 74, "diag_indic": 75, "diag_indices_from": 76, "diagflat": 77, "diagon": [78, 272], "diff": 79, "divid": 80, "dot": 81, "dpnp_arrai": 82, "dstack": 83, "dtype": [84, 273], "ediff1d": 85, "einsum": 86, "einsum_path": 87, "empti": 88, "empty_lik": 89, "equal": 90, "erf": 91, "exp": 92, "exp2": 93, "expand_dim": 94, "expm1": 95, "extract": 96, "ey": 97, "fab": 98, "fft2": 100, "fftfreq": 101, "fftn": 102, "fftshift": 103, "hfft": 104, "ifft": 105, "ifft2": 106, "ifftn": 107, "ifftshift": 108, "ihfft": 109, "irfft": 110, "irfft2": 111, "irfftn": 112, "rfft": 113, "rfft2": 114, "rfftfreq": 115, "rfftn": 116, "fill_diagon": 117, "finfo": 118, "flatit": 119, "flip": 120, "fliplr": 121, "flipud": 122, "floor": 123, "floor_divid": 124, "fmax": 125, "fmin": 126, "fmod": 127, "from_dlpack": 128, "frombuff": 129, "fromfil": 130, "fromfunct": 131, "fromit": 132, "fromstr": 133, "full": 134, "full_lik": 135, "geomspac": 136, "get_includ": 137, "gradient": 138, "greater": 139, "greater_equ": 140, "histogram": [141, 446], "hstack": 142, "hypot": 143, "ident": 144, "iinfo": 145, "imag": [146, 278], "indic": 147, "inner": 148, "invert": 149, "isclos": 150, "isfinit": 151, "isinf": 152, "isnan": 153, "isscalar": 154, "issubdtyp": 155, "issubsctyp": 156, "kron": 157, "left_shift": 158, "less": 159, "less_equ": 160, "linalg": [161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176], "choleski": 161, "cond": 162, "det": 163, "eig": 164, "eigh": 165, "eigval": 166, "inv": 167, "matrix_pow": 168, "matrix_rank": 169, "multi_dot": 170, "norm": [171, 434], "pinv": 172, "qr": 173, "slogdet": 174, "solv": [175, 434], "svd": 176, "linspac": 177, "loadtxt": 178, "log": 179, "log10": 180, "log1p": 181, "log2": 182, "logaddexp": 183, "logical_and": 184, "logical_not": 185, "logical_or": 186, "logical_xor": 187, "logspac": 188, "logsumexp": 189, "matmul": 190, "max": [191, 281], "maximum": 192, "mean": [193, 282], "median": 194, "meshgrid": 195, "mgrid": 196, "min": [197, 283], "minimum": 198, "mod": 199, "modf": 200, "moveaxi": 201, "multipli": 202, "nanargmax": 203, "nanargmin": 204, "nancumprod": 205, "nancumsum": 206, "nanmax": 207, "nanmean": 208, "nanmin": 209, "nanprod": 210, "nanstd": 211, "nansum": 212, "nanvar": 213, "ndarrai": [214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 439], "t": 215, "__abs__": 216, "__add__": 217, "__and__": 218, "__complex__": 219, "__copy__": 220, "__eq__": 221, "__float__": 222, "__floordiv__": 223, "__ge__": 224, "__getitem__": 225, "__gt__": 226, "__iadd__": 227, "__iand__": 228, "__ifloordiv__": 229, "__ilshift__": 230, "__imod__": 231, "__imul__": 232, "__int__": 233, "__invert__": 234, "__ior__": 235, "__ipow__": 236, "__irshift__": 237, "__isub__": 238, "__itruediv__": 239, "__ixor__": 240, "__le__": 241, "__len__": 242, "__lshift__": 243, "__lt__": 244, "__mod__": 245, "__mul__": 246, "__ne__": 247, "__neg__": 248, "__new__": 249, "__or__": 250, "__pos__": 251, "__pow__": 252, "__repr__": 253, "__rshift__": 254, "__setitem__": 255, "__str__": 256, "__sub__": 257, "__truediv__": 258, "__xor__": 259, "astyp": 265, "fill": 274, "flag": 275, "flat": 276, "flatten": 277, "item": [279, 439], "items": 280, "nbyte": 284, "ndim": 285, "nonzero": [286, 307], "partit": [287, 313], "prod": [288, 317], "put": [289, 320], "ravel": [290, 374], "repeat": [292, 379], "reshap": [293, 380], "round": [294, 386, 437], "shape": [295, 391, 436, 439], "size": 296, "sort": [297, 396, 444], "squeez": [298, 399], "std": [299, 401], "stride": 300, "sum": [301, 403, 437], "swapax": [302, 404], "take": [303, 405], "transpos": [304, 412, 436], "var": [305, 426], "neg": 306, "not_equ": 308, "ogrid": 309, "ones": 310, "ones_lik": 311, "outer": 312, "place": 314, "posit": 315, "power": [316, 351], "proj": 318, "ptp": 319, "put_along_axi": 321, "putmask": 322, "rad2deg": 323, "radian": 324, "randomst": 325, "beta": 326, "binomi": 327, "byte": 328, "chisquar": 329, "choic": 330, "dirichlet": 331, "exponenti": 332, "f": 333, "gamma": 334, "geometr": 335, "gumbel": 336, "hypergeometr": 337, "laplac": 338, "logist": 339, "lognorm": 340, "logseri": 341, "multinomi": 342, "multivariate_norm": 343, "negative_binomi": 344, "noncentral_chisquar": 345, "noncentral_f": 346, "normal": 347, "pareto": 348, "permut": [349, 442], "poisson": 350, "rand": 352, "randint": 353, "randn": 354, "random_integ": 356, "random_sampl": 357, "ranf": 358, "rayleigh": 359, "seed": 361, "shuffl": 362, "standard_cauchi": 363, "standard_exponenti": 364, "standard_gamma": 365, "standard_norm": 366, "standard_t": 367, "triangular": 368, "uniform": 369, "vonmis": 370, "wald": 371, "weibul": 372, "zipf": 373, "reciproc": 376, "reduce_hypot": 377, "remaind": 378, "result_typ": 381, "right_shift": 382, "rint": 383, "roll": 384, "rollaxi": 385, "row_stack": 387, "rsqrt": 388, "searchsort": 389, "select": [390, 439], "sign": 392, "signbit": 393, "sin": 394, "sinh": 395, "sqrt": 397, "squar": 398, "stack": 400, "subtract": 402, "take_along_axi": 406, "tan": 407, "tanh": 408, "tensordot": 409, "tile": [410, 436], "trace": 411, "trapz": 413, "tri": 414, "tril": 415, "tril_indic": 416, "tril_indices_from": 417, "triu": 418, "triu_indic": 419, "triu_indices_from": 420, "true_divid": 421, "trunc": 422, "uniqu": 423, "unwrap": 424, "vander": 425, "vdot": 427, "vstack": 428, "where": 429, "zero": 430, "zeros_lik": 431, "index": [433, 439], "gener": [433, 442], "like": [433, 436], "insert": 433, "iter": 433, "over": 433, "vector": 434, "product": [434, 437], "decomposit": 434, "eigenvalu": 434, "number": [434, 436, 437], "equat": 434, "logic": 435, "truth": 435, "valu": 435, "infin": 435, "nan": 435, "manipul": [436, 439], "chang": 436, "dimens": 436, "kind": 436, "join": 436, "split": 436, "ad": 436, "remov": 436, "element": 436, "rearrang": 436, "mathemat": 437, "trigonometr": [437, 447], "hyperbol": 437, "differ": 437, "expon": 437, "logarithm": 437, "special": [437, 439, 445], "float": [437, 447], "point": 437, "ration": 437, "arithmet": [437, 439, 441], "handl": 437, "complex": 437, "extrema": 437, "find": 437, "util": 438, "construct": 439, "attribut": 439, "memori": 439, "layout": 439, "method": 439, "convers": 439, "calcul": 439, "multipl": 439, "pad": 440, "polynomi": 441, "polyutil": 441, "poly1d": 441, "simpl": 442, "distribut": 442, "search": 444, "count": 444, "error": 445, "statist": 446, "order": 446, "varianc": 446, "univers": 447, "ufunc": 447, "math": 447, "twiddl": 447}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1, "sphinx.ext.intersphinx": 1, "sphinx": 60}, "alltitles": {"Interplay with the Data Parallel Control Library": [[0, "interplay-with-the-data-parallel-control-library"]], "Example": [[0, "example"]], "C++ backend API Reference": [[1, "c-backend-api-reference"]], "Data Parallel Extension for NumPy*": [[2, "module-dpnp"]], "Development information": [[2, null]], "Overview": [[3, "id1"]], "Quick Start Guide": [[4, "id1"]], "Device Drivers": [[4, "device-drivers"]], "Python Interpreter": [[4, "python-interpreter"]], "Installation": [[4, "installation"]], "Install Package from Anaconda": [[4, "install-package-from-anaconda"]], "Build and Install Conda Package": [[4, "build-and-install-conda-package"]], "Build and Install with scikit-build": [[4, "build-and-install-with-scikit-build"]], "Testing": [[4, "testing"]], "Examples": [[4, "examples"]], "Binary Operations": [[5, "binary-operations"]], "Elementwise bit operations": [[5, "elementwise-bit-operations"]], "Bit packing": [[5, "bit-packing"]], "Output formatting": [[5, "output-formatting"]], "Comparison Table NumPy/ DPNP/ CuPy": [[6, "comparison-table-numpy-dpnp-cupy"]], "Summary": [[6, "summary"]], "Module-Level": [[6, "module-level"]], "Multi-Dimensional Array": [[6, "multi-dimensional-array"]], "Linear Algebra": [[6, "linear-algebra"], [434, "linear-algebra"]], "Discrete Fourier Transform": [[6, "discrete-fourier-transform"]], "Random Sampling": [[6, "random-sampling"]], "Array Creation Routines": [[7, "array-creation-routines"]], "Basic creation routines": [[7, "basic-creation-routines"]], "Creation from other data": [[7, "creation-from-other-data"]], "Numerical ranges": [[7, "numerical-ranges"]], "Matrix creation": [[7, "matrix-creation"]], "The Matrix class": [[7, "the-matrix-class"]], "Data type routines": [[8, "data-type-routines"]], "Creating data types": [[8, "creating-data-types"]], "Data type information": [[8, "data-type-information"]], "Data type testing": [[8, "data-type-testing"]], "Miscellaneous": [[8, "miscellaneous"], [437, "miscellaneous"]], "Available array data types": [[9, "available-array-data-types"]], "FFT Functions": [[10, "fft-functions"]], "Standard FFTs": [[10, "standard-ffts"]], "Real FFTs": [[10, "real-ffts"]], "Hermitian FFTs": [[10, "hermitian-ffts"]], "Helper routines": [[10, "helper-routines"]], "dpnp.abs": [[11, "dpnp-abs"]], "dpnp.absolute": [[12, "dpnp-absolute"]], "dpnp.add": [[13, "dpnp-add"]], "dpnp.all": [[14, "dpnp-all"]], "dpnp.allclose": [[15, "dpnp-allclose"]], "dpnp.amax": [[16, "dpnp-amax"]], "dpnp.amin": [[17, "dpnp-amin"]], "dpnp.angle": [[18, "dpnp-angle"]], "dpnp.any": [[19, "dpnp-any"]], "dpnp.arange": [[20, "dpnp-arange"]], "dpnp.arccos": [[21, "dpnp-arccos"]], "dpnp.arccosh": [[22, "dpnp-arccosh"]], "dpnp.arcsin": [[23, "dpnp-arcsin"]], "dpnp.arcsinh": [[24, "dpnp-arcsinh"]], "dpnp.arctan": [[25, "dpnp-arctan"]], "dpnp.arctan2": [[26, "dpnp-arctan2"]], "dpnp.arctanh": [[27, "dpnp-arctanh"]], "dpnp.argmax": [[28, "dpnp-argmax"]], "dpnp.argmin": [[29, "dpnp-argmin"]], "dpnp.argsort": [[30, "dpnp-argsort"]], "dpnp.around": [[31, "dpnp-around"]], "dpnp.array": [[32, "dpnp-array"]], "dpnp.array_equal": [[33, "dpnp-array-equal"]], "dpnp.asanyarray": [[34, "dpnp-asanyarray"]], "dpnp.asarray": [[35, "dpnp-asarray"]], "dpnp.ascontiguousarray": [[36, "dpnp-ascontiguousarray"]], "dpnp.asfarray": [[37, "dpnp-asfarray"]], "dpnp.asfortranarray": [[38, "dpnp-asfortranarray"]], "dpnp.asnumpy": [[39, "dpnp-asnumpy"]], "dpnp.atleast_1d": [[40, "dpnp-atleast-1d"]], "dpnp.atleast_2d": [[41, "dpnp-atleast-2d"]], "dpnp.atleast_3d": [[42, "dpnp-atleast-3d"]], "dpnp.average": [[43, "dpnp-average"]], "dpnp.bincount": [[44, "dpnp-bincount"]], "dpnp.bitwise_and": [[45, "dpnp-bitwise-and"]], "dpnp.bitwise_not": [[46, "dpnp-bitwise-not"]], "dpnp.bitwise_or": [[47, "dpnp-bitwise-or"]], "dpnp.bitwise_xor": [[48, "dpnp-bitwise-xor"]], "dpnp.broadcast_arrays": [[49, "dpnp-broadcast-arrays"]], "dpnp.broadcast_to": [[50, "dpnp-broadcast-to"]], "dpnp.can_cast": [[51, "dpnp-can-cast"]], "dpnp.cbrt": [[52, "dpnp-cbrt"]], "dpnp.ceil": [[53, "dpnp-ceil"]], "dpnp.choose": [[54, "dpnp-choose"]], "dpnp.clip": [[55, "dpnp-clip"]], "dpnp.column_stack": [[56, "dpnp-column-stack"]], "dpnp.concatenate": [[57, "dpnp-concatenate"]], "dpnp.conj": [[58, "dpnp-conj"]], "dpnp.conjugate": [[59, "dpnp-conjugate"]], "dpnp.convolve": [[60, "dpnp-convolve"]], "dpnp.copy": [[61, "dpnp-copy"]], "dpnp.copysign": [[62, "dpnp-copysign"]], "dpnp.copyto": [[63, "dpnp-copyto"]], "dpnp.correlate": [[64, "dpnp-correlate"]], "dpnp.cos": [[65, "dpnp-cos"]], "dpnp.cosh": [[66, "dpnp-cosh"]], "dpnp.count_nonzero": [[67, "dpnp-count-nonzero"]], "dpnp.cov": [[68, "dpnp-cov"]], "dpnp.cross": [[69, "dpnp-cross"]], "dpnp.cumprod": [[70, "dpnp-cumprod"]], "dpnp.cumsum": [[71, "dpnp-cumsum"]], "dpnp.deg2rad": [[72, "dpnp-deg2rad"]], "dpnp.degrees": [[73, "dpnp-degrees"]], "dpnp.diag": [[74, "dpnp-diag"]], "dpnp.diag_indices": [[75, "dpnp-diag-indices"]], "dpnp.diag_indices_from": [[76, "dpnp-diag-indices-from"]], "dpnp.diagflat": [[77, "dpnp-diagflat"]], "dpnp.diagonal": [[78, "dpnp-diagonal"]], "dpnp.diff": [[79, "dpnp-diff"]], "dpnp.divide": [[80, "dpnp-divide"]], "dpnp.dot": [[81, "dpnp-dot"]], "dpnp.dpnp_array.dpnp_array": [[82, "dpnp-dpnp-array-dpnp-array"]], "dpnp.dstack": [[83, "dpnp-dstack"]], "dpnp.dtype": [[84, "dpnp-dtype"]], "dpnp.ediff1d": [[85, "dpnp-ediff1d"]], "dpnp.einsum": [[86, "dpnp-einsum"]], "dpnp.einsum_path": [[87, "dpnp-einsum-path"]], "dpnp.empty": [[88, "dpnp-empty"]], "dpnp.empty_like": [[89, "dpnp-empty-like"]], "dpnp.equal": [[90, "dpnp-equal"]], "dpnp.erf": [[91, "dpnp-erf"]], "dpnp.exp": [[92, "dpnp-exp"]], "dpnp.exp2": [[93, "dpnp-exp2"]], "dpnp.expand_dims": [[94, "dpnp-expand-dims"]], "dpnp.expm1": [[95, "dpnp-expm1"]], "dpnp.extract": [[96, "dpnp-extract"]], "dpnp.eye": [[97, "dpnp-eye"]], "dpnp.fabs": [[98, "dpnp-fabs"]], "dpnp.fft.fft": [[99, "dpnp-fft-fft"]], "dpnp.fft.fft2": [[100, "dpnp-fft-fft2"]], "dpnp.fft.fftfreq": [[101, "dpnp-fft-fftfreq"]], "dpnp.fft.fftn": [[102, "dpnp-fft-fftn"]], "dpnp.fft.fftshift": [[103, "dpnp-fft-fftshift"]], "dpnp.fft.hfft": [[104, "dpnp-fft-hfft"]], "dpnp.fft.ifft": [[105, "dpnp-fft-ifft"]], "dpnp.fft.ifft2": [[106, "dpnp-fft-ifft2"]], "dpnp.fft.ifftn": [[107, "dpnp-fft-ifftn"]], "dpnp.fft.ifftshift": [[108, "dpnp-fft-ifftshift"]], "dpnp.fft.ihfft": [[109, "dpnp-fft-ihfft"]], "dpnp.fft.irfft": [[110, "dpnp-fft-irfft"]], "dpnp.fft.irfft2": [[111, "dpnp-fft-irfft2"]], "dpnp.fft.irfftn": [[112, "dpnp-fft-irfftn"]], "dpnp.fft.rfft": [[113, "dpnp-fft-rfft"]], "dpnp.fft.rfft2": [[114, "dpnp-fft-rfft2"]], "dpnp.fft.rfftfreq": [[115, "dpnp-fft-rfftfreq"]], "dpnp.fft.rfftn": [[116, "dpnp-fft-rfftn"]], "dpnp.fill_diagonal": [[117, "dpnp-fill-diagonal"]], "dpnp.finfo": [[118, "dpnp-finfo"]], "dpnp.flatiter": [[119, "dpnp-flatiter"]], "dpnp.flip": [[120, "dpnp-flip"]], "dpnp.fliplr": [[121, "dpnp-fliplr"]], "dpnp.flipud": [[122, "dpnp-flipud"]], "dpnp.floor": [[123, "dpnp-floor"]], "dpnp.floor_divide": [[124, "dpnp-floor-divide"]], "dpnp.fmax": [[125, "dpnp-fmax"]], "dpnp.fmin": [[126, "dpnp-fmin"]], "dpnp.fmod": [[127, "dpnp-fmod"]], "dpnp.from_dlpack": [[128, "dpnp-from-dlpack"]], "dpnp.frombuffer": [[129, "dpnp-frombuffer"]], "dpnp.fromfile": [[130, "dpnp-fromfile"]], "dpnp.fromfunction": [[131, "dpnp-fromfunction"]], "dpnp.fromiter": [[132, "dpnp-fromiter"]], "dpnp.fromstring": [[133, "dpnp-fromstring"]], "dpnp.full": [[134, "dpnp-full"]], "dpnp.full_like": [[135, "dpnp-full-like"]], "dpnp.geomspace": [[136, "dpnp-geomspace"]], "dpnp.get_include": [[137, "dpnp-get-include"]], "dpnp.gradient": [[138, "dpnp-gradient"]], "dpnp.greater": [[139, "dpnp-greater"]], "dpnp.greater_equal": [[140, "dpnp-greater-equal"]], "dpnp.histogram": [[141, "dpnp-histogram"]], "dpnp.hstack": [[142, "dpnp-hstack"]], "dpnp.hypot": [[143, "dpnp-hypot"]], "dpnp.identity": [[144, "dpnp-identity"]], "dpnp.iinfo": [[145, "dpnp-iinfo"]], "dpnp.imag": [[146, "dpnp-imag"]], "dpnp.indices": [[147, "dpnp-indices"]], "dpnp.inner": [[148, "dpnp-inner"]], "dpnp.invert": [[149, "dpnp-invert"]], "dpnp.isclose": [[150, "dpnp-isclose"]], "dpnp.isfinite": [[151, "dpnp-isfinite"]], "dpnp.isinf": [[152, "dpnp-isinf"]], "dpnp.isnan": [[153, "dpnp-isnan"]], "dpnp.isscalar": [[154, "dpnp-isscalar"]], "dpnp.issubdtype": [[155, "dpnp-issubdtype"]], "dpnp.issubsctype": [[156, "dpnp-issubsctype"]], "dpnp.kron": [[157, "dpnp-kron"]], "dpnp.left_shift": [[158, "dpnp-left-shift"]], "dpnp.less": [[159, "dpnp-less"]], "dpnp.less_equal": [[160, "dpnp-less-equal"]], "dpnp.linalg.cholesky": [[161, "dpnp-linalg-cholesky"]], "dpnp.linalg.cond": [[162, "dpnp-linalg-cond"]], "dpnp.linalg.det": [[163, "dpnp-linalg-det"]], "dpnp.linalg.eig": [[164, "dpnp-linalg-eig"]], "dpnp.linalg.eigh": [[165, "dpnp-linalg-eigh"]], "dpnp.linalg.eigvals": [[166, "dpnp-linalg-eigvals"]], "dpnp.linalg.inv": [[167, "dpnp-linalg-inv"]], "dpnp.linalg.matrix_power": [[168, "dpnp-linalg-matrix-power"]], "dpnp.linalg.matrix_rank": [[169, "dpnp-linalg-matrix-rank"]], "dpnp.linalg.multi_dot": [[170, "dpnp-linalg-multi-dot"]], "dpnp.linalg.norm": [[171, "dpnp-linalg-norm"]], "dpnp.linalg.pinv": [[172, "dpnp-linalg-pinv"]], "dpnp.linalg.qr": [[173, "dpnp-linalg-qr"]], "dpnp.linalg.slogdet": [[174, "dpnp-linalg-slogdet"]], "dpnp.linalg.solve": [[175, "dpnp-linalg-solve"]], "dpnp.linalg.svd": [[176, "dpnp-linalg-svd"]], "dpnp.linspace": [[177, "dpnp-linspace"]], "dpnp.loadtxt": [[178, "dpnp-loadtxt"]], "dpnp.log": [[179, "dpnp-log"]], "dpnp.log10": [[180, "dpnp-log10"]], "dpnp.log1p": [[181, "dpnp-log1p"]], "dpnp.log2": [[182, "dpnp-log2"]], "dpnp.logaddexp": [[183, "dpnp-logaddexp"]], "dpnp.logical_and": [[184, "dpnp-logical-and"]], "dpnp.logical_not": [[185, "dpnp-logical-not"]], "dpnp.logical_or": [[186, "dpnp-logical-or"]], "dpnp.logical_xor": [[187, "dpnp-logical-xor"]], "dpnp.logspace": [[188, "dpnp-logspace"]], "dpnp.logsumexp": [[189, "dpnp-logsumexp"]], "dpnp.matmul": [[190, "dpnp-matmul"]], "dpnp.max": [[191, "dpnp-max"]], "dpnp.maximum": [[192, "dpnp-maximum"]], "dpnp.mean": [[193, "dpnp-mean"]], "dpnp.median": [[194, "dpnp-median"]], "dpnp.meshgrid": [[195, "dpnp-meshgrid"]], "dpnp.mgrid": [[196, "dpnp-mgrid"]], "dpnp.min": [[197, "dpnp-min"]], "dpnp.minimum": [[198, "dpnp-minimum"]], "dpnp.mod": [[199, "dpnp-mod"]], "dpnp.modf": [[200, "dpnp-modf"]], "dpnp.moveaxis": [[201, "dpnp-moveaxis"]], "dpnp.multiply": [[202, "dpnp-multiply"]], "dpnp.nanargmax": [[203, "dpnp-nanargmax"]], "dpnp.nanargmin": [[204, "dpnp-nanargmin"]], "dpnp.nancumprod": [[205, "dpnp-nancumprod"]], "dpnp.nancumsum": [[206, "dpnp-nancumsum"]], "dpnp.nanmax": [[207, "dpnp-nanmax"]], "dpnp.nanmean": [[208, "dpnp-nanmean"]], "dpnp.nanmin": [[209, "dpnp-nanmin"]], "dpnp.nanprod": [[210, "dpnp-nanprod"]], "dpnp.nanstd": [[211, "dpnp-nanstd"]], "dpnp.nansum": [[212, "dpnp-nansum"]], "dpnp.nanvar": [[213, "dpnp-nanvar"]], "dpnp.ndarray": [[214, "dpnp-ndarray"]], "dpnp.ndarray.T": [[215, "dpnp-ndarray-t"]], "dpnp.ndarray.__abs__": [[216, "dpnp-ndarray-abs"]], "dpnp.ndarray.__add__": [[217, "dpnp-ndarray-add"]], "dpnp.ndarray.__and__": [[218, "dpnp-ndarray-and"]], "dpnp.ndarray.__complex__": [[219, "dpnp-ndarray-complex"]], "dpnp.ndarray.__copy__": [[220, "dpnp-ndarray-copy"]], "dpnp.ndarray.__eq__": [[221, "dpnp-ndarray-eq"]], "dpnp.ndarray.__float__": [[222, "dpnp-ndarray-float"]], "dpnp.ndarray.__floordiv__": [[223, "dpnp-ndarray-floordiv"]], "dpnp.ndarray.__ge__": [[224, "dpnp-ndarray-ge"]], "dpnp.ndarray.__getitem__": [[225, "dpnp-ndarray-getitem"]], "dpnp.ndarray.__gt__": [[226, "dpnp-ndarray-gt"]], "dpnp.ndarray.__iadd__": [[227, "dpnp-ndarray-iadd"]], "dpnp.ndarray.__iand__": [[228, "dpnp-ndarray-iand"]], "dpnp.ndarray.__ifloordiv__": [[229, "dpnp-ndarray-ifloordiv"]], "dpnp.ndarray.__ilshift__": [[230, "dpnp-ndarray-ilshift"]], "dpnp.ndarray.__imod__": [[231, "dpnp-ndarray-imod"]], "dpnp.ndarray.__imul__": [[232, "dpnp-ndarray-imul"]], "dpnp.ndarray.__int__": [[233, "dpnp-ndarray-int"]], "dpnp.ndarray.__invert__": [[234, "dpnp-ndarray-invert"]], "dpnp.ndarray.__ior__": [[235, "dpnp-ndarray-ior"]], "dpnp.ndarray.__ipow__": [[236, "dpnp-ndarray-ipow"]], "dpnp.ndarray.__irshift__": [[237, "dpnp-ndarray-irshift"]], "dpnp.ndarray.__isub__": [[238, "dpnp-ndarray-isub"]], "dpnp.ndarray.__itruediv__": [[239, "dpnp-ndarray-itruediv"]], "dpnp.ndarray.__ixor__": [[240, "dpnp-ndarray-ixor"]], "dpnp.ndarray.__le__": [[241, "dpnp-ndarray-le"]], "dpnp.ndarray.__len__": [[242, "dpnp-ndarray-len"]], "dpnp.ndarray.__lshift__": [[243, "dpnp-ndarray-lshift"]], "dpnp.ndarray.__lt__": [[244, "dpnp-ndarray-lt"]], "dpnp.ndarray.__mod__": [[245, "dpnp-ndarray-mod"]], "dpnp.ndarray.__mul__": [[246, "dpnp-ndarray-mul"]], "dpnp.ndarray.__ne__": [[247, "dpnp-ndarray-ne"]], "dpnp.ndarray.__neg__": [[248, "dpnp-ndarray-neg"]], "dpnp.ndarray.__new__": [[249, "dpnp-ndarray-new"]], "dpnp.ndarray.__or__": [[250, "dpnp-ndarray-or"]], "dpnp.ndarray.__pos__": [[251, "dpnp-ndarray-pos"]], "dpnp.ndarray.__pow__": [[252, "dpnp-ndarray-pow"]], "dpnp.ndarray.__repr__": [[253, "dpnp-ndarray-repr"]], "dpnp.ndarray.__rshift__": [[254, "dpnp-ndarray-rshift"]], "dpnp.ndarray.__setitem__": [[255, "dpnp-ndarray-setitem"]], "dpnp.ndarray.__str__": [[256, "dpnp-ndarray-str"]], "dpnp.ndarray.__sub__": [[257, "dpnp-ndarray-sub"]], "dpnp.ndarray.__truediv__": [[258, "dpnp-ndarray-truediv"]], "dpnp.ndarray.__xor__": [[259, "dpnp-ndarray-xor"]], "dpnp.ndarray.all": [[260, "dpnp-ndarray-all"]], "dpnp.ndarray.any": [[261, "dpnp-ndarray-any"]], "dpnp.ndarray.argmax": [[262, "dpnp-ndarray-argmax"]], "dpnp.ndarray.argmin": [[263, "dpnp-ndarray-argmin"]], "dpnp.ndarray.argsort": [[264, "dpnp-ndarray-argsort"]], "dpnp.ndarray.astype": [[265, "dpnp-ndarray-astype"]], "dpnp.ndarray.choose": [[266, "dpnp-ndarray-choose"]], "dpnp.ndarray.clip": [[267, "dpnp-ndarray-clip"]], "dpnp.ndarray.conj": [[268, "dpnp-ndarray-conj"]], "dpnp.ndarray.conjugate": [[269, "dpnp-ndarray-conjugate"]], "dpnp.ndarray.copy": [[270, "dpnp-ndarray-copy"]], "dpnp.ndarray.cumsum": [[271, "dpnp-ndarray-cumsum"]], "dpnp.ndarray.diagonal": [[272, "dpnp-ndarray-diagonal"]], "dpnp.ndarray.dtype": [[273, "dpnp-ndarray-dtype"]], "dpnp.ndarray.fill": [[274, "dpnp-ndarray-fill"]], "dpnp.ndarray.flags": [[275, "dpnp-ndarray-flags"]], "dpnp.ndarray.flat": [[276, "dpnp-ndarray-flat"]], "dpnp.ndarray.flatten": [[277, "dpnp-ndarray-flatten"]], "dpnp.ndarray.imag": [[278, "dpnp-ndarray-imag"]], "dpnp.ndarray.item": [[279, "dpnp-ndarray-item"]], "dpnp.ndarray.itemsize": [[280, "dpnp-ndarray-itemsize"]], "dpnp.ndarray.max": [[281, "dpnp-ndarray-max"]], "dpnp.ndarray.mean": [[282, "dpnp-ndarray-mean"]], "dpnp.ndarray.min": [[283, "dpnp-ndarray-min"]], "dpnp.ndarray.nbytes": [[284, "dpnp-ndarray-nbytes"]], "dpnp.ndarray.ndim": [[285, "dpnp-ndarray-ndim"]], "dpnp.ndarray.nonzero": [[286, "dpnp-ndarray-nonzero"]], "dpnp.ndarray.partition": [[287, "dpnp-ndarray-partition"]], "dpnp.ndarray.prod": [[288, "dpnp-ndarray-prod"]], "dpnp.ndarray.put": [[289, "dpnp-ndarray-put"]], "dpnp.ndarray.ravel": [[290, "dpnp-ndarray-ravel"]], "dpnp.ndarray.real": [[291, "dpnp-ndarray-real"]], "dpnp.ndarray.repeat": [[292, "dpnp-ndarray-repeat"]], "dpnp.ndarray.reshape": [[293, "dpnp-ndarray-reshape"]], "dpnp.ndarray.round": [[294, "dpnp-ndarray-round"]], "dpnp.ndarray.shape": [[295, "dpnp-ndarray-shape"]], "dpnp.ndarray.size": [[296, "dpnp-ndarray-size"]], "dpnp.ndarray.sort": [[297, "dpnp-ndarray-sort"]], "dpnp.ndarray.squeeze": [[298, "dpnp-ndarray-squeeze"]], "dpnp.ndarray.std": [[299, "dpnp-ndarray-std"]], "dpnp.ndarray.strides": [[300, "dpnp-ndarray-strides"]], "dpnp.ndarray.sum": [[301, "dpnp-ndarray-sum"]], "dpnp.ndarray.swapaxes": [[302, "dpnp-ndarray-swapaxes"]], "dpnp.ndarray.take": [[303, "dpnp-ndarray-take"]], "dpnp.ndarray.transpose": [[304, "dpnp-ndarray-transpose"]], "dpnp.ndarray.var": [[305, "dpnp-ndarray-var"]], "dpnp.negative": [[306, "dpnp-negative"]], "dpnp.nonzero": [[307, "dpnp-nonzero"]], "dpnp.not_equal": [[308, "dpnp-not-equal"]], "dpnp.ogrid": [[309, "dpnp-ogrid"]], "dpnp.ones": [[310, "dpnp-ones"]], "dpnp.ones_like": [[311, "dpnp-ones-like"]], "dpnp.outer": [[312, "dpnp-outer"]], "dpnp.partition": [[313, "dpnp-partition"]], "dpnp.place": [[314, "dpnp-place"]], "dpnp.positive": [[315, "dpnp-positive"]], "dpnp.power": [[316, "dpnp-power"]], "dpnp.prod": [[317, "dpnp-prod"]], "dpnp.proj": [[318, "dpnp-proj"]], "dpnp.ptp": [[319, "dpnp-ptp"]], "dpnp.put": [[320, "dpnp-put"]], "dpnp.put_along_axis": [[321, "dpnp-put-along-axis"]], "dpnp.putmask": [[322, "dpnp-putmask"]], "dpnp.rad2deg": [[323, "dpnp-rad2deg"]], "dpnp.radians": [[324, "dpnp-radians"]], "dpnp.random.RandomState": [[325, "dpnp-random-randomstate"]], "dpnp.random.beta": [[326, "dpnp-random-beta"]], "dpnp.random.binomial": [[327, "dpnp-random-binomial"]], "dpnp.random.bytes": [[328, "dpnp-random-bytes"]], "dpnp.random.chisquare": [[329, "dpnp-random-chisquare"]], "dpnp.random.choice": [[330, "dpnp-random-choice"]], "dpnp.random.dirichlet": [[331, "dpnp-random-dirichlet"]], "dpnp.random.exponential": [[332, "dpnp-random-exponential"]], "dpnp.random.f": [[333, "dpnp-random-f"]], "dpnp.random.gamma": [[334, "dpnp-random-gamma"]], "dpnp.random.geometric": [[335, "dpnp-random-geometric"]], "dpnp.random.gumbel": [[336, "dpnp-random-gumbel"]], "dpnp.random.hypergeometric": [[337, "dpnp-random-hypergeometric"]], "dpnp.random.laplace": [[338, "dpnp-random-laplace"]], "dpnp.random.logistic": [[339, "dpnp-random-logistic"]], "dpnp.random.lognormal": [[340, "dpnp-random-lognormal"]], "dpnp.random.logseries": [[341, "dpnp-random-logseries"]], "dpnp.random.multinomial": [[342, "dpnp-random-multinomial"]], "dpnp.random.multivariate_normal": [[343, "dpnp-random-multivariate-normal"]], "dpnp.random.negative_binomial": [[344, "dpnp-random-negative-binomial"]], "dpnp.random.noncentral_chisquare": [[345, "dpnp-random-noncentral-chisquare"]], "dpnp.random.noncentral_f": [[346, "dpnp-random-noncentral-f"]], "dpnp.random.normal": [[347, "dpnp-random-normal"]], "dpnp.random.pareto": [[348, "dpnp-random-pareto"]], "dpnp.random.permutation": [[349, "dpnp-random-permutation"]], "dpnp.random.poisson": [[350, "dpnp-random-poisson"]], "dpnp.random.power": [[351, "dpnp-random-power"]], "dpnp.random.rand": [[352, "dpnp-random-rand"]], "dpnp.random.randint": [[353, "dpnp-random-randint"]], "dpnp.random.randn": [[354, "dpnp-random-randn"]], "dpnp.random.random": [[355, "dpnp-random-random"]], "dpnp.random.random_integers": [[356, "dpnp-random-random-integers"]], "dpnp.random.random_sample": [[357, "dpnp-random-random-sample"]], "dpnp.random.ranf": [[358, "dpnp-random-ranf"]], "dpnp.random.rayleigh": [[359, "dpnp-random-rayleigh"]], "dpnp.random.sample": [[360, "dpnp-random-sample"]], "dpnp.random.seed": [[361, "dpnp-random-seed"]], "dpnp.random.shuffle": [[362, "dpnp-random-shuffle"]], "dpnp.random.standard_cauchy": [[363, "dpnp-random-standard-cauchy"]], "dpnp.random.standard_exponential": [[364, "dpnp-random-standard-exponential"]], "dpnp.random.standard_gamma": [[365, "dpnp-random-standard-gamma"]], "dpnp.random.standard_normal": [[366, "dpnp-random-standard-normal"]], "dpnp.random.standard_t": [[367, "dpnp-random-standard-t"]], "dpnp.random.triangular": [[368, "dpnp-random-triangular"]], "dpnp.random.uniform": [[369, "dpnp-random-uniform"]], "dpnp.random.vonmises": [[370, "dpnp-random-vonmises"]], "dpnp.random.wald": [[371, "dpnp-random-wald"]], "dpnp.random.weibull": [[372, "dpnp-random-weibull"]], "dpnp.random.zipf": [[373, "dpnp-random-zipf"]], "dpnp.ravel": [[374, "dpnp-ravel"]], "dpnp.real": [[375, "dpnp-real"]], "dpnp.reciprocal": [[376, "dpnp-reciprocal"]], "dpnp.reduce_hypot": [[377, "dpnp-reduce-hypot"]], "dpnp.remainder": [[378, "dpnp-remainder"]], "dpnp.repeat": [[379, "dpnp-repeat"]], "dpnp.reshape": [[380, "dpnp-reshape"]], "dpnp.result_type": [[381, "dpnp-result-type"]], "dpnp.right_shift": [[382, "dpnp-right-shift"]], "dpnp.rint": [[383, "dpnp-rint"]], "dpnp.roll": [[384, "dpnp-roll"]], "dpnp.rollaxis": [[385, "dpnp-rollaxis"]], "dpnp.round": [[386, "dpnp-round"]], "dpnp.row_stack": [[387, "dpnp-row-stack"]], "dpnp.rsqrt": [[388, "dpnp-rsqrt"]], "dpnp.searchsorted": [[389, "dpnp-searchsorted"]], "dpnp.select": [[390, "dpnp-select"]], "dpnp.shape": [[391, "dpnp-shape"]], "dpnp.sign": [[392, "dpnp-sign"]], "dpnp.signbit": [[393, "dpnp-signbit"]], "dpnp.sin": [[394, "dpnp-sin"]], "dpnp.sinh": [[395, "dpnp-sinh"]], "dpnp.sort": [[396, "dpnp-sort"]], "dpnp.sqrt": [[397, "dpnp-sqrt"]], "dpnp.square": [[398, "dpnp-square"]], "dpnp.squeeze": [[399, "dpnp-squeeze"]], "dpnp.stack": [[400, "dpnp-stack"]], "dpnp.std": [[401, "dpnp-std"]], "dpnp.subtract": [[402, "dpnp-subtract"]], "dpnp.sum": [[403, "dpnp-sum"]], "dpnp.swapaxes": [[404, "dpnp-swapaxes"]], "dpnp.take": [[405, "dpnp-take"]], "dpnp.take_along_axis": [[406, "dpnp-take-along-axis"]], "dpnp.tan": [[407, "dpnp-tan"]], "dpnp.tanh": [[408, "dpnp-tanh"]], "dpnp.tensordot": [[409, "dpnp-tensordot"]], "dpnp.tile": [[410, "dpnp-tile"]], "dpnp.trace": [[411, "dpnp-trace"]], "dpnp.transpose": [[412, "dpnp-transpose"]], "dpnp.trapz": [[413, "dpnp-trapz"]], "dpnp.tri": [[414, "dpnp-tri"]], "dpnp.tril": [[415, "dpnp-tril"]], "dpnp.tril_indices": [[416, "dpnp-tril-indices"]], "dpnp.tril_indices_from": [[417, "dpnp-tril-indices-from"]], "dpnp.triu": [[418, "dpnp-triu"]], "dpnp.triu_indices": [[419, "dpnp-triu-indices"]], "dpnp.triu_indices_from": [[420, "dpnp-triu-indices-from"]], "dpnp.true_divide": [[421, "dpnp-true-divide"]], "dpnp.trunc": [[422, "dpnp-trunc"]], "dpnp.unique": [[423, "dpnp-unique"]], "dpnp.unwrap": [[424, "dpnp-unwrap"]], "dpnp.vander": [[425, "dpnp-vander"]], "dpnp.var": [[426, "dpnp-var"]], "dpnp.vdot": [[427, "dpnp-vdot"]], "dpnp.vstack": [[428, "dpnp-vstack"]], "dpnp.where": [[429, "dpnp-where"]], "dpnp.zeros": [[430, "dpnp-zeros"]], "dpnp.zeros_like": [[431, "dpnp-zeros-like"]], "API Reference": [[432, "api-reference"]], "Array Indexing Routines": [[433, "array-indexing-routines"]], "Generating index arrays": [[433, "generating-index-arrays"]], "Indexing-like operations": [[433, "indexing-like-operations"]], "Inserting data into arrays": [[433, "inserting-data-into-arrays"]], "Iterating over arrays": [[433, "iterating-over-arrays"]], "Matrix and vector products": [[434, "matrix-and-vector-products"]], "Decompositions": [[434, "decompositions"]], "Matrix eigenvalues": [[434, "matrix-eigenvalues"]], "Norms and other numbers": [[434, "norms-and-other-numbers"]], "Solving linear equations": [[434, "solving-linear-equations"]], "Logic Functions": [[435, "logic-functions"]], "Truth value testing": [[435, "truth-value-testing"]], "Infinities and NaNs": [[435, "infinities-and-nans"]], "Array type testing": [[435, "array-type-testing"]], "Logic operations": [[435, "logic-operations"]], "Comparison": [[435, "comparison"]], "Array Manipulation Routines": [[436, "array-manipulation-routines"]], "Basic operations": [[436, "basic-operations"]], "Changing array shape": [[436, "changing-array-shape"]], "Transpose-like operations": [[436, "transpose-like-operations"]], "Changing number of dimensions": [[436, "changing-number-of-dimensions"]], "Changing kind of array": [[436, "changing-kind-of-array"]], "Joining arrays": [[436, "joining-arrays"]], "Splitting arrays": [[436, "splitting-arrays"]], "Tiling arrays": [[436, "tiling-arrays"]], "Adding and removing elements": [[436, "adding-and-removing-elements"]], "Rearranging elements": [[436, "rearranging-elements"]], "Mathematical Functions": [[437, "mathematical-functions"]], "Trigonometric functions": [[437, "trigonometric-functions"], [447, "trigonometric-functions"]], "Hyperbolic functions": [[437, "hyperbolic-functions"]], "Rounding": [[437, "rounding"]], "Sums, products, differences": [[437, "sums-products-differences"]], "Exponents and logarithms": [[437, "exponents-and-logarithms"]], "Other special functions": [[437, "other-special-functions"]], "Floating point routines": [[437, "floating-point-routines"]], "Rational routines": [[437, "rational-routines"]], "Arithmetic operations": [[437, "arithmetic-operations"]], "Handling complex numbers": [[437, "handling-complex-numbers"]], "Extrema Finding": [[437, "extrema-finding"]], "Miscellaneous routines": [[438, "miscellaneous-routines"]], "Utility": [[438, "utility"]], "Multi-Dimensional Array (ndarray)": [[439, "multi-dimensional-array-ndarray"]], "Constructing arrays": [[439, "constructing-arrays"]], "Indexing arrays": [[439, "indexing-arrays"]], "Array attributes": [[439, "array-attributes"]], "Memory layout": [[439, "memory-layout"]], "Data type": [[439, "data-type"]], "Other attributes": [[439, "other-attributes"]], "Array methods": [[439, "array-methods"]], "Array conversion": [[439, "array-conversion"]], "Shape manipulation": [[439, "shape-manipulation"]], "Item selection and manipulation": [[439, "item-selection-and-manipulation"]], "Calculation": [[439, "calculation"]], "Arithmetic, matrix multiplication, and comparison operations": [[439, "arithmetic-matrix-multiplication-and-comparison-operations"]], "Special methods": [[439, "special-methods"]], "Padding": [[440, "padding"]], "Polynomials": [[441, "polynomials"]], "Polynomial Package": [[441, "polynomial-package"]], "Polynomial Module": [[441, "polynomial-module"]], "Polyutils": [[441, "polyutils"]], "Poly1d": [[441, "poly1d"]], "Basics": [[441, "basics"]], "Arithmetic": [[441, "arithmetic"]], "Random Sampling (dpnp.random)": [[442, "random-sampling-dpnp-random"]], "Simple random data": [[442, "simple-random-data"]], "Permutations": [[442, "permutations"]], "Distributions": [[442, "distributions"]], "Random generator": [[442, "random-generator"]], "Routines": [[443, "routines"]], "Sorting, Searching, and Counting": [[444, "sorting-searching-and-counting"]], "Sorting": [[444, "sorting"]], "Searching": [[444, "searching"]], "Counting": [[444, "counting"]], "Special Functions": [[445, "special-functions"]], "Error Function": [[445, "error-function"]], "Statistical Functions": [[446, "statistical-functions"]], "Order statistics": [[446, "order-statistics"]], "Averages and variances": [[446, "averages-and-variances"]], "Histograms": [[446, "histograms"]], "Correlations": [[446, "correlations"]], "Universal Functions (ufunc)": [[447, "universal-functions-ufunc"]], "Available ufuncs": [[447, "available-ufuncs"]], "Math operations": [[447, "math-operations"]], "Bit-twiddling functions": [[447, "bit-twiddling-functions"]], "Comparison functions": [[447, "comparison-functions"]], "Floating functions": [[447, "floating-functions"]]}, "indexentries": {"dpnp": [[2, "module-dpnp"], [3, "module-dpnp"]], "module": [[2, "module-dpnp"], [3, "module-dpnp"], [10, "module-dpnp.fft"], [442, "module-dpnp.random"]], "dpnp.fft": [[10, "module-dpnp.fft"]], "abs() (in module dpnp)": [[11, "dpnp.abs"]], "absolute() (in module dpnp)": [[12, "dpnp.absolute"]], "add() (in module dpnp)": [[13, "dpnp.add"]], "all() (in module dpnp)": [[14, "dpnp.all"]], "allclose() (in module dpnp)": [[15, "dpnp.allclose"]], "amax() (in module dpnp)": [[16, "dpnp.amax"]], "amin() (in module dpnp)": [[17, "dpnp.amin"]], "angle() (in module dpnp)": [[18, "dpnp.angle"]], "any() (in module dpnp)": [[19, "dpnp.any"]], "arange() (in module dpnp)": [[20, "dpnp.arange"]], "arccos() (in module dpnp)": [[21, "dpnp.arccos"]], "arccosh() (in module dpnp)": [[22, "dpnp.arccosh"]], "arcsin() (in module dpnp)": [[23, "dpnp.arcsin"]], "arcsinh() (in module dpnp)": [[24, "dpnp.arcsinh"]], "arctan() (in module dpnp)": [[25, "dpnp.arctan"]], "arctan2() (in module dpnp)": [[26, "dpnp.arctan2"]], "arctanh() (in module dpnp)": [[27, "dpnp.arctanh"]], "argmax() (in module dpnp)": [[28, "dpnp.argmax"]], "argmin() (in module dpnp)": [[29, "dpnp.argmin"]], "argsort() (in module dpnp)": [[30, "dpnp.argsort"]], "around() (in module dpnp)": [[31, "dpnp.around"]], "array() (in module dpnp)": [[32, "dpnp.array"]], "array_equal() (in module dpnp)": [[33, "dpnp.array_equal"]], "asanyarray() (in module dpnp)": [[34, "dpnp.asanyarray"]], "asarray() (in module dpnp)": [[35, "dpnp.asarray"]], "ascontiguousarray() (in module dpnp)": [[36, "dpnp.ascontiguousarray"]], "asfarray() (in module dpnp)": [[37, "dpnp.asfarray"]], "asfortranarray() (in module dpnp)": [[38, "dpnp.asfortranarray"]], "asnumpy() (in module dpnp)": [[39, "dpnp.asnumpy"]], "atleast_1d() (in module dpnp)": [[40, "dpnp.atleast_1d"]], "atleast_2d() (in module dpnp)": [[41, "dpnp.atleast_2d"]], "atleast_3d() (in module dpnp)": [[42, "dpnp.atleast_3d"]], "average() (in module dpnp)": [[43, "dpnp.average"]], "bincount() (in module dpnp)": [[44, "dpnp.bincount"]], "bitwise_and() (in module dpnp)": [[45, "dpnp.bitwise_and"]], "bitwise_not() (in module dpnp)": [[46, "dpnp.bitwise_not"]], "bitwise_or() (in module dpnp)": [[47, "dpnp.bitwise_or"]], "bitwise_xor() (in module dpnp)": [[48, "dpnp.bitwise_xor"]], "broadcast_arrays() (in module dpnp)": [[49, "dpnp.broadcast_arrays"]], "broadcast_to() (in module dpnp)": [[50, "dpnp.broadcast_to"]], "can_cast() (in module dpnp)": [[51, "dpnp.can_cast"]], "cbrt() (in module dpnp)": [[52, "dpnp.cbrt"]], "ceil() (in module dpnp)": [[53, "dpnp.ceil"]], "choose() (in module dpnp)": [[54, "dpnp.choose"]], "clip() (in module dpnp)": [[55, "dpnp.clip"]], "column_stack() (in module dpnp)": [[56, "dpnp.column_stack"]], "concatenate() (in module dpnp)": [[57, "dpnp.concatenate"]], "conj() (in module dpnp)": [[58, "dpnp.conj"]], "conjugate() (in module dpnp)": [[59, "dpnp.conjugate"]], "convolve() (in module dpnp)": [[60, "dpnp.convolve"]], "copy() (in module dpnp)": [[61, "dpnp.copy"]], "copysign() (in module dpnp)": [[62, "dpnp.copysign"]], "copyto() (in module dpnp)": [[63, "dpnp.copyto"]], "correlate() (in module dpnp)": [[64, "dpnp.correlate"]], "cos() (in module dpnp)": [[65, "dpnp.cos"]], "cosh() (in module dpnp)": [[66, "dpnp.cosh"]], "count_nonzero() (in module dpnp)": [[67, "dpnp.count_nonzero"]], "cov() (in module dpnp)": [[68, "dpnp.cov"]], "cross() (in module dpnp)": [[69, "dpnp.cross"]], "cumprod() (in module dpnp)": [[70, "dpnp.cumprod"]], "cumsum() (in module dpnp)": [[71, "dpnp.cumsum"]], "deg2rad() (in module dpnp)": [[72, "dpnp.deg2rad"]], "degrees() (in module dpnp)": [[73, "dpnp.degrees"]], "diag() (in module dpnp)": [[74, "dpnp.diag"]], "diag_indices() (in module dpnp)": [[75, "dpnp.diag_indices"]], "diag_indices_from() (in module dpnp)": [[76, "dpnp.diag_indices_from"]], "diagflat() (in module dpnp)": [[77, "dpnp.diagflat"]], "diagonal() (in module dpnp)": [[78, "dpnp.diagonal"]], "diff() (in module dpnp)": [[79, "dpnp.diff"]], "divide() (in module dpnp)": [[80, "dpnp.divide"]], "dot() (in module dpnp)": [[81, "dpnp.dot"]], "t (dpnp.dpnp_array.dpnp_array attribute)": [[82, "dpnp.dpnp_array.dpnp_array.T"]], "__eq__() (dpnp.dpnp_array.dpnp_array method)": [[82, "dpnp.dpnp_array.dpnp_array.__eq__"]], "__ge__() (dpnp.dpnp_array.dpnp_array method)": [[82, "dpnp.dpnp_array.dpnp_array.__ge__"]], "__getitem__() (dpnp.dpnp_array.dpnp_array method)": [[82, "dpnp.dpnp_array.dpnp_array.__getitem__"]], "__gt__() (dpnp.dpnp_array.dpnp_array method)": [[82, "dpnp.dpnp_array.dpnp_array.__gt__"]], "__le__() (dpnp.dpnp_array.dpnp_array method)": [[82, "dpnp.dpnp_array.dpnp_array.__le__"]], "__len__() (dpnp.dpnp_array.dpnp_array method)": [[82, "dpnp.dpnp_array.dpnp_array.__len__"]], "__lt__() (dpnp.dpnp_array.dpnp_array method)": [[82, "dpnp.dpnp_array.dpnp_array.__lt__"]], "__ne__() (dpnp.dpnp_array.dpnp_array method)": [[82, "dpnp.dpnp_array.dpnp_array.__ne__"]], "__setitem__() (dpnp.dpnp_array.dpnp_array method)": [[82, "dpnp.dpnp_array.dpnp_array.__setitem__"]], "all() (dpnp.dpnp_array.dpnp_array method)": [[82, "dpnp.dpnp_array.dpnp_array.all"]], "any() (dpnp.dpnp_array.dpnp_array method)": [[82, "dpnp.dpnp_array.dpnp_array.any"]], "argmax() (dpnp.dpnp_array.dpnp_array method)": [[82, "dpnp.dpnp_array.dpnp_array.argmax"]], "argmin() (dpnp.dpnp_array.dpnp_array method)": [[82, "dpnp.dpnp_array.dpnp_array.argmin"]], "argsort() (dpnp.dpnp_array.dpnp_array method)": [[82, "dpnp.dpnp_array.dpnp_array.argsort"]], "asnumpy() (dpnp.dpnp_array.dpnp_array method)": [[82, "dpnp.dpnp_array.dpnp_array.asnumpy"]], "astype() (dpnp.dpnp_array.dpnp_array method)": [[82, "dpnp.dpnp_array.dpnp_array.astype"]], "choose() (dpnp.dpnp_array.dpnp_array method)": [[82, "dpnp.dpnp_array.dpnp_array.choose"]], "clip() (dpnp.dpnp_array.dpnp_array method)": [[82, "dpnp.dpnp_array.dpnp_array.clip"]], "conj() (dpnp.dpnp_array.dpnp_array method)": [[82, "dpnp.dpnp_array.dpnp_array.conj"]], "conjugate() (dpnp.dpnp_array.dpnp_array method)": [[82, "dpnp.dpnp_array.dpnp_array.conjugate"]], "copy() (dpnp.dpnp_array.dpnp_array method)": [[82, "dpnp.dpnp_array.dpnp_array.copy"]], "cumsum() (dpnp.dpnp_array.dpnp_array method)": [[82, "dpnp.dpnp_array.dpnp_array.cumsum"]], "device (dpnp.dpnp_array.dpnp_array attribute)": [[82, "dpnp.dpnp_array.dpnp_array.device"]], "diagonal() (dpnp.dpnp_array.dpnp_array method)": [[82, "dpnp.dpnp_array.dpnp_array.diagonal"]], "dot() (dpnp.dpnp_array.dpnp_array method)": [[82, "dpnp.dpnp_array.dpnp_array.dot"]], "dpnp_array (class in dpnp.dpnp_array)": [[82, "dpnp.dpnp_array.dpnp_array"]], "dtype (dpnp.dpnp_array.dpnp_array attribute)": [[82, "dpnp.dpnp_array.dpnp_array.dtype"]], "fill() (dpnp.dpnp_array.dpnp_array method)": [[82, "dpnp.dpnp_array.dpnp_array.fill"]], "flags (dpnp.dpnp_array.dpnp_array attribute)": [[82, "dpnp.dpnp_array.dpnp_array.flags"]], "flat (dpnp.dpnp_array.dpnp_array attribute)": [[82, "dpnp.dpnp_array.dpnp_array.flat"]], "flatten() (dpnp.dpnp_array.dpnp_array method)": [[82, "dpnp.dpnp_array.dpnp_array.flatten"]], "get_array() (dpnp.dpnp_array.dpnp_array method)": [[82, "dpnp.dpnp_array.dpnp_array.get_array"]], "imag (dpnp.dpnp_array.dpnp_array attribute)": [[82, "dpnp.dpnp_array.dpnp_array.imag"]], "item() (dpnp.dpnp_array.dpnp_array method)": [[82, "dpnp.dpnp_array.dpnp_array.item"]], "itemsize (dpnp.dpnp_array.dpnp_array attribute)": [[82, "dpnp.dpnp_array.dpnp_array.itemsize"]], "max() (dpnp.dpnp_array.dpnp_array method)": [[82, "dpnp.dpnp_array.dpnp_array.max"]], "mean() (dpnp.dpnp_array.dpnp_array method)": [[82, "dpnp.dpnp_array.dpnp_array.mean"]], "min() (dpnp.dpnp_array.dpnp_array method)": [[82, "dpnp.dpnp_array.dpnp_array.min"]], "nbytes (dpnp.dpnp_array.dpnp_array attribute)": [[82, "dpnp.dpnp_array.dpnp_array.nbytes"]], "ndim (dpnp.dpnp_array.dpnp_array attribute)": [[82, "dpnp.dpnp_array.dpnp_array.ndim"]], "nonzero() (dpnp.dpnp_array.dpnp_array method)": [[82, "dpnp.dpnp_array.dpnp_array.nonzero"]], "partition() (dpnp.dpnp_array.dpnp_array method)": [[82, "dpnp.dpnp_array.dpnp_array.partition"]], "prod() (dpnp.dpnp_array.dpnp_array method)": [[82, "dpnp.dpnp_array.dpnp_array.prod"]], "put() (dpnp.dpnp_array.dpnp_array method)": [[82, "dpnp.dpnp_array.dpnp_array.put"]], "ravel() (dpnp.dpnp_array.dpnp_array method)": [[82, "dpnp.dpnp_array.dpnp_array.ravel"]], "real (dpnp.dpnp_array.dpnp_array attribute)": [[82, "dpnp.dpnp_array.dpnp_array.real"]], "repeat() (dpnp.dpnp_array.dpnp_array method)": [[82, "dpnp.dpnp_array.dpnp_array.repeat"]], "reshape() (dpnp.dpnp_array.dpnp_array method)": [[82, "dpnp.dpnp_array.dpnp_array.reshape"]], "round() (dpnp.dpnp_array.dpnp_array method)": [[82, "dpnp.dpnp_array.dpnp_array.round"]], "shape (dpnp.dpnp_array.dpnp_array attribute)": [[82, "dpnp.dpnp_array.dpnp_array.shape"]], "size (dpnp.dpnp_array.dpnp_array attribute)": [[82, "dpnp.dpnp_array.dpnp_array.size"]], "sort() (dpnp.dpnp_array.dpnp_array method)": [[82, "dpnp.dpnp_array.dpnp_array.sort"]], "squeeze() (dpnp.dpnp_array.dpnp_array method)": [[82, "dpnp.dpnp_array.dpnp_array.squeeze"]], "std() (dpnp.dpnp_array.dpnp_array method)": [[82, "dpnp.dpnp_array.dpnp_array.std"]], "strides (dpnp.dpnp_array.dpnp_array attribute)": [[82, "dpnp.dpnp_array.dpnp_array.strides"]], "sum() (dpnp.dpnp_array.dpnp_array method)": [[82, "dpnp.dpnp_array.dpnp_array.sum"]], "swapaxes() (dpnp.dpnp_array.dpnp_array method)": [[82, "dpnp.dpnp_array.dpnp_array.swapaxes"]], "sycl_context (dpnp.dpnp_array.dpnp_array attribute)": [[82, "dpnp.dpnp_array.dpnp_array.sycl_context"]], "sycl_device (dpnp.dpnp_array.dpnp_array attribute)": [[82, "dpnp.dpnp_array.dpnp_array.sycl_device"]], "sycl_queue (dpnp.dpnp_array.dpnp_array attribute)": [[82, "dpnp.dpnp_array.dpnp_array.sycl_queue"]], "take() (dpnp.dpnp_array.dpnp_array method)": [[82, "dpnp.dpnp_array.dpnp_array.take"]], "to_device() (dpnp.dpnp_array.dpnp_array method)": [[82, "dpnp.dpnp_array.dpnp_array.to_device"]], "transpose() (dpnp.dpnp_array.dpnp_array method)": [[82, "dpnp.dpnp_array.dpnp_array.transpose"]], "usm_type (dpnp.dpnp_array.dpnp_array attribute)": [[82, "dpnp.dpnp_array.dpnp_array.usm_type"]], "var() (dpnp.dpnp_array.dpnp_array method)": [[82, "dpnp.dpnp_array.dpnp_array.var"]], "dstack() (in module dpnp)": [[83, "dpnp.dstack"]], "__eq__() (dpnp.dtype method)": [[84, "dpnp.dtype.__eq__"]], "__ge__() (dpnp.dtype method)": [[84, "dpnp.dtype.__ge__"]], "__getitem__() (dpnp.dtype method)": [[84, "dpnp.dtype.__getitem__"]], "__gt__() (dpnp.dtype method)": [[84, "dpnp.dtype.__gt__"]], "__le__() (dpnp.dtype method)": [[84, "dpnp.dtype.__le__"]], "__len__() (dpnp.dtype method)": [[84, "dpnp.dtype.__len__"]], "__lt__() (dpnp.dtype method)": [[84, "dpnp.dtype.__lt__"]], "__ne__() (dpnp.dtype method)": [[84, "dpnp.dtype.__ne__"]], "alignment (dpnp.dtype attribute)": [[84, "dpnp.dtype.alignment"]], "base (dpnp.dtype attribute)": [[84, "dpnp.dtype.base"]], "byteorder (dpnp.dtype attribute)": [[84, "dpnp.dtype.byteorder"]], "char (dpnp.dtype attribute)": [[84, "dpnp.dtype.char"]], "descr (dpnp.dtype attribute)": [[84, "dpnp.dtype.descr"]], "dtype (class in dpnp)": [[84, "dpnp.dtype"]], "fields (dpnp.dtype attribute)": [[84, "dpnp.dtype.fields"]], "flags (dpnp.dtype attribute)": [[84, "dpnp.dtype.flags"]], "hasobject (dpnp.dtype attribute)": [[84, "dpnp.dtype.hasobject"]], "isalignedstruct (dpnp.dtype attribute)": [[84, "dpnp.dtype.isalignedstruct"]], "isbuiltin (dpnp.dtype attribute)": [[84, "dpnp.dtype.isbuiltin"]], "isnative (dpnp.dtype attribute)": [[84, "dpnp.dtype.isnative"]], "itemsize (dpnp.dtype attribute)": [[84, "dpnp.dtype.itemsize"]], "kind (dpnp.dtype attribute)": [[84, "dpnp.dtype.kind"]], "metadata (dpnp.dtype attribute)": [[84, "dpnp.dtype.metadata"]], "name (dpnp.dtype attribute)": [[84, "dpnp.dtype.name"]], "names (dpnp.dtype attribute)": [[84, "dpnp.dtype.names"]], "ndim (dpnp.dtype attribute)": [[84, "dpnp.dtype.ndim"]], "newbyteorder() (dpnp.dtype method)": [[84, "dpnp.dtype.newbyteorder"]], "num (dpnp.dtype attribute)": [[84, "dpnp.dtype.num"]], "shape (dpnp.dtype attribute)": [[84, "dpnp.dtype.shape"]], "str (dpnp.dtype attribute)": [[84, "dpnp.dtype.str"]], "subdtype (dpnp.dtype attribute)": [[84, "dpnp.dtype.subdtype"]], "type (dpnp.dtype attribute)": [[84, "dpnp.dtype.type"]], "ediff1d() (in module dpnp)": [[85, "dpnp.ediff1d"]], "einsum() (in module dpnp)": [[86, "dpnp.einsum"]], "einsum_path() (in module dpnp)": [[87, "dpnp.einsum_path"]], "empty() (in module dpnp)": [[88, "dpnp.empty"]], "empty_like() (in module dpnp)": [[89, "dpnp.empty_like"]], "equal() (in module dpnp)": [[90, "dpnp.equal"]], "erf() (in module dpnp)": [[91, "dpnp.erf"]], "exp() (in module dpnp)": [[92, "dpnp.exp"]], "exp2() (in module dpnp)": [[93, "dpnp.exp2"]], "expand_dims() (in module dpnp)": [[94, "dpnp.expand_dims"]], "expm1() (in module dpnp)": [[95, "dpnp.expm1"]], "extract() (in module dpnp)": [[96, "dpnp.extract"]], "eye() (in module dpnp)": [[97, "dpnp.eye"]], "fabs() (in module dpnp)": [[98, "dpnp.fabs"]], "fft() (in module dpnp.fft)": [[99, "dpnp.fft.fft"]], "fft2() (in module dpnp.fft)": [[100, "dpnp.fft.fft2"]], "fftfreq() (in module dpnp.fft)": [[101, "dpnp.fft.fftfreq"]], "fftn() (in module dpnp.fft)": [[102, "dpnp.fft.fftn"]], "fftshift() (in module dpnp.fft)": [[103, "dpnp.fft.fftshift"]], "hfft() (in module dpnp.fft)": [[104, "dpnp.fft.hfft"]], "ifft() (in module dpnp.fft)": [[105, "dpnp.fft.ifft"]], "ifft2() (in module dpnp.fft)": [[106, "dpnp.fft.ifft2"]], "ifftn() (in module dpnp.fft)": [[107, "dpnp.fft.ifftn"]], "ifftshift() (in module dpnp.fft)": [[108, "dpnp.fft.ifftshift"]], "ihfft() (in module dpnp.fft)": [[109, "dpnp.fft.ihfft"]], "irfft() (in module dpnp.fft)": [[110, "dpnp.fft.irfft"]], "irfft2() (in module dpnp.fft)": [[111, "dpnp.fft.irfft2"]], "irfftn() (in module dpnp.fft)": [[112, "dpnp.fft.irfftn"]], "rfft() (in module dpnp.fft)": [[113, "dpnp.fft.rfft"]], "rfft2() (in module dpnp.fft)": [[114, "dpnp.fft.rfft2"]], "rfftfreq() (in module dpnp.fft)": [[115, "dpnp.fft.rfftfreq"]], "rfftn() (in module dpnp.fft)": [[116, "dpnp.fft.rfftn"]], "fill_diagonal() (in module dpnp)": [[117, "dpnp.fill_diagonal"]], "finfo() (in module dpnp)": [[118, "dpnp.finfo"]], "__eq__() (dpnp.flatiter method)": [[119, "dpnp.flatiter.__eq__"]], "__ge__() (dpnp.flatiter method)": [[119, "dpnp.flatiter.__ge__"]], "__getitem__() (dpnp.flatiter method)": [[119, "dpnp.flatiter.__getitem__"]], "__gt__() (dpnp.flatiter method)": [[119, "dpnp.flatiter.__gt__"]], "__iter__() (dpnp.flatiter method)": [[119, "dpnp.flatiter.__iter__"]], "__le__() (dpnp.flatiter method)": [[119, "dpnp.flatiter.__le__"]], "__lt__() (dpnp.flatiter method)": [[119, "dpnp.flatiter.__lt__"]], "__ne__() (dpnp.flatiter method)": [[119, "dpnp.flatiter.__ne__"]], "__next__() (dpnp.flatiter method)": [[119, "dpnp.flatiter.__next__"]], "__setitem__() (dpnp.flatiter method)": [[119, "dpnp.flatiter.__setitem__"]], "flatiter (class in dpnp)": [[119, "dpnp.flatiter"]], "flip() (in module dpnp)": [[120, "dpnp.flip"]], "fliplr() (in module dpnp)": [[121, "dpnp.fliplr"]], "flipud() (in module dpnp)": [[122, "dpnp.flipud"]], "floor() (in module dpnp)": [[123, "dpnp.floor"]], "floor_divide() (in module dpnp)": [[124, "dpnp.floor_divide"]], "fmax() (in module dpnp)": [[125, "dpnp.fmax"]], "fmin() (in module dpnp)": [[126, "dpnp.fmin"]], "fmod() (in module dpnp)": [[127, "dpnp.fmod"]], "from_dlpack() (in module dpnp)": [[128, "dpnp.from_dlpack"]], "frombuffer() (in module dpnp)": [[129, "dpnp.frombuffer"]], "fromfile() (in module dpnp)": [[130, "dpnp.fromfile"]], "fromfunction() (in module dpnp)": [[131, "dpnp.fromfunction"]], "fromiter() (in module dpnp)": [[132, "dpnp.fromiter"]], "fromstring() (in module dpnp)": [[133, "dpnp.fromstring"]], "full() (in module dpnp)": [[134, "dpnp.full"]], "full_like() (in module dpnp)": [[135, "dpnp.full_like"]], "geomspace() (in module dpnp)": [[136, "dpnp.geomspace"]], "get_include() (in module dpnp)": [[137, "dpnp.get_include"]], "gradient() (in module dpnp)": [[138, "dpnp.gradient"]], "greater() (in module dpnp)": [[139, "dpnp.greater"]], "greater_equal() (in module dpnp)": [[140, "dpnp.greater_equal"]], "histogram() (in module dpnp)": [[141, "dpnp.histogram"]], "hstack() (in module dpnp)": [[142, "dpnp.hstack"]], "hypot() (in module dpnp)": [[143, "dpnp.hypot"]], "identity() (in module dpnp)": [[144, "dpnp.identity"]], "iinfo() (in module dpnp)": [[145, "dpnp.iinfo"]], "imag() (in module dpnp)": [[146, "dpnp.imag"]], "indices() (in module dpnp)": [[147, "dpnp.indices"]], "inner() (in module dpnp)": [[148, "dpnp.inner"]], "invert() (in module dpnp)": [[149, "dpnp.invert"]], "isclose() (in module dpnp)": [[150, "dpnp.isclose"]], "isfinite() (in module dpnp)": [[151, "dpnp.isfinite"]], "isinf() (in module dpnp)": [[152, "dpnp.isinf"]], "isnan() (in module dpnp)": [[153, "dpnp.isnan"]], "isscalar() (in module dpnp)": [[154, "dpnp.isscalar"]], "issubdtype() (in module dpnp)": [[155, "dpnp.issubdtype"]], "issubsctype() (in module dpnp)": [[156, "dpnp.issubsctype"]], "kron() (in module dpnp)": [[157, "dpnp.kron"]], "left_shift() (in module dpnp)": [[158, "dpnp.left_shift"]], "less() (in module dpnp)": [[159, "dpnp.less"]], "less_equal() (in module dpnp)": [[160, "dpnp.less_equal"]], "cholesky() (in module dpnp.linalg)": [[161, "dpnp.linalg.cholesky"]], "cond() (in module dpnp.linalg)": [[162, "dpnp.linalg.cond"]], "det() (in module dpnp.linalg)": [[163, "dpnp.linalg.det"]], "eig() (in module dpnp.linalg)": [[164, "dpnp.linalg.eig"]], "eigh() (in module dpnp.linalg)": [[165, "dpnp.linalg.eigh"]], "eigvals() (in module dpnp.linalg)": [[166, "dpnp.linalg.eigvals"]], "inv() (in module dpnp.linalg)": [[167, "dpnp.linalg.inv"]], "matrix_power() (in module dpnp.linalg)": [[168, "dpnp.linalg.matrix_power"]], "matrix_rank() (in module dpnp.linalg)": [[169, "dpnp.linalg.matrix_rank"]], "multi_dot() (in module dpnp.linalg)": [[170, "dpnp.linalg.multi_dot"]], "norm() (in module dpnp.linalg)": [[171, "dpnp.linalg.norm"]], "pinv() (in module dpnp.linalg)": [[172, "dpnp.linalg.pinv"]], "qr() (in module dpnp.linalg)": [[173, "dpnp.linalg.qr"]], "slogdet() (in module dpnp.linalg)": [[174, "dpnp.linalg.slogdet"]], "solve() (in module dpnp.linalg)": [[175, "dpnp.linalg.solve"]], "svd() (in module dpnp.linalg)": [[176, "dpnp.linalg.svd"]], "linspace() (in module dpnp)": [[177, "dpnp.linspace"]], "loadtxt() (in module dpnp)": [[178, "dpnp.loadtxt"]], "log() (in module dpnp)": [[179, "dpnp.log"]], "log10() (in module dpnp)": [[180, "dpnp.log10"]], "log1p() (in module dpnp)": [[181, "dpnp.log1p"]], "log2() (in module dpnp)": [[182, "dpnp.log2"]], "logaddexp() (in module dpnp)": [[183, "dpnp.logaddexp"]], "logical_and() (in module dpnp)": [[184, "dpnp.logical_and"]], "logical_not() (in module dpnp)": [[185, "dpnp.logical_not"]], "logical_or() (in module dpnp)": [[186, "dpnp.logical_or"]], "logical_xor() (in module dpnp)": [[187, "dpnp.logical_xor"]], "logspace() (in module dpnp)": [[188, "dpnp.logspace"]], "logsumexp() (in module dpnp)": [[189, "dpnp.logsumexp"]], "matmul() (in module dpnp)": [[190, "dpnp.matmul"]], "max() (in module dpnp)": [[191, "dpnp.max"]], "maximum() (in module dpnp)": [[192, "dpnp.maximum"]], "mean() (in module dpnp)": [[193, "dpnp.mean"]], "median() (in module dpnp)": [[194, "dpnp.median"]], "meshgrid() (in module dpnp)": [[195, "dpnp.meshgrid"]], "mgrid (in module dpnp)": [[196, "dpnp.mgrid"]], "min() (in module dpnp)": [[197, "dpnp.min"]], "minimum() (in module dpnp)": [[198, "dpnp.minimum"]], "mod() (in module dpnp)": [[199, "dpnp.mod"]], "modf() (in module dpnp)": [[200, "dpnp.modf"]], "moveaxis() (in module dpnp)": [[201, "dpnp.moveaxis"]], "multiply() (in module dpnp)": [[202, "dpnp.multiply"]], "nanargmax() (in module dpnp)": [[203, "dpnp.nanargmax"]], "nanargmin() (in module dpnp)": [[204, "dpnp.nanargmin"]], "nancumprod() (in module dpnp)": [[205, "dpnp.nancumprod"]], "nancumsum() (in module dpnp)": [[206, "dpnp.nancumsum"]], "nanmax() (in module dpnp)": [[207, "dpnp.nanmax"]], "nanmean() (in module dpnp)": [[208, "dpnp.nanmean"]], "nanmin() (in module dpnp)": [[209, "dpnp.nanmin"]], "nanprod() (in module dpnp)": [[210, "dpnp.nanprod"]], "nanstd() (in module dpnp)": [[211, "dpnp.nanstd"]], "nansum() (in module dpnp)": [[212, "dpnp.nansum"]], "nanvar() (in module dpnp)": [[213, "dpnp.nanvar"]], "ndarray (in module dpnp)": [[214, "dpnp.ndarray"]], "t (dpnp.ndarray property)": [[215, "dpnp.ndarray.T"]], "__abs__() (dpnp.ndarray method)": [[216, "dpnp.ndarray.__abs__"]], "__add__() (dpnp.ndarray method)": [[217, "dpnp.ndarray.__add__"]], "__and__() (dpnp.ndarray method)": [[218, "dpnp.ndarray.__and__"]], "__complex__() (dpnp.ndarray method)": [[219, "dpnp.ndarray.__complex__"]], "__copy__() (dpnp.ndarray method)": [[220, "dpnp.ndarray.__copy__"]], "__eq__() (dpnp.ndarray method)": [[221, "dpnp.ndarray.__eq__"]], "__float__() (dpnp.ndarray method)": [[222, "dpnp.ndarray.__float__"]], "__floordiv__() (dpnp.ndarray method)": [[223, "dpnp.ndarray.__floordiv__"]], "__ge__() (dpnp.ndarray method)": [[224, "dpnp.ndarray.__ge__"]], "__getitem__() (dpnp.ndarray method)": [[225, "dpnp.ndarray.__getitem__"]], "__gt__() (dpnp.ndarray method)": [[226, "dpnp.ndarray.__gt__"]], "__iadd__() (dpnp.ndarray method)": [[227, "dpnp.ndarray.__iadd__"]], "__iand__() (dpnp.ndarray method)": [[228, "dpnp.ndarray.__iand__"]], "__ifloordiv__() (dpnp.ndarray method)": [[229, "dpnp.ndarray.__ifloordiv__"]], "__ilshift__() (dpnp.ndarray method)": [[230, "dpnp.ndarray.__ilshift__"]], "__imod__() (dpnp.ndarray method)": [[231, "dpnp.ndarray.__imod__"]], "__imul__() (dpnp.ndarray method)": [[232, "dpnp.ndarray.__imul__"]], "__int__() (dpnp.ndarray method)": [[233, "dpnp.ndarray.__int__"]], "__invert__() (dpnp.ndarray method)": [[234, "dpnp.ndarray.__invert__"]], "__ior__() (dpnp.ndarray method)": [[235, "dpnp.ndarray.__ior__"]], "__ipow__() (dpnp.ndarray method)": [[236, "dpnp.ndarray.__ipow__"]], "__irshift__() (dpnp.ndarray method)": [[237, "dpnp.ndarray.__irshift__"]], "__isub__() (dpnp.ndarray method)": [[238, "dpnp.ndarray.__isub__"]], "__itruediv__() (dpnp.ndarray method)": [[239, "dpnp.ndarray.__itruediv__"]], "__ixor__() (dpnp.ndarray method)": [[240, "dpnp.ndarray.__ixor__"]], "__le__() (dpnp.ndarray method)": [[241, "dpnp.ndarray.__le__"]], "__len__() (dpnp.ndarray method)": [[242, "dpnp.ndarray.__len__"]], "__lshift__() (dpnp.ndarray method)": [[243, "dpnp.ndarray.__lshift__"]], "__lt__() (dpnp.ndarray method)": [[244, "dpnp.ndarray.__lt__"]], "__mod__() (dpnp.ndarray method)": [[245, "dpnp.ndarray.__mod__"]], "__mul__() (dpnp.ndarray method)": [[246, "dpnp.ndarray.__mul__"]], "__ne__() (dpnp.ndarray method)": [[247, "dpnp.ndarray.__ne__"]], "__neg__() (dpnp.ndarray method)": [[248, "dpnp.ndarray.__neg__"]], "__new__() (dpnp.ndarray method)": [[249, "dpnp.ndarray.__new__"]], "__or__() (dpnp.ndarray method)": [[250, "dpnp.ndarray.__or__"]], "__pos__() (dpnp.ndarray method)": [[251, "dpnp.ndarray.__pos__"]], "__pow__() (dpnp.ndarray method)": [[252, "dpnp.ndarray.__pow__"]], "__repr__() (dpnp.ndarray method)": [[253, "dpnp.ndarray.__repr__"]], "__rshift__() (dpnp.ndarray method)": [[254, "dpnp.ndarray.__rshift__"]], "__setitem__() (dpnp.ndarray method)": [[255, "dpnp.ndarray.__setitem__"]], "__str__() (dpnp.ndarray method)": [[256, "dpnp.ndarray.__str__"]], "__sub__() (dpnp.ndarray method)": [[257, "dpnp.ndarray.__sub__"]], "__truediv__() (dpnp.ndarray method)": [[258, "dpnp.ndarray.__truediv__"]], "__xor__() (dpnp.ndarray method)": [[259, "dpnp.ndarray.__xor__"]], "all() (dpnp.ndarray method)": [[260, "dpnp.ndarray.all"]], "any() (dpnp.ndarray method)": [[261, "dpnp.ndarray.any"]], "argmax() (dpnp.ndarray method)": [[262, "dpnp.ndarray.argmax"]], "argmin() (dpnp.ndarray method)": [[263, "dpnp.ndarray.argmin"]], "argsort() (dpnp.ndarray method)": [[264, "dpnp.ndarray.argsort"]], "astype() (dpnp.ndarray method)": [[265, "dpnp.ndarray.astype"]], "choose() (dpnp.ndarray method)": [[266, "dpnp.ndarray.choose"]], "clip() (dpnp.ndarray method)": [[267, "dpnp.ndarray.clip"]], "conj() (dpnp.ndarray method)": [[268, "dpnp.ndarray.conj"]], "conjugate() (dpnp.ndarray method)": [[269, "dpnp.ndarray.conjugate"]], "copy() (dpnp.ndarray method)": [[270, "dpnp.ndarray.copy"]], "cumsum() (dpnp.ndarray method)": [[271, "dpnp.ndarray.cumsum"]], "diagonal() (dpnp.ndarray method)": [[272, "dpnp.ndarray.diagonal"]], "dtype (dpnp.ndarray property)": [[273, "dpnp.ndarray.dtype"]], "fill() (dpnp.ndarray method)": [[274, "dpnp.ndarray.fill"]], "flags (dpnp.ndarray property)": [[275, "dpnp.ndarray.flags"]], "flat (dpnp.ndarray property)": [[276, "dpnp.ndarray.flat"]], "flatten() (dpnp.ndarray method)": [[277, "dpnp.ndarray.flatten"]], "imag (dpnp.ndarray property)": [[278, "dpnp.ndarray.imag"]], "item() (dpnp.ndarray method)": [[279, "dpnp.ndarray.item"]], "itemsize (dpnp.ndarray property)": [[280, "dpnp.ndarray.itemsize"]], "max() (dpnp.ndarray method)": [[281, "dpnp.ndarray.max"]], "mean() (dpnp.ndarray method)": [[282, "dpnp.ndarray.mean"]], "min() (dpnp.ndarray method)": [[283, "dpnp.ndarray.min"]], "nbytes (dpnp.ndarray property)": [[284, "dpnp.ndarray.nbytes"]], "ndim (dpnp.ndarray property)": [[285, "dpnp.ndarray.ndim"]], "nonzero() (dpnp.ndarray method)": [[286, "dpnp.ndarray.nonzero"]], "partition() (dpnp.ndarray method)": [[287, "dpnp.ndarray.partition"]], "prod() (dpnp.ndarray method)": [[288, "dpnp.ndarray.prod"]], "put() (dpnp.ndarray method)": [[289, "dpnp.ndarray.put"]], "ravel() (dpnp.ndarray method)": [[290, "dpnp.ndarray.ravel"]], "real (dpnp.ndarray property)": [[291, "dpnp.ndarray.real"]], "repeat() (dpnp.ndarray method)": [[292, "dpnp.ndarray.repeat"]], "reshape() (dpnp.ndarray method)": [[293, "dpnp.ndarray.reshape"]], "round() (dpnp.ndarray method)": [[294, "dpnp.ndarray.round"]], "shape (dpnp.ndarray property)": [[295, "dpnp.ndarray.shape"]], "size (dpnp.ndarray property)": [[296, "dpnp.ndarray.size"]], "sort() (dpnp.ndarray method)": [[297, "dpnp.ndarray.sort"]], "squeeze() (dpnp.ndarray method)": [[298, "dpnp.ndarray.squeeze"]], "std() (dpnp.ndarray method)": [[299, "dpnp.ndarray.std"]], "strides (dpnp.ndarray property)": [[300, "dpnp.ndarray.strides"]], "sum() (dpnp.ndarray method)": [[301, "dpnp.ndarray.sum"]], "swapaxes() (dpnp.ndarray method)": [[302, "dpnp.ndarray.swapaxes"]], "take() (dpnp.ndarray method)": [[303, "dpnp.ndarray.take"]], "transpose() (dpnp.ndarray method)": [[304, "dpnp.ndarray.transpose"]], "var() (dpnp.ndarray method)": [[305, "dpnp.ndarray.var"]], "negative() (in module dpnp)": [[306, "dpnp.negative"]], "nonzero() (in module dpnp)": [[307, "dpnp.nonzero"]], "not_equal() (in module dpnp)": [[308, "dpnp.not_equal"]], "ogrid (in module dpnp)": [[309, "dpnp.ogrid"]], "ones() (in module dpnp)": [[310, "dpnp.ones"]], "ones_like() (in module dpnp)": [[311, "dpnp.ones_like"]], "outer() (in module dpnp)": [[312, "dpnp.outer"]], "partition() (in module dpnp)": [[313, "dpnp.partition"]], "place() (in module dpnp)": [[314, "dpnp.place"]], "positive() (in module dpnp)": [[315, "dpnp.positive"]], "power() (in module dpnp)": [[316, "dpnp.power"]], "prod() (in module dpnp)": [[317, "dpnp.prod"]], "proj() (in module dpnp)": [[318, "dpnp.proj"]], "ptp() (in module dpnp)": [[319, "dpnp.ptp"]], "put() (in module dpnp)": [[320, "dpnp.put"]], "put_along_axis() (in module dpnp)": [[321, "dpnp.put_along_axis"]], "putmask() (in module dpnp)": [[322, "dpnp.putmask"]], "rad2deg() (in module dpnp)": [[323, "dpnp.rad2deg"]], "radians() (in module dpnp)": [[324, "dpnp.radians"]], "randomstate (class in dpnp.random)": [[325, "dpnp.random.RandomState"]], "__eq__() (dpnp.random.randomstate method)": [[325, "dpnp.random.RandomState.__eq__"]], "__ge__() (dpnp.random.randomstate method)": [[325, "dpnp.random.RandomState.__ge__"]], "__gt__() (dpnp.random.randomstate method)": [[325, "dpnp.random.RandomState.__gt__"]], "__le__() (dpnp.random.randomstate method)": [[325, "dpnp.random.RandomState.__le__"]], "__lt__() (dpnp.random.randomstate method)": [[325, "dpnp.random.RandomState.__lt__"]], "__ne__() (dpnp.random.randomstate method)": [[325, "dpnp.random.RandomState.__ne__"]], "get_state() (dpnp.random.randomstate method)": [[325, "dpnp.random.RandomState.get_state"]], "get_sycl_device() (dpnp.random.randomstate method)": [[325, "dpnp.random.RandomState.get_sycl_device"]], "get_sycl_queue() (dpnp.random.randomstate method)": [[325, "dpnp.random.RandomState.get_sycl_queue"]], "normal() (dpnp.random.randomstate method)": [[325, "dpnp.random.RandomState.normal"]], "rand() (dpnp.random.randomstate method)": [[325, "dpnp.random.RandomState.rand"]], "randint() (dpnp.random.randomstate method)": [[325, "dpnp.random.RandomState.randint"]], "randn() (dpnp.random.randomstate method)": [[325, "dpnp.random.RandomState.randn"]], "random_sample() (dpnp.random.randomstate method)": [[325, "dpnp.random.RandomState.random_sample"]], "standard_normal() (dpnp.random.randomstate method)": [[325, "dpnp.random.RandomState.standard_normal"]], "uniform() (dpnp.random.randomstate method)": [[325, "dpnp.random.RandomState.uniform"]], "beta() (in module dpnp.random)": [[326, "dpnp.random.beta"]], "binomial() (in module dpnp.random)": [[327, "dpnp.random.binomial"]], "bytes() (in module dpnp.random)": [[328, "dpnp.random.bytes"]], "chisquare() (in module dpnp.random)": [[329, "dpnp.random.chisquare"]], "choice() (in module dpnp.random)": [[330, "dpnp.random.choice"]], "dirichlet() (in module dpnp.random)": [[331, "dpnp.random.dirichlet"]], "exponential() (in module dpnp.random)": [[332, "dpnp.random.exponential"]], "f() (in module dpnp.random)": [[333, "dpnp.random.f"]], "gamma() (in module dpnp.random)": [[334, "dpnp.random.gamma"]], "geometric() (in module dpnp.random)": [[335, "dpnp.random.geometric"]], "gumbel() (in module dpnp.random)": [[336, "dpnp.random.gumbel"]], "hypergeometric() (in module dpnp.random)": [[337, "dpnp.random.hypergeometric"]], "laplace() (in module dpnp.random)": [[338, "dpnp.random.laplace"]], "logistic() (in module dpnp.random)": [[339, "dpnp.random.logistic"]], "lognormal() (in module dpnp.random)": [[340, "dpnp.random.lognormal"]], "logseries() (in module dpnp.random)": [[341, "dpnp.random.logseries"]], "multinomial() (in module dpnp.random)": [[342, "dpnp.random.multinomial"]], "multivariate_normal() (in module dpnp.random)": [[343, "dpnp.random.multivariate_normal"]], "negative_binomial() (in module dpnp.random)": [[344, "dpnp.random.negative_binomial"]], "noncentral_chisquare() (in module dpnp.random)": [[345, "dpnp.random.noncentral_chisquare"]], "noncentral_f() (in module dpnp.random)": [[346, "dpnp.random.noncentral_f"]], "normal() (in module dpnp.random)": [[347, "dpnp.random.normal"]], "pareto() (in module dpnp.random)": [[348, "dpnp.random.pareto"]], "permutation() (in module dpnp.random)": [[349, "dpnp.random.permutation"]], "poisson() (in module dpnp.random)": [[350, "dpnp.random.poisson"]], "power() (in module dpnp.random)": [[351, "dpnp.random.power"]], "rand() (in module dpnp.random)": [[352, "dpnp.random.rand"]], "randint() (in module dpnp.random)": [[353, "dpnp.random.randint"]], "randn() (in module dpnp.random)": [[354, "dpnp.random.randn"]], "random() (in module dpnp.random)": [[355, "dpnp.random.random"]], "random_integers() (in module dpnp.random)": [[356, "dpnp.random.random_integers"]], "random_sample() (in module dpnp.random)": [[357, "dpnp.random.random_sample"]], "ranf() (in module dpnp.random)": [[358, "dpnp.random.ranf"]], "rayleigh() (in module dpnp.random)": [[359, "dpnp.random.rayleigh"]], "sample() (in module dpnp.random)": [[360, "dpnp.random.sample"]], "seed() (in module dpnp.random)": [[361, "dpnp.random.seed"]], "shuffle() (in module dpnp.random)": [[362, "dpnp.random.shuffle"]], "standard_cauchy() (in module dpnp.random)": [[363, "dpnp.random.standard_cauchy"]], "standard_exponential() (in module dpnp.random)": [[364, "dpnp.random.standard_exponential"]], "standard_gamma() (in module dpnp.random)": [[365, "dpnp.random.standard_gamma"]], "standard_normal() (in module dpnp.random)": [[366, "dpnp.random.standard_normal"]], "standard_t() (in module dpnp.random)": [[367, "dpnp.random.standard_t"]], "triangular() (in module dpnp.random)": [[368, "dpnp.random.triangular"]], "uniform() (in module dpnp.random)": [[369, "dpnp.random.uniform"]], "vonmises() (in module dpnp.random)": [[370, "dpnp.random.vonmises"]], "wald() (in module dpnp.random)": [[371, "dpnp.random.wald"]], "weibull() (in module dpnp.random)": [[372, "dpnp.random.weibull"]], "zipf() (in module dpnp.random)": [[373, "dpnp.random.zipf"]], "ravel() (in module dpnp)": [[374, "dpnp.ravel"]], "real() (in module dpnp)": [[375, "dpnp.real"]], "reciprocal() (in module dpnp)": [[376, "dpnp.reciprocal"]], "reduce_hypot() (in module dpnp)": [[377, "dpnp.reduce_hypot"]], "remainder() (in module dpnp)": [[378, "dpnp.remainder"]], "repeat() (in module dpnp)": [[379, "dpnp.repeat"]], "reshape() (in module dpnp)": [[380, "dpnp.reshape"]], "result_type() (in module dpnp)": [[381, "dpnp.result_type"]], "right_shift() (in module dpnp)": [[382, "dpnp.right_shift"]], "rint() (in module dpnp)": [[383, "dpnp.rint"]], "roll() (in module dpnp)": [[384, "dpnp.roll"]], "rollaxis() (in module dpnp)": [[385, "dpnp.rollaxis"]], "round() (in module dpnp)": [[386, "dpnp.round"]], "row_stack() (in module dpnp)": [[387, "dpnp.row_stack"]], "rsqrt() (in module dpnp)": [[388, "dpnp.rsqrt"]], "searchsorted() (in module dpnp)": [[389, "dpnp.searchsorted"]], "select() (in module dpnp)": [[390, "dpnp.select"]], "shape() (in module dpnp)": [[391, "dpnp.shape"]], "sign() (in module dpnp)": [[392, "dpnp.sign"]], "signbit() (in module dpnp)": [[393, "dpnp.signbit"]], "sin() (in module dpnp)": [[394, "dpnp.sin"]], "sinh() (in module dpnp)": [[395, "dpnp.sinh"]], "sort() (in module dpnp)": [[396, "dpnp.sort"]], "sqrt() (in module dpnp)": [[397, "dpnp.sqrt"]], "square() (in module dpnp)": [[398, "dpnp.square"]], "squeeze() (in module dpnp)": [[399, "dpnp.squeeze"]], "stack() (in module dpnp)": [[400, "dpnp.stack"]], "std() (in module dpnp)": [[401, "dpnp.std"]], "subtract() (in module dpnp)": [[402, "dpnp.subtract"]], "sum() (in module dpnp)": [[403, "dpnp.sum"]], "swapaxes() (in module dpnp)": [[404, "dpnp.swapaxes"]], "take() (in module dpnp)": [[405, "dpnp.take"]], "take_along_axis() (in module dpnp)": [[406, "dpnp.take_along_axis"]], "tan() (in module dpnp)": [[407, "dpnp.tan"]], "tanh() (in module dpnp)": [[408, "dpnp.tanh"]], "tensordot() (in module dpnp)": [[409, "dpnp.tensordot"]], "tile() (in module dpnp)": [[410, "dpnp.tile"]], "trace() (in module dpnp)": [[411, "dpnp.trace"]], "transpose() (in module dpnp)": [[412, "dpnp.transpose"]], "trapz() (in module dpnp)": [[413, "dpnp.trapz"]], "tri() (in module dpnp)": [[414, "dpnp.tri"]], "tril() (in module dpnp)": [[415, "dpnp.tril"]], "tril_indices() (in module dpnp)": [[416, "dpnp.tril_indices"]], "tril_indices_from() (in module dpnp)": [[417, "dpnp.tril_indices_from"]], "triu() (in module dpnp)": [[418, "dpnp.triu"]], "triu_indices() (in module dpnp)": [[419, "dpnp.triu_indices"]], "triu_indices_from() (in module dpnp)": [[420, "dpnp.triu_indices_from"]], "true_divide() (in module dpnp)": [[421, "dpnp.true_divide"]], "trunc() (in module dpnp)": [[422, "dpnp.trunc"]], "unique() (in module dpnp)": [[423, "dpnp.unique"]], "unwrap() (in module dpnp)": [[424, "dpnp.unwrap"]], "vander() (in module dpnp)": [[425, "dpnp.vander"]], "var() (in module dpnp)": [[426, "dpnp.var"]], "vdot() (in module dpnp)": [[427, "dpnp.vdot"]], "vstack() (in module dpnp)": [[428, "dpnp.vstack"]], "where() (in module dpnp)": [[429, "dpnp.where"]], "zeros() (in module dpnp)": [[430, "dpnp.zeros"]], "zeros_like() (in module dpnp)": [[431, "dpnp.zeros_like"]], "dpnp.random": [[442, "module-dpnp.random"]]}})