Search.setIndex({"docnames": ["dpctl", "dpnp_backend_api", "index", "overview", "quick_start_guide", "reference/binary", "reference/comparison", "reference/creation", "reference/dtype", "reference/dtypes_table", "reference/fft", "reference/generated/dpnp.abs", "reference/generated/dpnp.absolute", "reference/generated/dpnp.add", "reference/generated/dpnp.all", "reference/generated/dpnp.allclose", "reference/generated/dpnp.amax", "reference/generated/dpnp.amin", "reference/generated/dpnp.any", "reference/generated/dpnp.arange", "reference/generated/dpnp.arccos", "reference/generated/dpnp.arccosh", "reference/generated/dpnp.arcsin", "reference/generated/dpnp.arcsinh", "reference/generated/dpnp.arctan", "reference/generated/dpnp.arctan2", "reference/generated/dpnp.arctanh", "reference/generated/dpnp.argmax", "reference/generated/dpnp.argmin", "reference/generated/dpnp.argsort", "reference/generated/dpnp.around", "reference/generated/dpnp.array", "reference/generated/dpnp.array_equal", "reference/generated/dpnp.asanyarray", "reference/generated/dpnp.asarray", "reference/generated/dpnp.ascontiguousarray", "reference/generated/dpnp.asfarray", "reference/generated/dpnp.asfortranarray", "reference/generated/dpnp.asnumpy", "reference/generated/dpnp.atleast_1d", "reference/generated/dpnp.atleast_2d", "reference/generated/dpnp.atleast_3d", "reference/generated/dpnp.average", "reference/generated/dpnp.bincount", "reference/generated/dpnp.bitwise_and", "reference/generated/dpnp.bitwise_not", "reference/generated/dpnp.bitwise_or", "reference/generated/dpnp.bitwise_xor", "reference/generated/dpnp.broadcast_to", "reference/generated/dpnp.cbrt", "reference/generated/dpnp.ceil", "reference/generated/dpnp.choose", "reference/generated/dpnp.concatenate", "reference/generated/dpnp.conj", "reference/generated/dpnp.conjugate", "reference/generated/dpnp.convolve", "reference/generated/dpnp.copy", "reference/generated/dpnp.copysign", "reference/generated/dpnp.copyto", "reference/generated/dpnp.correlate", "reference/generated/dpnp.cos", "reference/generated/dpnp.cosh", "reference/generated/dpnp.count_nonzero", "reference/generated/dpnp.cov", "reference/generated/dpnp.cross", "reference/generated/dpnp.cumprod", "reference/generated/dpnp.cumsum", "reference/generated/dpnp.deg2rad", "reference/generated/dpnp.degrees", "reference/generated/dpnp.diag", "reference/generated/dpnp.diag_indices", "reference/generated/dpnp.diag_indices_from", "reference/generated/dpnp.diagflat", "reference/generated/dpnp.diagonal", "reference/generated/dpnp.diff", "reference/generated/dpnp.divide", "reference/generated/dpnp.dot", "reference/generated/dpnp.dpnp_array.dpnp_array", "reference/generated/dpnp.dtype", "reference/generated/dpnp.ediff1d", "reference/generated/dpnp.einsum", "reference/generated/dpnp.einsum_path", "reference/generated/dpnp.empty", "reference/generated/dpnp.empty_like", "reference/generated/dpnp.equal", "reference/generated/dpnp.erf", "reference/generated/dpnp.exp", "reference/generated/dpnp.exp2", "reference/generated/dpnp.expand_dims", "reference/generated/dpnp.expm1", "reference/generated/dpnp.extract", "reference/generated/dpnp.eye", "reference/generated/dpnp.fabs", "reference/generated/dpnp.fft.fft", "reference/generated/dpnp.fft.fft2", "reference/generated/dpnp.fft.fftfreq", "reference/generated/dpnp.fft.fftn", "reference/generated/dpnp.fft.fftshift", "reference/generated/dpnp.fft.hfft", "reference/generated/dpnp.fft.ifft", "reference/generated/dpnp.fft.ifft2", "reference/generated/dpnp.fft.ifftn", "reference/generated/dpnp.fft.ifftshift", "reference/generated/dpnp.fft.ihfft", "reference/generated/dpnp.fft.irfft", "reference/generated/dpnp.fft.irfft2", "reference/generated/dpnp.fft.irfftn", "reference/generated/dpnp.fft.rfft", "reference/generated/dpnp.fft.rfft2", "reference/generated/dpnp.fft.rfftfreq", "reference/generated/dpnp.fft.rfftn", "reference/generated/dpnp.fill_diagonal", "reference/generated/dpnp.flatiter", "reference/generated/dpnp.flip", "reference/generated/dpnp.fliplr", "reference/generated/dpnp.flipud", "reference/generated/dpnp.floor", "reference/generated/dpnp.floor_divide", "reference/generated/dpnp.fmax", "reference/generated/dpnp.fmin", "reference/generated/dpnp.fmod", "reference/generated/dpnp.from_dlpack", "reference/generated/dpnp.frombuffer", "reference/generated/dpnp.fromfile", "reference/generated/dpnp.fromfunction", "reference/generated/dpnp.fromiter", "reference/generated/dpnp.fromstring", "reference/generated/dpnp.full", "reference/generated/dpnp.full_like", "reference/generated/dpnp.geomspace", "reference/generated/dpnp.get_include", "reference/generated/dpnp.gradient", "reference/generated/dpnp.greater", "reference/generated/dpnp.greater_equal", "reference/generated/dpnp.histogram", "reference/generated/dpnp.hstack", "reference/generated/dpnp.hypot", "reference/generated/dpnp.identity", "reference/generated/dpnp.indices", "reference/generated/dpnp.inner", "reference/generated/dpnp.invert", "reference/generated/dpnp.isclose", "reference/generated/dpnp.isfinite", "reference/generated/dpnp.isinf", "reference/generated/dpnp.isnan", "reference/generated/dpnp.isscalar", "reference/generated/dpnp.issubdtype", "reference/generated/dpnp.issubsctype", "reference/generated/dpnp.kron", "reference/generated/dpnp.left_shift", "reference/generated/dpnp.less", "reference/generated/dpnp.less_equal", "reference/generated/dpnp.linalg.cholesky", "reference/generated/dpnp.linalg.cond", "reference/generated/dpnp.linalg.det", "reference/generated/dpnp.linalg.eig", "reference/generated/dpnp.linalg.eigh", "reference/generated/dpnp.linalg.eigvals", "reference/generated/dpnp.linalg.inv", "reference/generated/dpnp.linalg.matrix_power", "reference/generated/dpnp.linalg.matrix_rank", "reference/generated/dpnp.linalg.multi_dot", "reference/generated/dpnp.linalg.norm", "reference/generated/dpnp.linalg.qr", "reference/generated/dpnp.linalg.svd", "reference/generated/dpnp.linspace", "reference/generated/dpnp.loadtxt", "reference/generated/dpnp.log", "reference/generated/dpnp.log10", "reference/generated/dpnp.log1p", "reference/generated/dpnp.log2", "reference/generated/dpnp.logical_and", "reference/generated/dpnp.logical_not", "reference/generated/dpnp.logical_or", "reference/generated/dpnp.logical_xor", "reference/generated/dpnp.logspace", "reference/generated/dpnp.matmul", "reference/generated/dpnp.max", "reference/generated/dpnp.maximum", "reference/generated/dpnp.mean", "reference/generated/dpnp.median", "reference/generated/dpnp.meshgrid", "reference/generated/dpnp.mgrid", "reference/generated/dpnp.min", "reference/generated/dpnp.minimum", "reference/generated/dpnp.mod", "reference/generated/dpnp.modf", "reference/generated/dpnp.moveaxis", "reference/generated/dpnp.multiply", "reference/generated/dpnp.nancumprod", "reference/generated/dpnp.nancumsum", "reference/generated/dpnp.nanprod", "reference/generated/dpnp.nansum", "reference/generated/dpnp.nanvar", "reference/generated/dpnp.ndarray", "reference/generated/dpnp.ndarray.T", "reference/generated/dpnp.ndarray.__abs__", "reference/generated/dpnp.ndarray.__add__", "reference/generated/dpnp.ndarray.__and__", "reference/generated/dpnp.ndarray.__complex__", "reference/generated/dpnp.ndarray.__copy__", "reference/generated/dpnp.ndarray.__eq__", "reference/generated/dpnp.ndarray.__float__", "reference/generated/dpnp.ndarray.__floordiv__", "reference/generated/dpnp.ndarray.__ge__", "reference/generated/dpnp.ndarray.__getitem__", "reference/generated/dpnp.ndarray.__gt__", "reference/generated/dpnp.ndarray.__iadd__", "reference/generated/dpnp.ndarray.__iand__", "reference/generated/dpnp.ndarray.__ifloordiv__", "reference/generated/dpnp.ndarray.__ilshift__", "reference/generated/dpnp.ndarray.__imod__", "reference/generated/dpnp.ndarray.__imul__", "reference/generated/dpnp.ndarray.__int__", "reference/generated/dpnp.ndarray.__invert__", "reference/generated/dpnp.ndarray.__ior__", "reference/generated/dpnp.ndarray.__ipow__", "reference/generated/dpnp.ndarray.__irshift__", "reference/generated/dpnp.ndarray.__isub__", "reference/generated/dpnp.ndarray.__itruediv__", "reference/generated/dpnp.ndarray.__ixor__", "reference/generated/dpnp.ndarray.__le__", "reference/generated/dpnp.ndarray.__len__", "reference/generated/dpnp.ndarray.__lshift__", "reference/generated/dpnp.ndarray.__lt__", "reference/generated/dpnp.ndarray.__mod__", "reference/generated/dpnp.ndarray.__mul__", "reference/generated/dpnp.ndarray.__ne__", "reference/generated/dpnp.ndarray.__neg__", "reference/generated/dpnp.ndarray.__new__", "reference/generated/dpnp.ndarray.__or__", "reference/generated/dpnp.ndarray.__pos__", "reference/generated/dpnp.ndarray.__pow__", "reference/generated/dpnp.ndarray.__repr__", "reference/generated/dpnp.ndarray.__rshift__", "reference/generated/dpnp.ndarray.__setitem__", "reference/generated/dpnp.ndarray.__str__", "reference/generated/dpnp.ndarray.__sub__", "reference/generated/dpnp.ndarray.__truediv__", "reference/generated/dpnp.ndarray.__xor__", "reference/generated/dpnp.ndarray.all", "reference/generated/dpnp.ndarray.any", "reference/generated/dpnp.ndarray.argmax", "reference/generated/dpnp.ndarray.argmin", "reference/generated/dpnp.ndarray.argsort", "reference/generated/dpnp.ndarray.astype", "reference/generated/dpnp.ndarray.choose", "reference/generated/dpnp.ndarray.conj", "reference/generated/dpnp.ndarray.conjugate", "reference/generated/dpnp.ndarray.copy", "reference/generated/dpnp.ndarray.cumsum", "reference/generated/dpnp.ndarray.diagonal", "reference/generated/dpnp.ndarray.dtype", "reference/generated/dpnp.ndarray.fill", "reference/generated/dpnp.ndarray.flags", "reference/generated/dpnp.ndarray.flat", "reference/generated/dpnp.ndarray.flatten", "reference/generated/dpnp.ndarray.item", "reference/generated/dpnp.ndarray.itemsize", "reference/generated/dpnp.ndarray.max", "reference/generated/dpnp.ndarray.mean", "reference/generated/dpnp.ndarray.min", "reference/generated/dpnp.ndarray.nbytes", "reference/generated/dpnp.ndarray.ndim", "reference/generated/dpnp.ndarray.nonzero", "reference/generated/dpnp.ndarray.partition", "reference/generated/dpnp.ndarray.prod", "reference/generated/dpnp.ndarray.put", "reference/generated/dpnp.ndarray.reshape", "reference/generated/dpnp.ndarray.round", "reference/generated/dpnp.ndarray.shape", "reference/generated/dpnp.ndarray.size", "reference/generated/dpnp.ndarray.squeeze", "reference/generated/dpnp.ndarray.std", "reference/generated/dpnp.ndarray.strides", "reference/generated/dpnp.ndarray.sum", "reference/generated/dpnp.ndarray.swapaxes", "reference/generated/dpnp.ndarray.take", "reference/generated/dpnp.ndarray.transpose", "reference/generated/dpnp.ndarray.var", "reference/generated/dpnp.negative", "reference/generated/dpnp.nonzero", "reference/generated/dpnp.not_equal", "reference/generated/dpnp.ogrid", "reference/generated/dpnp.ones", "reference/generated/dpnp.ones_like", "reference/generated/dpnp.outer", "reference/generated/dpnp.partition", "reference/generated/dpnp.place", "reference/generated/dpnp.positive", "reference/generated/dpnp.power", "reference/generated/dpnp.prod", "reference/generated/dpnp.proj", "reference/generated/dpnp.ptp", "reference/generated/dpnp.put", "reference/generated/dpnp.put_along_axis", "reference/generated/dpnp.putmask", "reference/generated/dpnp.rad2deg", "reference/generated/dpnp.radians", "reference/generated/dpnp.random.RandomState", "reference/generated/dpnp.random.beta", "reference/generated/dpnp.random.binomial", "reference/generated/dpnp.random.bytes", "reference/generated/dpnp.random.chisquare", "reference/generated/dpnp.random.choice", "reference/generated/dpnp.random.dirichlet", "reference/generated/dpnp.random.exponential", "reference/generated/dpnp.random.f", "reference/generated/dpnp.random.gamma", "reference/generated/dpnp.random.geometric", "reference/generated/dpnp.random.gumbel", "reference/generated/dpnp.random.hypergeometric", "reference/generated/dpnp.random.laplace", "reference/generated/dpnp.random.logistic", "reference/generated/dpnp.random.lognormal", "reference/generated/dpnp.random.logseries", "reference/generated/dpnp.random.multinomial", "reference/generated/dpnp.random.multivariate_normal", "reference/generated/dpnp.random.negative_binomial", "reference/generated/dpnp.random.noncentral_chisquare", "reference/generated/dpnp.random.noncentral_f", "reference/generated/dpnp.random.normal", "reference/generated/dpnp.random.pareto", "reference/generated/dpnp.random.permutation", "reference/generated/dpnp.random.poisson", "reference/generated/dpnp.random.power", "reference/generated/dpnp.random.rand", "reference/generated/dpnp.random.randint", "reference/generated/dpnp.random.randn", "reference/generated/dpnp.random.random", "reference/generated/dpnp.random.random_integers", "reference/generated/dpnp.random.random_sample", "reference/generated/dpnp.random.ranf", "reference/generated/dpnp.random.rayleigh", "reference/generated/dpnp.random.sample", "reference/generated/dpnp.random.seed", "reference/generated/dpnp.random.shuffle", "reference/generated/dpnp.random.standard_cauchy", "reference/generated/dpnp.random.standard_exponential", "reference/generated/dpnp.random.standard_gamma", "reference/generated/dpnp.random.standard_normal", "reference/generated/dpnp.random.standard_t", "reference/generated/dpnp.random.triangular", "reference/generated/dpnp.random.uniform", "reference/generated/dpnp.random.vonmises", "reference/generated/dpnp.random.wald", "reference/generated/dpnp.random.weibull", "reference/generated/dpnp.random.zipf", "reference/generated/dpnp.ravel", "reference/generated/dpnp.reciprocal", "reference/generated/dpnp.remainder", "reference/generated/dpnp.repeat", "reference/generated/dpnp.reshape", "reference/generated/dpnp.result_type", "reference/generated/dpnp.right_shift", "reference/generated/dpnp.rint", "reference/generated/dpnp.roll", "reference/generated/dpnp.rollaxis", "reference/generated/dpnp.round", "reference/generated/dpnp.searchsorted", "reference/generated/dpnp.select", "reference/generated/dpnp.shape", "reference/generated/dpnp.sign", "reference/generated/dpnp.signbit", "reference/generated/dpnp.sin", "reference/generated/dpnp.sinh", "reference/generated/dpnp.sort", "reference/generated/dpnp.sqrt", "reference/generated/dpnp.square", "reference/generated/dpnp.squeeze", "reference/generated/dpnp.stack", "reference/generated/dpnp.std", "reference/generated/dpnp.subtract", "reference/generated/dpnp.sum", "reference/generated/dpnp.swapaxes", "reference/generated/dpnp.take", "reference/generated/dpnp.take_along_axis", "reference/generated/dpnp.tan", "reference/generated/dpnp.tanh", "reference/generated/dpnp.tensordot", "reference/generated/dpnp.trace", "reference/generated/dpnp.transpose", "reference/generated/dpnp.trapz", "reference/generated/dpnp.tri", "reference/generated/dpnp.tril", "reference/generated/dpnp.tril_indices", "reference/generated/dpnp.tril_indices_from", "reference/generated/dpnp.triu", "reference/generated/dpnp.triu_indices", "reference/generated/dpnp.triu_indices_from", "reference/generated/dpnp.true_divide", "reference/generated/dpnp.trunc", "reference/generated/dpnp.unique", "reference/generated/dpnp.unwrap", "reference/generated/dpnp.vander", "reference/generated/dpnp.var", "reference/generated/dpnp.vdot", "reference/generated/dpnp.vstack", "reference/generated/dpnp.where", "reference/generated/dpnp.zeros", "reference/generated/dpnp.zeros_like", "reference/index", "reference/indexing", "reference/linalg", "reference/logic", "reference/manipulation", "reference/math", "reference/misc", "reference/ndarray", "reference/pad", "reference/polynomials", "reference/random", "reference/routines", "reference/sorting", "reference/special", "reference/statistics", "reference/ufunc"], "filenames": ["dpctl.rst", "dpnp_backend_api.rst", "index.rst", "overview.rst", "quick_start_guide.rst", "reference/binary.rst", "reference/comparison.rst", "reference/creation.rst", "reference/dtype.rst", "reference/dtypes_table.rst", "reference/fft.rst", "reference/generated/dpnp.abs.rst", "reference/generated/dpnp.absolute.rst", "reference/generated/dpnp.add.rst", "reference/generated/dpnp.all.rst", "reference/generated/dpnp.allclose.rst", "reference/generated/dpnp.amax.rst", "reference/generated/dpnp.amin.rst", "reference/generated/dpnp.any.rst", "reference/generated/dpnp.arange.rst", "reference/generated/dpnp.arccos.rst", "reference/generated/dpnp.arccosh.rst", "reference/generated/dpnp.arcsin.rst", "reference/generated/dpnp.arcsinh.rst", "reference/generated/dpnp.arctan.rst", "reference/generated/dpnp.arctan2.rst", "reference/generated/dpnp.arctanh.rst", "reference/generated/dpnp.argmax.rst", "reference/generated/dpnp.argmin.rst", "reference/generated/dpnp.argsort.rst", "reference/generated/dpnp.around.rst", "reference/generated/dpnp.array.rst", "reference/generated/dpnp.array_equal.rst", "reference/generated/dpnp.asanyarray.rst", "reference/generated/dpnp.asarray.rst", "reference/generated/dpnp.ascontiguousarray.rst", "reference/generated/dpnp.asfarray.rst", "reference/generated/dpnp.asfortranarray.rst", "reference/generated/dpnp.asnumpy.rst", "reference/generated/dpnp.atleast_1d.rst", "reference/generated/dpnp.atleast_2d.rst", "reference/generated/dpnp.atleast_3d.rst", "reference/generated/dpnp.average.rst", "reference/generated/dpnp.bincount.rst", "reference/generated/dpnp.bitwise_and.rst", "reference/generated/dpnp.bitwise_not.rst", "reference/generated/dpnp.bitwise_or.rst", "reference/generated/dpnp.bitwise_xor.rst", "reference/generated/dpnp.broadcast_to.rst", "reference/generated/dpnp.cbrt.rst", "reference/generated/dpnp.ceil.rst", "reference/generated/dpnp.choose.rst", "reference/generated/dpnp.concatenate.rst", "reference/generated/dpnp.conj.rst", "reference/generated/dpnp.conjugate.rst", "reference/generated/dpnp.convolve.rst", "reference/generated/dpnp.copy.rst", "reference/generated/dpnp.copysign.rst", "reference/generated/dpnp.copyto.rst", "reference/generated/dpnp.correlate.rst", "reference/generated/dpnp.cos.rst", "reference/generated/dpnp.cosh.rst", "reference/generated/dpnp.count_nonzero.rst", "reference/generated/dpnp.cov.rst", "reference/generated/dpnp.cross.rst", "reference/generated/dpnp.cumprod.rst", "reference/generated/dpnp.cumsum.rst", "reference/generated/dpnp.deg2rad.rst", "reference/generated/dpnp.degrees.rst", "reference/generated/dpnp.diag.rst", "reference/generated/dpnp.diag_indices.rst", "reference/generated/dpnp.diag_indices_from.rst", "reference/generated/dpnp.diagflat.rst", "reference/generated/dpnp.diagonal.rst", "reference/generated/dpnp.diff.rst", "reference/generated/dpnp.divide.rst", "reference/generated/dpnp.dot.rst", "reference/generated/dpnp.dpnp_array.dpnp_array.rst", "reference/generated/dpnp.dtype.rst", "reference/generated/dpnp.ediff1d.rst", "reference/generated/dpnp.einsum.rst", "reference/generated/dpnp.einsum_path.rst", "reference/generated/dpnp.empty.rst", "reference/generated/dpnp.empty_like.rst", "reference/generated/dpnp.equal.rst", "reference/generated/dpnp.erf.rst", "reference/generated/dpnp.exp.rst", "reference/generated/dpnp.exp2.rst", "reference/generated/dpnp.expand_dims.rst", "reference/generated/dpnp.expm1.rst", "reference/generated/dpnp.extract.rst", "reference/generated/dpnp.eye.rst", "reference/generated/dpnp.fabs.rst", "reference/generated/dpnp.fft.fft.rst", "reference/generated/dpnp.fft.fft2.rst", "reference/generated/dpnp.fft.fftfreq.rst", "reference/generated/dpnp.fft.fftn.rst", "reference/generated/dpnp.fft.fftshift.rst", "reference/generated/dpnp.fft.hfft.rst", "reference/generated/dpnp.fft.ifft.rst", "reference/generated/dpnp.fft.ifft2.rst", "reference/generated/dpnp.fft.ifftn.rst", "reference/generated/dpnp.fft.ifftshift.rst", "reference/generated/dpnp.fft.ihfft.rst", "reference/generated/dpnp.fft.irfft.rst", "reference/generated/dpnp.fft.irfft2.rst", "reference/generated/dpnp.fft.irfftn.rst", "reference/generated/dpnp.fft.rfft.rst", "reference/generated/dpnp.fft.rfft2.rst", "reference/generated/dpnp.fft.rfftfreq.rst", "reference/generated/dpnp.fft.rfftn.rst", "reference/generated/dpnp.fill_diagonal.rst", "reference/generated/dpnp.flatiter.rst", "reference/generated/dpnp.flip.rst", "reference/generated/dpnp.fliplr.rst", "reference/generated/dpnp.flipud.rst", "reference/generated/dpnp.floor.rst", "reference/generated/dpnp.floor_divide.rst", "reference/generated/dpnp.fmax.rst", "reference/generated/dpnp.fmin.rst", "reference/generated/dpnp.fmod.rst", "reference/generated/dpnp.from_dlpack.rst", "reference/generated/dpnp.frombuffer.rst", "reference/generated/dpnp.fromfile.rst", "reference/generated/dpnp.fromfunction.rst", "reference/generated/dpnp.fromiter.rst", "reference/generated/dpnp.fromstring.rst", "reference/generated/dpnp.full.rst", "reference/generated/dpnp.full_like.rst", "reference/generated/dpnp.geomspace.rst", "reference/generated/dpnp.get_include.rst", "reference/generated/dpnp.gradient.rst", "reference/generated/dpnp.greater.rst", "reference/generated/dpnp.greater_equal.rst", "reference/generated/dpnp.histogram.rst", "reference/generated/dpnp.hstack.rst", "reference/generated/dpnp.hypot.rst", "reference/generated/dpnp.identity.rst", "reference/generated/dpnp.indices.rst", "reference/generated/dpnp.inner.rst", "reference/generated/dpnp.invert.rst", "reference/generated/dpnp.isclose.rst", "reference/generated/dpnp.isfinite.rst", "reference/generated/dpnp.isinf.rst", "reference/generated/dpnp.isnan.rst", "reference/generated/dpnp.isscalar.rst", "reference/generated/dpnp.issubdtype.rst", "reference/generated/dpnp.issubsctype.rst", "reference/generated/dpnp.kron.rst", "reference/generated/dpnp.left_shift.rst", "reference/generated/dpnp.less.rst", "reference/generated/dpnp.less_equal.rst", "reference/generated/dpnp.linalg.cholesky.rst", "reference/generated/dpnp.linalg.cond.rst", "reference/generated/dpnp.linalg.det.rst", "reference/generated/dpnp.linalg.eig.rst", "reference/generated/dpnp.linalg.eigh.rst", "reference/generated/dpnp.linalg.eigvals.rst", "reference/generated/dpnp.linalg.inv.rst", "reference/generated/dpnp.linalg.matrix_power.rst", "reference/generated/dpnp.linalg.matrix_rank.rst", "reference/generated/dpnp.linalg.multi_dot.rst", "reference/generated/dpnp.linalg.norm.rst", "reference/generated/dpnp.linalg.qr.rst", "reference/generated/dpnp.linalg.svd.rst", "reference/generated/dpnp.linspace.rst", "reference/generated/dpnp.loadtxt.rst", "reference/generated/dpnp.log.rst", "reference/generated/dpnp.log10.rst", "reference/generated/dpnp.log1p.rst", "reference/generated/dpnp.log2.rst", "reference/generated/dpnp.logical_and.rst", "reference/generated/dpnp.logical_not.rst", "reference/generated/dpnp.logical_or.rst", "reference/generated/dpnp.logical_xor.rst", "reference/generated/dpnp.logspace.rst", "reference/generated/dpnp.matmul.rst", "reference/generated/dpnp.max.rst", "reference/generated/dpnp.maximum.rst", "reference/generated/dpnp.mean.rst", "reference/generated/dpnp.median.rst", "reference/generated/dpnp.meshgrid.rst", "reference/generated/dpnp.mgrid.rst", "reference/generated/dpnp.min.rst", "reference/generated/dpnp.minimum.rst", "reference/generated/dpnp.mod.rst", "reference/generated/dpnp.modf.rst", "reference/generated/dpnp.moveaxis.rst", "reference/generated/dpnp.multiply.rst", "reference/generated/dpnp.nancumprod.rst", "reference/generated/dpnp.nancumsum.rst", "reference/generated/dpnp.nanprod.rst", "reference/generated/dpnp.nansum.rst", "reference/generated/dpnp.nanvar.rst", "reference/generated/dpnp.ndarray.rst", "reference/generated/dpnp.ndarray.T.rst", "reference/generated/dpnp.ndarray.__abs__.rst", "reference/generated/dpnp.ndarray.__add__.rst", "reference/generated/dpnp.ndarray.__and__.rst", "reference/generated/dpnp.ndarray.__complex__.rst", "reference/generated/dpnp.ndarray.__copy__.rst", "reference/generated/dpnp.ndarray.__eq__.rst", "reference/generated/dpnp.ndarray.__float__.rst", "reference/generated/dpnp.ndarray.__floordiv__.rst", "reference/generated/dpnp.ndarray.__ge__.rst", "reference/generated/dpnp.ndarray.__getitem__.rst", "reference/generated/dpnp.ndarray.__gt__.rst", "reference/generated/dpnp.ndarray.__iadd__.rst", "reference/generated/dpnp.ndarray.__iand__.rst", "reference/generated/dpnp.ndarray.__ifloordiv__.rst", "reference/generated/dpnp.ndarray.__ilshift__.rst", "reference/generated/dpnp.ndarray.__imod__.rst", "reference/generated/dpnp.ndarray.__imul__.rst", "reference/generated/dpnp.ndarray.__int__.rst", "reference/generated/dpnp.ndarray.__invert__.rst", "reference/generated/dpnp.ndarray.__ior__.rst", "reference/generated/dpnp.ndarray.__ipow__.rst", "reference/generated/dpnp.ndarray.__irshift__.rst", "reference/generated/dpnp.ndarray.__isub__.rst", "reference/generated/dpnp.ndarray.__itruediv__.rst", "reference/generated/dpnp.ndarray.__ixor__.rst", "reference/generated/dpnp.ndarray.__le__.rst", "reference/generated/dpnp.ndarray.__len__.rst", "reference/generated/dpnp.ndarray.__lshift__.rst", "reference/generated/dpnp.ndarray.__lt__.rst", "reference/generated/dpnp.ndarray.__mod__.rst", "reference/generated/dpnp.ndarray.__mul__.rst", "reference/generated/dpnp.ndarray.__ne__.rst", "reference/generated/dpnp.ndarray.__neg__.rst", "reference/generated/dpnp.ndarray.__new__.rst", "reference/generated/dpnp.ndarray.__or__.rst", "reference/generated/dpnp.ndarray.__pos__.rst", "reference/generated/dpnp.ndarray.__pow__.rst", "reference/generated/dpnp.ndarray.__repr__.rst", "reference/generated/dpnp.ndarray.__rshift__.rst", "reference/generated/dpnp.ndarray.__setitem__.rst", "reference/generated/dpnp.ndarray.__str__.rst", "reference/generated/dpnp.ndarray.__sub__.rst", "reference/generated/dpnp.ndarray.__truediv__.rst", "reference/generated/dpnp.ndarray.__xor__.rst", "reference/generated/dpnp.ndarray.all.rst", "reference/generated/dpnp.ndarray.any.rst", "reference/generated/dpnp.ndarray.argmax.rst", "reference/generated/dpnp.ndarray.argmin.rst", "reference/generated/dpnp.ndarray.argsort.rst", "reference/generated/dpnp.ndarray.astype.rst", "reference/generated/dpnp.ndarray.choose.rst", "reference/generated/dpnp.ndarray.conj.rst", "reference/generated/dpnp.ndarray.conjugate.rst", "reference/generated/dpnp.ndarray.copy.rst", "reference/generated/dpnp.ndarray.cumsum.rst", "reference/generated/dpnp.ndarray.diagonal.rst", "reference/generated/dpnp.ndarray.dtype.rst", "reference/generated/dpnp.ndarray.fill.rst", "reference/generated/dpnp.ndarray.flags.rst", "reference/generated/dpnp.ndarray.flat.rst", "reference/generated/dpnp.ndarray.flatten.rst", "reference/generated/dpnp.ndarray.item.rst", "reference/generated/dpnp.ndarray.itemsize.rst", "reference/generated/dpnp.ndarray.max.rst", "reference/generated/dpnp.ndarray.mean.rst", "reference/generated/dpnp.ndarray.min.rst", "reference/generated/dpnp.ndarray.nbytes.rst", "reference/generated/dpnp.ndarray.ndim.rst", "reference/generated/dpnp.ndarray.nonzero.rst", "reference/generated/dpnp.ndarray.partition.rst", "reference/generated/dpnp.ndarray.prod.rst", "reference/generated/dpnp.ndarray.put.rst", "reference/generated/dpnp.ndarray.reshape.rst", "reference/generated/dpnp.ndarray.round.rst", "reference/generated/dpnp.ndarray.shape.rst", "reference/generated/dpnp.ndarray.size.rst", "reference/generated/dpnp.ndarray.squeeze.rst", "reference/generated/dpnp.ndarray.std.rst", "reference/generated/dpnp.ndarray.strides.rst", "reference/generated/dpnp.ndarray.sum.rst", "reference/generated/dpnp.ndarray.swapaxes.rst", "reference/generated/dpnp.ndarray.take.rst", "reference/generated/dpnp.ndarray.transpose.rst", "reference/generated/dpnp.ndarray.var.rst", "reference/generated/dpnp.negative.rst", "reference/generated/dpnp.nonzero.rst", "reference/generated/dpnp.not_equal.rst", "reference/generated/dpnp.ogrid.rst", "reference/generated/dpnp.ones.rst", "reference/generated/dpnp.ones_like.rst", "reference/generated/dpnp.outer.rst", "reference/generated/dpnp.partition.rst", "reference/generated/dpnp.place.rst", "reference/generated/dpnp.positive.rst", "reference/generated/dpnp.power.rst", "reference/generated/dpnp.prod.rst", "reference/generated/dpnp.proj.rst", "reference/generated/dpnp.ptp.rst", "reference/generated/dpnp.put.rst", "reference/generated/dpnp.put_along_axis.rst", "reference/generated/dpnp.putmask.rst", "reference/generated/dpnp.rad2deg.rst", "reference/generated/dpnp.radians.rst", "reference/generated/dpnp.random.RandomState.rst", "reference/generated/dpnp.random.beta.rst", "reference/generated/dpnp.random.binomial.rst", "reference/generated/dpnp.random.bytes.rst", "reference/generated/dpnp.random.chisquare.rst", "reference/generated/dpnp.random.choice.rst", "reference/generated/dpnp.random.dirichlet.rst", "reference/generated/dpnp.random.exponential.rst", "reference/generated/dpnp.random.f.rst", "reference/generated/dpnp.random.gamma.rst", "reference/generated/dpnp.random.geometric.rst", "reference/generated/dpnp.random.gumbel.rst", "reference/generated/dpnp.random.hypergeometric.rst", "reference/generated/dpnp.random.laplace.rst", "reference/generated/dpnp.random.logistic.rst", "reference/generated/dpnp.random.lognormal.rst", "reference/generated/dpnp.random.logseries.rst", "reference/generated/dpnp.random.multinomial.rst", "reference/generated/dpnp.random.multivariate_normal.rst", "reference/generated/dpnp.random.negative_binomial.rst", "reference/generated/dpnp.random.noncentral_chisquare.rst", "reference/generated/dpnp.random.noncentral_f.rst", "reference/generated/dpnp.random.normal.rst", "reference/generated/dpnp.random.pareto.rst", "reference/generated/dpnp.random.permutation.rst", "reference/generated/dpnp.random.poisson.rst", "reference/generated/dpnp.random.power.rst", "reference/generated/dpnp.random.rand.rst", "reference/generated/dpnp.random.randint.rst", "reference/generated/dpnp.random.randn.rst", "reference/generated/dpnp.random.random.rst", "reference/generated/dpnp.random.random_integers.rst", "reference/generated/dpnp.random.random_sample.rst", "reference/generated/dpnp.random.ranf.rst", "reference/generated/dpnp.random.rayleigh.rst", "reference/generated/dpnp.random.sample.rst", "reference/generated/dpnp.random.seed.rst", "reference/generated/dpnp.random.shuffle.rst", "reference/generated/dpnp.random.standard_cauchy.rst", "reference/generated/dpnp.random.standard_exponential.rst", "reference/generated/dpnp.random.standard_gamma.rst", "reference/generated/dpnp.random.standard_normal.rst", "reference/generated/dpnp.random.standard_t.rst", "reference/generated/dpnp.random.triangular.rst", "reference/generated/dpnp.random.uniform.rst", "reference/generated/dpnp.random.vonmises.rst", "reference/generated/dpnp.random.wald.rst", "reference/generated/dpnp.random.weibull.rst", "reference/generated/dpnp.random.zipf.rst", "reference/generated/dpnp.ravel.rst", "reference/generated/dpnp.reciprocal.rst", "reference/generated/dpnp.remainder.rst", "reference/generated/dpnp.repeat.rst", "reference/generated/dpnp.reshape.rst", "reference/generated/dpnp.result_type.rst", "reference/generated/dpnp.right_shift.rst", "reference/generated/dpnp.rint.rst", "reference/generated/dpnp.roll.rst", "reference/generated/dpnp.rollaxis.rst", "reference/generated/dpnp.round.rst", "reference/generated/dpnp.searchsorted.rst", "reference/generated/dpnp.select.rst", "reference/generated/dpnp.shape.rst", "reference/generated/dpnp.sign.rst", "reference/generated/dpnp.signbit.rst", "reference/generated/dpnp.sin.rst", "reference/generated/dpnp.sinh.rst", "reference/generated/dpnp.sort.rst", "reference/generated/dpnp.sqrt.rst", "reference/generated/dpnp.square.rst", "reference/generated/dpnp.squeeze.rst", "reference/generated/dpnp.stack.rst", "reference/generated/dpnp.std.rst", "reference/generated/dpnp.subtract.rst", "reference/generated/dpnp.sum.rst", "reference/generated/dpnp.swapaxes.rst", "reference/generated/dpnp.take.rst", "reference/generated/dpnp.take_along_axis.rst", "reference/generated/dpnp.tan.rst", "reference/generated/dpnp.tanh.rst", "reference/generated/dpnp.tensordot.rst", "reference/generated/dpnp.trace.rst", "reference/generated/dpnp.transpose.rst", "reference/generated/dpnp.trapz.rst", "reference/generated/dpnp.tri.rst", "reference/generated/dpnp.tril.rst", "reference/generated/dpnp.tril_indices.rst", "reference/generated/dpnp.tril_indices_from.rst", "reference/generated/dpnp.triu.rst", "reference/generated/dpnp.triu_indices.rst", "reference/generated/dpnp.triu_indices_from.rst", "reference/generated/dpnp.true_divide.rst", "reference/generated/dpnp.trunc.rst", "reference/generated/dpnp.unique.rst", "reference/generated/dpnp.unwrap.rst", "reference/generated/dpnp.vander.rst", "reference/generated/dpnp.var.rst", "reference/generated/dpnp.vdot.rst", "reference/generated/dpnp.vstack.rst", "reference/generated/dpnp.where.rst", "reference/generated/dpnp.zeros.rst", "reference/generated/dpnp.zeros_like.rst", "reference/index.rst", "reference/indexing.rst", "reference/linalg.rst", "reference/logic.rst", "reference/manipulation.rst", "reference/math.rst", "reference/misc.rst", "reference/ndarray.rst", "reference/pad.rst", "reference/polynomials.rst", "reference/random.rst", "reference/routines.rst", "reference/sorting.rst", "reference/special.rst", "reference/statistics.rst", "reference/ufunc.rst"], "titles": ["Interplay with the Data Parallel Control Library", "C++ backend API Reference", "Data Parallel Extension for NumPy*", "Overview", "Quick Start Guide", "Binary Operations", "Comparison Table NumPy/ DPNP/ CuPy", "Array Creation Routines", "Data type routines", "Available array data types", "FFT Functions", "dpnp.abs", "dpnp.absolute", "dpnp.add", "dpnp.all", "dpnp.allclose", "dpnp.amax", "dpnp.amin", "dpnp.any", "dpnp.arange", "dpnp.arccos", "dpnp.arccosh", "dpnp.arcsin", "dpnp.arcsinh", "dpnp.arctan", "dpnp.arctan2", "dpnp.arctanh", "dpnp.argmax", "dpnp.argmin", "dpnp.argsort", "dpnp.around", "dpnp.array", "dpnp.array_equal", "dpnp.asanyarray", "dpnp.asarray", "dpnp.ascontiguousarray", "dpnp.asfarray", "dpnp.asfortranarray", "dpnp.asnumpy", "dpnp.atleast_1d", "dpnp.atleast_2d", "dpnp.atleast_3d", "dpnp.average", "dpnp.bincount", "dpnp.bitwise_and", "dpnp.bitwise_not", "dpnp.bitwise_or", "dpnp.bitwise_xor", "dpnp.broadcast_to", "dpnp.cbrt", "dpnp.ceil", "dpnp.choose", "dpnp.concatenate", "dpnp.conj", "dpnp.conjugate", "dpnp.convolve", "dpnp.copy", "dpnp.copysign", "dpnp.copyto", "dpnp.correlate", "dpnp.cos", "dpnp.cosh", "dpnp.count_nonzero", "dpnp.cov", "dpnp.cross", "dpnp.cumprod", "dpnp.cumsum", "dpnp.deg2rad", "dpnp.degrees", "dpnp.diag", "dpnp.diag_indices", "dpnp.diag_indices_from", "dpnp.diagflat", "dpnp.diagonal", "dpnp.diff", "dpnp.divide", "dpnp.dot", "dpnp.dpnp_array.dpnp_array", "dpnp.dtype", "dpnp.ediff1d", "dpnp.einsum", "dpnp.einsum_path", "dpnp.empty", "dpnp.empty_like", "dpnp.equal", "dpnp.erf", "dpnp.exp", "dpnp.exp2", "dpnp.expand_dims", "dpnp.expm1", "dpnp.extract", "dpnp.eye", "dpnp.fabs", "dpnp.fft.fft", "dpnp.fft.fft2", "dpnp.fft.fftfreq", "dpnp.fft.fftn", "dpnp.fft.fftshift", "dpnp.fft.hfft", "dpnp.fft.ifft", "dpnp.fft.ifft2", "dpnp.fft.ifftn", "dpnp.fft.ifftshift", "dpnp.fft.ihfft", "dpnp.fft.irfft", "dpnp.fft.irfft2", "dpnp.fft.irfftn", "dpnp.fft.rfft", "dpnp.fft.rfft2", "dpnp.fft.rfftfreq", "dpnp.fft.rfftn", "dpnp.fill_diagonal", "dpnp.flatiter", "dpnp.flip", "dpnp.fliplr", "dpnp.flipud", "dpnp.floor", "dpnp.floor_divide", "dpnp.fmax", "dpnp.fmin", "dpnp.fmod", "dpnp.from_dlpack", "dpnp.frombuffer", "dpnp.fromfile", "dpnp.fromfunction", "dpnp.fromiter", "dpnp.fromstring", "dpnp.full", "dpnp.full_like", "dpnp.geomspace", "dpnp.get_include", "dpnp.gradient", "dpnp.greater", "dpnp.greater_equal", "dpnp.histogram", "dpnp.hstack", "dpnp.hypot", "dpnp.identity", "dpnp.indices", "dpnp.inner", "dpnp.invert", "dpnp.isclose", "dpnp.isfinite", "dpnp.isinf", "dpnp.isnan", "dpnp.isscalar", "dpnp.issubdtype", "dpnp.issubsctype", "dpnp.kron", "dpnp.left_shift", "dpnp.less", "dpnp.less_equal", "dpnp.linalg.cholesky", "dpnp.linalg.cond", "dpnp.linalg.det", "dpnp.linalg.eig", "dpnp.linalg.eigh", "dpnp.linalg.eigvals", "dpnp.linalg.inv", "dpnp.linalg.matrix_power", "dpnp.linalg.matrix_rank", "dpnp.linalg.multi_dot", "dpnp.linalg.norm", "dpnp.linalg.qr", "dpnp.linalg.svd", "dpnp.linspace", "dpnp.loadtxt", "dpnp.log", "dpnp.log10", "dpnp.log1p", "dpnp.log2", "dpnp.logical_and", "dpnp.logical_not", "dpnp.logical_or", "dpnp.logical_xor", "dpnp.logspace", "dpnp.matmul", "dpnp.max", "dpnp.maximum", "dpnp.mean", "dpnp.median", "dpnp.meshgrid", "dpnp.mgrid", "dpnp.min", "dpnp.minimum", "dpnp.mod", "dpnp.modf", "dpnp.moveaxis", "dpnp.multiply", "dpnp.nancumprod", "dpnp.nancumsum", "dpnp.nanprod", "dpnp.nansum", "dpnp.nanvar", "dpnp.ndarray", "dpnp.ndarray.T", "dpnp.ndarray.__abs__", "dpnp.ndarray.__add__", "dpnp.ndarray.__and__", "dpnp.ndarray.__complex__", "dpnp.ndarray.__copy__", "dpnp.ndarray.__eq__", "dpnp.ndarray.__float__", "dpnp.ndarray.__floordiv__", "dpnp.ndarray.__ge__", "dpnp.ndarray.__getitem__", "dpnp.ndarray.__gt__", "dpnp.ndarray.__iadd__", "dpnp.ndarray.__iand__", "dpnp.ndarray.__ifloordiv__", "dpnp.ndarray.__ilshift__", "dpnp.ndarray.__imod__", "dpnp.ndarray.__imul__", "dpnp.ndarray.__int__", "dpnp.ndarray.__invert__", "dpnp.ndarray.__ior__", "dpnp.ndarray.__ipow__", "dpnp.ndarray.__irshift__", "dpnp.ndarray.__isub__", "dpnp.ndarray.__itruediv__", "dpnp.ndarray.__ixor__", "dpnp.ndarray.__le__", "dpnp.ndarray.__len__", "dpnp.ndarray.__lshift__", "dpnp.ndarray.__lt__", "dpnp.ndarray.__mod__", "dpnp.ndarray.__mul__", "dpnp.ndarray.__ne__", "dpnp.ndarray.__neg__", "dpnp.ndarray.__new__", "dpnp.ndarray.__or__", "dpnp.ndarray.__pos__", "dpnp.ndarray.__pow__", "dpnp.ndarray.__repr__", "dpnp.ndarray.__rshift__", "dpnp.ndarray.__setitem__", "dpnp.ndarray.__str__", "dpnp.ndarray.__sub__", "dpnp.ndarray.__truediv__", "dpnp.ndarray.__xor__", "dpnp.ndarray.all", "dpnp.ndarray.any", "dpnp.ndarray.argmax", "dpnp.ndarray.argmin", "dpnp.ndarray.argsort", "dpnp.ndarray.astype", "dpnp.ndarray.choose", "dpnp.ndarray.conj", "dpnp.ndarray.conjugate", "dpnp.ndarray.copy", "dpnp.ndarray.cumsum", "dpnp.ndarray.diagonal", "dpnp.ndarray.dtype", "dpnp.ndarray.fill", "dpnp.ndarray.flags", "dpnp.ndarray.flat", "dpnp.ndarray.flatten", "dpnp.ndarray.item", "dpnp.ndarray.itemsize", "dpnp.ndarray.max", "dpnp.ndarray.mean", "dpnp.ndarray.min", "dpnp.ndarray.nbytes", "dpnp.ndarray.ndim", "dpnp.ndarray.nonzero", "dpnp.ndarray.partition", "dpnp.ndarray.prod", "dpnp.ndarray.put", "dpnp.ndarray.reshape", "dpnp.ndarray.round", "dpnp.ndarray.shape", "dpnp.ndarray.size", "dpnp.ndarray.squeeze", "dpnp.ndarray.std", "dpnp.ndarray.strides", "dpnp.ndarray.sum", "dpnp.ndarray.swapaxes", "dpnp.ndarray.take", "dpnp.ndarray.transpose", "dpnp.ndarray.var", "dpnp.negative", "dpnp.nonzero", "dpnp.not_equal", "dpnp.ogrid", "dpnp.ones", "dpnp.ones_like", "dpnp.outer", "dpnp.partition", "dpnp.place", "dpnp.positive", "dpnp.power", "dpnp.prod", "dpnp.proj", "dpnp.ptp", "dpnp.put", "dpnp.put_along_axis", "dpnp.putmask", "dpnp.rad2deg", "dpnp.radians", "dpnp.random.RandomState", "dpnp.random.beta", "dpnp.random.binomial", "dpnp.random.bytes", "dpnp.random.chisquare", "dpnp.random.choice", "dpnp.random.dirichlet", "dpnp.random.exponential", "dpnp.random.f", "dpnp.random.gamma", "dpnp.random.geometric", "dpnp.random.gumbel", "dpnp.random.hypergeometric", "dpnp.random.laplace", "dpnp.random.logistic", "dpnp.random.lognormal", "dpnp.random.logseries", "dpnp.random.multinomial", "dpnp.random.multivariate_normal", "dpnp.random.negative_binomial", "dpnp.random.noncentral_chisquare", "dpnp.random.noncentral_f", "dpnp.random.normal", "dpnp.random.pareto", "dpnp.random.permutation", "dpnp.random.poisson", "dpnp.random.power", "dpnp.random.rand", "dpnp.random.randint", "dpnp.random.randn", "dpnp.random.random", "dpnp.random.random_integers", "dpnp.random.random_sample", "dpnp.random.ranf", "dpnp.random.rayleigh", "dpnp.random.sample", "dpnp.random.seed", "dpnp.random.shuffle", "dpnp.random.standard_cauchy", "dpnp.random.standard_exponential", "dpnp.random.standard_gamma", "dpnp.random.standard_normal", "dpnp.random.standard_t", "dpnp.random.triangular", "dpnp.random.uniform", "dpnp.random.vonmises", "dpnp.random.wald", "dpnp.random.weibull", "dpnp.random.zipf", "dpnp.ravel", "dpnp.reciprocal", "dpnp.remainder", "dpnp.repeat", "dpnp.reshape", "dpnp.result_type", "dpnp.right_shift", "dpnp.rint", "dpnp.roll", "dpnp.rollaxis", "dpnp.round", "dpnp.searchsorted", "dpnp.select", "dpnp.shape", "dpnp.sign", "dpnp.signbit", "dpnp.sin", "dpnp.sinh", "dpnp.sort", "dpnp.sqrt", "dpnp.square", "dpnp.squeeze", "dpnp.stack", "dpnp.std", "dpnp.subtract", "dpnp.sum", "dpnp.swapaxes", "dpnp.take", "dpnp.take_along_axis", "dpnp.tan", "dpnp.tanh", "dpnp.tensordot", "dpnp.trace", "dpnp.transpose", "dpnp.trapz", "dpnp.tri", "dpnp.tril", "dpnp.tril_indices", "dpnp.tril_indices_from", "dpnp.triu", "dpnp.triu_indices", "dpnp.triu_indices_from", "dpnp.true_divide", "dpnp.trunc", "dpnp.unique", "dpnp.unwrap", "dpnp.vander", "dpnp.var", "dpnp.vdot", "dpnp.vstack", "dpnp.where", "dpnp.zeros", "dpnp.zeros_like", "API Reference", "Array Indexing Routines", "Linear Algebra", "Logic Functions", "Array Manipulation Routines", "Mathematical Functions", "Miscellaneous routines", "Multi-Dimensional Array (ndarray)", "Padding", "Polynomials", "Random Sampling (<code class=\"docutils literal notranslate\"><span class=\"pre\">dpnp.random</span></code>)", "Routines", "Sorting, Searching, and Counting", "Special Functions", "Statistical Functions", "Universal Functions (ufunc)"], "terms": {"provid": [0, 6, 58, 77, 88, 299, 327, 330, 375, 390, 398, 416], "api": [0, 2, 3, 6, 78, 299, 321, 326, 327, 328, 329, 330, 331, 332, 334, 335, 340, 343, 373], "manag": 0, "specif": [0, 4, 78], "sycl": [0, 3, 299, 321, 326, 327, 328, 329, 330, 331, 332, 334, 335, 340, 343], "resourc": 0, "base": [0, 4, 78, 129, 164, 167, 168, 170, 175, 288, 290, 294, 296], "python": [0, 2, 3, 77, 78, 121, 257, 373, 408], "packag": [0, 3], "an": [0, 3, 4, 12, 14, 16, 17, 18, 19, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 43, 44, 45, 46, 47, 48, 49, 51, 52, 56, 70, 71, 77, 78, 79, 80, 81, 82, 83, 84, 88, 90, 111, 113, 114, 121, 123, 124, 125, 128, 130, 131, 135, 138, 140, 149, 154, 160, 162, 177, 178, 179, 184, 186, 187, 200, 244, 246, 249, 257, 259, 265, 267, 268, 270, 272, 274, 276, 277, 278, 283, 284, 285, 287, 288, 290, 293, 294, 296, 299, 301, 306, 307, 309, 318, 321, 326, 327, 328, 329, 330, 331, 332, 334, 335, 340, 343, 347, 351, 352, 353, 354, 356, 357, 360, 361, 362, 363, 366, 367, 368, 369, 370, 373, 374, 375, 376, 381, 383, 384, 385, 387, 388, 392, 398, 399, 400, 408], "below": [0, 4, 9, 78, 160, 162, 383, 387, 408], "demonstr": [0, 4, 78], "how": [0, 4, 78, 375], "extens": [0, 1, 3, 4, 9, 130, 401], "numpi": [0, 1, 3, 4, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 155, 156, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 244, 245, 247, 248, 252, 257, 267, 268, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 408, 412], "can": [0, 3, 4, 13, 15, 25, 44, 45, 46, 47, 57, 70, 75, 76, 77, 78, 84, 117, 120, 123, 132, 133, 136, 140, 149, 150, 151, 171, 173, 174, 178, 184, 185, 188, 242, 243, 280, 281, 282, 286, 289, 290, 299, 321, 326, 327, 328, 329, 330, 331, 332, 334, 335, 340, 343, 350, 352, 354, 372, 375, 388, 408], "easili": 0, "combin": [0, 78, 88], "devic": [0, 2, 3, 19, 31, 33, 34, 35, 36, 37, 77, 82, 83, 91, 121, 127, 128, 165, 284, 285, 299, 321, 326, 327, 328, 329, 330, 331, 332, 334, 335, 340, 343, 369, 399, 400], "interfac": 0, "dpctl": [0, 4, 12, 13, 14, 15, 18, 20, 21, 22, 23, 24, 25, 26, 30, 44, 45, 46, 47, 48, 50, 52, 53, 54, 57, 58, 60, 61, 75, 76, 77, 83, 84, 88, 90, 113, 114, 115, 116, 117, 120, 128, 132, 133, 135, 136, 140, 142, 143, 144, 149, 150, 151, 156, 167, 171, 172, 173, 174, 178, 179, 181, 184, 185, 187, 188, 280, 281, 282, 285, 286, 288, 289, 290, 292, 294, 299, 321, 326, 327, 328, 329, 330, 331, 332, 334, 335, 340, 343, 350, 353, 354, 355, 356, 357, 358, 362, 363, 364, 365, 367, 368, 369, 370, 372, 373, 374, 375, 377, 378, 381, 384, 387, 391, 398, 400], "liter": 0, "queue": [0, 299, 321, 326, 327, 328, 329, 330, 331, 332, 334, 335, 340, 343], "from": [0, 3, 27, 28, 29, 33, 34, 51, 52, 58, 67, 68, 77, 78, 87, 90, 121, 123, 125, 126, 135, 166, 181, 236, 246, 249, 272, 277, 283, 290, 295, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 330, 331, 333, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 352, 353, 360, 368, 369, 370, 375, 376, 393, 398, 412], "allow": [0, 77, 268, 408], "set": [0, 31, 51, 70, 77, 78, 82, 127, 160, 162, 235, 246, 255, 284, 285, 362, 363, 399, 400, 408], "input": [0, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 53, 54, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 72, 73, 74, 75, 76, 77, 79, 82, 83, 84, 85, 86, 87, 88, 89, 92, 104, 105, 106, 107, 108, 110, 113, 114, 115, 116, 117, 120, 127, 128, 131, 132, 133, 135, 136, 139, 140, 141, 142, 143, 144, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 162, 163, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 243, 256, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 321, 327, 343, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 390, 391, 393, 395, 398, 399, 400], "current": [0, 12, 13, 15, 20, 21, 22, 23, 24, 25, 26, 44, 45, 46, 47, 50, 57, 60, 61, 64, 65, 66, 75, 76, 77, 78, 79, 92, 116, 117, 120, 131, 136, 137, 139, 140, 149, 178, 184, 185, 186, 188, 189, 190, 191, 192, 245, 280, 289, 290, 292, 349, 350, 354, 355, 362, 363, 364, 365, 366, 370, 372, 377, 378, 379, 382, 391], "usabl": 0, "insid": 0, "context": 0, "": [0, 3, 4, 77, 78, 94, 96, 100, 101, 105, 106, 108, 110, 136, 160, 162, 164, 252, 299, 300, 301, 306, 307, 308, 310, 311, 312, 313, 314, 316, 318, 321, 322, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 408], "scope": [0, 4], "thi": [0, 16, 17, 30, 38, 56, 67, 70, 77, 78, 114, 115, 118, 119, 123, 130, 162, 185, 244, 245, 249, 253, 265, 268, 270, 297, 332, 334, 352, 375, 390, 396, 398], "wai": [0, 3, 4, 77, 123, 265], "arrai": [0, 2, 3, 4, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 96, 100, 101, 105, 106, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 148, 149, 150, 151, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 200, 236, 242, 243, 244, 245, 246, 249, 252, 253, 254, 256, 257, 258, 260, 262, 263, 265, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 318, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 412], "creation": [0, 78, 81, 401, 408, 412], "function": [0, 2, 3, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 37, 38, 42, 44, 45, 46, 47, 48, 50, 52, 53, 54, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 116, 117, 118, 119, 120, 123, 124, 127, 128, 130, 131, 132, 133, 135, 136, 139, 140, 141, 142, 143, 144, 149, 150, 151, 158, 161, 162, 165, 167, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 240, 241, 249, 268, 278, 279, 280, 281, 282, 284, 285, 286, 288, 289, 290, 292, 294, 297, 298, 299, 302, 304, 305, 315, 320, 336, 348, 349, 350, 351, 354, 355, 358, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 375, 377, 378, 379, 382, 384, 387, 390, 391, 395, 396, 398, 399, 400, 401, 408, 412], "dpnp": [0, 2, 3, 4, 401, 408, 412, 413, 416], "which": [0, 3, 4, 33, 34, 58, 77, 78, 88, 135, 152, 160, 162, 242, 243, 244, 279, 281, 294, 369, 370, 385, 388, 408], "i": [0, 3, 4, 6, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 120, 127, 128, 129, 131, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 149, 152, 153, 156, 158, 160, 161, 162, 163, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 200, 242, 243, 244, 245, 249, 256, 265, 268, 280, 281, 284, 285, 287, 289, 290, 291, 292, 293, 294, 298, 299, 300, 301, 303, 306, 307, 308, 309, 310, 311, 312, 313, 314, 318, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 384, 385, 387, 388, 391, 393, 395, 398, 399, 400, 408], "defin": [0, 77, 78, 244, 289, 408], "alloc": [0, 3, 4, 187, 299, 321, 326, 327, 328, 329, 330, 331, 332, 334, 340, 343, 369], "us": [0, 4, 13, 29, 44, 45, 46, 47, 70, 75, 77, 78, 84, 88, 116, 117, 123, 129, 130, 132, 133, 140, 149, 150, 151, 152, 165, 171, 173, 175, 181, 188, 200, 244, 245, 249, 280, 281, 282, 289, 290, 299, 302, 304, 305, 315, 320, 321, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 340, 343, 350, 352, 354, 372, 375, 376, 382, 388, 408], "import": [0, 3, 4, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 34, 35, 36, 37, 39, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 72, 75, 76, 77, 78, 79, 82, 83, 84, 85, 86, 87, 88, 89, 92, 113, 114, 115, 116, 117, 120, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 149, 150, 151, 156, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 249, 265, 278, 280, 281, 282, 283, 284, 285, 286, 289, 290, 291, 292, 294, 298, 324, 333, 337, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 381, 382, 383, 384, 387, 391, 392, 393, 394, 395, 398, 399, 400], "np": [0, 3, 4, 11, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 34, 35, 36, 37, 39, 42, 43, 44, 45, 46, 47, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 72, 75, 77, 78, 79, 82, 83, 84, 85, 86, 87, 88, 89, 92, 113, 114, 115, 116, 117, 120, 127, 128, 129, 131, 132, 133, 135, 136, 137, 139, 140, 141, 142, 143, 144, 149, 150, 151, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 242, 249, 253, 257, 265, 280, 281, 282, 283, 284, 285, 286, 289, 291, 292, 294, 298, 324, 333, 346, 347, 348, 349, 350, 351, 354, 355, 356, 357, 358, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 382, 383, 384, 387, 391, 392, 393, 394, 395, 399, 400], "device_context": 0, "opencl": 0, "gpu": [0, 3, 4], "x": [0, 3, 4, 11, 12, 14, 18, 20, 21, 22, 23, 24, 26, 29, 30, 31, 35, 37, 39, 45, 48, 49, 50, 53, 54, 56, 57, 59, 60, 61, 63, 64, 65, 66, 69, 77, 78, 79, 82, 83, 85, 86, 87, 88, 89, 90, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 112, 116, 117, 124, 127, 128, 129, 131, 139, 140, 142, 143, 144, 162, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 179, 181, 186, 187, 189, 190, 249, 257, 280, 281, 284, 285, 286, 288, 289, 292, 294, 317, 323, 348, 349, 351, 355, 356, 357, 358, 362, 363, 364, 365, 367, 368, 369, 373, 374, 375, 377, 378, 379, 382, 391, 392, 394, 398, 399, 400], "1": [0, 3, 4, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 29, 31, 33, 34, 35, 37, 39, 42, 43, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 83, 84, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 115, 116, 117, 120, 122, 125, 126, 128, 129, 131, 133, 134, 135, 137, 139, 141, 149, 150, 151, 153, 156, 158, 161, 162, 166, 167, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 242, 244, 249, 251, 253, 257, 265, 278, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 294, 298, 299, 301, 303, 304, 306, 308, 310, 312, 313, 314, 316, 317, 318, 321, 323, 324, 325, 326, 327, 329, 331, 332, 333, 334, 338, 340, 343, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 373, 374, 375, 377, 379, 380, 381, 382, 383, 384, 387, 391, 392, 393, 394, 395, 398, 399, 400, 408], "2": [0, 3, 4, 11, 12, 13, 19, 21, 23, 27, 28, 29, 31, 33, 34, 35, 36, 37, 39, 42, 44, 46, 48, 49, 50, 52, 53, 54, 55, 56, 58, 59, 60, 61, 63, 64, 65, 66, 69, 70, 72, 75, 76, 77, 78, 79, 83, 84, 85, 86, 87, 88, 91, 92, 94, 100, 105, 108, 113, 114, 115, 116, 117, 120, 131, 132, 133, 134, 135, 138, 139, 149, 150, 151, 153, 156, 158, 161, 162, 164, 165, 166, 167, 170, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 188, 189, 190, 191, 192, 242, 249, 253, 257, 265, 278, 281, 282, 283, 284, 285, 286, 290, 291, 292, 294, 298, 299, 303, 307, 311, 317, 323, 326, 328, 339, 341, 342, 345, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 361, 363, 364, 365, 367, 369, 370, 371, 372, 373, 374, 377, 378, 379, 381, 382, 383, 384, 387, 388, 391, 392, 393, 394, 395, 398, 399, 400], "3": [0, 3, 4, 6, 13, 19, 20, 25, 27, 28, 29, 31, 33, 34, 35, 36, 37, 39, 42, 44, 47, 48, 49, 52, 55, 56, 57, 58, 59, 62, 63, 64, 65, 66, 69, 70, 72, 75, 76, 77, 78, 79, 83, 84, 85, 86, 87, 89, 113, 114, 115, 116, 117, 120, 131, 134, 135, 136, 137, 139, 149, 164, 165, 166, 168, 169, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 188, 190, 191, 192, 242, 249, 257, 265, 278, 281, 282, 283, 285, 286, 290, 291, 292, 294, 299, 303, 307, 314, 317, 323, 326, 327, 328, 338, 342, 345, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 361, 363, 366, 367, 369, 370, 371, 372, 373, 374, 375, 379, 381, 382, 383, 384, 387, 392, 393, 394, 395, 398, 400], "sum": [0, 3, 4, 6, 13, 66, 76, 77, 134, 176, 190, 192, 250, 266, 301, 316, 318, 380, 408, 412], "For": [0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 156, 158, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 247, 248, 257, 267, 268, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 408], "more": [0, 3, 4, 31, 39, 78, 114, 115, 121, 135, 160, 161, 370, 384, 387, 408], "inform": [0, 35, 37, 77, 78, 254, 408, 412], "pleas": [0, 3, 408], "refer": [0, 2, 3, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 156, 158, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 240, 241, 247, 248, 257, 265, 267, 268, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 408], "document": [0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 156, 158, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 240, 241, 244, 247, 248, 257, 265, 266, 267, 268, 269, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 408], "time": [0, 13, 15, 25, 44, 46, 47, 57, 75, 76, 84, 117, 120, 132, 133, 136, 144, 149, 150, 151, 171, 173, 174, 178, 184, 185, 188, 282, 286, 290, 301, 316, 350, 354, 372], "def": 0, "run": [0, 4], "executor": 0, "size": [0, 6, 31, 52, 59, 63, 64, 77, 78, 129, 135, 162, 165, 175, 257, 258, 270, 284, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 327, 329, 330, 331, 332, 333, 334, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 369, 370, 371, 388, 395, 399], "test_typ": 0, "repetit": 0, "reshap": [0, 6, 13, 27, 28, 39, 69, 70, 75, 77, 88, 113, 120, 177, 183, 188, 242, 270, 278, 323, 356, 372, 408], "arang": [0, 6, 13, 27, 28, 39, 42, 43, 57, 68, 69, 70, 75, 77, 84, 86, 87, 89, 113, 120, 128, 129, 134, 165, 168, 169, 171, 172, 173, 174, 175, 177, 181, 183, 188, 242, 282, 285, 290, 294, 298, 323, 350, 353, 356, 372, 398, 400], "dtype": [0, 9, 12, 13, 19, 20, 21, 22, 23, 24, 25, 26, 31, 33, 34, 35, 36, 37, 44, 45, 46, 47, 50, 52, 53, 54, 57, 60, 61, 63, 70, 75, 77, 82, 83, 84, 91, 116, 117, 120, 125, 127, 128, 129, 131, 132, 133, 135, 136, 137, 138, 140, 142, 143, 144, 149, 150, 151, 164, 165, 167, 171, 172, 173, 174, 175, 178, 179, 184, 185, 188, 193, 245, 250, 266, 273, 275, 279, 280, 282, 284, 285, 289, 290, 291, 292, 299, 321, 327, 343, 350, 353, 354, 355, 362, 363, 364, 365, 367, 368, 370, 371, 372, 373, 377, 378, 380, 383, 391, 395, 399, 400, 408], "_": [0, 370], "rang": [0, 134, 293, 294, 318, 323, 370, 393, 412], "start_tim": 0, "perf_count": 0, "result": [0, 4, 11, 12, 14, 18, 44, 45, 46, 47, 64, 65, 66, 77, 78, 79, 92, 124, 131, 139, 140, 142, 143, 144, 149, 162, 171, 172, 173, 174, 186, 189, 190, 242, 243, 279, 286, 290, 299, 301, 331, 352, 353, 354, 373, 379, 408], "end_tim": 0, "append": [0, 6, 74, 88], "return": [0, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 42, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 60, 61, 63, 64, 65, 66, 70, 71, 73, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 88, 89, 90, 91, 111, 112, 113, 114, 115, 116, 117, 120, 121, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 154, 156, 157, 159, 160, 161, 162, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 181, 183, 184, 185, 186, 187, 188, 189, 190, 196, 197, 198, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 237, 238, 239, 240, 241, 242, 243, 244, 245, 248, 249, 250, 251, 252, 254, 255, 256, 257, 259, 260, 261, 264, 265, 266, 268, 269, 273, 274, 275, 278, 279, 280, 281, 282, 284, 285, 286, 287, 289, 290, 292, 299, 302, 321, 323, 326, 327, 328, 329, 330, 331, 332, 334, 335, 340, 343, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 377, 378, 379, 380, 381, 384, 385, 386, 387, 388, 389, 391, 396, 398, 399, 400, 408], "median": [0, 6], "get_dtyp": 0, "_dtypes_list": 0, "int32": [0, 9, 36, 78, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 122, 123, 124, 125, 126, 166, 299, 301, 309, 311, 316, 318, 324, 327, 343, 353], "int64": [0, 9, 78, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 122, 123, 124, 125, 126, 166, 353], "float32": [0, 36, 78, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 122, 123, 124, 125, 126, 166, 299, 321, 326, 328, 329, 331, 332, 334, 340, 343, 353], "select_default_devic": 0, "has_aspect_fp64": 0, "float64": [0, 36, 78, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 122, 123, 124, 125, 126, 166, 299, 300, 306, 307, 308, 310, 312, 313, 314, 321, 322, 325, 326, 328, 329, 331, 332, 333, 334, 339, 340, 341, 342, 343, 344, 345, 346, 347, 353, 383], "test_repetit": 0, "5": [0, 6, 13, 14, 19, 26, 27, 39, 42, 43, 44, 46, 47, 50, 52, 55, 58, 59, 62, 64, 65, 66, 69, 70, 75, 77, 79, 85, 113, 114, 115, 116, 117, 120, 129, 131, 134, 135, 136, 149, 156, 165, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 184, 187, 188, 242, 249, 281, 283, 284, 285, 290, 294, 299, 300, 301, 303, 306, 318, 322, 323, 324, 325, 328, 331, 346, 348, 349, 350, 352, 354, 355, 356, 357, 358, 362, 370, 373, 374, 375, 379, 381, 383, 384, 387, 391, 393, 394, 398, 399, 400], "type_nam": 0, "name": [0, 6, 78], "print": [0, 4, 31, 43, 55, 78, 82, 134, 236, 299, 318, 323, 392], "f": [0, 6, 35, 37, 77, 78, 82, 83, 91, 127, 128, 245, 249, 256, 284, 285, 320, 352, 399, 400], "test": [0, 2, 14, 15, 18, 142, 143, 144, 301, 412], "type": [0, 2, 3, 4, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 42, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 75, 76, 77, 78, 79, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 113, 114, 115, 116, 117, 120, 121, 122, 123, 124, 125, 126, 127, 128, 131, 132, 133, 135, 136, 140, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 154, 156, 157, 159, 160, 161, 162, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 242, 243, 244, 245, 249, 252, 256, 268, 278, 280, 281, 282, 284, 285, 286, 289, 290, 291, 292, 294, 298, 299, 300, 301, 303, 306, 307, 308, 309, 310, 311, 312, 313, 314, 318, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 381, 382, 384, 385, 387, 388, 391, 393, 395, 398, 399, 400, 401, 412], "each": [0, 12, 20, 21, 22, 23, 24, 26, 39, 43, 50, 52, 53, 54, 60, 61, 77, 78, 114, 115, 116, 117, 124, 135, 156, 157, 166, 181, 269, 270, 280, 289, 292, 301, 318, 362, 363, 364, 365, 367, 370, 377, 378, 385, 388, 391, 408], "64": [0, 4, 290, 358], "128": 0, "256": 0, "512": 0, "1024": 0, "2048": 0, "4096": 0, "time_numpi": 0, "result_numpi": 0, "time_dpnp": 0, "result_dpnp": 0, "verif": 0, "true": [0, 12, 13, 14, 15, 18, 20, 21, 22, 23, 24, 25, 26, 31, 32, 35, 37, 39, 44, 45, 46, 47, 50, 53, 54, 56, 57, 58, 60, 61, 63, 75, 77, 78, 84, 88, 90, 113, 114, 115, 116, 117, 120, 129, 132, 133, 134, 136, 140, 141, 142, 143, 144, 145, 146, 149, 150, 151, 160, 162, 164, 165, 167, 171, 172, 173, 174, 175, 177, 178, 179, 181, 183, 184, 185, 188, 240, 241, 245, 249, 266, 275, 280, 282, 289, 290, 291, 292, 304, 350, 352, 354, 355, 362, 363, 364, 365, 367, 368, 372, 373, 377, 378, 390, 391, 394, 398], "els": 0, "msg": 0, "n": [0, 4, 70, 71, 74, 78, 79, 88, 91, 93, 95, 96, 98, 99, 101, 103, 104, 106, 107, 109, 110, 111, 137, 160, 162, 181, 294, 301, 316, 318, 328, 338, 361, 368, 374, 375, 383, 385, 388, 394, 408], "4": [0, 13, 14, 19, 31, 39, 42, 44, 46, 52, 55, 58, 60, 64, 65, 66, 69, 70, 72, 75, 77, 78, 79, 82, 84, 87, 113, 117, 127, 129, 131, 132, 133, 134, 135, 136, 151, 165, 170, 171, 175, 176, 177, 178, 179, 180, 182, 183, 184, 187, 188, 189, 190, 191, 192, 249, 265, 278, 281, 283, 285, 290, 291, 294, 299, 300, 303, 323, 328, 344, 348, 350, 351, 352, 356, 357, 358, 362, 366, 367, 370, 371, 372, 373, 374, 375, 379, 381, 382, 384, 387, 394, 395, 398, 400], "3e": 0, "ratio": 0, "6": [0, 4, 13, 19, 27, 28, 39, 46, 47, 52, 58, 64, 65, 66, 68, 69, 70, 75, 77, 78, 79, 84, 89, 92, 113, 128, 135, 164, 165, 175, 189, 190, 242, 249, 257, 281, 285, 290, 298, 299, 316, 318, 323, 328, 348, 352, 356, 357, 358, 370, 372, 373, 374, 375, 379, 382, 384, 387, 393, 398, 400], "2f": 0, "__name__": 0, "__main__": 0, "try": [0, 4], "gpu_queu": 0, "get_sycl_devic": [0, 299], "print_device_info": 0, "except": [0, 4, 31, 33, 34, 35, 37, 52, 56, 58, 77, 88, 93, 99, 107, 113, 114, 115, 135, 187, 270, 352, 356, 357, 369, 370, 374], "importerror": 0, "data": [1, 3, 4, 12, 13, 14, 15, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 38, 42, 44, 45, 46, 47, 48, 49, 50, 53, 54, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 75, 76, 77, 78, 79, 84, 85, 86, 87, 88, 89, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 113, 114, 115, 116, 117, 120, 121, 123, 126, 131, 132, 133, 136, 140, 141, 142, 143, 144, 149, 150, 151, 156, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 245, 268, 278, 280, 281, 282, 286, 289, 290, 291, 292, 294, 295, 298, 299, 300, 301, 303, 306, 307, 308, 309, 310, 311, 312, 313, 314, 318, 321, 322, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 382, 384, 387, 391, 393, 395, 398, 401, 412], "parallel": [1, 3, 4, 9, 401], "overview": 2, "quick": [2, 3], "start": [2, 3, 19, 35, 37, 129, 165, 175, 357], "guid": [2, 3], "driver": 2, "interpret": [2, 33, 34, 56, 78, 122, 408], "instal": 2, "exampl": [2, 3, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 34, 35, 36, 37, 39, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 72, 75, 76, 77, 78, 79, 82, 83, 84, 85, 86, 87, 88, 89, 92, 113, 114, 115, 116, 117, 120, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 149, 150, 151, 156, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 236, 242, 249, 253, 257, 265, 268, 278, 280, 281, 282, 283, 284, 285, 286, 289, 290, 291, 292, 294, 298, 299, 300, 301, 303, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 381, 382, 383, 384, 387, 391, 392, 393, 394, 395, 398, 399, 400], "multi": [2, 77, 94, 96, 100, 101, 105, 106, 108, 110, 182, 243, 274, 283, 401], "dimension": [2, 4, 39, 55, 59, 70, 71, 72, 77, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 122, 125, 181, 182, 272, 283, 373, 401], "ndarrai": [2, 3, 6, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 73, 74, 75, 76, 77, 78, 79, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 113, 114, 115, 116, 117, 120, 131, 132, 133, 135, 136, 139, 140, 141, 142, 143, 144, 149, 150, 151, 153, 156, 157, 158, 161, 162, 163, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 280, 281, 282, 286, 287, 288, 289, 290, 292, 293, 294, 296, 298, 299, 321, 326, 327, 328, 329, 330, 331, 332, 334, 340, 343, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 388, 391, 393, 395, 398, 401], "univers": [2, 401, 408], "ufunc": [2, 401, 408], "routin": [2, 401, 408], "special": [2, 78, 85, 401, 412], "avail": [2, 3, 4, 78, 401, 408], "comparison": [2, 84, 132, 133, 150, 151, 282, 401, 412], "tabl": [2, 9, 162, 401], "cupi": [2, 401], "miscellan": [2, 401, 412], "c": [2, 4, 35, 37, 38, 77, 78, 82, 83, 91, 127, 128, 130, 166, 176, 245, 249, 256, 284, 285, 290, 348, 352, 399, 400], "backend": [2, 130, 302, 304, 305, 315, 320, 336], "The": [3, 4, 13, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 36, 37, 44, 45, 46, 47, 50, 52, 53, 54, 57, 58, 60, 61, 63, 75, 77, 78, 79, 84, 88, 93, 99, 107, 113, 116, 117, 120, 124, 132, 133, 135, 136, 137, 140, 149, 150, 151, 156, 157, 161, 162, 167, 171, 173, 178, 184, 185, 187, 188, 244, 249, 256, 265, 280, 282, 289, 290, 292, 299, 302, 304, 305, 315, 320, 321, 326, 327, 328, 329, 330, 331, 332, 334, 335, 340, 343, 350, 352, 353, 354, 355, 358, 361, 362, 364, 365, 370, 372, 373, 377, 378, 385, 386, 388, 389, 391, 398, 408, 412], "librari": [3, 4, 408], "implement": [3, 6, 121], "subset": [3, 369, 412], "execut": [3, 4, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33, 34, 42, 44, 45, 46, 47, 48, 50, 52, 53, 54, 57, 59, 60, 61, 62, 63, 64, 65, 66, 73, 74, 75, 76, 79, 80, 81, 82, 83, 84, 85, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 116, 117, 120, 124, 127, 128, 131, 132, 133, 135, 136, 139, 140, 141, 142, 143, 144, 149, 150, 151, 158, 165, 167, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 280, 281, 282, 284, 285, 286, 288, 289, 290, 294, 302, 304, 305, 315, 320, 336, 348, 349, 350, 351, 354, 355, 358, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 375, 377, 378, 379, 382, 384, 387, 391, 395, 398, 399, 400], "ani": [3, 6, 14, 15, 16, 17, 77, 78, 111, 299, 343, 367, 408], "drop": [3, 78], "replac": [3, 36, 304, 408], "core": [3, 78, 408], "numer": [3, 4, 78, 280, 289, 412], "being": [3, 78], "develop": [3, 4], "part": [3, 53, 54, 186, 292, 408], "intel": [3, 4], "ai": 3, "analyt": 3, "toolkit": 3, "distribut": [3, 4, 175, 299, 300, 301, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 330, 331, 333, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 412], "also": [3, 78, 88, 337, 408], "anaconda": 3, "cloud": 3, "page": [3, 412], "learn": [3, 4], "Being": 3, "mean": [3, 6, 42, 77, 162, 180, 256, 299, 312, 314, 317, 321, 340, 344, 345, 352, 371, 395, 408], "usag": [3, 4], "veri": [3, 181], "similar": [3, 33, 34, 77, 78, 129, 165, 175, 249, 299, 327], "class": [3, 77, 78, 79, 112, 138, 299, 327, 367, 368, 383, 412], "compat": [3, 352, 412], "altern": [3, 4, 176], "abov": [3, 384], "instanc": [3, 77, 181, 299, 321, 326, 327, 328, 329, 330, 331, 332, 334, 335, 340, 343], "creat": [3, 4, 31, 33, 34, 56, 70, 72, 77, 78, 121, 125, 249, 299, 321, 326, 327, 328, 329, 330, 331, 332, 334, 335, 340, 343, 408, 412], "ident": [3, 6, 78, 338], "one": [3, 4, 31, 36, 39, 55, 58, 59, 77, 78, 82, 84, 89, 93, 95, 98, 99, 103, 104, 107, 109, 114, 115, 127, 135, 162, 167, 169, 170, 181, 189, 249, 256, 258, 285, 292, 318, 369, 370, 385, 388, 399, 408], "kei": [3, 29, 77, 78, 112, 205, 235, 244, 366], "differ": [3, 74, 77, 78, 79, 114, 115, 157, 162, 176, 244, 249, 290, 372, 412], "memori": [3, 33, 34, 35, 37, 77, 78, 254, 256, 274, 352, 401], "default": [3, 12, 13, 14, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 42, 44, 45, 46, 47, 48, 50, 52, 53, 54, 56, 57, 59, 60, 61, 62, 63, 73, 74, 75, 77, 78, 79, 82, 83, 84, 91, 93, 99, 111, 116, 117, 120, 127, 128, 129, 132, 133, 135, 136, 138, 140, 142, 143, 144, 149, 150, 151, 160, 162, 165, 167, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 188, 193, 244, 249, 256, 280, 282, 284, 285, 287, 289, 290, 292, 293, 294, 299, 303, 321, 326, 327, 328, 329, 330, 331, 332, 334, 335, 337, 338, 340, 343, 350, 352, 354, 355, 358, 359, 360, 362, 363, 364, 365, 367, 368, 370, 371, 372, 373, 375, 377, 378, 380, 385, 388, 391, 395, 399, 400, 408], "system": [3, 4], "integr": [3, 4, 186, 290, 382], "discret": [3, 55, 59, 74, 79, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 299, 401], "otherwis": [3, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 42, 44, 45, 46, 47, 48, 50, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 73, 74, 75, 76, 77, 78, 79, 82, 83, 84, 85, 88, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 113, 114, 115, 116, 117, 120, 127, 128, 131, 132, 133, 135, 136, 139, 140, 141, 142, 143, 144, 149, 150, 151, 158, 165, 167, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 242, 243, 245, 256, 268, 280, 281, 282, 284, 285, 286, 288, 289, 290, 294, 299, 300, 301, 303, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 382, 384, 387, 391, 395, 398, 399, 400], "host": [3, 4, 299, 321, 326, 327, 328, 329, 330, 331, 332, 334, 340, 343], "do": [3, 4, 78, 301], "have": [3, 4, 32, 48, 78, 166, 187, 318, 408], "most": [3, 4, 78, 369], "manipul": [3, 70, 401, 412], "ar": [3, 4, 12, 13, 14, 15, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 39, 42, 44, 45, 46, 47, 49, 50, 52, 53, 54, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 73, 74, 75, 76, 77, 78, 79, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 113, 114, 115, 116, 117, 120, 122, 123, 124, 125, 126, 131, 132, 133, 135, 136, 138, 139, 140, 141, 142, 143, 144, 149, 150, 151, 152, 156, 157, 160, 162, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 264, 265, 279, 280, 281, 282, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 298, 299, 300, 301, 303, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 321, 322, 324, 325, 327, 330, 331, 333, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 354, 355, 356, 357, 358, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 382, 386, 389, 391, 392, 393, 395, 398, 408], "done": 3, "see": [3, 30, 77, 78, 121, 162, 244, 316, 358, 385, 386, 388, 389, 408], "complet": [3, 4, 408], "list": [3, 6, 9, 39, 52, 77, 78, 135, 244, 351, 353, 360, 370], "support": [3, 9, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 73, 74, 75, 76, 77, 78, 79, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 113, 114, 115, 116, 117, 120, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 149, 150, 151, 153, 156, 158, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 245, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 296, 298, 299, 300, 301, 303, 306, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 384, 387, 391, 393, 395, 398, 399, 400, 416], "along": [3, 4, 14, 16, 17, 18, 27, 28, 42, 52, 65, 66, 74, 77, 79, 113, 114, 115, 135, 139, 162, 177, 178, 179, 180, 183, 184, 189, 190, 193, 242, 243, 244, 250, 259, 261, 266, 267, 273, 275, 277, 279, 293, 294, 356, 357, 370, 371, 375, 376, 379, 380, 382, 385, 388, 395, 408], "limit": [3, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 37, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 120, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 149, 150, 151, 153, 156, 158, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 298, 299, 300, 301, 303, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 321, 322, 324, 325, 327, 330, 333, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 384, 387, 391, 393, 395, 398, 399, 400], "To": 4, "program": [4, 116], "beyond": [4, 356], "cpu": [4, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 42, 44, 45, 46, 47, 48, 50, 52, 53, 54, 57, 59, 60, 61, 62, 63, 64, 65, 66, 73, 74, 75, 76, 79, 80, 81, 82, 83, 84, 85, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 116, 117, 120, 127, 128, 131, 132, 133, 135, 136, 139, 140, 141, 142, 143, 144, 149, 150, 151, 158, 165, 167, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 280, 281, 282, 284, 285, 286, 288, 289, 290, 294, 348, 349, 350, 351, 354, 355, 358, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 375, 377, 378, 379, 382, 384, 387, 391, 395, 398, 399, 400], "you": [4, 408], "need": [4, 77, 130, 244], "appropri": [4, 130, 299, 327, 330, 408], "hardwar": 4, "work": [4, 16, 17, 30, 38, 67, 118, 119, 185, 297, 390, 396, 408], "fine": 4, "laptop": 4, "graphic": 4, "In": [4, 27, 28, 77, 152, 244, 294, 299, 343, 352, 375], "major": [4, 33, 34, 35, 37, 77, 245, 256], "case": [4, 27, 28, 164, 292, 352], "your": 4, "window": 4, "alreadi": [4, 34], "ha": [4, 44, 45, 46, 47, 78, 88, 98, 103, 124, 135, 140, 294, 357, 369, 370, 373, 374, 408], "all": [4, 6, 9, 15, 18, 32, 77, 78, 86, 87, 113, 114, 115, 152, 244, 247, 253, 265, 292, 301, 367, 369, 408], "necessari": [4, 39, 58, 352], "But": [4, 78], "want": 4, "up": [4, 78, 115], "date": [4, 77, 244], "alwai": [4, 33, 352], "updat": 4, "latest": [4, 121], "follow": [4, 78, 88, 408, 412], "instruct": 4, "step": [4, 19, 129, 165, 175], "8": [4, 13, 15, 39, 49, 58, 69, 70, 78, 113, 141, 164, 165, 175, 189, 290, 299, 323, 342, 356, 364, 375, 379, 382, 384, 387, 394, 398], "9": [4, 13, 39, 58, 62, 69, 70, 75, 77, 92, 117, 164, 176, 188, 257, 299, 301, 303, 323, 356, 367, 372, 379, 384, 387, 394, 398], "10": [4, 13, 21, 23, 27, 28, 56, 66, 70, 77, 78, 127, 129, 134, 149, 167, 168, 170, 175, 180, 188, 192, 268, 299, 301, 311, 323, 353, 354, 356, 358, 370, 384, 387, 398], "If": [4, 15, 36, 76, 77, 78, 88, 160, 161, 162, 179, 242, 243, 244, 245, 270, 299, 321, 343, 351, 352, 367, 373, 374, 408], "yet": [4, 6], "easiest": 4, "It": 4, "essenti": 4, "machin": 4, "optim": [4, 81], "includ": [4, 130, 175, 292, 299, 343], "anoth": [4, 58, 77, 121, 249, 267, 294], "vendor": 4, "too": 4, "manual": [4, 78], "shown": 4, "next": 4, "section": [4, 78, 408], "recommend": [4, 281], "org": 4, "channel": 4, "command": 4, "forg": 4, "pip": 4, "http": [4, 121], "pypi": 4, "simpl": [4, 174, 412], "These": [4, 78, 88, 408, 412], "its": [4, 6, 15, 30, 53, 54, 77, 93, 99, 136, 156, 157, 278, 336, 352, 358, 381, 408], "depend": [4, 156, 162, 360, 398], "control": 4, "requir": [4, 6, 31, 35, 37, 77, 78, 245], "compil": [4, 78, 130], "runtim": 4, "onemkl": 4, "befor": [4, 77, 114, 115, 265], "strongli": 4, "advis": 4, "version": [4, 77, 78, 255, 281], "activ": 4, "local": 4, "environ": 4, "env": 4, "And": [4, 70, 77, 245], "sourc": [4, 6, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400], "recip": 4, "finanli": 4, "setuptool": 4, "o": [4, 78], "On": 4, "linux": 4, "cython": 4, "dpcpp_linux": 4, "mkl": 4, "devel": 4, "dpcpp": 4, "tbb": 4, "onedpl": 4, "cmake": 4, "ninja": 4, "pytest": 4, "dpcpp_win": 4, "setup": 4, "py": 4, "g": [4, 77, 78, 274, 299], "dcmake_c_compil": 4, "path": 4, "icx": 4, "dcmake_cxx_compil": 4, "icpx": 4, "script": 4, "build_loc": 4, "suit": 4, "element": [4, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 30, 32, 43, 44, 45, 46, 47, 49, 50, 53, 54, 57, 58, 60, 61, 65, 66, 75, 77, 78, 79, 84, 86, 87, 89, 90, 92, 113, 114, 115, 116, 117, 118, 119, 120, 132, 133, 140, 141, 142, 143, 144, 149, 150, 151, 152, 158, 167, 168, 169, 170, 171, 172, 173, 174, 178, 179, 184, 185, 186, 188, 189, 190, 240, 241, 247, 248, 250, 252, 253, 256, 257, 258, 260, 262, 264, 265, 268, 269, 271, 273, 274, 277, 279, 280, 281, 282, 288, 289, 290, 291, 292, 294, 296, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 372, 373, 375, 377, 378, 384, 387, 390, 391, 392, 398, 408, 412], "asarrai": [4, 6, 33, 38], "y": [4, 35, 36, 37, 48, 56, 63, 64, 76, 77, 78, 88, 90, 124, 131, 179, 181, 186, 249, 268, 278, 281, 352, 367, 381, 382, 398], "locat": [4, 130, 310, 312], "same": [4, 13, 15, 16, 17, 25, 30, 32, 35, 37, 38, 44, 46, 47, 48, 57, 67, 75, 76, 77, 83, 84, 88, 90, 117, 118, 119, 120, 121, 128, 132, 133, 136, 149, 150, 151, 166, 171, 172, 173, 174, 178, 184, 185, 187, 188, 268, 282, 285, 286, 290, 294, 297, 299, 321, 327, 343, 350, 354, 356, 357, 367, 368, 369, 372, 376, 386, 389, 390, 396, 400], "shape": [4, 6, 27, 28, 31, 32, 35, 48, 59, 63, 64, 70, 77, 78, 82, 83, 88, 90, 113, 124, 127, 128, 158, 160, 164, 171, 172, 173, 174, 176, 177, 183, 187, 242, 243, 268, 272, 278, 284, 285, 294, 299, 308, 311, 316, 317, 322, 326, 327, 328, 329, 330, 331, 332, 334, 339, 340, 346, 352, 357, 367, 368, 369, 370, 375, 381, 388, 399, 400, 401, 412], "0": [4, 6, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 39, 43, 49, 50, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 68, 69, 70, 72, 73, 75, 77, 78, 79, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 95, 109, 113, 114, 115, 116, 117, 120, 128, 129, 131, 134, 137, 139, 142, 143, 144, 156, 158, 165, 166, 167, 168, 169, 170, 172, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 186, 187, 188, 189, 190, 193, 242, 244, 249, 251, 253, 257, 269, 273, 274, 275, 278, 279, 281, 283, 284, 285, 290, 292, 294, 298, 299, 301, 306, 308, 309, 310, 312, 313, 314, 316, 317, 318, 321, 323, 324, 325, 326, 329, 331, 332, 333, 334, 337, 340, 342, 343, 344, 349, 350, 351, 355, 356, 357, 358, 360, 361, 362, 364, 365, 368, 369, 370, 371, 372, 373, 374, 375, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 393, 395, 398, 399, 400], "expect": [4, 78], "comput": [4, 25, 30, 42, 44, 45, 46, 47, 50, 88, 92, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 116, 117, 134, 139, 140, 153, 154, 155, 157, 161, 162, 163, 171, 172, 173, 174, 179, 180, 185, 193, 350, 355, 358, 371, 373, 378, 379, 391, 395], "empti": [4, 6, 31, 77, 83, 127, 128, 179, 253, 284, 285, 399, 400], "found": [4, 408], "here": [6, 78], "correspond": [6, 27, 28, 77, 156, 252, 279, 299, 321, 326, 327, 328, 329, 330, 331, 332, 334, 335, 340, 343, 361, 408], "column": [6, 33, 34, 35, 37, 52, 77, 114, 115, 135, 156, 161, 245, 256, 385, 388], "v1": 6, "23": [6, 299], "v0": 6, "13": [6, 27, 28, 45, 70, 77, 78, 140, 190, 244], "0rc1": 6, "g05cfe3e90": 6, "v8": 6, "397": 6, "216": 6, "286": 6, "56": 6, "32": [6, 78, 379], "47": 6, "20": [6, 149, 301, 316], "16": [6, 44, 70, 78, 131, 188, 290, 377], "21": [6, 66, 78], "18": [6, 78, 79], "51": 6, "48": [6, 189], "total": [6, 77, 262], "545": 6, "327": 6, "415": 6, "ab": [6, 12, 92, 292], "absolut": [6, 11, 92], "add": [6, 78], "add_docstr": 6, "add_newdoc": 6, "add_newdoc_ufunc": 6, "allclos": [6, 32, 141, 164], "alltru": 6, "amax": [6, 17, 27, 178, 184], "amin": [6, 16, 28, 184], "angl": [6, 24, 25, 67, 68, 297, 298, 393], "apply_along_axi": 6, "apply_over_ax": 6, "arcco": [6, 21, 22, 24, 25, 60], "arccosh": [6, 20, 23, 26, 61], "arcsin": [6, 20, 23, 24, 25, 364], "arcsinh": [6, 21, 22, 26, 365], "arctan": [6, 20, 22, 25, 26, 377], "arctan2": [6, 24], "arctanh": [6, 21, 23, 24, 25, 378], "argmax": [6, 16, 28, 77, 408], "argmin": [6, 17, 27, 77, 408], "argpartit": [6, 29, 408], "argsort": [6, 77, 366, 381, 408], "argwher": 6, "around": [6, 77, 269, 294, 358], "array2str": 6, "array_equ": 6, "array_equiv": [6, 32], "array_repr": 6, "array_split": [6, 52], "array_str": 6, "asanyarrai": [6, 34, 37], "asarray_chkfinit": [6, 33, 34], "ascontiguousarrai": [6, 33, 34, 37], "asfarrai": [6, 33, 34], "asfortranarrai": [6, 33, 34, 35], "asmatrix": 6, "atleast_1d": [6, 88], "atleast_2d": [6, 39, 88], "atleast_3d": [6, 39, 88], "averag": [6, 77, 179, 260, 412], "bartlett": 6, "base_repr": 6, "binary_repr": 6, "bincount": 6, "bitwise_and": [6, 45, 46, 47, 140, 171], "bitwise_not": 6, "bitwise_or": [6, 44, 45, 47, 140, 173], "bitwise_xor": [6, 44, 45, 46, 140, 174], "blackman": 6, "block": [6, 52, 135, 370], "bmat": 6, "broadcast_arrai": 6, "broadcast_shap": 6, "broadcast_to": 6, "busday_count": 6, "busday_offset": 6, "byte_bound": 6, "can_cast": 6, "cbrt": 6, "ceil": [6, 30, 116, 117, 355, 358, 391], "choos": [6, 24, 25, 77, 408], "clip": [6, 294, 375, 408], "column_stack": [6, 52], "common_typ": 6, "compare_chararrai": 6, "compress": [6, 375, 408], "concaten": [6, 135, 370], "conj": [6, 77, 292], "conjug": [6, 53, 76, 77, 152, 156, 176, 247, 292], "convolv": [6, 59], "copi": [6, 31, 34, 35, 37, 39, 58, 77, 78, 181, 200, 245, 256, 257, 265, 268, 270, 287, 289, 299, 321, 326, 327, 328, 329, 330, 331, 332, 334, 340, 343, 352, 366, 369, 384, 387, 408], "copysign": [6, 280, 289], "copyto": [6, 77, 249], "corrcoef": [6, 63], "correl": [6, 412], "co": [6, 20, 61, 364, 377], "cosh": [6, 21, 60, 365, 378], "count_nonzero": [6, 281], "cov": [6, 317], "cross": [6, 59], "cumprod": [6, 189, 408], "cumproduct": 6, "cumsum": [6, 77, 190, 408], "datetime_as_str": 6, "datetime_data": 6, "deg2rad": [6, 297, 298, 393], "degre": [6, 67, 297, 298, 341, 393], "delet": 6, "deprec": 6, "deprecate_with_doc": 6, "diag": [6, 114, 115, 164], "diag_indic": [6, 71, 111], "diag_indices_from": [6, 70, 111], "diagflat": 6, "diagon": [6, 69, 70, 71, 72, 77, 91, 111, 137, 152, 380, 383, 384, 385, 386, 387, 388, 389, 408], "diff": [6, 79, 134], "digit": 6, "disp": 6, "divid": [6, 117, 120, 158, 185, 350, 390], "divmod": [6, 408], "dot": [6, 77, 80, 81, 139, 159, 161, 164, 176, 379, 396], "dsplit": [6, 52], "dstack": [6, 52], "ediff1d": 6, "einsum": [6, 81, 139, 176, 286, 379], "einsum_path": [6, 80], "empty_lik": [6, 31, 82, 128, 285, 400], "equal": [6, 14, 15, 18, 32, 52, 59, 63, 77, 117, 132, 133, 135, 141, 146, 150, 151, 158, 265, 282, 299, 309, 343, 350, 366, 369, 370, 385, 388], "exp": [6, 167, 169], "exp2": [6, 86], "expand_dim": [6, 27, 28], "expm1": [6, 86, 169], "extract": [6, 69], "ey": [6, 53, 54, 174, 178, 184, 361], "fab": 6, "fastcopyandtranspos": 6, "fill_diagon": 6, "find_common_typ": 6, "fix": [6, 78, 294], "flatnonzero": [6, 281], "flip": [6, 114, 115, 301], "fliplr": [6, 113, 115], "flipud": [6, 113, 114], "float_pow": 6, "floor": [6, 30, 50, 117, 350, 355, 358, 391], "floor_divid": [6, 120, 185, 350], "fmax": [6, 16, 17, 119, 178, 184, 290], "fmin": [6, 16, 17, 118, 178, 184, 290], "fmod": [6, 118, 119, 185, 290, 350], "format_float_posit": 6, "format_float_scientif": 6, "frexp": 6, "from_dlpack": 6, "frombuff": 6, "fromfil": 6, "fromfunct": [6, 33, 34], "fromit": [6, 33, 34], "frompyfunc": 6, "fromregex": 6, "fromstr": 6, "full": [6, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 156, 158, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 240, 241, 247, 248, 257, 265, 266, 267, 268, 269, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400], "full_lik": [6, 31, 83, 127, 285, 400], "gcd": 6, "genfromtxt": 6, "geomspac": [6, 165, 175], "get_array_wrap": 6, "get_includ": 6, "get_printopt": 6, "getbufs": 6, "geterr": 6, "geterrcal": 6, "geterrobj": 6, "gradient": 6, "greater": [6, 77, 84, 133, 150, 151, 160, 265, 282], "greater_equ": [6, 84, 132, 150, 151, 282], "ham": 6, "han": 6, "heavisid": 6, "histogram": [6, 412], "histogram2d": 6, "histogram_bin_edg": 6, "histogramdd": 6, "hsplit": [6, 52], "hstack": [6, 52], "hypot": 6, "i0": 6, "imag": [6, 408], "in1d": 6, "indic": [6, 16, 17, 27, 28, 29, 70, 71, 77, 78, 111, 242, 243, 244, 264, 267, 277, 281, 294, 295, 352, 359, 362, 363, 375, 376, 381, 385, 386, 388, 389], "info": 6, "inner": [6, 80, 81, 286], "insert": [6, 88, 359, 412], "interp": 6, "intersect1d": 6, "invert": [6, 45], "is_busdai": 6, "isclos": [6, 15], "iscomplex": 6, "iscomplexobj": 6, "isfinit": [6, 143, 144], "isfortran": 6, "isin": 6, "isinf": [6, 142, 144], "isnan": [6, 142, 143], "isnat": [6, 144], "isneginf": [6, 142, 143, 144], "isposinf": [6, 142, 143, 144], "isreal": 6, "isrealobj": 6, "isscalar": 6, "issctyp": 6, "issubclass_": 6, "issubdtyp": 6, "issubsctyp": 6, "iter": [6, 33, 34, 77, 112, 125, 255, 412], "ix_": 6, "kaiser": 6, "kron": 6, "lcm": 6, "ldexp": 6, "left_shift": [6, 354], "less": [6, 84, 132, 133, 151, 282, 351, 362, 363], "less_equ": [6, 84, 132, 133, 150, 282], "lexsort": [6, 29, 77, 244, 366], "linspac": [6, 19, 85, 129, 175, 181, 393], "load": [6, 166], "loadtxt": 6, "log": [6, 89, 129, 165, 170, 175, 314], "log10": [6, 167, 170], "log1p": [6, 89, 167, 170], "log2": [6, 167], "logaddexp": 6, "logaddexp2": 6, "logical_and": [6, 44, 172, 173, 174], "logical_not": [6, 45, 140, 171, 173, 174], "logical_or": [6, 46, 171, 172, 174], "logical_xor": [6, 47, 171, 172, 173], "logspac": [6, 129, 165], "lookfor": 6, "mask_indic": 6, "mat": 6, "matmul": [6, 164], "max": [6, 16, 27, 77, 160, 316, 408], "maximum": [6, 16, 17, 27, 28, 77, 118, 119, 177, 184, 242, 259, 290, 293], "maximum_sctyp": 6, "may_share_memori": 6, "meshgrid": [6, 182, 283], "min": [6, 17, 28, 77, 408], "min_scalar_typ": 6, "minimum": [6, 16, 17, 27, 28, 77, 118, 119, 178, 183, 243, 261, 290, 293], "mintypecod": 6, "mod": [6, 350], "modf": 6, "moveaxi": [6, 356, 357, 381], "msort": 6, "multipli": 6, "nan_to_num": 6, "nanargmax": 6, "nanargmin": 6, "nancumprod": [6, 190], "nancumsum": 6, "nanmax": [6, 16, 17, 178, 184], "nanmean": [6, 179, 371, 395], "nanmedian": 6, "nanmin": [6, 16, 17, 184], "nanpercentil": 6, "nanprod": 6, "nanquantil": 6, "nanstd": [6, 179, 371, 395], "nansum": 6, "nanvar": [6, 179, 371, 395], "ndim": [6, 31, 35, 37, 39, 63, 70, 77, 78, 244, 284, 399], "neg": [6, 14, 18, 43, 88, 142, 143, 144, 289, 290, 318, 367, 375], "nested_it": 6, "nextaft": 6, "nonzero": [6, 77, 398, 408], "not_equ": [6, 84, 132, 133, 150, 151], "obj2sctyp": 6, "ones": [6, 31, 35, 37, 75, 82, 83, 84, 88, 91, 127, 128, 136, 137, 176, 191, 285, 353, 357, 381, 383, 399, 400], "ones_lik": [6, 31, 83, 128, 284, 400], "outer": [6, 80, 81, 148], "packbit": 6, "pad": [6, 78], "partit": [6, 77, 299, 321, 326, 327, 328, 329, 330, 331, 332, 334, 335, 340, 343, 366, 408], "percentil": [6, 180], "piecewis": 6, "place": [6, 77, 242, 243, 294, 336, 352, 408], "poli": 6, "polyadd": 6, "polyd": 6, "polydiv": 6, "polyfit": 6, "polyint": 6, "polymul": 6, "polysub": 6, "polyv": 6, "posit": [6, 14, 18, 33, 34, 77, 88, 142, 143, 144, 152, 187, 265, 280, 290, 292, 301, 325, 356, 357, 367, 368, 381], "power": [6, 87, 159, 368], "printopt": 6, "prod": [6, 77, 191, 408], "product": [6, 64, 65, 76, 80, 81, 139, 148, 159, 161, 176, 188, 189, 286, 291, 379, 396, 412], "promote_typ": 6, "ptp": [6, 408], "put": [6, 77, 295, 376, 408], "put_along_axi": [6, 294, 376], "putmask": [6, 294], "quantil": 6, "rad2deg": [6, 67, 68, 393], "radian": [6, 67, 68, 297, 393], "ravel": [6, 77, 162, 256, 408], "ravel_multi_index": 6, "real": [6, 24, 50, 104, 105, 106, 107, 108, 110, 116, 152, 156, 157, 160, 292, 301, 318, 363, 367, 391, 408, 412], "real_if_clos": 6, "recfromcsv": 6, "recfromtxt": 6, "reciproc": 6, "remaind": [6, 117, 118, 119, 120, 185, 290], "repeat": [6, 156, 157, 408], "resiz": [6, 88, 408], "result_typ": [6, 78, 412], "right_shift": [6, 149], "rint": [6, 30, 358], "roll": [6, 357], "rollaxi": [6, 356], "root": [6, 49, 367, 368], "rot90": 6, "round": [6, 30, 77, 116, 117, 350, 355, 391, 408, 412], "round_": 6, "row_stack": 6, "safe_ev": 6, "save": 6, "savetxt": 6, "savez": 6, "savez_compress": 6, "sctype2char": 6, "searchsort": [6, 366, 408], "select": [6, 58, 369, 401], "set_numeric_op": 6, "set_printopt": 6, "set_string_funct": 6, "setbufs": 6, "setdiff1d": 6, "seterr": 6, "seterrcal": 6, "seterrobj": 6, "setxor1d": 6, "shares_memori": 6, "show_config": 6, "sign": [6, 53, 54, 57, 78, 280, 289, 363], "signbit": [6, 362], "sin": [6, 22, 60, 181, 365, 377], "sinc": 6, "sinh": [6, 23, 61, 364, 378], "sometru": 6, "sort": [6, 29, 77, 244, 265, 359, 381, 401, 408, 412], "sort_complex": 6, "space": [6, 19, 129, 165, 175], "split": [6, 52, 135, 370, 412], "sqrt": [6, 368], "squar": [6, 137, 152, 155, 156, 159, 303, 319, 367, 386, 389], "squeez": [6, 77, 88, 408], "stack": [6, 52, 135, 160, 397], "std": [6, 77, 179, 395, 408], "subtract": 6, "swapax": [6, 77, 187, 408], "take": [6, 77, 295, 352, 376, 408], "take_along_axi": [6, 27, 28, 29, 51, 295, 375], "tan": [6, 24, 25, 60, 364, 378], "tanh": [6, 26, 61, 365, 377], "tensordot": [6, 76, 139, 176], "tile": [6, 351, 412], "trace": [6, 408], "transpos": [6, 77, 152, 187, 195, 408, 412], "trapz": 6, "tri": 6, "tril": [6, 385, 386, 389], "tril_indic": [6, 386, 389], "tril_indices_from": 6, "trim_zero": 6, "triu": [6, 388], "triu_indic": 6, "triu_indices_from": 6, "true_divid": 6, "trunc": [6, 30, 50, 116, 355, 358], "typenam": 6, "union1d": 6, "uniqu": [6, 43, 78], "unpackbit": 6, "unravel_index": [6, 27, 28], "unwrap": [6, 67, 297], "vander": 6, "var": [6, 77, 179, 273, 371, 408], "vdot": [6, 76, 176], "vsplit": [6, 52], "vstack": [6, 52, 135], "where": [6, 12, 13, 14, 18, 20, 21, 22, 23, 24, 25, 26, 44, 45, 46, 47, 50, 53, 54, 57, 58, 60, 61, 75, 77, 84, 90, 116, 117, 120, 132, 133, 136, 140, 141, 142, 143, 144, 149, 150, 151, 152, 163, 167, 171, 172, 173, 174, 177, 178, 179, 183, 184, 185, 188, 240, 241, 259, 261, 266, 275, 280, 282, 289, 290, 291, 292, 299, 321, 326, 327, 328, 329, 330, 331, 332, 334, 335, 340, 343, 350, 354, 355, 357, 359, 362, 363, 364, 365, 367, 368, 372, 373, 377, 378, 391], "who": 6, "zero": [6, 14, 18, 31, 62, 70, 77, 82, 83, 91, 97, 102, 116, 127, 128, 160, 164, 187, 192, 264, 281, 284, 285, 290, 292, 299, 301, 329, 331, 332, 334, 362, 363, 373, 383, 384, 387, 400], "zeros_lik": [6, 31, 83, 128, 285, 399], "astyp": [6, 77, 281], "byteswap": 6, "dump": 6, "fill": [6, 31, 77, 82, 83, 111, 127, 128, 249, 284, 285, 375, 399, 400], "flatten": [6, 72, 77, 242, 243, 244, 255, 281, 348], "getfield": [6, 78], "item": [6, 77, 401], "itemset": 6, "newbyteord": [6, 78], "setfield": [6, 78], "setflag": 6, "tobyt": 6, "tofil": [6, 123], "tolist": 6, "tostr": 6, "view": [6, 40, 41, 77, 88, 113, 114, 115, 195, 268, 278, 352, 369, 374, 381], "linalg": [6, 368], "choleski": 6, "cond": 6, "det": 6, "eig": [6, 156, 157], "eigh": 6, "eigval": [6, 156], "eigvalsh": 6, "inv": 6, "lstsq": 6, "matrix_pow": [6, 368], "matrix_rank": 6, "multi_dot": 6, "norm": [6, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 153, 412], "pinv": 6, "qr": 6, "slogdet": 6, "solv": [6, 412], "svd": [6, 160], "tensorinv": 6, "tensorsolv": 6, "fft": [6, 401, 412], "fft2": 6, "fftfreq": 6, "fftn": 6, "fftshift": 6, "hfft": 6, "ifft": 6, "ifft2": 6, "ifftn": 6, "ifftshift": 6, "ihfft": 6, "irfft": 6, "irfft2": 6, "irfftn": 6, "register_func": 6, "restore_al": 6, "restore_func": 6, "rfft": 6, "rfft2": 6, "rfftfreq": 6, "rfftn": 6, "beta": [6, 310], "binomi": [6, 318], "byte": [6, 77, 78, 258, 262], "chisquar": 6, "choic": [6, 51, 77, 246], "default_rng": 6, "dirichlet": 6, "exponenti": [6, 86, 89, 167, 312, 338], "gamma": [6, 339], "geometr": [6, 129, 165], "get_stat": [6, 299], "gumbel": 6, "hypergeometr": 6, "laplac": 6, "logist": 6, "lognorm": 6, "logseri": 6, "multinomi": 6, "multivariate_norm": 6, "negative_binomi": 6, "noncentral_chisquar": 6, "noncentral_f": 6, "normal": [6, 63, 156, 299, 314, 317, 328, 340], "pareto": 6, "permut": [6, 77, 187, 278, 381, 412], "poisson": 6, "rand": [6, 299, 329, 331, 332, 334], "randint": [6, 77, 257, 299, 330], "randn": [6, 113, 114, 115, 164, 299, 370], "random_integ": [6, 299, 327], "random_sampl": [6, 299, 326, 329, 332, 334], "ranf": 6, "rayleigh": 6, "seed": [6, 77, 257, 299], "set_stat": 6, "shuffl": 6, "standard_cauchi": 6, "standard_exponenti": 6, "standard_gamma": 6, "standard_norm": [6, 299, 328], "standard_t": 6, "triangular": [6, 152, 163], "uniform": [6, 78, 299, 326, 329, 331, 332, 334], "vonmis": 6, "wald": 6, "weibul": [6, 347], "zipf": 6, "show": [9, 78, 136, 174, 181, 337], "constant": [9, 78], "alias": 9, "bool": [9, 14, 18, 36, 77, 78, 84, 93, 99, 107, 132, 133, 142, 143, 144, 150, 151, 160, 162, 245, 281, 282, 352], "complex64": [9, 93, 99], "complex128": [9, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 353], "bool_": 9, "cdoubl": 9, "complex": [9, 24, 25, 53, 54, 76, 77, 78, 85, 156, 157, 164, 176, 247, 248, 292, 362, 367, 408, 412], "cfloat": 9, "csingl": 9, "doubl": [9, 312], "float": [9, 15, 24, 33, 34, 36, 78, 131, 160, 162, 175, 299, 303, 328, 329, 331, 332, 334, 337, 338, 340, 343, 408, 412], "float_": 9, "float16": 9, "int": [9, 36, 43, 70, 77, 78, 84, 131, 138, 244, 287, 299, 327, 330, 352, 358, 361, 383, 385, 386, 388, 389, 408], "int_": 9, "intc": 9, "singl": [9, 77, 161, 179, 272, 299, 318, 327, 328, 329, 330, 331, 332, 334, 340, 408], "singlecomplex": 9, "e": [9, 21, 23, 77, 78, 88, 167, 274, 299, 374], "euler_gamma": 9, "inf": [9, 15, 25, 33, 34, 57, 75, 142, 143, 144, 153, 162, 167, 168, 170, 178, 184, 292, 367], "infin": [9, 14, 18, 116, 117, 142, 143, 144, 350, 391, 412], "infti": 9, "nan": [9, 14, 15, 16, 17, 18, 33, 34, 75, 142, 143, 144, 178, 179, 184, 189, 190, 191, 192, 193, 290, 292, 367, 371, 395, 412], "ninf": 9, "nzero": 9, "pi": [9, 25, 60, 61, 68, 364, 365, 377, 378, 393], "pinf": 9, "pzero": 9, "arg": [11, 80, 118, 119, 299, 390, 396], "kwarg": [11, 12, 13, 15, 20, 21, 22, 23, 24, 25, 26, 44, 45, 46, 47, 50, 53, 54, 57, 60, 61, 64, 65, 66, 75, 76, 77, 80, 84, 86, 92, 116, 117, 118, 119, 120, 122, 123, 124, 126, 131, 132, 133, 136, 139, 140, 142, 143, 144, 149, 150, 151, 166, 167, 171, 172, 173, 174, 176, 178, 184, 185, 186, 188, 189, 190, 191, 192, 229, 260, 268, 280, 282, 289, 290, 292, 349, 350, 354, 355, 362, 363, 364, 365, 366, 367, 368, 370, 372, 377, 378, 379, 382, 383, 390, 391, 392, 396], "calcul": [11, 12, 74, 79, 86, 87, 92, 116, 118, 119, 185, 191, 192, 290, 291, 350, 367, 401], "valu": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 37, 42, 43, 44, 45, 46, 47, 48, 50, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 73, 74, 75, 77, 78, 79, 82, 83, 84, 90, 91, 92, 93, 99, 111, 112, 116, 117, 120, 124, 127, 128, 129, 132, 133, 135, 136, 138, 140, 142, 143, 144, 149, 150, 151, 152, 157, 160, 162, 164, 165, 166, 167, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 188, 193, 197, 198, 201, 203, 204, 206, 207, 208, 209, 210, 211, 212, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 230, 232, 234, 235, 236, 237, 238, 239, 242, 243, 249, 253, 255, 259, 261, 265, 267, 280, 281, 282, 284, 285, 287, 288, 289, 290, 292, 293, 294, 295, 296, 299, 309, 326, 327, 343, 350, 351, 352, 354, 355, 358, 359, 360, 362, 363, 364, 365, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 391, 393, 395, 399, 400, 408, 412], "wise": [11, 12, 13, 15, 16, 17, 20, 21, 22, 23, 24, 25, 26, 30, 32, 44, 45, 46, 47, 49, 50, 52, 53, 54, 57, 60, 61, 75, 77, 84, 86, 87, 89, 92, 116, 118, 119, 120, 132, 133, 135, 140, 141, 142, 143, 144, 149, 150, 151, 158, 167, 168, 169, 170, 171, 172, 173, 174, 178, 184, 185, 186, 188, 248, 280, 282, 289, 290, 292, 349, 350, 354, 355, 358, 362, 363, 364, 365, 367, 368, 372, 377, 378, 390, 391, 397, 408], "note": [11, 14, 16, 17, 18, 27, 28, 30, 36, 38, 56, 67, 77, 78, 88, 116, 118, 119, 142, 162, 175, 185, 244, 249, 268, 281, 294, 297, 302, 304, 305, 315, 320, 352, 374, 375, 390, 396], "shorthand": [11, 13, 44, 45, 46, 47, 75, 84, 117, 132, 133, 140, 149, 150, 151, 171, 173, 188, 280, 282, 289, 290, 350, 354, 372, 398], "out": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 37, 39, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 56, 57, 60, 61, 63, 68, 75, 76, 77, 84, 85, 86, 87, 88, 89, 113, 114, 115, 116, 117, 120, 121, 132, 133, 135, 136, 140, 141, 142, 143, 144, 149, 150, 151, 161, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 183, 184, 185, 187, 188, 193, 240, 241, 242, 243, 246, 249, 250, 256, 259, 261, 266, 269, 273, 275, 277, 279, 280, 281, 282, 286, 289, 290, 291, 292, 293, 298, 299, 321, 326, 327, 328, 329, 330, 331, 332, 334, 340, 343, 348, 349, 350, 353, 354, 355, 358, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 380, 391, 393, 395], "none": [12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 57, 60, 61, 62, 63, 64, 75, 76, 77, 78, 79, 82, 83, 84, 86, 88, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 116, 117, 120, 127, 128, 129, 132, 133, 134, 135, 136, 137, 140, 142, 143, 144, 149, 150, 151, 153, 160, 161, 162, 164, 165, 167, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 183, 184, 185, 188, 193, 240, 241, 242, 243, 244, 246, 250, 257, 259, 260, 261, 265, 266, 267, 269, 272, 273, 275, 277, 279, 280, 282, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 352, 354, 355, 356, 358, 359, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 375, 377, 378, 380, 381, 382, 383, 385, 388, 391, 394, 395, 398, 399, 400, 408], "subok": [12, 13, 20, 21, 22, 23, 24, 25, 26, 31, 44, 45, 46, 47, 48, 50, 53, 54, 56, 57, 60, 61, 75, 77, 83, 84, 116, 117, 120, 128, 132, 133, 136, 140, 142, 143, 144, 149, 150, 151, 167, 171, 172, 173, 174, 178, 184, 185, 188, 245, 280, 282, 285, 289, 290, 292, 350, 354, 355, 362, 363, 364, 365, 367, 368, 372, 377, 378, 391, 400], "contain": [12, 14, 18, 19, 44, 45, 46, 47, 77, 78, 121, 130, 140, 149, 156, 179, 268, 299, 354, 367, 373, 385, 388, 408], "paramet": [12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 33, 34, 35, 37, 39, 44, 45, 46, 47, 48, 50, 52, 53, 54, 56, 57, 58, 60, 61, 62, 64, 65, 66, 73, 74, 75, 76, 77, 78, 79, 82, 83, 84, 85, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 120, 121, 127, 128, 129, 131, 132, 133, 135, 136, 137, 138, 139, 140, 142, 143, 144, 149, 150, 151, 152, 153, 154, 156, 157, 159, 160, 161, 162, 163, 165, 167, 171, 172, 173, 174, 175, 176, 178, 179, 181, 184, 185, 186, 187, 188, 189, 190, 191, 192, 242, 243, 244, 245, 253, 256, 268, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 299, 300, 301, 303, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 372, 373, 374, 375, 377, 378, 379, 380, 382, 384, 385, 386, 387, 388, 389, 391, 398, 399, 400], "onli": [12, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 33, 34, 35, 37, 39, 42, 50, 53, 54, 56, 59, 60, 61, 62, 63, 73, 74, 78, 79, 82, 83, 91, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 116, 122, 123, 124, 125, 126, 127, 128, 129, 138, 142, 143, 144, 149, 152, 165, 166, 167, 172, 175, 177, 180, 181, 183, 193, 280, 284, 285, 287, 289, 292, 293, 294, 299, 321, 327, 343, 352, 354, 355, 358, 359, 360, 362, 363, 364, 365, 371, 375, 377, 378, 379, 380, 384, 387, 391, 395, 398, 399, 400, 408], "either": [12, 13, 14, 15, 18, 20, 21, 22, 23, 24, 25, 26, 30, 37, 44, 45, 46, 47, 48, 50, 52, 53, 54, 57, 58, 60, 61, 75, 76, 78, 84, 88, 90, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 113, 114, 115, 116, 117, 120, 132, 133, 135, 136, 140, 141, 142, 143, 144, 149, 150, 151, 162, 167, 171, 172, 173, 174, 178, 179, 181, 184, 185, 187, 188, 280, 281, 282, 286, 288, 289, 290, 292, 294, 335, 350, 351, 353, 354, 355, 356, 357, 358, 362, 363, 364, 365, 367, 368, 369, 370, 372, 373, 374, 375, 377, 378, 381, 391, 398], "tensor": [12, 13, 14, 15, 18, 20, 21, 22, 23, 24, 25, 26, 30, 44, 45, 46, 47, 48, 50, 52, 53, 54, 57, 58, 60, 61, 75, 76, 77, 83, 84, 88, 90, 113, 114, 115, 116, 117, 120, 128, 132, 133, 135, 136, 139, 140, 142, 143, 144, 149, 150, 151, 156, 167, 171, 172, 173, 174, 178, 179, 181, 184, 185, 187, 188, 280, 281, 282, 285, 286, 288, 289, 290, 292, 294, 350, 353, 354, 355, 356, 357, 358, 362, 363, 364, 365, 367, 368, 369, 370, 372, 373, 374, 375, 377, 378, 379, 381, 384, 387, 391, 398, 400], "usm_ndarrai": [12, 13, 14, 15, 18, 20, 21, 22, 23, 24, 25, 26, 30, 39, 44, 45, 46, 47, 48, 50, 52, 53, 54, 57, 58, 60, 61, 75, 76, 77, 83, 84, 88, 90, 113, 114, 115, 116, 117, 120, 128, 132, 133, 135, 136, 140, 142, 143, 144, 149, 150, 151, 156, 167, 171, 172, 173, 174, 178, 179, 181, 184, 185, 187, 188, 280, 281, 282, 285, 286, 288, 289, 290, 292, 294, 350, 352, 353, 354, 355, 356, 357, 358, 362, 363, 364, 365, 367, 368, 369, 370, 372, 373, 374, 375, 377, 378, 381, 384, 387, 391, 398, 400], "keyword": [12, 13, 15, 20, 21, 22, 23, 24, 25, 26, 44, 45, 46, 47, 50, 57, 60, 61, 64, 65, 66, 75, 76, 79, 92, 116, 117, 120, 131, 136, 139, 140, 149, 178, 184, 185, 186, 188, 189, 190, 191, 192, 280, 289, 290, 292, 349, 350, 354, 355, 362, 363, 364, 365, 366, 370, 372, 377, 378, 379, 382, 391, 408], "argument": [12, 13, 15, 20, 21, 22, 23, 24, 25, 26, 44, 45, 46, 47, 50, 57, 60, 61, 64, 65, 66, 75, 76, 77, 78, 79, 85, 92, 116, 117, 120, 131, 136, 139, 140, 146, 147, 149, 158, 161, 178, 184, 185, 186, 188, 189, 190, 191, 192, 244, 245, 268, 280, 289, 290, 292, 349, 350, 353, 354, 355, 362, 363, 364, 365, 366, 370, 372, 377, 378, 379, 382, 391, 408], "unsupport": [12, 13, 15, 20, 21, 22, 23, 24, 25, 26, 44, 45, 46, 47, 50, 57, 60, 61, 64, 65, 66, 75, 76, 92, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 116, 117, 120, 131, 136, 139, 140, 149, 161, 178, 184, 185, 186, 188, 189, 190, 191, 192, 280, 289, 290, 291, 292, 349, 350, 354, 355, 362, 363, 364, 365, 366, 370, 372, 377, 378, 379, 382, 391], "sequenti": [12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 42, 44, 45, 46, 47, 48, 50, 52, 53, 54, 57, 59, 60, 61, 62, 63, 64, 65, 66, 73, 74, 75, 76, 79, 80, 81, 82, 83, 84, 85, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 116, 117, 120, 127, 128, 131, 132, 133, 135, 136, 139, 140, 141, 142, 143, 144, 149, 150, 151, 158, 165, 167, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 280, 281, 282, 284, 285, 286, 288, 289, 290, 294, 348, 349, 350, 351, 354, 355, 358, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 375, 377, 378, 379, 382, 384, 387, 391, 395, 398, 399, 400], "dp": [12, 48, 75, 76, 77, 156, 278, 290, 352, 353, 361, 372, 381, 398], "x1": [13, 15, 24, 25, 27, 28, 42, 43, 44, 46, 47, 49, 51, 57, 59, 62, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 79, 83, 84, 86, 87, 89, 92, 111, 117, 120, 128, 131, 132, 133, 136, 139, 141, 148, 149, 150, 151, 155, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 180, 181, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 280, 282, 285, 286, 287, 289, 290, 291, 295, 296, 297, 298, 336, 349, 350, 354, 356, 359, 366, 371, 372, 376, 379, 380, 382, 384, 386, 387, 389, 393, 394, 395, 400], "x2": [13, 14, 15, 18, 24, 25, 31, 44, 46, 47, 57, 59, 64, 75, 76, 84, 117, 120, 129, 132, 133, 136, 139, 141, 148, 149, 150, 151, 165, 171, 172, 173, 174, 175, 176, 178, 181, 184, 185, 188, 280, 281, 282, 286, 289, 290, 350, 354, 356, 359, 367, 372, 379], "order": [13, 20, 21, 22, 23, 24, 25, 26, 29, 31, 33, 34, 35, 37, 38, 44, 45, 46, 47, 50, 53, 54, 56, 60, 61, 75, 77, 78, 80, 81, 82, 83, 84, 91, 113, 114, 115, 116, 117, 127, 128, 132, 133, 140, 142, 143, 144, 149, 150, 151, 156, 157, 162, 167, 171, 172, 173, 174, 185, 187, 188, 200, 244, 245, 249, 256, 265, 280, 282, 284, 285, 287, 289, 290, 292, 348, 350, 352, 354, 355, 359, 362, 363, 364, 365, 367, 368, 372, 377, 378, 391, 399, 400, 412], "k": [13, 20, 21, 22, 23, 24, 25, 26, 31, 44, 45, 46, 47, 50, 53, 54, 56, 60, 61, 69, 72, 75, 77, 84, 91, 116, 117, 132, 133, 140, 142, 143, 144, 149, 150, 151, 167, 171, 172, 173, 174, 185, 188, 200, 245, 249, 256, 280, 282, 289, 290, 292, 350, 354, 355, 362, 363, 364, 365, 367, 368, 372, 377, 378, 383, 384, 385, 386, 387, 388, 389, 391, 416], "scalar": [13, 15, 25, 39, 44, 46, 47, 57, 58, 75, 76, 77, 78, 84, 117, 120, 132, 133, 136, 145, 149, 150, 151, 171, 173, 174, 178, 181, 184, 185, 188, 243, 253, 257, 282, 286, 290, 299, 300, 301, 303, 306, 307, 308, 309, 310, 311, 312, 313, 314, 318, 321, 322, 324, 325, 327, 330, 333, 335, 339, 341, 342, 343, 344, 345, 346, 347, 350, 354, 372, 398, 408], "both": [13, 15, 25, 44, 46, 47, 57, 75, 76, 84, 117, 120, 132, 133, 136, 149, 150, 151, 162, 171, 173, 174, 178, 184, 185, 188, 282, 286, 290, 350, 354, 372], "b": [13, 15, 44, 47, 52, 58, 65, 66, 76, 78, 79, 84, 120, 132, 133, 135, 139, 150, 151, 164, 171, 173, 176, 189, 190, 282, 286, 290, 300, 370, 379, 382], "7": [13, 15, 19, 39, 50, 58, 62, 66, 69, 70, 75, 77, 79, 86, 113, 116, 131, 141, 164, 176, 180, 188, 190, 257, 281, 292, 299, 323, 350, 353, 355, 356, 372, 374, 375, 379, 384, 387, 391, 398], "oper": [13, 44, 45, 46, 47, 75, 78, 84, 88, 117, 132, 133, 140, 149, 150, 151, 152, 171, 172, 173, 174, 188, 280, 282, 289, 290, 294, 350, 354, 372, 401, 412], "axi": [14, 16, 17, 18, 27, 28, 29, 42, 52, 62, 64, 65, 66, 74, 77, 79, 88, 93, 98, 99, 103, 104, 107, 113, 114, 115, 129, 135, 162, 165, 175, 177, 178, 179, 180, 183, 184, 189, 190, 193, 240, 241, 242, 243, 244, 250, 259, 260, 261, 265, 266, 267, 272, 273, 275, 277, 279, 287, 291, 293, 294, 295, 351, 352, 356, 357, 369, 370, 371, 373, 374, 375, 376, 382, 395, 408], "keepdim": [14, 18, 62, 77, 162, 177, 179, 180, 183, 193, 240, 241, 259, 261, 266, 273, 275, 279, 291, 293, 371, 373, 395], "fals": [14, 15, 18, 31, 32, 35, 37, 42, 44, 45, 47, 48, 56, 62, 63, 77, 78, 83, 84, 111, 128, 129, 132, 133, 138, 140, 141, 142, 143, 144, 150, 151, 160, 162, 164, 165, 171, 172, 173, 174, 175, 177, 179, 180, 181, 183, 193, 240, 241, 245, 266, 273, 275, 279, 282, 285, 291, 352, 363, 371, 373, 394, 395, 400], "whether": [14, 15, 18, 78, 152, 352], "given": [14, 16, 17, 18, 19, 27, 28, 30, 31, 56, 63, 65, 66, 74, 76, 77, 78, 79, 82, 83, 111, 113, 127, 128, 136, 178, 181, 183, 184, 189, 190, 242, 243, 244, 250, 261, 266, 267, 269, 273, 275, 279, 284, 285, 291, 294, 299, 304, 326, 343, 355, 356, 357, 358, 373, 382, 383, 399, 400, 408], "evalu": [14, 15, 18, 77, 80, 81, 84, 139, 181, 240, 241, 286, 379], "logic": [14, 18, 171, 173, 174, 401, 412], "AND": [14, 44, 45, 46, 47, 140, 171, 172, 173, 174], "reduct": [14, 18], "equival": [14, 18, 30, 56, 77, 88, 200, 240, 241, 268, 278, 279, 289, 298, 299, 327, 352, 358, 361, 381, 408], "method": [14, 18, 56, 77, 78, 112, 121, 123, 160, 245, 249, 268, 299, 352, 361, 381, 401], "Not": [14, 18, 77, 142, 189, 191, 192, 244], "number": [14, 18, 19, 30, 43, 53, 54, 62, 77, 78, 88, 116, 117, 129, 142, 153, 160, 162, 165, 166, 175, 189, 191, 192, 263, 269, 270, 271, 281, 292, 299, 301, 311, 335, 350, 355, 356, 357, 358, 362, 363, 374, 391, 412], "becaus": [14, 18], "x3": [14, 18, 165, 175], "rtol": [15, 141], "1e": [15, 141, 317], "05": [15, 141], "atol": [15, 141], "08": [15, 60, 141, 317, 364], "two": [15, 16, 17, 32, 40, 44, 45, 46, 47, 55, 59, 64, 72, 77, 78, 80, 81, 139, 140, 141, 148, 156, 161, 171, 173, 174, 176, 178, 184, 187, 265, 276, 286, 299, 328, 374, 384, 385, 387, 388, 396], "within": [15, 19, 32, 141, 294, 299, 343], "toler": [15, 32, 141], "A": [15, 58, 77, 78, 88, 113, 114, 115, 121, 123, 126, 157, 245, 249, 256, 270, 299, 301, 318, 321, 326, 327, 328, 329, 330, 331, 332, 334, 335, 340, 343, 363, 374, 381], "boolean": [15, 44, 46, 47, 78, 141, 142, 143, 144, 171, 172, 173, 174, 352, 363, 375], "dim": 15, "typeerror": [15, 52, 58, 88, 93, 99, 107, 113, 114, 115, 135, 187, 356, 357, 369, 370, 374], "exept": 15, "rais": [15, 31, 33, 34, 35, 37, 51, 52, 56, 58, 77, 87, 88, 93, 99, 107, 113, 114, 115, 135, 159, 187, 246, 270, 290, 352, 356, 357, 368, 369, 370, 374], "integ": [15, 30, 44, 45, 46, 47, 77, 78, 116, 117, 140, 141, 149, 159, 162, 242, 243, 290, 294, 299, 327, 330, 335, 350, 352, 354, 355, 358, 368, 375, 384, 387, 391, 408], "1e10": [15, 141], "00001e10": [15, 141], "propag": [16, 17, 78, 178, 184], "ignor": [16, 17, 77, 78, 178, 179, 184, 193, 279, 371, 395], "exactli": [16, 17, 38, 67, 297, 299, 327], "OR": [18, 44, 45, 46, 47, 140, 171, 172, 173, 174], "stop": [19, 129, 165, 175], "like": [19, 31, 33, 34, 35, 37, 82, 91, 127, 137, 166, 284, 299, 343, 352, 399, 412], "usm_typ": [19, 31, 33, 34, 35, 36, 37, 77, 82, 83, 91, 127, 128, 165, 284, 285, 299, 321, 326, 327, 328, 329, 330, 331, 332, 334, 340, 343, 399, 400], "sycl_queu": [19, 31, 33, 34, 35, 36, 37, 77, 82, 83, 91, 127, 128, 165, 284, 285, 299, 321, 326, 327, 328, 329, 330, 331, 332, 334, 335, 340, 343, 399, 400], "evenli": [19, 129, 165, 175, 355, 358], "interv": [19, 88, 165, 299, 327, 329, 331, 332, 334, 342, 343, 374], "d": [19, 52, 70, 78, 91, 94, 95, 96, 100, 101, 105, 106, 108, 109, 110, 114, 115, 126, 156, 161, 162, 181, 281, 290, 294, 304, 352, 361, 375, 398, 408], "care": 19, "handl": [19, 78, 281, 375, 412], "endpoint": [19, 129, 165, 175], "trigonometr": [20, 21, 22, 23, 24, 25, 26, 60, 61, 364, 365, 377, 378, 412], "invers": [20, 21, 22, 23, 24, 25, 26, 45, 60, 61, 88, 89, 99, 100, 101, 102, 103, 104, 105, 106, 140, 167, 169, 345, 364, 365, 377, 378], "cosin": [20, 21, 22, 23, 24, 25, 26, 60, 61, 364, 365, 377, 378], "tangent": [20, 21, 22, 23, 24, 25, 26, 60, 61, 364, 365, 377, 378], "sine": [20, 21, 22, 23, 24, 25, 26, 60, 61, 364, 365, 377, 378], "hyperbol": [20, 21, 22, 23, 24, 25, 26, 60, 61, 364, 365, 377, 378, 412], "14159265": [20, 25], "65745445": 21, "99322285": 21, "5707963267948966": 22, "72538256": 23, "99822295": 23, "point": [24, 33, 34, 78, 165, 299, 328, 340, 412], "arc": [24, 25], "quadrant": [24, 25], "correctli": [24, 25, 162, 281], "78539816": [24, 25, 393], "57079633": [25, 298, 393], "180": 25, "135": 25, "45": 25, "54930614": 26, "convert": [27, 28, 33, 34, 35, 36, 37, 39, 67, 68, 78, 297, 298, 393], "flat": [27, 28, 77, 112, 256], "index": [27, 28, 51, 77, 78, 181, 242, 243, 246, 274, 294, 295, 352, 375, 376, 401, 412], "tupl": [27, 28, 70, 77, 78, 88, 162, 270, 281, 351, 352, 361, 385, 388, 408], "appli": [27, 28, 29, 171, 173, 174, 353], "index_arrai": [27, 28, 29, 77, 242, 244], "call": [27, 28, 29, 35, 37, 78, 161, 200, 369, 398], "multipl": [27, 28, 29, 52, 77, 78, 135, 156, 157, 244, 366, 370, 401], "occurr": [27, 28, 43], "first": [27, 28, 77, 78, 87, 146, 147, 161, 244, 290, 352, 356, 368], "11": [27, 28, 61, 70, 77, 131, 268, 318, 327, 358, 365, 384, 387], "12": [27, 28, 70, 78, 323, 384, 387], "14": [27, 28, 44, 45, 70, 76, 140, 379], "15": [27, 28, 66, 70, 323, 373], "in_array1": [29, 62, 85], "kind": [29, 77, 78, 244, 265, 287, 412], "would": [29, 77, 78, 265, 299, 381], "pramet": [29, 42, 59, 63, 177, 180, 183, 193, 371, 395], "describ": [29, 77, 78, 162, 244, 373, 412], "algorithm": [29, 77, 244], "indirect": [29, 77, 244, 366], "stabl": [29, 77, 244, 366], "partial": [29, 366], "decim": [30, 77, 269, 355, 358], "detail": [30, 121, 358, 385, 386, 388, 389, 408], "nearest": [30, 116, 117, 350, 355, 358, 391], "truncat": [30, 50, 116, 337, 355, 358, 391], "ndmin": 31, "object": [31, 34, 35, 37, 56, 77, 78, 88, 112, 121, 125, 152, 156, 162, 166, 182, 268, 283, 299, 321, 326, 327, 328, 329, 330, 331, 332, 334, 335, 340, 343, 352, 408], "satisfi": [31, 35, 37, 90], "specifi": [31, 35, 42, 48, 73, 77, 129, 139, 162, 165, 175, 179, 180, 193, 242, 243, 244, 251, 299, 312, 322, 340, 356, 357, 371, 379, 395], "valueerror": [31, 33, 34, 35, 37, 56, 352, 369], "new": [31, 48, 52, 77, 78, 82, 83, 88, 121, 125, 126, 127, 128, 135, 187, 243, 268, 278, 284, 285, 352, 356, 357, 370, 381, 399, 400, 408], "uniniti": [31, 83, 127, 284, 399], "than": [31, 77, 114, 115, 135, 160, 265, 351, 362, 363, 370], "dimens": [31, 39, 40, 41, 52, 63, 70, 77, 78, 88, 114, 115, 135, 138, 158, 162, 187, 243, 256, 263, 299, 329, 331, 332, 334, 351, 352, 361, 366, 369, 370, 374, 384, 385, 386, 387, 388, 389, 408, 412], "a1": 32, "a2": 32, "equal_nan": [32, 141], "consist": 32, "contigu": [33, 34, 35, 37, 77, 256, 348, 352], "check": [33, 34, 152], "construct": [33, 34, 51, 69, 77, 78, 123, 124, 182, 246, 283, 401], "grid": [33, 34, 138, 181], "No": [34, 152], "perform": [34, 152], "match": [34, 78, 294, 295, 375, 376], "pass": [34, 77, 78, 268], "through": [34, 78, 408], "subclass": [34, 147], "content": [35, 77, 336], "flag": [35, 37, 77, 78, 249], "about": [35, 37, 77, 254, 408], "layout": [35, 37, 77, 254, 352, 401], "f_contigu": [35, 37], "make": [35, 37, 78, 181], "now": [35, 37, 70], "c_contigu": [35, 37, 77, 249], "Then": [35, 37], "laid": 37, "fortran": [37, 77, 245, 256, 352], "row": [37, 52, 77, 114, 115, 135, 161, 166, 245, 256, 385, 397], "ari": [39, 40, 41], "least": [39, 40, 41, 78, 141], "whilst": 39, "higher": 39, "preserv": [39, 77, 78, 113, 114, 115, 242, 243], "dpnp_arrai": [39, 83, 121, 128, 181, 194, 285, 299, 321, 326, 327, 328, 329, 330, 331, 332, 334, 335, 340, 343, 352, 384, 387, 400, 401], "One": [39, 78, 352], "made": [39, 78], "three": [41, 299, 335], "weight": [42, 43, 63, 134, 179], "arithmet": [42, 129, 179, 180, 289, 371, 395, 401, 412], "minlength": 43, "count": [43, 62, 78, 125, 159, 281, 301, 401, 412], "non": [43, 62, 77, 142, 156, 264, 281, 290, 299, 321, 326, 327, 328, 329, 330, 331, 332, 334, 335, 340, 343, 367], "find": [43, 160, 359, 366, 392, 412], "re": [43, 134, 356, 392], "bit": [44, 45, 46, 47, 78, 140, 149, 171, 173, 174, 354, 412], "truth": [44, 45, 46, 47, 84, 132, 133, 140, 150, 151, 171, 172, 173, 174, 282, 412], "xor": [44, 45, 46, 47, 140, 171, 172, 173, 174], "255": [44, 46], "NOT": [45, 140, 171, 172, 173, 174], "31": [47, 129], "26": 47, "broadcast": [48, 58, 136, 162, 171, 173, 174, 176, 178, 184, 290, 294], "must": [48, 77, 88, 90, 152, 161, 162, 166, 242, 243, 294, 374], "cube": 49, "27": [49, 290, 394], "mode": [51, 55, 59, 77, 163, 246, 267, 277, 294, 337, 342, 375], "prefer": [51, 56, 77, 249], "cast": [52, 58, 77, 135, 245], "same_kind": [52, 58, 135], "join": [52, 135, 370, 412], "sequenc": [52, 55, 59, 135, 159, 161, 323, 336, 353, 370, 397], "exist": [52, 78, 88, 135, 352, 370], "sub": [52, 78, 135, 370], "horizont": [52, 113, 135], "vertic": [52, 113, 114, 135, 397], "3rd": 52, "depth": 52, "assembl": [52, 135, 370], "third": 52, "t": [52, 63, 77, 78, 157, 278, 341], "obtain": [53, 54, 281], "chang": [53, 54, 56, 57, 77, 78, 244, 274, 278, 280, 288, 289, 294, 296, 352, 393, 412], "imaginari": [53, 54, 292], "2j": [53, 54, 156, 362], "1j": [53, 54, 164, 368], "j": [53, 54, 156, 292, 368], "v": [55, 78, 156], "linear": [55, 59, 175, 401, 412], "convolut": [55, 59], "ca": 55, "z": [56, 124, 181, 309], "when": [56, 77, 78, 162, 175, 244, 245, 375, 398], "we": [56, 70], "modifi": [56, 336], "dst": 58, "src": 58, "rule": [58, 176, 353, 382], "violat": 58, "valid": [59, 88, 374, 385, 386, 388, 389], "000000e": [60, 364], "00": [60, 364], "371139e": 60, "5091786": 61, "591953": 61, "m": [63, 78, 91, 113, 114, 115, 152, 154, 156, 157, 160, 383, 385, 388], "rowvar": 63, "bia": 63, "ddof": [63, 77, 193, 273, 279, 371, 395], "fweight": 63, "aweight": 63, "estim": [63, 301, 318], "covari": 63, "matrix": [63, 152, 153, 156, 157, 159, 160, 162, 163, 176, 368, 387, 394, 401, 412], "variabl": 63, "axisa": 64, "axisb": 64, "axisc": 64, "vector": [64, 153, 160, 161, 162, 181, 396, 412], "cumul": [65, 66, 77, 189, 190, 250], "24": [65, 79, 191, 291], "120": [65, 68], "720": 65, "remov": [67, 77, 88, 272, 297, 369, 412], "larg": [67, 78, 297], "jump": [67, 297], "wrap": [67, 77, 111, 267, 277, 294, 297, 375], "rad": 68, "30": [68, 298], "60": [68, 398], "90": [68, 398], "150": 68, "access": [70, 71, 111, 408], "main": [70, 71, 111, 137, 157], "usual": [70, 78], "di": 70, "100": [70, 129, 175, 311, 337], "d3": 70, "offset": [73, 77, 78, 251, 380, 385, 386, 388, 389], "axis1": [73, 77, 251, 276, 374, 380], "axis2": [73, 77, 251, 276, 374, 380], "prepend": [74, 88], "th": [74, 79, 180, 384, 387], "quotient": [75, 185, 350], "over": [76, 112, 124, 162, 165, 176, 181, 189, 291, 299, 326, 331, 342, 343, 373, 412], "arbitrari": [76, 78, 176, 353], "ax": [76, 77, 94, 96, 97, 100, 101, 102, 105, 106, 108, 110, 139, 162, 176, 179, 187, 270, 276, 278, 356, 357, 369, 374, 379, 381], "buffer": [77, 122, 352], "stride": [77, 245], "wrapper": 77, "compliant": 77, "origin": [77, 162, 187, 244, 352], "__getitem__": [77, 78, 112], "self": [77, 78, 112, 196, 197, 198, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 237, 238, 239, 255, 299], "__setitem__": [77, 112], "val": [77, 111, 112, 235, 267, 288, 294], "__len__": [77, 78], "len": [77, 78, 138, 222, 351, 361], "option": [77, 78, 160, 161, 162, 242, 243, 244, 256, 299, 321, 326, 327, 328, 329, 330, 331, 332, 334, 335, 340, 343, 352, 375, 385, 386, 388, 389], "Its": [77, 242, 243], "right": [77, 114, 115, 136, 149, 155, 156, 242, 243, 342, 354, 359], "hold": [77, 162, 242, 243], "output": [77, 78, 84, 132, 133, 150, 151, 159, 161, 181, 236, 242, 243, 282, 299, 300, 301, 303, 306, 307, 308, 309, 310, 311, 312, 313, 314, 318, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 369, 412], "integer_arrai": [77, 242], "versionchang": [77, 244], "previous": [77, 244], "wa": [77, 78, 244, 299, 340, 373], "error": [77, 85, 244, 401], "At": [77, 244], "some": [77, 78, 88, 90, 116, 244, 408], "futur": [77, 78, 244], "intend": [77, 244], "until": [77, 244, 356, 357], "should": [77, 130, 141, 244, 316, 351, 352, 359, 408], "explicitli": [77, 244], "arr": [77, 78, 244, 281, 293, 296, 323, 386, 389], "avoid": [77, 244], "futurewarn": [77, 244], "quicksort": [77, 244], "mergesort": [77, 244], "heapsort": [77, 244], "field": [77, 78, 181, 244], "compar": [77, 84, 244], "second": [77, 78, 87, 147, 244, 290, 368], "etc": [77, 78, 244, 318], "other": [77, 78, 116, 161, 187, 197, 198, 201, 203, 204, 206, 207, 208, 209, 210, 211, 212, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 230, 232, 234, 237, 238, 239, 244, 292, 299, 343, 401, 412], "word": [77, 116, 244, 299, 343], "yield": [77, 244, 299, 408], "maskedarrai": [77, 244], "inplac": [77, 244], "asnumpi": 77, "popul": [77, 299, 326], "unsaf": [77, 245], "target": [77, 245], "style": [77, 245, 256], "keep": [77, 245], "close": [77, 88, 245, 299, 327], "possibl": [77, 88, 245, 268, 352, 369, 374, 381], "happen": [77, 245, 301], "itself": [77, 78, 245, 408], "possibli": [77, 245], "doe": [77, 245], "behavior": [77, 249], "assign": [77, 253], "collaps": [77, 256], "occur": [77, 256], "get_arrai": 77, "get": [77, 274, 408], "id": [77, 257], "standard": [77, 117, 120, 179, 185, 236, 257, 299, 314, 321, 328, 337, 338, 339, 340, 341, 350, 371, 373, 390, 395, 408, 412], "random": [77, 113, 114, 115, 164, 257, 370, 401, 412], "123": [77, 257], "initi": [77, 82, 126, 177, 183, 259, 261, 266, 275, 291, 299, 373], "kth": [77, 265, 287], "introselect": [77, 265, 287], "rearrang": [77, 265, 412], "smaller": [77, 117, 265, 350], "move": [77, 187, 265, 356, 357, 381], "behind": [77, 265], "undefin": [77, 265], "dparrai": [77, 266, 275, 413], "sh": [77, 268], "unlik": [77, 268], "free": [77, 268], "separ": [77, 78, 268], "entri": [77, 78, 82, 113, 114, 115, 272, 279], "varianc": [77, 179, 193, 273, 279, 371, 395, 412], "interchang": [77, 187, 276, 374], "to_devic": 77, "target_devic": 77, "transfer": 77, "suitabl": [77, 278], "properti": [77, 195, 252, 254, 255, 258, 262, 263, 270, 271, 274, 278, 299, 321, 326, 327, 328, 329, 330, 331, 332, 334, 335, 340, 343, 408], "give": [77, 278, 352, 361], "without": [77, 82, 270, 278, 352, 408], "mask": [77, 78, 279, 288, 296, 375], "finit": [77, 142, 143, 144, 279, 292], "__eq__": [77, 78, 112, 299], "__ne__": [77, 78, 112, 299], "__lt__": [77, 78, 112, 299], "__le__": [77, 78, 112, 299], "__gt__": [77, 78, 112, 299], "__ge__": [77, 78, 112, 299], "attribut": [77, 78, 401], "items": [77, 78], "nbyte": 77, "consum": [77, 262], "length": [77, 84, 270, 302, 352, 353, 361, 369], "repres": [77, 78, 121, 138, 270, 299, 408], "diment": [77, 270], "setter": [77, 270], "involv": [77, 270], "cannot": [77, 270, 369], "displac": [77, 274], "upon": [77, 274], "unit": [77, 274], "respect": [77, 274], "s1": [77, 78, 274], "s2": [77, 78, 274], "s3": [77, 274], "i1": [77, 78, 274], "i2": [77, 78, 274], "i3": [77, 274], "sycl_context": 77, "sycl_devic": 77, "align": 78, "homogen": 78, "fundament": 78, "what": [78, 84, 301, 318], "struct": 78, "obj": [78, 121, 145], "dictionari": 78, "comma": 78, "string": [78, 126, 299, 321, 326, 327, 328, 329, 330, 331, 332, 334, 335, 340, 343, 408], "sticki": 78, "isalignedstruct": 78, "mai": [78, 88, 156, 175, 408], "just": 78, "built": 78, "int16": 78, "structur": 78, "f1": 78, "unsign": 78, "uint64": 78, "f2": 78, "u8": 78, "i4": 78, "protocol": [78, 121], "f8": 78, "s10": 78, "format": [78, 123, 412], "f0": 78, "void": 78, "flexibl": 78, "hello": 78, "world": [78, 301, 318], "i8": 78, "v10": 78, "subdivid": 78, "int8": 78, "gender": 78, "ag": 78, "uint8": 78, "u1": 78, "25": [78, 85, 131, 134, 165, 188, 328, 337, 394, 395], "surnam": 78, "s25": 78, "new_ord": 78, "forc": 78, "swap": [78, 374], "code": 78, "opposit": 78, "endian": 78, "littl": 78, "big": 78, "nativ": 78, "new_dtyp": 78, "sy": 78, "sys_is_l": 78, "byteord": 78, "native_cod": 78, "swapped_cod": 78, "native_dt": 78, "swapped_dt": 78, "l": [78, 152, 156], "accord": [78, 156, 157], "subarrai": 78, "regardless": 78, "subdtyp": 78, "8f": 78, "charact": 78, "applic": 78, "dt": 78, "relev": 78, "ascii": 78, "even": [78, 358], "char": 78, "descr": 78, "__array_interface__": 78, "descript": [78, 408], "warn": [78, 317], "directli": [78, 175], "accur": 78, "reconstruct": [78, 164], "str_": 78, "grade": 78, "u16": 78, "fulli": 78, "titl": 78, "present": 78, "unicod": 78, "meta": 78, "notic": 78, "s16": 78, "multiarrai": 78, "item_hasobject": 78, "list_pickl": 78, "item_is_point": 78, "needs_init": 78, "needs_pyapi": 78, "use_getitem": 78, "use_setitem": 78, "explan": 78, "thei": [78, 157, 408], "user": 78, "particular": 78, "hasobject": 78, "recal": 78, "actual": [78, 152], "address": 78, "pointer": 78, "distinguish": 78, "won": 78, "maintain": [78, 359], "so": [78, 84, 167, 337, 367], "togeth": 78, "produc": 78, "isbuiltin": 78, "relat": 78, "read": [78, 123, 352], "machineri": 78, "extend": [78, 408], "field1": 78, "isn": 78, "platform": 78, "anyth": 78, "80": [78, 398], "biufcmmosuv": 78, "identifi": 78, "gener": [78, 157, 299, 301, 304, 335, 394, 408, 412], "u": [78, 164], "timedelta": 78, "datetim": 78, "metadata": 78, "readonli": 78, "mappingproxi": 78, "approach": 78, "although": 78, "guarante": [78, 352], "certain": 78, "project": [78, 292], "featur": 78, "long": 78, "undocu": 78, "well": [78, 123, 301, 318, 337], "aspect": 78, "ad": [78, 412], "datatyp": [78, 160], "dt2": 78, "key2": 78, "value2": 78, "arr2": 78, "clear": 78, "width": 78, "un": 78, "void640": 78, "increas": [78, 88, 394], "walk": 78, "num": [78, 85, 129, 165, 175, 393], "roughli": 78, "precis": 78, "str": 78, "19": 78, "typestr": 78, "item_dtyp": 78, "whose": [78, 157, 356, 386, 389], "retriev": 78, "extra": 78, "impli": 78, "tack": 78, "end": [78, 165], "to_end": 79, "to_begin": 79, "between": [79, 157, 316, 330, 393], "consecut": 79, "einstein": [80, 81, 139, 176, 286, 379], "summat": [80, 81, 139, 176, 286, 379], "convent": [80, 81, 139, 176, 286, 379], "operand": [80, 81, 139, 286, 379], "lowest": [80, 81, 299, 327], "cost": [80, 81], "contract": [80, 81], "express": [80, 81], "subscript": 81, "greedi": 81, "consid": [81, 142, 160, 299, 327], "intermedi": 81, "scipi": 85, "math": 85, "75": [85, 131, 165], "99532227": 85, "99853728": 85, "99959305": 85, "99989938": 85, "99997791": 85, "718281828": [86, 89], "389056099": [86, 89], "p": [87, 153, 301, 304, 309, 315, 318], "expand": 88, "appear": [88, 114, 115], "whenev": [88, 374, 381], "rank": [88, 90, 160, 374], "resid": 88, "singleton": [88, 369], "henc": 88, "resolv": 88, "newaxi": 88, "instead": [88, 116, 129, 165, 175, 281], "minu": [89, 116, 117, 350, 391], "condit": [90, 153, 288, 294, 296, 360, 398], "elsewher": [91, 383, 398], "fourier": [93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 401], "transform": [93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 401], "batch": [94, 96, 100, 101, 105, 106, 108, 110], "sampl": [95, 109, 129, 165, 175, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 330, 333, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 401, 412], "frequenc": [95, 97, 102, 109], "shift": [97, 102, 149, 354, 356], "compon": [97, 102, 292], "center": [97, 102], "spectrum": [97, 102], "signal": [98, 103], "hermitian": [98, 103, 152, 156, 160, 164, 412], "symmetri": [98, 103], "__next__": 112, "__iter__": 112, "revers": [113, 114, 115], "reorder": 113, "left": [114, 115, 149, 162, 342, 354, 359], "direct": [114, 115], "down": 115, "toward": [116, 117, 350, 391], "spreadsheet": 116, "definit": [116, 152], "largest": [117, 350], "divis": [117, 118, 119, 120, 185, 290, 350, 390], "floordivid": 117, "complementari": [117, 120, 185], "__dlpack__": 121, "dmlc": 121, "github": 121, "io": [121, 166], "dlpack": 121, "__dlpack_device__": 121, "file": [123, 130, 166], "text": [123, 126, 166], "binari": [123, 401, 412], "highli": 123, "effici": [123, 160], "known": [123, 337], "pars": 123, "simpli": 123, "written": 123, "coordin": [124, 181], "therefor": 124, "fn": 124, "fill_valu": [127, 128], "50": [129, 175, 379, 398], "scale": [129, 165, 175, 299, 306, 308, 310, 311, 312, 313, 321, 333, 338, 345], "progress": [129, 165], "1000": [129, 175, 300, 301, 306, 308, 310, 311, 312, 313, 314, 321, 322, 325, 327, 329, 332, 334, 340, 344, 345, 346, 347], "62341325": 129, "6227766": 129, "177": [129, 175], "827941": [129, 175], "directori": 130, "h": [130, 152, 181], "header": 130, "modul": [130, 401], "against": [130, 162], "vararg": 131, "y1": [131, 382], "bin": [134, 337], "densiti": 134, "dataset": 134, "hist": [134, 337], "bin_edg": 134, "4999999999999996": 134, "tup": [135, 397], "nd": [135, 370], "nest": [135, 370], "leg": 136, "triangl": [136, 384, 385, 386, 387, 388, 389], "hypotenus": 136, "spars": [138, 181], "nat": 144, "arg1": [146, 147], "arg2": [146, 147], "typecod": 146, "lower": [146, 152, 384, 385, 386, 389], "hierarchi": 146, "determin": [147, 154, 171, 173, 174], "kroneck": 148, "40": 149, "decomposit": [152, 164, 412], "ordinari": 152, "symmetr": [152, 156, 160], "verifi": 152, "addit": 152, "array_lik": [152, 154, 157, 159, 160, 161, 162, 299, 361, 386, 389], "upper": [152, 163, 387, 388], "factor": [152, 163], "fro": 153, "eigenvalu": [155, 156, 157, 412], "eigenvector": [155, 156, 157], "uplo": 156, "w": [156, 157], "ascend": 156, "17157288": 156, "82842712": 156, "92387953": 156, "38268343": 156, "vari": 156, "38268343j": 156, "92387953j": 156, "aren": 157, "necessarili": 157, "nor": 157, "matric": [157, 160, 162, 181], "suppli": [159, 161, 299, 328], "tol": [160, 317], "singular": [160, 164], "threshold": 160, "ep": 160, "epsilon": 160, "assum": 160, "enabl": 160, "treat": [161, 189, 191, 192, 292, 408], "last": [161, 352, 356, 369], "ord": 162, "abl": 162, "eight": 162, "infinit": [162, 292], "unless": 162, "under": 162, "With": 162, "reduc": [163, 164], "q": [163, 180], "orthonorm": 163, "r": 163, "full_matric": 164, "compute_uv": 164, "2d": 164, "vh": 164, "smat": 164, "4d": 164, "retstep": 165, "logarithm": [165, 167, 168, 169, 170, 315, 412], "fname": 166, "stringio": 166, "behav": 166, "n2": 166, "natur": [167, 169, 170], "plu": [167, 169, 170], "30102999566": 168, "69314718": 169, "09861229": 169, "uniformli": [175, 299, 343], "215": 175, "443469": 175, "464": 175, "15888336": 175, "316": 175, "22776602": 175, "562": 175, "34132519": 175, "0396842": 175, "34960421": 175, "amix": 178, "nanmix": 178, "deviat": [179, 299, 314, 321, 371, 395], "while": [179, 193, 281, 371, 395], "overwrite_input": 180, "xi": 181, "xy": 181, "xn": 181, "nx": 181, "ny": 181, "xv": 181, "yv": 181, "matplotlib": [181, 337], "pyplot": [181, 337], "plt": [181, 337], "xx": 181, "yy": 181, "contourf": 181, "dpnp_iface_arraycr": [182, 283], "mgridclass": 182, "dens": 182, "5j": [182, 283], "fraction": 186, "destin": [187, 294, 295, 376], "remain": [187, 352], "usm": [187, 299, 321, 326, 327, 328, 329, 330, 331, 332, 334, 340, 343, 369], "_novalu": [193, 371, 395], "alia": [194, 299, 329, 332, 334], "repr": 233, "136": 236, "272": 236, "408": 236, "out2": 281, "ogridclass": 283, "open": [283, 299, 329, 331, 332, 334, 343, 374], "expon": [290, 325, 412], "125": [290, 394], "effect": 290, "onto": 292, "riemann": 292, "sphere": 292, "magnitud": 292, "7j": 292, "1d": [294, 295, 376], "slice": [294, 295, 376, 388, 408], "contrast": 294, "cyclic": 294, "clamp": [294, 375], "boundari": 294, "44": 294, "55": 294, "22": 294, "deg": 298, "52359878": 298, "04719755": 298, "0943951": 298, "61799388": 298, "mersenn": 299, "twister": 299, "pseudo": 299, "maximumum": [299, 335], "sycldevic": [299, 321, 326, 327, 328, 329, 330, 331, 332, 334, 335, 340, 343], "syclqueu": [299, 321, 326, 327, 328, 329, 330, 331, 332, 334, 335, 340, 343], "concept": [299, 321, 326, 327, 328, 329, 330, 331, 332, 334, 335, 340, 343, 408], "oneapi": [299, 321, 326, 327, 328, 329, 330, 331, 332, 334, 335, 340, 343], "filter": [299, 321, 326, 327, 328, 329, 330, 331, 332, 334, 335, 340, 343], "selector": [299, 321, 326, 327, 328, 329, 330, 331, 332, 334, 335, 340, 343], "intern": 299, "state": 299, "get_sycl_queu": 299, "loc": [299, 310, 312, 313, 321, 345], "draw": [299, 300, 301, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 327, 333, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346], "gaussian": [299, 321, 345], "share": [299, 321, 326, 327, 328, 329, 330, 331, 332, 334, 340, 343], "drawn": [299, 300, 301, 303, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 321, 322, 324, 325, 327, 330, 333, 339, 340, 341, 342, 343, 344, 345, 346, 347, 360], "parameter": [299, 321, 343], "58997253": 299, "84288406": 299, "33836967": 299, "16394577": 299, "40882036": 299, "39295758": 299, "48927254": 299, "74921661": 299, "13436424": 299, "56920387": 299, "84743374": 299, "80226506": 299, "76377462": 299, "06310682": 299, "25506903": 299, "1179187": 299, "49543509": 299, "76096244": 299, "low": [299, 327, 330, 343, 408], "high": [299, 327, 330, 343], "inclus": [299, 327, 330], "exclus": [299, 327], "half": [299, 329, 331, 332, 334, 343, 374], "omit": [299, 327, 398], "d0": [299, 326, 328], "d1": [299, 328], "dn": [299, 326, 328], "were": [299, 328], "84401099": 299, "four": [299, 328], "88997253": 299, "54288406": 299, "63836967": 299, "46394577": 299, "70882036": 299, "69295758": 299, "78927254": 299, "04921661": 299, "continu": [299, 331], "stdev": [299, 340], "81715362": 299, "54465213": 299, "18557831": 299, "28352814": 299, "67718303": 299, "11570901": 299, "21968665": 299, "18236388": 299, "08156915": 299, "21941987": 299, "24544512": 299, "63522211": 299, "673174": 299, "exclud": [299, 343], "54": 299, "48093112": 299, "52928804": 299, "1196081": 299, "6990877": 299, "34074171": 299, "conveni": 299, "accept": 299, "alpha": [300, 305, 306, 322, 325], "trial": 301, "probabl": [301, 309, 318], "coin": 301, "compani": [301, 318], "drill": [301, 318], "wild": [301, 318], "cat": [301, 318], "oil": [301, 318], "explor": [301, 318], "success": [301, 309, 318], "nine": 301, "fail": 301, "let": 301, "000": 301, "model": 301, "20000": 301, "answer": 301, "38885": 301, "38": 301, "fallback": [302, 304, 305, 315, 320, 336], "df": [303, 319, 341, 342], "chi": [303, 319], "89920014": 303, "00867716": 303, "13710533": 303, "62318272": 303, "dfnum": [307, 320], "dfden": [307, 320], "ten": 309, "thousand": 309, "individu": 309, "35": 309, "10000": [309, 324, 333, 343], "mu": [310, 314, 321, 344], "ngood": 311, "nbad": 311, "nsampl": 311, "nsamp": 311, "good": 311, "bad": 311, "decai": 312, "sigma": [314, 321], "seri": 315, "pval": 316, "iinfo": 316, "throw": 316, "dice": 316, "check_valid": 317, "multivari": 317, "after": 318, "100000": 318, "nonc": [319, 320], "noncentr": [319, 320], "todo": 319, "ii": 322, "lomax": 322, "randomli": 323, "lam": 324, "randomst": 327, "1923875335537315": 328, "rese": 335, "legaci": 335, "mt19937": 335, "engin": 335, "cauchi": 337, "lorentz": 337, "plot": 337, "1000000": [337, 339, 341, 342], "3x8000": 338, "8000": 338, "student": 341, "freedom": 341, "kappa": 344, "von": 344, "mise": 344, "dispers": 344, "33": 349, "3003003": 349, "newshap": 352, "infer": 352, "write": 352, "fastest": 352, "back": 352, "slowest": 352, "account": 352, "underli": 352, "never": 352, "reus": 352, "unspecifi": 352, "arrays_and_dtyp": 353, "promot": 353, "introduc": 356, "rel": 356, "backward": [356, 357], "li": [356, 357], "been": 357, "reposit": 357, "desir": 357, "37": 358, "side": 359, "sorter": 359, "condlist": 360, "choicelist": 360, "howev": 362, "0j": 362, "742278e": 364, "3012989": 365, "548739": 365, "traceback": 369, "recent": 369, "118033988749895": 371, "entir": 373, "bound": 375, "fanci": 375, "everi": 376, "22460635e": 377, "63317787e": 377, "996272": 378, "917152": 378, "dx": 382, "composit": 382, "trapezoid": 382, "By": [385, 388], "taken": [385, 388], "ind": [385, 388], "delta": 393, "complement": 393, "phase": 393, "49778714": 393, "28318531": 393, "vandermond": 394, "chosen": 398, "70": 398, "convers": 401, "algebra": [401, 412], "mathemat": [401, 412], "search": [401, 412], "statist": [401, 412], "summari": 401, "level": [401, 408], "util": 401, "counterpart": 408, "basic": [408, 412], "constructor": 408, "syntax": 408, "reflect": 408, "intrins": 408, "sometim": 408, "expos": 408, "them": 408, "reset": 408, "meaningfulli": 408, "associ": 408, "mani": 408, "fashion": 408, "typic": 408, "briefli": 408, "explain": 408, "docstr": 408, "proce": 408, "pow": 408, "short": 408, "unari": 408, "custom": 408, "represent": 408, "cover": 412, "elementwis": [412, 416], "pack": 412, "helper": 412, "equat": 412, "ration": 412, "extrema": 412, "variou": 416}, "objects": {"": [[3, 0, 0, "-", "dpnp"]], "dpnp": [[11, 1, 1, "", "abs"], [12, 1, 1, "", "absolute"], [13, 1, 1, "", "add"], [14, 1, 1, "", "all"], [15, 1, 1, "", "allclose"], [16, 1, 1, "", "amax"], [17, 1, 1, "", "amin"], [18, 1, 1, "", "any"], [19, 1, 1, "", "arange"], [20, 1, 1, "", "arccos"], [21, 1, 1, "", "arccosh"], [22, 1, 1, "", "arcsin"], [23, 1, 1, "", "arcsinh"], [24, 1, 1, "", "arctan"], [25, 1, 1, "", "arctan2"], [26, 1, 1, "", "arctanh"], [27, 1, 1, "", "argmax"], [28, 1, 1, "", "argmin"], [29, 1, 1, "", "argsort"], [30, 1, 1, "", "around"], [31, 1, 1, "", "array"], [32, 1, 1, "", "array_equal"], [33, 1, 1, "", "asanyarray"], [34, 1, 1, "", "asarray"], [35, 1, 1, "", "ascontiguousarray"], [36, 1, 1, "", "asfarray"], [37, 1, 1, "", "asfortranarray"], [38, 1, 1, "", "asnumpy"], [39, 1, 1, "", "atleast_1d"], [40, 1, 1, "", "atleast_2d"], [41, 1, 1, "", "atleast_3d"], [42, 1, 1, "", "average"], [43, 1, 1, "", "bincount"], [44, 1, 1, "", "bitwise_and"], [45, 1, 1, "", "bitwise_not"], [46, 1, 1, "", "bitwise_or"], [47, 1, 1, "", "bitwise_xor"], [48, 1, 1, "", "broadcast_to"], [49, 1, 1, "", "cbrt"], [50, 1, 1, "", "ceil"], [51, 1, 1, "", "choose"], [52, 1, 1, "", "concatenate"], [53, 1, 1, "", "conj"], [54, 1, 1, "", "conjugate"], [55, 1, 1, "", "convolve"], [56, 1, 1, "", "copy"], [57, 1, 1, "", "copysign"], [58, 1, 1, "", "copyto"], [59, 1, 1, "", "correlate"], [60, 1, 1, "", "cos"], [61, 1, 1, "", "cosh"], [62, 1, 1, "", "count_nonzero"], [63, 1, 1, "", "cov"], [64, 1, 1, "", "cross"], [65, 1, 1, "", "cumprod"], [66, 1, 1, "", "cumsum"], [67, 1, 1, "", "deg2rad"], [68, 1, 1, "", "degrees"], [69, 1, 1, "", "diag"], [70, 1, 1, "", "diag_indices"], [71, 1, 1, "", "diag_indices_from"], [72, 1, 1, "", "diagflat"], [73, 1, 1, "", "diagonal"], [74, 1, 1, "", "diff"], [75, 1, 1, "", "divide"], [76, 1, 1, "", "dot"], [78, 2, 1, "", "dtype"], [79, 1, 1, "", "ediff1d"], [80, 1, 1, "", "einsum"], [81, 1, 1, "", "einsum_path"], [82, 1, 1, "", "empty"], [83, 1, 1, "", "empty_like"], [84, 1, 1, "", "equal"], [85, 1, 1, "", "erf"], [86, 1, 1, "", "exp"], [87, 1, 1, "", "exp2"], [88, 1, 1, "", "expand_dims"], [89, 1, 1, "", "expm1"], [90, 1, 1, "", "extract"], [91, 1, 1, "", "eye"], [92, 1, 1, "", "fabs"], [10, 0, 0, "-", "fft"], [111, 1, 1, "", "fill_diagonal"], [112, 2, 1, "", "flatiter"], [113, 1, 1, "", "flip"], [114, 1, 1, "", "fliplr"], [115, 1, 1, "", "flipud"], [116, 1, 1, "", "floor"], [117, 1, 1, "", "floor_divide"], [118, 1, 1, "", "fmax"], [119, 1, 1, "", "fmin"], [120, 1, 1, "", "fmod"], [121, 1, 1, "", "from_dlpack"], [122, 1, 1, "", "frombuffer"], [123, 1, 1, "", "fromfile"], [124, 1, 1, "", "fromfunction"], [125, 1, 1, "", "fromiter"], [126, 1, 1, "", "fromstring"], [127, 1, 1, "", "full"], [128, 1, 1, "", "full_like"], [129, 1, 1, "", "geomspace"], [130, 1, 1, "", "get_include"], [131, 1, 1, "", "gradient"], [132, 1, 1, "", "greater"], [133, 1, 1, "", "greater_equal"], [134, 1, 1, "", "histogram"], [135, 1, 1, "", "hstack"], [136, 1, 1, "", "hypot"], [137, 1, 1, "", "identity"], [138, 1, 1, "", "indices"], [139, 1, 1, "", "inner"], [140, 1, 1, "", "invert"], [141, 1, 1, "", "isclose"], [142, 1, 1, "", "isfinite"], [143, 1, 1, "", "isinf"], [144, 1, 1, "", "isnan"], [145, 1, 1, "", "isscalar"], [146, 1, 1, "", "issubdtype"], [147, 1, 1, "", "issubsctype"], [148, 1, 1, "", "kron"], [149, 1, 1, "", "left_shift"], [150, 1, 1, "", "less"], [151, 1, 1, "", "less_equal"], [165, 1, 1, "", "linspace"], [166, 1, 1, "", "loadtxt"], [167, 1, 1, "", "log"], [168, 1, 1, "", "log10"], [169, 1, 1, "", "log1p"], [170, 1, 1, "", "log2"], [171, 1, 1, "", "logical_and"], [172, 1, 1, "", "logical_not"], [173, 1, 1, "", "logical_or"], [174, 1, 1, "", "logical_xor"], [175, 1, 1, "", "logspace"], [176, 1, 1, "", "matmul"], [177, 1, 1, "", "max"], [178, 1, 1, "", "maximum"], [179, 1, 1, "", "mean"], [180, 1, 1, "", "median"], [181, 1, 1, "", "meshgrid"], [182, 5, 1, "", "mgrid"], [183, 1, 1, "", "min"], [184, 1, 1, "", "minimum"], [185, 1, 1, "", "mod"], [186, 1, 1, "", "modf"], [187, 1, 1, "", "moveaxis"], [188, 1, 1, "", "multiply"], [189, 1, 1, "", "nancumprod"], [190, 1, 1, "", "nancumsum"], [191, 1, 1, "", "nanprod"], [192, 1, 1, "", "nansum"], [193, 1, 1, "", "nanvar"], [194, 3, 1, "", "ndarray"], [280, 1, 1, "", "negative"], [281, 1, 1, "", "nonzero"], [282, 1, 1, "", "not_equal"], [283, 5, 1, "", "ogrid"], [284, 1, 1, "", "ones"], [285, 1, 1, "", "ones_like"], [286, 1, 1, "", "outer"], [287, 1, 1, "", "partition"], [288, 1, 1, "", "place"], [289, 1, 1, "", "positive"], [290, 1, 1, "", "power"], [291, 1, 1, "", "prod"], [292, 1, 1, "", "proj"], [293, 1, 1, "", "ptp"], [294, 1, 1, "", "put"], [295, 1, 1, "", "put_along_axis"], [296, 1, 1, "", "putmask"], [297, 1, 1, "", "rad2deg"], [298, 1, 1, "", "radians"], [411, 0, 0, "-", "random"], [348, 1, 1, "", "ravel"], [349, 1, 1, "", "reciprocal"], [350, 1, 1, "", "remainder"], [351, 1, 1, "", "repeat"], [352, 1, 1, "", "reshape"], [353, 1, 1, "", "result_type"], [354, 1, 1, "", "right_shift"], [355, 1, 1, "", "rint"], [356, 1, 1, "", "roll"], [357, 1, 1, "", "rollaxis"], [358, 1, 1, "", "round"], [359, 1, 1, "", "searchsorted"], [360, 1, 1, "", "select"], [361, 1, 1, "", "shape"], [362, 1, 1, "", "sign"], [363, 1, 1, "", "signbit"], [364, 1, 1, "", "sin"], [365, 1, 1, "", "sinh"], [366, 1, 1, "", "sort"], [367, 1, 1, "", "sqrt"], [368, 1, 1, "", "square"], [369, 1, 1, "", "squeeze"], [370, 1, 1, "", "stack"], [371, 1, 1, "", "std"], [372, 1, 1, "", "subtract"], [373, 1, 1, "", "sum"], [374, 1, 1, "", "swapaxes"], [375, 1, 1, "", "take"], [376, 1, 1, "", "take_along_axis"], [377, 1, 1, "", "tan"], [378, 1, 1, "", "tanh"], [379, 1, 1, "", "tensordot"], [380, 1, 1, "", "trace"], [381, 1, 1, "", "transpose"], [382, 1, 1, "", "trapz"], [383, 1, 1, "", "tri"], [384, 1, 1, "", "tril"], [385, 1, 1, "", "tril_indices"], [386, 1, 1, "", "tril_indices_from"], [387, 1, 1, "", "triu"], [388, 1, 1, "", "triu_indices"], [389, 1, 1, "", "triu_indices_from"], [390, 1, 1, "", "true_divide"], [391, 1, 1, "", "trunc"], [392, 1, 1, "", "unique"], [393, 1, 1, "", "unwrap"], [394, 1, 1, "", "vander"], [395, 1, 1, "", "var"], [396, 1, 1, "", "vdot"], [397, 1, 1, "", "vstack"], [398, 1, 1, "", "where"], [399, 1, 1, "", "zeros"], [400, 1, 1, "", "zeros_like"]], "dpnp.dpnp_array": [[77, 2, 1, "", "dpnp_array"]], "dpnp.dpnp_array.dpnp_array": [[77, 3, 1, "", "T"], [77, 4, 1, "", "__eq__"], [77, 4, 1, "", "__ge__"], [77, 4, 1, "", "__getitem__"], [77, 4, 1, "", "__gt__"], [77, 4, 1, "", "__le__"], [77, 4, 1, "", "__len__"], [77, 4, 1, "", "__lt__"], [77, 4, 1, "", "__ne__"], [77, 4, 1, "", "__setitem__"], [77, 4, 1, "", "all"], [77, 4, 1, "", "any"], [77, 4, 1, "", "argmax"], [77, 4, 1, "", "argmin"], [77, 4, 1, "", "argsort"], [77, 4, 1, "", "asnumpy"], [77, 4, 1, "", "astype"], [77, 4, 1, "", "choose"], [77, 4, 1, "", "conj"], [77, 4, 1, "", "conjugate"], [77, 4, 1, "", "copy"], [77, 4, 1, "", "cumsum"], [77, 3, 1, "", "device"], [77, 4, 1, "", "diagonal"], [77, 4, 1, "", "dot"], [77, 3, 1, "", "dtype"], [77, 4, 1, "", "fill"], [77, 3, 1, "", "flags"], [77, 3, 1, "", "flat"], [77, 4, 1, "", "flatten"], [77, 4, 1, "", "get_array"], [77, 4, 1, "", "item"], [77, 3, 1, "", "itemsize"], [77, 4, 1, "", "max"], [77, 4, 1, "", "mean"], [77, 4, 1, "", "min"], [77, 3, 1, "", "nbytes"], [77, 3, 1, "", "ndim"], [77, 4, 1, "", "nonzero"], [77, 4, 1, "", "partition"], [77, 4, 1, "", "prod"], [77, 4, 1, "", "put"], [77, 4, 1, "", "reshape"], [77, 4, 1, "", "round"], [77, 3, 1, "", "shape"], [77, 3, 1, "", "size"], [77, 4, 1, "", "squeeze"], [77, 4, 1, "", "std"], [77, 3, 1, "", "strides"], [77, 4, 1, "", "sum"], [77, 4, 1, "", "swapaxes"], [77, 3, 1, "", "sycl_context"], [77, 3, 1, "", "sycl_device"], [77, 3, 1, "", "sycl_queue"], [77, 4, 1, "", "take"], [77, 4, 1, "", "to_device"], [77, 4, 1, "", "transpose"], [77, 3, 1, "", "usm_type"], [77, 4, 1, "", "var"]], "dpnp.dtype": [[78, 4, 1, "", "__eq__"], [78, 4, 1, "", "__ge__"], [78, 4, 1, "", "__getitem__"], [78, 4, 1, "", "__gt__"], [78, 4, 1, "", "__le__"], [78, 4, 1, "", "__len__"], [78, 4, 1, "", "__lt__"], [78, 4, 1, "", "__ne__"], [78, 3, 1, "", "alignment"], [78, 3, 1, "", "base"], [78, 3, 1, "", "byteorder"], [78, 3, 1, "", "char"], [78, 3, 1, "", "descr"], [78, 3, 1, "", "fields"], [78, 3, 1, "", "flags"], [78, 3, 1, "", "hasobject"], [78, 3, 1, "", "isalignedstruct"], [78, 3, 1, "", "isbuiltin"], [78, 3, 1, "", "isnative"], [78, 3, 1, "", "itemsize"], [78, 3, 1, "", "kind"], [78, 3, 1, "", "metadata"], [78, 3, 1, "", "name"], [78, 3, 1, "", "names"], [78, 3, 1, "", "ndim"], [78, 4, 1, "", "newbyteorder"], [78, 3, 1, "", "num"], [78, 3, 1, "", "shape"], [78, 3, 1, "", "str"], [78, 3, 1, "", "subdtype"], [78, 3, 1, "", "type"]], "dpnp.fft": [[93, 1, 1, "", "fft"], [94, 1, 1, "", "fft2"], [95, 1, 1, "", "fftfreq"], [96, 1, 1, "", "fftn"], [97, 1, 1, "", "fftshift"], [98, 1, 1, "", "hfft"], [99, 1, 1, "", "ifft"], [100, 1, 1, "", "ifft2"], [101, 1, 1, "", "ifftn"], [102, 1, 1, "", "ifftshift"], [103, 1, 1, "", "ihfft"], [104, 1, 1, "", "irfft"], [105, 1, 1, "", "irfft2"], [106, 1, 1, "", "irfftn"], [107, 1, 1, "", "rfft"], [108, 1, 1, "", "rfft2"], [109, 1, 1, "", "rfftfreq"], [110, 1, 1, "", "rfftn"]], "dpnp.flatiter": [[112, 4, 1, "", "__eq__"], [112, 4, 1, "", "__ge__"], [112, 4, 1, "", "__getitem__"], [112, 4, 1, "", "__gt__"], [112, 4, 1, "", "__iter__"], [112, 4, 1, "", "__le__"], [112, 4, 1, "", "__lt__"], [112, 4, 1, "", "__ne__"], [112, 4, 1, "", "__next__"], [112, 4, 1, "", "__setitem__"]], "dpnp.linalg": [[152, 1, 1, "", "cholesky"], [153, 1, 1, "", "cond"], [154, 1, 1, "", "det"], [155, 1, 1, "", "eig"], [156, 1, 1, "", "eigh"], [157, 1, 1, "", "eigvals"], [158, 1, 1, "", "inv"], [159, 1, 1, "", "matrix_power"], [160, 1, 1, "", "matrix_rank"], [161, 1, 1, "", "multi_dot"], [162, 1, 1, "", "norm"], [163, 1, 1, "", "qr"], [164, 1, 1, "", "svd"]], "dpnp.ndarray": [[195, 6, 1, "", "T"], [196, 4, 1, "", "__abs__"], [197, 4, 1, "", "__add__"], [198, 4, 1, "", "__and__"], [199, 4, 1, "", "__complex__"], [200, 4, 1, "", "__copy__"], [201, 4, 1, "", "__eq__"], [202, 4, 1, "", "__float__"], [203, 4, 1, "", "__floordiv__"], [204, 4, 1, "", "__ge__"], [205, 4, 1, "", "__getitem__"], [206, 4, 1, "", "__gt__"], [207, 4, 1, "", "__iadd__"], [208, 4, 1, "", "__iand__"], [209, 4, 1, "", "__ifloordiv__"], [210, 4, 1, "", "__ilshift__"], [211, 4, 1, "", "__imod__"], [212, 4, 1, "", "__imul__"], [213, 4, 1, "", "__int__"], [214, 4, 1, "", "__invert__"], [215, 4, 1, "", "__ior__"], [216, 4, 1, "", "__ipow__"], [217, 4, 1, "", "__irshift__"], [218, 4, 1, "", "__isub__"], [219, 4, 1, "", "__itruediv__"], [220, 4, 1, "", "__ixor__"], [221, 4, 1, "", "__le__"], [222, 4, 1, "", "__len__"], [223, 4, 1, "", "__lshift__"], [224, 4, 1, "", "__lt__"], [225, 4, 1, "", "__mod__"], [226, 4, 1, "", "__mul__"], [227, 4, 1, "", "__ne__"], [228, 4, 1, "", "__neg__"], [229, 4, 1, "", "__new__"], [230, 4, 1, "", "__or__"], [231, 4, 1, "", "__pos__"], [232, 4, 1, "", "__pow__"], [233, 4, 1, "", "__repr__"], [234, 4, 1, "", "__rshift__"], [235, 4, 1, "", "__setitem__"], [236, 4, 1, "", "__str__"], [237, 4, 1, "", "__sub__"], [238, 4, 1, "", "__truediv__"], [239, 4, 1, "", "__xor__"], [240, 4, 1, "", "all"], [241, 4, 1, "", "any"], [242, 4, 1, "", "argmax"], [243, 4, 1, "", "argmin"], [244, 4, 1, "", "argsort"], [245, 4, 1, "", "astype"], [246, 4, 1, "", "choose"], [247, 4, 1, "", "conj"], [248, 4, 1, "", "conjugate"], [249, 4, 1, "", "copy"], [250, 4, 1, "", "cumsum"], [251, 4, 1, "", "diagonal"], [252, 6, 1, "", "dtype"], [253, 4, 1, "", "fill"], [254, 6, 1, "", "flags"], [255, 6, 1, "", "flat"], [256, 4, 1, "", "flatten"], [257, 4, 1, "", "item"], [258, 6, 1, "", "itemsize"], [259, 4, 1, "", "max"], [260, 4, 1, "", "mean"], [261, 4, 1, "", "min"], [262, 6, 1, "", "nbytes"], [263, 6, 1, "", "ndim"], [264, 4, 1, "", "nonzero"], [265, 4, 1, "", "partition"], [266, 4, 1, "", "prod"], [267, 4, 1, "", "put"], [268, 4, 1, "", "reshape"], [269, 4, 1, "", "round"], [270, 6, 1, "", "shape"], [271, 6, 1, "", "size"], [272, 4, 1, "", "squeeze"], [273, 4, 1, "", "std"], [274, 6, 1, "", "strides"], [275, 4, 1, "", "sum"], [276, 4, 1, "", "swapaxes"], [277, 4, 1, "", "take"], [278, 4, 1, "", "transpose"], [279, 4, 1, "", "var"]], "dpnp.random": [[299, 2, 1, "", "RandomState"], [300, 1, 1, "", "beta"], [301, 1, 1, "", "binomial"], [302, 1, 1, "", "bytes"], [303, 1, 1, "", "chisquare"], [304, 1, 1, "", "choice"], [305, 1, 1, "", "dirichlet"], [306, 1, 1, "", "exponential"], [307, 1, 1, "", "f"], [308, 1, 1, "", "gamma"], [309, 1, 1, "", "geometric"], [310, 1, 1, "", "gumbel"], [311, 1, 1, "", "hypergeometric"], [312, 1, 1, "", "laplace"], [313, 1, 1, "", "logistic"], [314, 1, 1, "", "lognormal"], [315, 1, 1, "", "logseries"], [316, 1, 1, "", "multinomial"], [317, 1, 1, "", "multivariate_normal"], [318, 1, 1, "", "negative_binomial"], [319, 1, 1, "", "noncentral_chisquare"], [320, 1, 1, "", "noncentral_f"], [321, 1, 1, "", "normal"], [322, 1, 1, "", "pareto"], [323, 1, 1, "", "permutation"], [324, 1, 1, "", "poisson"], [325, 1, 1, "", "power"], [326, 1, 1, "", "rand"], [327, 1, 1, "", "randint"], [328, 1, 1, "", "randn"], [329, 1, 1, "", "random"], [330, 1, 1, "", "random_integers"], [331, 1, 1, "", "random_sample"], [332, 1, 1, "", "ranf"], [333, 1, 1, "", "rayleigh"], [334, 1, 1, "", "sample"], [335, 1, 1, "", "seed"], [336, 1, 1, "", "shuffle"], [337, 1, 1, "", "standard_cauchy"], [338, 1, 1, "", "standard_exponential"], [339, 1, 1, "", "standard_gamma"], [340, 1, 1, "", "standard_normal"], [341, 1, 1, "", "standard_t"], [342, 1, 1, "", "triangular"], [343, 1, 1, "", "uniform"], [344, 1, 1, "", "vonmises"], [345, 1, 1, "", "wald"], [346, 1, 1, "", "weibull"], [347, 1, 1, "", "zipf"]], "dpnp.random.RandomState": [[299, 4, 1, "", "__eq__"], [299, 4, 1, "", "__ge__"], [299, 4, 1, "", "__gt__"], [299, 4, 1, "", "__le__"], [299, 4, 1, "", "__lt__"], [299, 4, 1, "", "__ne__"], [299, 4, 1, "", "get_state"], [299, 4, 1, "", "get_sycl_device"], [299, 4, 1, "", "get_sycl_queue"], [299, 4, 1, "", "normal"], [299, 4, 1, "", "rand"], [299, 4, 1, "", "randint"], [299, 4, 1, "", "randn"], [299, 4, 1, "", "random_sample"], [299, 4, 1, "", "standard_normal"], [299, 4, 1, "", "uniform"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:attribute", "4": "py:method", "5": "py:data", "6": "py:property"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "method", "Python method"], "5": ["py", "data", "Python data"], "6": ["py", "property", "Python property"]}, "titleterms": {"interplai": 0, "data": [0, 2, 7, 8, 9, 402, 408, 411], "parallel": [0, 2], "control": 0, "librari": 0, "exampl": [0, 4], "c": 1, "backend": 1, "api": [1, 401], "refer": [1, 401], "extens": 2, "numpi": [2, 6], "develop": 2, "inform": [2, 8], "overview": 3, "quick": 4, "start": 4, "guid": 4, "devic": 4, "driver": 4, "python": 4, "interpret": 4, "instal": 4, "packag": [4, 410], "from": [4, 7], "anaconda": 4, "build": 4, "conda": 4, "scikit": 4, "test": [4, 8, 404], "binari": 5, "oper": [5, 402, 404, 405, 406, 408, 416], "elementwis": 5, "bit": [5, 416], "pack": 5, "output": 5, "format": 5, "comparison": [6, 404, 408, 416], "tabl": 6, "dpnp": [6, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 411], "cupi": 6, "summari": 6, "modul": [6, 410], "level": 6, "multi": [6, 408], "dimension": [6, 408], "arrai": [6, 7, 9, 31, 402, 404, 405, 408], "linear": [6, 403], "algebra": [6, 403], "discret": 6, "fourier": 6, "transform": 6, "random": [6, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 411], "sampl": [6, 334, 411], "creation": 7, "routin": [7, 8, 10, 402, 405, 406, 407, 412], "basic": [7, 405, 410], "other": [7, 403, 406, 408], "numer": 7, "rang": 7, "matrix": [7, 403, 408], "The": 7, "class": 7, "type": [8, 9, 404, 408], "creat": 8, "miscellan": [8, 406, 407], "avail": [9, 416], "fft": [10, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110], "function": [10, 404, 406, 414, 415, 416], "standard": 10, "real": 10, "hermitian": 10, "helper": 10, "ab": 11, "absolut": 12, "add": 13, "all": [14, 240], "allclos": 15, "amax": 16, "amin": 17, "ani": [18, 241], "arang": 19, "arcco": 20, "arccosh": 21, "arcsin": 22, "arcsinh": 23, "arctan": 24, "arctan2": 25, "arctanh": 26, "argmax": [27, 242], "argmin": [28, 243], "argsort": [29, 244], "around": 30, "array_equ": 32, "asanyarrai": 33, "asarrai": 34, "ascontiguousarrai": 35, "asfarrai": 36, "asfortranarrai": 37, "asnumpi": 38, "atleast_1d": 39, "atleast_2d": 40, "atleast_3d": 41, "averag": [42, 415], "bincount": 43, "bitwise_and": 44, "bitwise_not": 45, "bitwise_or": 46, "bitwise_xor": 47, "broadcast_to": 48, "cbrt": 49, "ceil": 50, "choos": [51, 246], "concaten": 52, "conj": [53, 247], "conjug": [54, 248], "convolv": 55, "copi": [56, 249], "copysign": 57, "copyto": 58, "correl": [59, 415], "co": 60, "cosh": 61, "count_nonzero": 62, "cov": 63, "cross": 64, "cumprod": 65, "cumsum": [66, 250], "deg2rad": 67, "degre": 68, "diag": 69, "diag_indic": 70, "diag_indices_from": 71, "diagflat": 72, "diagon": [73, 251], "diff": 74, "divid": 75, "dot": 76, "dpnp_arrai": 77, "dtype": [78, 252], "ediff1d": 79, "einsum": 80, "einsum_path": 81, "empti": 82, "empty_lik": 83, "equal": 84, "erf": 85, "exp": 86, "exp2": 87, "expand_dim": 88, "expm1": 89, "extract": 90, "ey": 91, "fab": 92, "fft2": 94, "fftfreq": 95, "fftn": 96, "fftshift": 97, "hfft": 98, "ifft": 99, "ifft2": 100, "ifftn": 101, "ifftshift": 102, "ihfft": 103, "irfft": 104, "irfft2": 105, "irfftn": 106, "rfft": 107, "rfft2": 108, "rfftfreq": 109, "rfftn": 110, "fill_diagon": 111, "flatit": 112, "flip": 113, "fliplr": 114, "flipud": 115, "floor": 116, "floor_divid": 117, "fmax": 118, "fmin": 119, "fmod": 120, "from_dlpack": 121, "frombuff": 122, "fromfil": 123, "fromfunct": 124, "fromit": 125, "fromstr": 126, "full": 127, "full_lik": 128, "geomspac": 129, "get_includ": 130, "gradient": 131, "greater": 132, "greater_equ": 133, "histogram": [134, 415], "hstack": 135, "hypot": 136, "ident": 137, "indic": 138, "inner": 139, "invert": 140, "isclos": 141, "isfinit": 142, "isinf": 143, "isnan": 144, "isscalar": 145, "issubdtyp": 146, "issubsctyp": 147, "kron": 148, "left_shift": 149, "less": 150, "less_equ": 151, "linalg": [152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "choleski": 152, "cond": 153, "det": 154, "eig": 155, "eigh": 156, "eigval": 157, "inv": 158, "matrix_pow": 159, "matrix_rank": 160, "multi_dot": 161, "norm": [162, 403], "qr": 163, "svd": 164, "linspac": 165, "loadtxt": 166, "log": 167, "log10": 168, "log1p": 169, "log2": 170, "logical_and": 171, "logical_not": 172, "logical_or": 173, "logical_xor": 174, "logspac": 175, "matmul": 176, "max": [177, 259], "maximum": 178, "mean": [179, 260], "median": 180, "meshgrid": 181, "mgrid": 182, "min": [183, 261], "minimum": 184, "mod": 185, "modf": 186, "moveaxi": 187, "multipli": 188, "nancumprod": 189, "nancumsum": 190, "nanprod": 191, "nansum": 192, "nanvar": 193, "ndarrai": [194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 408], "t": 195, "__abs__": 196, "__add__": 197, "__and__": 198, "__complex__": 199, "__copy__": 200, "__eq__": 201, "__float__": 202, "__floordiv__": 203, "__ge__": 204, "__getitem__": 205, "__gt__": 206, "__iadd__": 207, "__iand__": 208, "__ifloordiv__": 209, "__ilshift__": 210, "__imod__": 211, "__imul__": 212, "__int__": 213, "__invert__": 214, "__ior__": 215, "__ipow__": 216, "__irshift__": 217, "__isub__": 218, "__itruediv__": 219, "__ixor__": 220, "__le__": 221, "__len__": 222, "__lshift__": 223, "__lt__": 224, "__mod__": 225, "__mul__": 226, "__ne__": 227, "__neg__": 228, "__new__": 229, "__or__": 230, "__pos__": 231, "__pow__": 232, "__repr__": 233, "__rshift__": 234, "__setitem__": 235, "__str__": 236, "__sub__": 237, "__truediv__": 238, "__xor__": 239, "astyp": 245, "fill": 253, "flag": 254, "flat": 255, "flatten": 256, "item": [257, 408], "items": 258, "nbyte": 262, "ndim": 263, "nonzero": [264, 281], "partit": [265, 287], "prod": [266, 291], "put": [267, 294], "reshap": [268, 352], "round": [269, 358, 406], "shape": [270, 361, 405, 408], "size": 271, "squeez": [272, 369], "std": [273, 371], "stride": 274, "sum": [275, 373, 406], "swapax": [276, 374], "take": [277, 375], "transpos": [278, 381, 405], "var": [279, 395], "neg": 280, "not_equ": 282, "ogrid": 283, "ones": 284, "ones_lik": 285, "outer": 286, "place": 288, "posit": 289, "power": [290, 325], "proj": 292, "ptp": 293, "put_along_axi": 295, "putmask": 296, "rad2deg": 297, "radian": 298, "randomst": 299, "beta": 300, "binomi": 301, "byte": 302, "chisquar": 303, "choic": 304, "dirichlet": 305, "exponenti": 306, "f": 307, "gamma": 308, "geometr": 309, "gumbel": 310, "hypergeometr": 311, "laplac": 312, "logist": 313, "lognorm": 314, "logseri": 315, "multinomi": 316, "multivariate_norm": 317, "negative_binomi": 318, "noncentral_chisquar": 319, "noncentral_f": 320, "normal": 321, "pareto": 322, "permut": [323, 411], "poisson": 324, "rand": 326, "randint": 327, "randn": 328, "random_integ": 330, "random_sampl": 331, "ranf": 332, "rayleigh": 333, "seed": 335, "shuffl": 336, "standard_cauchi": 337, "standard_exponenti": 338, "standard_gamma": 339, "standard_norm": 340, "standard_t": 341, "triangular": 342, "uniform": 343, "vonmis": 344, "wald": 345, "weibul": 346, "zipf": 347, "ravel": 348, "reciproc": 349, "remaind": 350, "repeat": 351, "result_typ": 353, "right_shift": 354, "rint": 355, "roll": 356, "rollaxi": 357, "searchsort": 359, "select": [360, 408], "sign": 362, "signbit": 363, "sin": 364, "sinh": 365, "sort": [366, 413], "sqrt": 367, "squar": 368, "stack": 370, "subtract": 372, "take_along_axi": 376, "tan": 377, "tanh": 378, "tensordot": 379, "trace": 380, "trapz": 382, "tri": 383, "tril": 384, "tril_indic": 385, "tril_indices_from": 386, "triu": 387, "triu_indic": 388, "triu_indices_from": 389, "true_divid": 390, "trunc": 391, "uniqu": 392, "unwrap": 393, "vander": 394, "vdot": 396, "vstack": 397, "where": 398, "zero": 399, "zeros_lik": 400, "index": [402, 408], "gener": [402, 411], "like": [402, 405], "insert": 402, "iter": 402, "over": 402, "vector": 403, "product": [403, 406], "decomposit": 403, "eigenvalu": 403, "number": [403, 405, 406], "solv": 403, "equat": 403, "logic": 404, "truth": 404, "valu": 404, "infin": 404, "nan": 404, "manipul": [405, 408], "chang": 405, "dimens": 405, "kind": 405, "join": 405, "split": 405, "tile": 405, "ad": 405, "remov": 405, "element": 405, "rearrang": 405, "mathemat": 406, "trigonometr": [406, 416], "hyperbol": 406, "differ": 406, "expon": 406, "logarithm": 406, "special": [406, 408, 414], "float": [406, 416], "point": 406, "ration": 406, "arithmet": [406, 408, 410], "handl": 406, "complex": 406, "extrema": 406, "find": 406, "util": 407, "construct": 408, "attribut": 408, "memori": 408, "layout": 408, "method": 408, "convers": 408, "calcul": 408, "multipl": 408, "pad": 409, "polynomi": 410, "polyutil": 410, "poly1d": 410, "simpl": 411, "distribut": 411, "search": 413, "count": 413, "error": 414, "statist": 415, "order": 415, "varianc": 415, "univers": 416, "ufunc": 416, "math": 416, "twiddl": 416}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1, "sphinx.ext.intersphinx": 1, "sphinx": 60}, "alltitles": {"Interplay with the Data Parallel Control Library": [[0, "interplay-with-the-data-parallel-control-library"]], "Example": [[0, "example"]], "C++ backend API Reference": [[1, "c-backend-api-reference"]], "Data Parallel Extension for NumPy*": [[2, "module-dpnp"]], "Development information": [[2, null]], "Overview": [[3, "id1"]], "Quick Start Guide": [[4, "id1"]], "Device Drivers": [[4, "device-drivers"]], "Python Interpreter": [[4, "python-interpreter"]], "Installation": [[4, "installation"]], "Install Package from Anaconda": [[4, "install-package-from-anaconda"]], "Build and Install Conda Package": [[4, "build-and-install-conda-package"]], "Build and Install with scikit-build": [[4, "build-and-install-with-scikit-build"]], "Testing": [[4, "testing"]], "Examples": [[4, "examples"]], "Binary Operations": [[5, "binary-operations"]], "Elementwise bit operations": [[5, "elementwise-bit-operations"]], "Bit packing": [[5, "bit-packing"]], "Output formatting": [[5, "output-formatting"]], "Comparison Table NumPy/ DPNP/ CuPy": [[6, "comparison-table-numpy-dpnp-cupy"]], "Summary": [[6, "summary"]], "Module-Level": [[6, "module-level"]], "Multi-Dimensional Array": [[6, "multi-dimensional-array"]], "Linear Algebra": [[6, "linear-algebra"], [403, "linear-algebra"]], "Discrete Fourier Transform": [[6, "discrete-fourier-transform"]], "Random Sampling": [[6, "random-sampling"]], "Array Creation Routines": [[7, "array-creation-routines"]], "Basic creation routines": [[7, "basic-creation-routines"]], "Creation from other data": [[7, "creation-from-other-data"]], "Numerical ranges": [[7, "numerical-ranges"]], "Matrix creation": [[7, "matrix-creation"]], "The Matrix class": [[7, "the-matrix-class"]], "Data type routines": [[8, "data-type-routines"]], "Creating data types": [[8, "creating-data-types"]], "Data type information": [[8, "data-type-information"]], "Data type testing": [[8, "data-type-testing"]], "Miscellaneous": [[8, "miscellaneous"], [406, "miscellaneous"]], "Available array data types": [[9, "available-array-data-types"]], "FFT Functions": [[10, "fft-functions"]], "Standard FFTs": [[10, "standard-ffts"]], "Real FFTs": [[10, "real-ffts"]], "Hermitian FFTs": [[10, "hermitian-ffts"]], "Helper routines": [[10, "helper-routines"]], "dpnp.abs": [[11, "dpnp-abs"]], "dpnp.absolute": [[12, "dpnp-absolute"]], "dpnp.add": [[13, "dpnp-add"]], "dpnp.all": [[14, "dpnp-all"]], "dpnp.allclose": [[15, "dpnp-allclose"]], "dpnp.amax": [[16, "dpnp-amax"]], "dpnp.amin": [[17, "dpnp-amin"]], "dpnp.any": [[18, "dpnp-any"]], "dpnp.arange": [[19, "dpnp-arange"]], "dpnp.arccos": [[20, "dpnp-arccos"]], "dpnp.arccosh": [[21, "dpnp-arccosh"]], "dpnp.arcsin": [[22, "dpnp-arcsin"]], "dpnp.arcsinh": [[23, "dpnp-arcsinh"]], "dpnp.arctan": [[24, "dpnp-arctan"]], "dpnp.arctan2": [[25, "dpnp-arctan2"]], "dpnp.arctanh": [[26, "dpnp-arctanh"]], "dpnp.argmax": [[27, "dpnp-argmax"]], "dpnp.argmin": [[28, "dpnp-argmin"]], "dpnp.argsort": [[29, "dpnp-argsort"]], "dpnp.around": [[30, "dpnp-around"]], "dpnp.array": [[31, "dpnp-array"]], "dpnp.array_equal": [[32, "dpnp-array-equal"]], "dpnp.asanyarray": [[33, "dpnp-asanyarray"]], "dpnp.asarray": [[34, "dpnp-asarray"]], "dpnp.ascontiguousarray": [[35, "dpnp-ascontiguousarray"]], "dpnp.asfarray": [[36, "dpnp-asfarray"]], "dpnp.asfortranarray": [[37, "dpnp-asfortranarray"]], "dpnp.asnumpy": [[38, "dpnp-asnumpy"]], "dpnp.atleast_1d": [[39, "dpnp-atleast-1d"]], "dpnp.atleast_2d": [[40, "dpnp-atleast-2d"]], "dpnp.atleast_3d": [[41, "dpnp-atleast-3d"]], "dpnp.average": [[42, "dpnp-average"]], "dpnp.bincount": [[43, "dpnp-bincount"]], "dpnp.bitwise_and": [[44, "dpnp-bitwise-and"]], "dpnp.bitwise_not": [[45, "dpnp-bitwise-not"]], "dpnp.bitwise_or": [[46, "dpnp-bitwise-or"]], "dpnp.bitwise_xor": [[47, "dpnp-bitwise-xor"]], "dpnp.broadcast_to": [[48, "dpnp-broadcast-to"]], "dpnp.cbrt": [[49, "dpnp-cbrt"]], "dpnp.ceil": [[50, "dpnp-ceil"]], "dpnp.choose": [[51, "dpnp-choose"]], "dpnp.concatenate": [[52, "dpnp-concatenate"]], "dpnp.conj": [[53, "dpnp-conj"]], "dpnp.conjugate": [[54, "dpnp-conjugate"]], "dpnp.convolve": [[55, "dpnp-convolve"]], "dpnp.copy": [[56, "dpnp-copy"]], "dpnp.copysign": [[57, "dpnp-copysign"]], "dpnp.copyto": [[58, "dpnp-copyto"]], "dpnp.correlate": [[59, "dpnp-correlate"]], "dpnp.cos": [[60, "dpnp-cos"]], "dpnp.cosh": [[61, "dpnp-cosh"]], "dpnp.count_nonzero": [[62, "dpnp-count-nonzero"]], "dpnp.cov": [[63, "dpnp-cov"]], "dpnp.cross": [[64, "dpnp-cross"]], "dpnp.cumprod": [[65, "dpnp-cumprod"]], "dpnp.cumsum": [[66, "dpnp-cumsum"]], "dpnp.deg2rad": [[67, "dpnp-deg2rad"]], "dpnp.degrees": [[68, "dpnp-degrees"]], "dpnp.diag": [[69, "dpnp-diag"]], "dpnp.diag_indices": [[70, "dpnp-diag-indices"]], "dpnp.diag_indices_from": [[71, "dpnp-diag-indices-from"]], "dpnp.diagflat": [[72, "dpnp-diagflat"]], "dpnp.diagonal": [[73, "dpnp-diagonal"]], "dpnp.diff": [[74, "dpnp-diff"]], "dpnp.divide": [[75, "dpnp-divide"]], "dpnp.dot": [[76, "dpnp-dot"]], "dpnp.dpnp_array.dpnp_array": [[77, "dpnp-dpnp-array-dpnp-array"]], "dpnp.dtype": [[78, "dpnp-dtype"]], "dpnp.ediff1d": [[79, "dpnp-ediff1d"]], "dpnp.einsum": [[80, "dpnp-einsum"]], "dpnp.einsum_path": [[81, "dpnp-einsum-path"]], "dpnp.empty": [[82, "dpnp-empty"]], "dpnp.empty_like": [[83, "dpnp-empty-like"]], "dpnp.equal": [[84, "dpnp-equal"]], "dpnp.erf": [[85, "dpnp-erf"]], "dpnp.exp": [[86, "dpnp-exp"]], "dpnp.exp2": [[87, "dpnp-exp2"]], "dpnp.expand_dims": [[88, "dpnp-expand-dims"]], "dpnp.expm1": [[89, "dpnp-expm1"]], "dpnp.extract": [[90, "dpnp-extract"]], "dpnp.eye": [[91, "dpnp-eye"]], "dpnp.fabs": [[92, "dpnp-fabs"]], "dpnp.fft.fft": [[93, "dpnp-fft-fft"]], "dpnp.fft.fft2": [[94, "dpnp-fft-fft2"]], "dpnp.fft.fftfreq": [[95, "dpnp-fft-fftfreq"]], "dpnp.fft.fftn": [[96, "dpnp-fft-fftn"]], "dpnp.fft.fftshift": [[97, "dpnp-fft-fftshift"]], "dpnp.fft.hfft": [[98, "dpnp-fft-hfft"]], "dpnp.fft.ifft": [[99, "dpnp-fft-ifft"]], "dpnp.fft.ifft2": [[100, "dpnp-fft-ifft2"]], "dpnp.fft.ifftn": [[101, "dpnp-fft-ifftn"]], "dpnp.fft.ifftshift": [[102, "dpnp-fft-ifftshift"]], "dpnp.fft.ihfft": [[103, "dpnp-fft-ihfft"]], "dpnp.fft.irfft": [[104, "dpnp-fft-irfft"]], "dpnp.fft.irfft2": [[105, "dpnp-fft-irfft2"]], "dpnp.fft.irfftn": [[106, "dpnp-fft-irfftn"]], "dpnp.fft.rfft": [[107, "dpnp-fft-rfft"]], "dpnp.fft.rfft2": [[108, "dpnp-fft-rfft2"]], "dpnp.fft.rfftfreq": [[109, "dpnp-fft-rfftfreq"]], "dpnp.fft.rfftn": [[110, "dpnp-fft-rfftn"]], "dpnp.fill_diagonal": [[111, "dpnp-fill-diagonal"]], "dpnp.flatiter": [[112, "dpnp-flatiter"]], "dpnp.flip": [[113, "dpnp-flip"]], "dpnp.fliplr": [[114, "dpnp-fliplr"]], "dpnp.flipud": [[115, "dpnp-flipud"]], "dpnp.floor": [[116, "dpnp-floor"]], "dpnp.floor_divide": [[117, "dpnp-floor-divide"]], "dpnp.fmax": [[118, "dpnp-fmax"]], "dpnp.fmin": [[119, "dpnp-fmin"]], "dpnp.fmod": [[120, "dpnp-fmod"]], "dpnp.from_dlpack": [[121, "dpnp-from-dlpack"]], "dpnp.frombuffer": [[122, "dpnp-frombuffer"]], "dpnp.fromfile": [[123, "dpnp-fromfile"]], "dpnp.fromfunction": [[124, "dpnp-fromfunction"]], "dpnp.fromiter": [[125, "dpnp-fromiter"]], "dpnp.fromstring": [[126, "dpnp-fromstring"]], "dpnp.full": [[127, "dpnp-full"]], "dpnp.full_like": [[128, "dpnp-full-like"]], "dpnp.geomspace": [[129, "dpnp-geomspace"]], "dpnp.get_include": [[130, "dpnp-get-include"]], "dpnp.gradient": [[131, "dpnp-gradient"]], "dpnp.greater": [[132, "dpnp-greater"]], "dpnp.greater_equal": [[133, "dpnp-greater-equal"]], "dpnp.histogram": [[134, "dpnp-histogram"]], "dpnp.hstack": [[135, "dpnp-hstack"]], "dpnp.hypot": [[136, "dpnp-hypot"]], "dpnp.identity": [[137, "dpnp-identity"]], "dpnp.indices": [[138, "dpnp-indices"]], "dpnp.inner": [[139, "dpnp-inner"]], "dpnp.invert": [[140, "dpnp-invert"]], "dpnp.isclose": [[141, "dpnp-isclose"]], "dpnp.isfinite": [[142, "dpnp-isfinite"]], "dpnp.isinf": [[143, "dpnp-isinf"]], "dpnp.isnan": [[144, "dpnp-isnan"]], "dpnp.isscalar": [[145, "dpnp-isscalar"]], "dpnp.issubdtype": [[146, "dpnp-issubdtype"]], "dpnp.issubsctype": [[147, "dpnp-issubsctype"]], "dpnp.kron": [[148, "dpnp-kron"]], "dpnp.left_shift": [[149, "dpnp-left-shift"]], "dpnp.less": [[150, "dpnp-less"]], "dpnp.less_equal": [[151, "dpnp-less-equal"]], "dpnp.linalg.cholesky": [[152, "dpnp-linalg-cholesky"]], "dpnp.linalg.cond": [[153, "dpnp-linalg-cond"]], "dpnp.linalg.det": [[154, "dpnp-linalg-det"]], "dpnp.linalg.eig": [[155, "dpnp-linalg-eig"]], "dpnp.linalg.eigh": [[156, "dpnp-linalg-eigh"]], "dpnp.linalg.eigvals": [[157, "dpnp-linalg-eigvals"]], "dpnp.linalg.inv": [[158, "dpnp-linalg-inv"]], "dpnp.linalg.matrix_power": [[159, "dpnp-linalg-matrix-power"]], "dpnp.linalg.matrix_rank": [[160, "dpnp-linalg-matrix-rank"]], "dpnp.linalg.multi_dot": [[161, "dpnp-linalg-multi-dot"]], "dpnp.linalg.norm": [[162, "dpnp-linalg-norm"]], "dpnp.linalg.qr": [[163, "dpnp-linalg-qr"]], "dpnp.linalg.svd": [[164, "dpnp-linalg-svd"]], "dpnp.linspace": [[165, "dpnp-linspace"]], "dpnp.loadtxt": [[166, "dpnp-loadtxt"]], "dpnp.log": [[167, "dpnp-log"]], "dpnp.log10": [[168, "dpnp-log10"]], "dpnp.log1p": [[169, "dpnp-log1p"]], "dpnp.log2": [[170, "dpnp-log2"]], "dpnp.logical_and": [[171, "dpnp-logical-and"]], "dpnp.logical_not": [[172, "dpnp-logical-not"]], "dpnp.logical_or": [[173, "dpnp-logical-or"]], "dpnp.logical_xor": [[174, "dpnp-logical-xor"]], "dpnp.logspace": [[175, "dpnp-logspace"]], "dpnp.matmul": [[176, "dpnp-matmul"]], "dpnp.max": [[177, "dpnp-max"]], "dpnp.maximum": [[178, "dpnp-maximum"]], "dpnp.mean": [[179, "dpnp-mean"]], "dpnp.median": [[180, "dpnp-median"]], "dpnp.meshgrid": [[181, "dpnp-meshgrid"]], "dpnp.mgrid": [[182, "dpnp-mgrid"]], "dpnp.min": [[183, "dpnp-min"]], "dpnp.minimum": [[184, "dpnp-minimum"]], "dpnp.mod": [[185, "dpnp-mod"]], "dpnp.modf": [[186, "dpnp-modf"]], "dpnp.moveaxis": [[187, "dpnp-moveaxis"]], "dpnp.multiply": [[188, "dpnp-multiply"]], "dpnp.nancumprod": [[189, "dpnp-nancumprod"]], "dpnp.nancumsum": [[190, "dpnp-nancumsum"]], "dpnp.nanprod": [[191, "dpnp-nanprod"]], "dpnp.nansum": [[192, "dpnp-nansum"]], "dpnp.nanvar": [[193, "dpnp-nanvar"]], "dpnp.ndarray": [[194, "dpnp-ndarray"]], "dpnp.ndarray.T": [[195, "dpnp-ndarray-t"]], "dpnp.ndarray.__abs__": [[196, "dpnp-ndarray-abs"]], "dpnp.ndarray.__add__": [[197, "dpnp-ndarray-add"]], "dpnp.ndarray.__and__": [[198, "dpnp-ndarray-and"]], "dpnp.ndarray.__complex__": [[199, "dpnp-ndarray-complex"]], "dpnp.ndarray.__copy__": [[200, "dpnp-ndarray-copy"]], "dpnp.ndarray.__eq__": [[201, "dpnp-ndarray-eq"]], "dpnp.ndarray.__float__": [[202, "dpnp-ndarray-float"]], "dpnp.ndarray.__floordiv__": [[203, "dpnp-ndarray-floordiv"]], "dpnp.ndarray.__ge__": [[204, "dpnp-ndarray-ge"]], "dpnp.ndarray.__getitem__": [[205, "dpnp-ndarray-getitem"]], "dpnp.ndarray.__gt__": [[206, "dpnp-ndarray-gt"]], "dpnp.ndarray.__iadd__": [[207, "dpnp-ndarray-iadd"]], "dpnp.ndarray.__iand__": [[208, "dpnp-ndarray-iand"]], "dpnp.ndarray.__ifloordiv__": [[209, "dpnp-ndarray-ifloordiv"]], "dpnp.ndarray.__ilshift__": [[210, "dpnp-ndarray-ilshift"]], "dpnp.ndarray.__imod__": [[211, "dpnp-ndarray-imod"]], "dpnp.ndarray.__imul__": [[212, "dpnp-ndarray-imul"]], "dpnp.ndarray.__int__": [[213, "dpnp-ndarray-int"]], "dpnp.ndarray.__invert__": [[214, "dpnp-ndarray-invert"]], "dpnp.ndarray.__ior__": [[215, "dpnp-ndarray-ior"]], "dpnp.ndarray.__ipow__": [[216, "dpnp-ndarray-ipow"]], "dpnp.ndarray.__irshift__": [[217, "dpnp-ndarray-irshift"]], "dpnp.ndarray.__isub__": [[218, "dpnp-ndarray-isub"]], "dpnp.ndarray.__itruediv__": [[219, "dpnp-ndarray-itruediv"]], "dpnp.ndarray.__ixor__": [[220, "dpnp-ndarray-ixor"]], "dpnp.ndarray.__le__": [[221, "dpnp-ndarray-le"]], "dpnp.ndarray.__len__": [[222, "dpnp-ndarray-len"]], "dpnp.ndarray.__lshift__": [[223, "dpnp-ndarray-lshift"]], "dpnp.ndarray.__lt__": [[224, "dpnp-ndarray-lt"]], "dpnp.ndarray.__mod__": [[225, "dpnp-ndarray-mod"]], "dpnp.ndarray.__mul__": [[226, "dpnp-ndarray-mul"]], "dpnp.ndarray.__ne__": [[227, "dpnp-ndarray-ne"]], "dpnp.ndarray.__neg__": [[228, "dpnp-ndarray-neg"]], "dpnp.ndarray.__new__": [[229, "dpnp-ndarray-new"]], "dpnp.ndarray.__or__": [[230, "dpnp-ndarray-or"]], "dpnp.ndarray.__pos__": [[231, "dpnp-ndarray-pos"]], "dpnp.ndarray.__pow__": [[232, "dpnp-ndarray-pow"]], "dpnp.ndarray.__repr__": [[233, "dpnp-ndarray-repr"]], "dpnp.ndarray.__rshift__": [[234, "dpnp-ndarray-rshift"]], "dpnp.ndarray.__setitem__": [[235, "dpnp-ndarray-setitem"]], "dpnp.ndarray.__str__": [[236, "dpnp-ndarray-str"]], "dpnp.ndarray.__sub__": [[237, "dpnp-ndarray-sub"]], "dpnp.ndarray.__truediv__": [[238, "dpnp-ndarray-truediv"]], "dpnp.ndarray.__xor__": [[239, "dpnp-ndarray-xor"]], "dpnp.ndarray.all": [[240, "dpnp-ndarray-all"]], "dpnp.ndarray.any": [[241, "dpnp-ndarray-any"]], "dpnp.ndarray.argmax": [[242, "dpnp-ndarray-argmax"]], "dpnp.ndarray.argmin": [[243, "dpnp-ndarray-argmin"]], "dpnp.ndarray.argsort": [[244, "dpnp-ndarray-argsort"]], "dpnp.ndarray.astype": [[245, "dpnp-ndarray-astype"]], "dpnp.ndarray.choose": [[246, "dpnp-ndarray-choose"]], "dpnp.ndarray.conj": [[247, "dpnp-ndarray-conj"]], "dpnp.ndarray.conjugate": [[248, "dpnp-ndarray-conjugate"]], "dpnp.ndarray.copy": [[249, "dpnp-ndarray-copy"]], "dpnp.ndarray.cumsum": [[250, "dpnp-ndarray-cumsum"]], "dpnp.ndarray.diagonal": [[251, "dpnp-ndarray-diagonal"]], "dpnp.ndarray.dtype": [[252, "dpnp-ndarray-dtype"]], "dpnp.ndarray.fill": [[253, "dpnp-ndarray-fill"]], "dpnp.ndarray.flags": [[254, "dpnp-ndarray-flags"]], "dpnp.ndarray.flat": [[255, "dpnp-ndarray-flat"]], "dpnp.ndarray.flatten": [[256, "dpnp-ndarray-flatten"]], "dpnp.ndarray.item": [[257, "dpnp-ndarray-item"]], "dpnp.ndarray.itemsize": [[258, "dpnp-ndarray-itemsize"]], "dpnp.ndarray.max": [[259, "dpnp-ndarray-max"]], "dpnp.ndarray.mean": [[260, "dpnp-ndarray-mean"]], "dpnp.ndarray.min": [[261, "dpnp-ndarray-min"]], "dpnp.ndarray.nbytes": [[262, "dpnp-ndarray-nbytes"]], "dpnp.ndarray.ndim": [[263, "dpnp-ndarray-ndim"]], "dpnp.ndarray.nonzero": [[264, "dpnp-ndarray-nonzero"]], "dpnp.ndarray.partition": [[265, "dpnp-ndarray-partition"]], "dpnp.ndarray.prod": [[266, "dpnp-ndarray-prod"]], "dpnp.ndarray.put": [[267, "dpnp-ndarray-put"]], "dpnp.ndarray.reshape": [[268, "dpnp-ndarray-reshape"]], "dpnp.ndarray.round": [[269, "dpnp-ndarray-round"]], "dpnp.ndarray.shape": [[270, "dpnp-ndarray-shape"]], "dpnp.ndarray.size": [[271, "dpnp-ndarray-size"]], "dpnp.ndarray.squeeze": [[272, "dpnp-ndarray-squeeze"]], "dpnp.ndarray.std": [[273, "dpnp-ndarray-std"]], "dpnp.ndarray.strides": [[274, "dpnp-ndarray-strides"]], "dpnp.ndarray.sum": [[275, "dpnp-ndarray-sum"]], "dpnp.ndarray.swapaxes": [[276, "dpnp-ndarray-swapaxes"]], "dpnp.ndarray.take": [[277, "dpnp-ndarray-take"]], "dpnp.ndarray.transpose": [[278, "dpnp-ndarray-transpose"]], "dpnp.ndarray.var": [[279, "dpnp-ndarray-var"]], "dpnp.negative": [[280, "dpnp-negative"]], "dpnp.nonzero": [[281, "dpnp-nonzero"]], "dpnp.not_equal": [[282, "dpnp-not-equal"]], "dpnp.ogrid": [[283, "dpnp-ogrid"]], "dpnp.ones": [[284, "dpnp-ones"]], "dpnp.ones_like": [[285, "dpnp-ones-like"]], "dpnp.outer": [[286, "dpnp-outer"]], "dpnp.partition": [[287, "dpnp-partition"]], "dpnp.place": [[288, "dpnp-place"]], "dpnp.positive": [[289, "dpnp-positive"]], "dpnp.power": [[290, "dpnp-power"]], "dpnp.prod": [[291, "dpnp-prod"]], "dpnp.proj": [[292, "dpnp-proj"]], "dpnp.ptp": [[293, "dpnp-ptp"]], "dpnp.put": [[294, "dpnp-put"]], "dpnp.put_along_axis": [[295, "dpnp-put-along-axis"]], "dpnp.putmask": [[296, "dpnp-putmask"]], "dpnp.rad2deg": [[297, "dpnp-rad2deg"]], "dpnp.radians": [[298, "dpnp-radians"]], "dpnp.random.RandomState": [[299, "dpnp-random-randomstate"]], "dpnp.random.beta": [[300, "dpnp-random-beta"]], "dpnp.random.binomial": [[301, "dpnp-random-binomial"]], "dpnp.random.bytes": [[302, "dpnp-random-bytes"]], "dpnp.random.chisquare": [[303, "dpnp-random-chisquare"]], "dpnp.random.choice": [[304, "dpnp-random-choice"]], "dpnp.random.dirichlet": [[305, "dpnp-random-dirichlet"]], "dpnp.random.exponential": [[306, "dpnp-random-exponential"]], "dpnp.random.f": [[307, "dpnp-random-f"]], "dpnp.random.gamma": [[308, "dpnp-random-gamma"]], "dpnp.random.geometric": [[309, "dpnp-random-geometric"]], "dpnp.random.gumbel": [[310, "dpnp-random-gumbel"]], "dpnp.random.hypergeometric": [[311, "dpnp-random-hypergeometric"]], "dpnp.random.laplace": [[312, "dpnp-random-laplace"]], "dpnp.random.logistic": [[313, "dpnp-random-logistic"]], "dpnp.random.lognormal": [[314, "dpnp-random-lognormal"]], "dpnp.random.logseries": [[315, "dpnp-random-logseries"]], "dpnp.random.multinomial": [[316, "dpnp-random-multinomial"]], "dpnp.random.multivariate_normal": [[317, "dpnp-random-multivariate-normal"]], "dpnp.random.negative_binomial": [[318, "dpnp-random-negative-binomial"]], "dpnp.random.noncentral_chisquare": [[319, "dpnp-random-noncentral-chisquare"]], "dpnp.random.noncentral_f": [[320, "dpnp-random-noncentral-f"]], "dpnp.random.normal": [[321, "dpnp-random-normal"]], "dpnp.random.pareto": [[322, "dpnp-random-pareto"]], "dpnp.random.permutation": [[323, "dpnp-random-permutation"]], "dpnp.random.poisson": [[324, "dpnp-random-poisson"]], "dpnp.random.power": [[325, "dpnp-random-power"]], "dpnp.random.rand": [[326, "dpnp-random-rand"]], "dpnp.random.randint": [[327, "dpnp-random-randint"]], "dpnp.random.randn": [[328, "dpnp-random-randn"]], "dpnp.random.random": [[329, "dpnp-random-random"]], "dpnp.random.random_integers": [[330, "dpnp-random-random-integers"]], "dpnp.random.random_sample": [[331, "dpnp-random-random-sample"]], "dpnp.random.ranf": [[332, "dpnp-random-ranf"]], "dpnp.random.rayleigh": [[333, "dpnp-random-rayleigh"]], "dpnp.random.sample": [[334, "dpnp-random-sample"]], "dpnp.random.seed": [[335, "dpnp-random-seed"]], "dpnp.random.shuffle": [[336, "dpnp-random-shuffle"]], "dpnp.random.standard_cauchy": [[337, "dpnp-random-standard-cauchy"]], "dpnp.random.standard_exponential": [[338, "dpnp-random-standard-exponential"]], "dpnp.random.standard_gamma": [[339, "dpnp-random-standard-gamma"]], "dpnp.random.standard_normal": [[340, "dpnp-random-standard-normal"]], "dpnp.random.standard_t": [[341, "dpnp-random-standard-t"]], "dpnp.random.triangular": [[342, "dpnp-random-triangular"]], "dpnp.random.uniform": [[343, "dpnp-random-uniform"]], "dpnp.random.vonmises": [[344, "dpnp-random-vonmises"]], "dpnp.random.wald": [[345, "dpnp-random-wald"]], "dpnp.random.weibull": [[346, "dpnp-random-weibull"]], "dpnp.random.zipf": [[347, "dpnp-random-zipf"]], "dpnp.ravel": [[348, "dpnp-ravel"]], "dpnp.reciprocal": [[349, "dpnp-reciprocal"]], "dpnp.remainder": [[350, "dpnp-remainder"]], "dpnp.repeat": [[351, "dpnp-repeat"]], "dpnp.reshape": [[352, "dpnp-reshape"]], "dpnp.result_type": [[353, "dpnp-result-type"]], "dpnp.right_shift": [[354, "dpnp-right-shift"]], "dpnp.rint": [[355, "dpnp-rint"]], "dpnp.roll": [[356, "dpnp-roll"]], "dpnp.rollaxis": [[357, "dpnp-rollaxis"]], "dpnp.round": [[358, "dpnp-round"]], "dpnp.searchsorted": [[359, "dpnp-searchsorted"]], "dpnp.select": [[360, "dpnp-select"]], "dpnp.shape": [[361, "dpnp-shape"]], "dpnp.sign": [[362, "dpnp-sign"]], "dpnp.signbit": [[363, "dpnp-signbit"]], "dpnp.sin": [[364, "dpnp-sin"]], "dpnp.sinh": [[365, "dpnp-sinh"]], "dpnp.sort": [[366, "dpnp-sort"]], "dpnp.sqrt": [[367, "dpnp-sqrt"]], "dpnp.square": [[368, "dpnp-square"]], "dpnp.squeeze": [[369, "dpnp-squeeze"]], "dpnp.stack": [[370, "dpnp-stack"]], "dpnp.std": [[371, "dpnp-std"]], "dpnp.subtract": [[372, "dpnp-subtract"]], "dpnp.sum": [[373, "dpnp-sum"]], "dpnp.swapaxes": [[374, "dpnp-swapaxes"]], "dpnp.take": [[375, "dpnp-take"]], "dpnp.take_along_axis": [[376, "dpnp-take-along-axis"]], "dpnp.tan": [[377, "dpnp-tan"]], "dpnp.tanh": [[378, "dpnp-tanh"]], "dpnp.tensordot": [[379, "dpnp-tensordot"]], "dpnp.trace": [[380, "dpnp-trace"]], "dpnp.transpose": [[381, "dpnp-transpose"]], "dpnp.trapz": [[382, "dpnp-trapz"]], "dpnp.tri": [[383, "dpnp-tri"]], "dpnp.tril": [[384, "dpnp-tril"]], "dpnp.tril_indices": [[385, "dpnp-tril-indices"]], "dpnp.tril_indices_from": [[386, "dpnp-tril-indices-from"]], "dpnp.triu": [[387, "dpnp-triu"]], "dpnp.triu_indices": [[388, "dpnp-triu-indices"]], "dpnp.triu_indices_from": [[389, "dpnp-triu-indices-from"]], "dpnp.true_divide": [[390, "dpnp-true-divide"]], "dpnp.trunc": [[391, "dpnp-trunc"]], "dpnp.unique": [[392, "dpnp-unique"]], "dpnp.unwrap": [[393, "dpnp-unwrap"]], "dpnp.vander": [[394, "dpnp-vander"]], "dpnp.var": [[395, "dpnp-var"]], "dpnp.vdot": [[396, "dpnp-vdot"]], "dpnp.vstack": [[397, "dpnp-vstack"]], "dpnp.where": [[398, "dpnp-where"]], "dpnp.zeros": [[399, "dpnp-zeros"]], "dpnp.zeros_like": [[400, "dpnp-zeros-like"]], "API Reference": [[401, "api-reference"]], "Array Indexing Routines": [[402, "array-indexing-routines"]], "Generating index arrays": [[402, "generating-index-arrays"]], "Indexing-like operations": [[402, "indexing-like-operations"]], "Inserting data into arrays": [[402, "inserting-data-into-arrays"]], "Iterating over arrays": [[402, "iterating-over-arrays"]], "Matrix and vector products": [[403, "matrix-and-vector-products"]], "Decompositions": [[403, "decompositions"]], "Matrix eigenvalues": [[403, "matrix-eigenvalues"]], "Norms and other numbers": [[403, "norms-and-other-numbers"]], "Solving linear equations": [[403, "solving-linear-equations"]], "Logic Functions": [[404, "logic-functions"]], "Truth value testing": [[404, "truth-value-testing"]], "Infinities and NaNs": [[404, "infinities-and-nans"]], "Array type testing": [[404, "array-type-testing"]], "Logic operations": [[404, "logic-operations"]], "Comparison": [[404, "comparison"]], "Array Manipulation Routines": [[405, "array-manipulation-routines"]], "Basic operations": [[405, "basic-operations"]], "Changing array shape": [[405, "changing-array-shape"]], "Transpose-like operations": [[405, "transpose-like-operations"]], "Changing number of dimensions": [[405, "changing-number-of-dimensions"]], "Changing kind of array": [[405, "changing-kind-of-array"]], "Joining arrays": [[405, "joining-arrays"]], "Splitting arrays": [[405, "splitting-arrays"]], "Tiling arrays": [[405, "tiling-arrays"]], "Adding and removing elements": [[405, "adding-and-removing-elements"]], "Rearranging elements": [[405, "rearranging-elements"]], "Mathematical Functions": [[406, "mathematical-functions"]], "Trigonometric functions": [[406, "trigonometric-functions"], [416, "trigonometric-functions"]], "Hyperbolic functions": [[406, "hyperbolic-functions"]], "Rounding": [[406, "rounding"]], "Sums, products, differences": [[406, "sums-products-differences"]], "Exponents and logarithms": [[406, "exponents-and-logarithms"]], "Other special functions": [[406, "other-special-functions"]], "Floating point routines": [[406, "floating-point-routines"]], "Rational routines": [[406, "rational-routines"]], "Arithmetic operations": [[406, "arithmetic-operations"]], "Handling complex numbers": [[406, "handling-complex-numbers"]], "Extrema Finding": [[406, "extrema-finding"]], "Miscellaneous routines": [[407, "miscellaneous-routines"]], "Utility": [[407, "utility"]], "Multi-Dimensional Array (ndarray)": [[408, "multi-dimensional-array-ndarray"]], "Constructing arrays": [[408, "constructing-arrays"]], "Indexing arrays": [[408, "indexing-arrays"]], "Array attributes": [[408, "array-attributes"]], "Memory layout": [[408, "memory-layout"]], "Data type": [[408, "data-type"]], "Other attributes": [[408, "other-attributes"]], "Array methods": [[408, "array-methods"]], "Array conversion": [[408, "array-conversion"]], "Shape manipulation": [[408, "shape-manipulation"]], "Item selection and manipulation": [[408, "item-selection-and-manipulation"]], "Calculation": [[408, "calculation"]], "Arithmetic, matrix multiplication, and comparison operations": [[408, "arithmetic-matrix-multiplication-and-comparison-operations"]], "Special methods": [[408, "special-methods"]], "Padding": [[409, "padding"]], "Polynomials": [[410, "polynomials"]], "Polynomial Package": [[410, "polynomial-package"]], "Polynomial Module": [[410, "polynomial-module"]], "Polyutils": [[410, "polyutils"]], "Poly1d": [[410, "poly1d"]], "Basics": [[410, "basics"]], "Arithmetic": [[410, "arithmetic"]], "Random Sampling (dpnp.random)": [[411, "random-sampling-dpnp-random"]], "Simple random data": [[411, "simple-random-data"]], "Permutations": [[411, "permutations"]], "Distributions": [[411, "distributions"]], "Random generator": [[411, "random-generator"]], "Routines": [[412, "routines"]], "Sorting, Searching, and Counting": [[413, "sorting-searching-and-counting"]], "Sorting": [[413, "sorting"]], "Searching": [[413, "searching"]], "Counting": [[413, "counting"]], "Special Functions": [[414, "special-functions"]], "Error Function": [[414, "error-function"]], "Statistical Functions": [[415, "statistical-functions"]], "Order statistics": [[415, "order-statistics"]], "Averages and variances": [[415, "averages-and-variances"]], "Histograms": [[415, "histograms"]], "Correlations": [[415, "correlations"]], "Universal Functions (ufunc)": [[416, "universal-functions-ufunc"]], "Available ufuncs": [[416, "available-ufuncs"]], "Math operations": [[416, "math-operations"]], "Bit-twiddling functions": [[416, "bit-twiddling-functions"]], "Comparison functions": [[416, "comparison-functions"]], "Floating functions": [[416, "floating-functions"]]}, "indexentries": {"dpnp": [[2, "module-dpnp"], [3, "module-dpnp"]], "module": [[2, "module-dpnp"], [3, "module-dpnp"], [10, "module-dpnp.fft"], [411, "module-dpnp.random"]], "dpnp.fft": [[10, "module-dpnp.fft"]], "abs() (in module dpnp)": [[11, "dpnp.abs"]], "absolute() (in module dpnp)": [[12, "dpnp.absolute"]], "add() (in module dpnp)": [[13, "dpnp.add"]], "all() (in module dpnp)": [[14, "dpnp.all"]], "allclose() (in module dpnp)": [[15, "dpnp.allclose"]], "amax() (in module dpnp)": [[16, "dpnp.amax"]], "amin() (in module dpnp)": [[17, "dpnp.amin"]], "any() (in module dpnp)": [[18, "dpnp.any"]], "arange() (in module dpnp)": [[19, "dpnp.arange"]], "arccos() (in module dpnp)": [[20, "dpnp.arccos"]], "arccosh() (in module dpnp)": [[21, "dpnp.arccosh"]], "arcsin() (in module dpnp)": [[22, "dpnp.arcsin"]], "arcsinh() (in module dpnp)": [[23, "dpnp.arcsinh"]], "arctan() (in module dpnp)": [[24, "dpnp.arctan"]], "arctan2() (in module dpnp)": [[25, "dpnp.arctan2"]], "arctanh() (in module dpnp)": [[26, "dpnp.arctanh"]], "argmax() (in module dpnp)": [[27, "dpnp.argmax"]], "argmin() (in module dpnp)": [[28, "dpnp.argmin"]], "argsort() (in module dpnp)": [[29, "dpnp.argsort"]], "around() (in module dpnp)": [[30, "dpnp.around"]], "array() (in module dpnp)": [[31, "dpnp.array"]], "array_equal() (in module dpnp)": [[32, "dpnp.array_equal"]], "asanyarray() (in module dpnp)": [[33, "dpnp.asanyarray"]], "asarray() (in module dpnp)": [[34, "dpnp.asarray"]], "ascontiguousarray() (in module dpnp)": [[35, "dpnp.ascontiguousarray"]], "asfarray() (in module dpnp)": [[36, "dpnp.asfarray"]], "asfortranarray() (in module dpnp)": [[37, "dpnp.asfortranarray"]], "asnumpy() (in module dpnp)": [[38, "dpnp.asnumpy"]], "atleast_1d() (in module dpnp)": [[39, "dpnp.atleast_1d"]], "atleast_2d() (in module dpnp)": [[40, "dpnp.atleast_2d"]], "atleast_3d() (in module dpnp)": [[41, "dpnp.atleast_3d"]], "average() (in module dpnp)": [[42, "dpnp.average"]], "bincount() (in module dpnp)": [[43, "dpnp.bincount"]], "bitwise_and() (in module dpnp)": [[44, "dpnp.bitwise_and"]], "bitwise_not() (in module dpnp)": [[45, "dpnp.bitwise_not"]], "bitwise_or() (in module dpnp)": [[46, "dpnp.bitwise_or"]], "bitwise_xor() (in module dpnp)": [[47, "dpnp.bitwise_xor"]], "broadcast_to() (in module dpnp)": [[48, "dpnp.broadcast_to"]], "cbrt() (in module dpnp)": [[49, "dpnp.cbrt"]], "ceil() (in module dpnp)": [[50, "dpnp.ceil"]], "choose() (in module dpnp)": [[51, "dpnp.choose"]], "concatenate() (in module dpnp)": [[52, "dpnp.concatenate"]], "conj() (in module dpnp)": [[53, "dpnp.conj"]], "conjugate() (in module dpnp)": [[54, "dpnp.conjugate"]], "convolve() (in module dpnp)": [[55, "dpnp.convolve"]], "copy() (in module dpnp)": [[56, "dpnp.copy"]], "copysign() (in module dpnp)": [[57, "dpnp.copysign"]], "copyto() (in module dpnp)": [[58, "dpnp.copyto"]], "correlate() (in module dpnp)": [[59, "dpnp.correlate"]], "cos() (in module dpnp)": [[60, "dpnp.cos"]], "cosh() (in module dpnp)": [[61, "dpnp.cosh"]], "count_nonzero() (in module dpnp)": [[62, "dpnp.count_nonzero"]], "cov() (in module dpnp)": [[63, "dpnp.cov"]], "cross() (in module dpnp)": [[64, "dpnp.cross"]], "cumprod() (in module dpnp)": [[65, "dpnp.cumprod"]], "cumsum() (in module dpnp)": [[66, "dpnp.cumsum"]], "deg2rad() (in module dpnp)": [[67, "dpnp.deg2rad"]], "degrees() (in module dpnp)": [[68, "dpnp.degrees"]], "diag() (in module dpnp)": [[69, "dpnp.diag"]], "diag_indices() (in module dpnp)": [[70, "dpnp.diag_indices"]], "diag_indices_from() (in module dpnp)": [[71, "dpnp.diag_indices_from"]], "diagflat() (in module dpnp)": [[72, "dpnp.diagflat"]], "diagonal() (in module dpnp)": [[73, "dpnp.diagonal"]], "diff() (in module dpnp)": [[74, "dpnp.diff"]], "divide() (in module dpnp)": [[75, "dpnp.divide"]], "dot() (in module dpnp)": [[76, "dpnp.dot"]], "t (dpnp.dpnp_array.dpnp_array attribute)": [[77, "dpnp.dpnp_array.dpnp_array.T"]], "__eq__() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.__eq__"]], "__ge__() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.__ge__"]], "__getitem__() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.__getitem__"]], "__gt__() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.__gt__"]], "__le__() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.__le__"]], "__len__() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.__len__"]], "__lt__() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.__lt__"]], "__ne__() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.__ne__"]], "__setitem__() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.__setitem__"]], "all() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.all"]], "any() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.any"]], "argmax() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.argmax"]], "argmin() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.argmin"]], "argsort() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.argsort"]], "asnumpy() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.asnumpy"]], "astype() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.astype"]], "choose() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.choose"]], "conj() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.conj"]], "conjugate() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.conjugate"]], "copy() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.copy"]], "cumsum() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.cumsum"]], "device (dpnp.dpnp_array.dpnp_array attribute)": [[77, "dpnp.dpnp_array.dpnp_array.device"]], "diagonal() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.diagonal"]], "dot() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.dot"]], "dpnp_array (class in dpnp.dpnp_array)": [[77, "dpnp.dpnp_array.dpnp_array"]], "dtype (dpnp.dpnp_array.dpnp_array attribute)": [[77, "dpnp.dpnp_array.dpnp_array.dtype"]], "fill() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.fill"]], "flags (dpnp.dpnp_array.dpnp_array attribute)": [[77, "dpnp.dpnp_array.dpnp_array.flags"]], "flat (dpnp.dpnp_array.dpnp_array attribute)": [[77, "dpnp.dpnp_array.dpnp_array.flat"]], "flatten() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.flatten"]], "get_array() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.get_array"]], "item() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.item"]], "itemsize (dpnp.dpnp_array.dpnp_array attribute)": [[77, "dpnp.dpnp_array.dpnp_array.itemsize"]], "max() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.max"]], "mean() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.mean"]], "min() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.min"]], "nbytes (dpnp.dpnp_array.dpnp_array attribute)": [[77, "dpnp.dpnp_array.dpnp_array.nbytes"]], "ndim (dpnp.dpnp_array.dpnp_array attribute)": [[77, "dpnp.dpnp_array.dpnp_array.ndim"]], "nonzero() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.nonzero"]], "partition() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.partition"]], "prod() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.prod"]], "put() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.put"]], "reshape() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.reshape"]], "round() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.round"]], "shape (dpnp.dpnp_array.dpnp_array attribute)": [[77, "dpnp.dpnp_array.dpnp_array.shape"]], "size (dpnp.dpnp_array.dpnp_array attribute)": [[77, "dpnp.dpnp_array.dpnp_array.size"]], "squeeze() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.squeeze"]], "std() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.std"]], "strides (dpnp.dpnp_array.dpnp_array attribute)": [[77, "dpnp.dpnp_array.dpnp_array.strides"]], "sum() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.sum"]], "swapaxes() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.swapaxes"]], "sycl_context (dpnp.dpnp_array.dpnp_array attribute)": [[77, "dpnp.dpnp_array.dpnp_array.sycl_context"]], "sycl_device (dpnp.dpnp_array.dpnp_array attribute)": [[77, "dpnp.dpnp_array.dpnp_array.sycl_device"]], "sycl_queue (dpnp.dpnp_array.dpnp_array attribute)": [[77, "dpnp.dpnp_array.dpnp_array.sycl_queue"]], "take() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.take"]], "to_device() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.to_device"]], "transpose() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.transpose"]], "usm_type (dpnp.dpnp_array.dpnp_array attribute)": [[77, "dpnp.dpnp_array.dpnp_array.usm_type"]], "var() (dpnp.dpnp_array.dpnp_array method)": [[77, "dpnp.dpnp_array.dpnp_array.var"]], "__eq__() (dpnp.dtype method)": [[78, "dpnp.dtype.__eq__"]], "__ge__() (dpnp.dtype method)": [[78, "dpnp.dtype.__ge__"]], "__getitem__() (dpnp.dtype method)": [[78, "dpnp.dtype.__getitem__"]], "__gt__() (dpnp.dtype method)": [[78, "dpnp.dtype.__gt__"]], "__le__() (dpnp.dtype method)": [[78, "dpnp.dtype.__le__"]], "__len__() (dpnp.dtype method)": [[78, "dpnp.dtype.__len__"]], "__lt__() (dpnp.dtype method)": [[78, "dpnp.dtype.__lt__"]], "__ne__() (dpnp.dtype method)": [[78, "dpnp.dtype.__ne__"]], "alignment (dpnp.dtype attribute)": [[78, "dpnp.dtype.alignment"]], "base (dpnp.dtype attribute)": [[78, "dpnp.dtype.base"]], "byteorder (dpnp.dtype attribute)": [[78, "dpnp.dtype.byteorder"]], "char (dpnp.dtype attribute)": [[78, "dpnp.dtype.char"]], "descr (dpnp.dtype attribute)": [[78, "dpnp.dtype.descr"]], "dtype (class in dpnp)": [[78, "dpnp.dtype"]], "fields (dpnp.dtype attribute)": [[78, "dpnp.dtype.fields"]], "flags (dpnp.dtype attribute)": [[78, "dpnp.dtype.flags"]], "hasobject (dpnp.dtype attribute)": [[78, "dpnp.dtype.hasobject"]], "isalignedstruct (dpnp.dtype attribute)": [[78, "dpnp.dtype.isalignedstruct"]], "isbuiltin (dpnp.dtype attribute)": [[78, "dpnp.dtype.isbuiltin"]], "isnative (dpnp.dtype attribute)": [[78, "dpnp.dtype.isnative"]], "itemsize (dpnp.dtype attribute)": [[78, "dpnp.dtype.itemsize"]], "kind (dpnp.dtype attribute)": [[78, "dpnp.dtype.kind"]], "metadata (dpnp.dtype attribute)": [[78, "dpnp.dtype.metadata"]], "name (dpnp.dtype attribute)": [[78, "dpnp.dtype.name"]], "names (dpnp.dtype attribute)": [[78, "dpnp.dtype.names"]], "ndim (dpnp.dtype attribute)": [[78, "dpnp.dtype.ndim"]], "newbyteorder() (dpnp.dtype method)": [[78, "dpnp.dtype.newbyteorder"]], "num (dpnp.dtype attribute)": [[78, "dpnp.dtype.num"]], "shape (dpnp.dtype attribute)": [[78, "dpnp.dtype.shape"]], "str (dpnp.dtype attribute)": [[78, "dpnp.dtype.str"]], "subdtype (dpnp.dtype attribute)": [[78, "dpnp.dtype.subdtype"]], "type (dpnp.dtype attribute)": [[78, "dpnp.dtype.type"]], "ediff1d() (in module dpnp)": [[79, "dpnp.ediff1d"]], "einsum() (in module dpnp)": [[80, "dpnp.einsum"]], "einsum_path() (in module dpnp)": [[81, "dpnp.einsum_path"]], "empty() (in module dpnp)": [[82, "dpnp.empty"]], "empty_like() (in module dpnp)": [[83, "dpnp.empty_like"]], "equal() (in module dpnp)": [[84, "dpnp.equal"]], "erf() (in module dpnp)": [[85, "dpnp.erf"]], "exp() (in module dpnp)": [[86, "dpnp.exp"]], "exp2() (in module dpnp)": [[87, "dpnp.exp2"]], "expand_dims() (in module dpnp)": [[88, "dpnp.expand_dims"]], "expm1() (in module dpnp)": [[89, "dpnp.expm1"]], "extract() (in module dpnp)": [[90, "dpnp.extract"]], "eye() (in module dpnp)": [[91, "dpnp.eye"]], "fabs() (in module dpnp)": [[92, "dpnp.fabs"]], "fft() (in module dpnp.fft)": [[93, "dpnp.fft.fft"]], "fft2() (in module dpnp.fft)": [[94, "dpnp.fft.fft2"]], "fftfreq() (in module dpnp.fft)": [[95, "dpnp.fft.fftfreq"]], "fftn() (in module dpnp.fft)": [[96, "dpnp.fft.fftn"]], "fftshift() (in module dpnp.fft)": [[97, "dpnp.fft.fftshift"]], "hfft() (in module dpnp.fft)": [[98, "dpnp.fft.hfft"]], "ifft() (in module dpnp.fft)": [[99, "dpnp.fft.ifft"]], "ifft2() (in module dpnp.fft)": [[100, "dpnp.fft.ifft2"]], "ifftn() (in module dpnp.fft)": [[101, "dpnp.fft.ifftn"]], "ifftshift() (in module dpnp.fft)": [[102, "dpnp.fft.ifftshift"]], "ihfft() (in module dpnp.fft)": [[103, "dpnp.fft.ihfft"]], "irfft() (in module dpnp.fft)": [[104, "dpnp.fft.irfft"]], "irfft2() (in module dpnp.fft)": [[105, "dpnp.fft.irfft2"]], "irfftn() (in module dpnp.fft)": [[106, "dpnp.fft.irfftn"]], "rfft() (in module dpnp.fft)": [[107, "dpnp.fft.rfft"]], "rfft2() (in module dpnp.fft)": [[108, "dpnp.fft.rfft2"]], "rfftfreq() (in module dpnp.fft)": [[109, "dpnp.fft.rfftfreq"]], "rfftn() (in module dpnp.fft)": [[110, "dpnp.fft.rfftn"]], "fill_diagonal() (in module dpnp)": [[111, "dpnp.fill_diagonal"]], "__eq__() (dpnp.flatiter method)": [[112, "dpnp.flatiter.__eq__"]], "__ge__() (dpnp.flatiter method)": [[112, "dpnp.flatiter.__ge__"]], "__getitem__() (dpnp.flatiter method)": [[112, "dpnp.flatiter.__getitem__"]], "__gt__() (dpnp.flatiter method)": [[112, "dpnp.flatiter.__gt__"]], "__iter__() (dpnp.flatiter method)": [[112, "dpnp.flatiter.__iter__"]], "__le__() (dpnp.flatiter method)": [[112, "dpnp.flatiter.__le__"]], "__lt__() (dpnp.flatiter method)": [[112, "dpnp.flatiter.__lt__"]], "__ne__() (dpnp.flatiter method)": [[112, "dpnp.flatiter.__ne__"]], "__next__() (dpnp.flatiter method)": [[112, "dpnp.flatiter.__next__"]], "__setitem__() (dpnp.flatiter method)": [[112, "dpnp.flatiter.__setitem__"]], "flatiter (class in dpnp)": [[112, "dpnp.flatiter"]], "flip() (in module dpnp)": [[113, "dpnp.flip"]], "fliplr() (in module dpnp)": [[114, "dpnp.fliplr"]], "flipud() (in module dpnp)": [[115, "dpnp.flipud"]], "floor() (in module dpnp)": [[116, "dpnp.floor"]], "floor_divide() (in module dpnp)": [[117, "dpnp.floor_divide"]], "fmax() (in module dpnp)": [[118, "dpnp.fmax"]], "fmin() (in module dpnp)": [[119, "dpnp.fmin"]], "fmod() (in module dpnp)": [[120, "dpnp.fmod"]], "from_dlpack() (in module dpnp)": [[121, "dpnp.from_dlpack"]], "frombuffer() (in module dpnp)": [[122, "dpnp.frombuffer"]], "fromfile() (in module dpnp)": [[123, "dpnp.fromfile"]], "fromfunction() (in module dpnp)": [[124, "dpnp.fromfunction"]], "fromiter() (in module dpnp)": [[125, "dpnp.fromiter"]], "fromstring() (in module dpnp)": [[126, "dpnp.fromstring"]], "full() (in module dpnp)": [[127, "dpnp.full"]], "full_like() (in module dpnp)": [[128, "dpnp.full_like"]], "geomspace() (in module dpnp)": [[129, "dpnp.geomspace"]], "get_include() (in module dpnp)": [[130, "dpnp.get_include"]], "gradient() (in module dpnp)": [[131, "dpnp.gradient"]], "greater() (in module dpnp)": [[132, "dpnp.greater"]], "greater_equal() (in module dpnp)": [[133, "dpnp.greater_equal"]], "histogram() (in module dpnp)": [[134, "dpnp.histogram"]], "hstack() (in module dpnp)": [[135, "dpnp.hstack"]], "hypot() (in module dpnp)": [[136, "dpnp.hypot"]], "identity() (in module dpnp)": [[137, "dpnp.identity"]], "indices() (in module dpnp)": [[138, "dpnp.indices"]], "inner() (in module dpnp)": [[139, "dpnp.inner"]], "invert() (in module dpnp)": [[140, "dpnp.invert"]], "isclose() (in module dpnp)": [[141, "dpnp.isclose"]], "isfinite() (in module dpnp)": [[142, "dpnp.isfinite"]], "isinf() (in module dpnp)": [[143, "dpnp.isinf"]], "isnan() (in module dpnp)": [[144, "dpnp.isnan"]], "isscalar() (in module dpnp)": [[145, "dpnp.isscalar"]], "issubdtype() (in module dpnp)": [[146, "dpnp.issubdtype"]], "issubsctype() (in module dpnp)": [[147, "dpnp.issubsctype"]], "kron() (in module dpnp)": [[148, "dpnp.kron"]], "left_shift() (in module dpnp)": [[149, "dpnp.left_shift"]], "less() (in module dpnp)": [[150, "dpnp.less"]], "less_equal() (in module dpnp)": [[151, "dpnp.less_equal"]], "cholesky() (in module dpnp.linalg)": [[152, "dpnp.linalg.cholesky"]], "cond() (in module dpnp.linalg)": [[153, "dpnp.linalg.cond"]], "det() (in module dpnp.linalg)": [[154, "dpnp.linalg.det"]], "eig() (in module dpnp.linalg)": [[155, "dpnp.linalg.eig"]], "eigh() (in module dpnp.linalg)": [[156, "dpnp.linalg.eigh"]], "eigvals() (in module dpnp.linalg)": [[157, "dpnp.linalg.eigvals"]], "inv() (in module dpnp.linalg)": [[158, "dpnp.linalg.inv"]], "matrix_power() (in module dpnp.linalg)": [[159, "dpnp.linalg.matrix_power"]], "matrix_rank() (in module dpnp.linalg)": [[160, "dpnp.linalg.matrix_rank"]], "multi_dot() (in module dpnp.linalg)": [[161, "dpnp.linalg.multi_dot"]], "norm() (in module dpnp.linalg)": [[162, "dpnp.linalg.norm"]], "qr() (in module dpnp.linalg)": [[163, "dpnp.linalg.qr"]], "svd() (in module dpnp.linalg)": [[164, "dpnp.linalg.svd"]], "linspace() (in module dpnp)": [[165, "dpnp.linspace"]], "loadtxt() (in module dpnp)": [[166, "dpnp.loadtxt"]], "log() (in module dpnp)": [[167, "dpnp.log"]], "log10() (in module dpnp)": [[168, "dpnp.log10"]], "log1p() (in module dpnp)": [[169, "dpnp.log1p"]], "log2() (in module dpnp)": [[170, "dpnp.log2"]], "logical_and() (in module dpnp)": [[171, "dpnp.logical_and"]], "logical_not() (in module dpnp)": [[172, "dpnp.logical_not"]], "logical_or() (in module dpnp)": [[173, "dpnp.logical_or"]], "logical_xor() (in module dpnp)": [[174, "dpnp.logical_xor"]], "logspace() (in module dpnp)": [[175, "dpnp.logspace"]], "matmul() (in module dpnp)": [[176, "dpnp.matmul"]], "max() (in module dpnp)": [[177, "dpnp.max"]], "maximum() (in module dpnp)": [[178, "dpnp.maximum"]], "mean() (in module dpnp)": [[179, "dpnp.mean"]], "median() (in module dpnp)": [[180, "dpnp.median"]], "meshgrid() (in module dpnp)": [[181, "dpnp.meshgrid"]], "mgrid (in module dpnp)": [[182, "dpnp.mgrid"]], "min() (in module dpnp)": [[183, "dpnp.min"]], "minimum() (in module dpnp)": [[184, "dpnp.minimum"]], "mod() (in module dpnp)": [[185, "dpnp.mod"]], "modf() (in module dpnp)": [[186, "dpnp.modf"]], "moveaxis() (in module dpnp)": [[187, "dpnp.moveaxis"]], "multiply() (in module dpnp)": [[188, "dpnp.multiply"]], "nancumprod() (in module dpnp)": [[189, "dpnp.nancumprod"]], "nancumsum() (in module dpnp)": [[190, "dpnp.nancumsum"]], "nanprod() (in module dpnp)": [[191, "dpnp.nanprod"]], "nansum() (in module dpnp)": [[192, "dpnp.nansum"]], "nanvar() (in module dpnp)": [[193, "dpnp.nanvar"]], "ndarray (in module dpnp)": [[194, "dpnp.ndarray"]], "t (dpnp.ndarray property)": [[195, "dpnp.ndarray.T"]], "__abs__() (dpnp.ndarray method)": [[196, "dpnp.ndarray.__abs__"]], "__add__() (dpnp.ndarray method)": [[197, "dpnp.ndarray.__add__"]], "__and__() (dpnp.ndarray method)": [[198, "dpnp.ndarray.__and__"]], "__complex__() (dpnp.ndarray method)": [[199, "dpnp.ndarray.__complex__"]], "__copy__() (dpnp.ndarray method)": [[200, "dpnp.ndarray.__copy__"]], "__eq__() (dpnp.ndarray method)": [[201, "dpnp.ndarray.__eq__"]], "__float__() (dpnp.ndarray method)": [[202, "dpnp.ndarray.__float__"]], "__floordiv__() (dpnp.ndarray method)": [[203, "dpnp.ndarray.__floordiv__"]], "__ge__() (dpnp.ndarray method)": [[204, "dpnp.ndarray.__ge__"]], "__getitem__() (dpnp.ndarray method)": [[205, "dpnp.ndarray.__getitem__"]], "__gt__() (dpnp.ndarray method)": [[206, "dpnp.ndarray.__gt__"]], "__iadd__() (dpnp.ndarray method)": [[207, "dpnp.ndarray.__iadd__"]], "__iand__() (dpnp.ndarray method)": [[208, "dpnp.ndarray.__iand__"]], "__ifloordiv__() (dpnp.ndarray method)": [[209, "dpnp.ndarray.__ifloordiv__"]], "__ilshift__() (dpnp.ndarray method)": [[210, "dpnp.ndarray.__ilshift__"]], "__imod__() (dpnp.ndarray method)": [[211, "dpnp.ndarray.__imod__"]], "__imul__() (dpnp.ndarray method)": [[212, "dpnp.ndarray.__imul__"]], "__int__() (dpnp.ndarray method)": [[213, "dpnp.ndarray.__int__"]], "__invert__() (dpnp.ndarray method)": [[214, "dpnp.ndarray.__invert__"]], "__ior__() (dpnp.ndarray method)": [[215, "dpnp.ndarray.__ior__"]], "__ipow__() (dpnp.ndarray method)": [[216, "dpnp.ndarray.__ipow__"]], "__irshift__() (dpnp.ndarray method)": [[217, "dpnp.ndarray.__irshift__"]], "__isub__() (dpnp.ndarray method)": [[218, "dpnp.ndarray.__isub__"]], "__itruediv__() (dpnp.ndarray method)": [[219, "dpnp.ndarray.__itruediv__"]], "__ixor__() (dpnp.ndarray method)": [[220, "dpnp.ndarray.__ixor__"]], "__le__() (dpnp.ndarray method)": [[221, "dpnp.ndarray.__le__"]], "__len__() (dpnp.ndarray method)": [[222, "dpnp.ndarray.__len__"]], "__lshift__() (dpnp.ndarray method)": [[223, "dpnp.ndarray.__lshift__"]], "__lt__() (dpnp.ndarray method)": [[224, "dpnp.ndarray.__lt__"]], "__mod__() (dpnp.ndarray method)": [[225, "dpnp.ndarray.__mod__"]], "__mul__() (dpnp.ndarray method)": [[226, "dpnp.ndarray.__mul__"]], "__ne__() (dpnp.ndarray method)": [[227, "dpnp.ndarray.__ne__"]], "__neg__() (dpnp.ndarray method)": [[228, "dpnp.ndarray.__neg__"]], "__new__() (dpnp.ndarray method)": [[229, "dpnp.ndarray.__new__"]], "__or__() (dpnp.ndarray method)": [[230, "dpnp.ndarray.__or__"]], "__pos__() (dpnp.ndarray method)": [[231, "dpnp.ndarray.__pos__"]], "__pow__() (dpnp.ndarray method)": [[232, "dpnp.ndarray.__pow__"]], "__repr__() (dpnp.ndarray method)": [[233, "dpnp.ndarray.__repr__"]], "__rshift__() (dpnp.ndarray method)": [[234, "dpnp.ndarray.__rshift__"]], "__setitem__() (dpnp.ndarray method)": [[235, "dpnp.ndarray.__setitem__"]], "__str__() (dpnp.ndarray method)": [[236, "dpnp.ndarray.__str__"]], "__sub__() (dpnp.ndarray method)": [[237, "dpnp.ndarray.__sub__"]], "__truediv__() (dpnp.ndarray method)": [[238, "dpnp.ndarray.__truediv__"]], "__xor__() (dpnp.ndarray method)": [[239, "dpnp.ndarray.__xor__"]], "all() (dpnp.ndarray method)": [[240, "dpnp.ndarray.all"]], "any() (dpnp.ndarray method)": [[241, "dpnp.ndarray.any"]], "argmax() (dpnp.ndarray method)": [[242, "dpnp.ndarray.argmax"]], "argmin() (dpnp.ndarray method)": [[243, "dpnp.ndarray.argmin"]], "argsort() (dpnp.ndarray method)": [[244, "dpnp.ndarray.argsort"]], "astype() (dpnp.ndarray method)": [[245, "dpnp.ndarray.astype"]], "choose() (dpnp.ndarray method)": [[246, "dpnp.ndarray.choose"]], "conj() (dpnp.ndarray method)": [[247, "dpnp.ndarray.conj"]], "conjugate() (dpnp.ndarray method)": [[248, "dpnp.ndarray.conjugate"]], "copy() (dpnp.ndarray method)": [[249, "dpnp.ndarray.copy"]], "cumsum() (dpnp.ndarray method)": [[250, "dpnp.ndarray.cumsum"]], "diagonal() (dpnp.ndarray method)": [[251, "dpnp.ndarray.diagonal"]], "dtype (dpnp.ndarray property)": [[252, "dpnp.ndarray.dtype"]], "fill() (dpnp.ndarray method)": [[253, "dpnp.ndarray.fill"]], "flags (dpnp.ndarray property)": [[254, "dpnp.ndarray.flags"]], "flat (dpnp.ndarray property)": [[255, "dpnp.ndarray.flat"]], "flatten() (dpnp.ndarray method)": [[256, "dpnp.ndarray.flatten"]], "item() (dpnp.ndarray method)": [[257, "dpnp.ndarray.item"]], "itemsize (dpnp.ndarray property)": [[258, "dpnp.ndarray.itemsize"]], "max() (dpnp.ndarray method)": [[259, "dpnp.ndarray.max"]], "mean() (dpnp.ndarray method)": [[260, "dpnp.ndarray.mean"]], "min() (dpnp.ndarray method)": [[261, "dpnp.ndarray.min"]], "nbytes (dpnp.ndarray property)": [[262, "dpnp.ndarray.nbytes"]], "ndim (dpnp.ndarray property)": [[263, "dpnp.ndarray.ndim"]], "nonzero() (dpnp.ndarray method)": [[264, "dpnp.ndarray.nonzero"]], "partition() (dpnp.ndarray method)": [[265, "dpnp.ndarray.partition"]], "prod() (dpnp.ndarray method)": [[266, "dpnp.ndarray.prod"]], "put() (dpnp.ndarray method)": [[267, "dpnp.ndarray.put"]], "reshape() (dpnp.ndarray method)": [[268, "dpnp.ndarray.reshape"]], "round() (dpnp.ndarray method)": [[269, "dpnp.ndarray.round"]], "shape (dpnp.ndarray property)": [[270, "dpnp.ndarray.shape"]], "size (dpnp.ndarray property)": [[271, "dpnp.ndarray.size"]], "squeeze() (dpnp.ndarray method)": [[272, "dpnp.ndarray.squeeze"]], "std() (dpnp.ndarray method)": [[273, "dpnp.ndarray.std"]], "strides (dpnp.ndarray property)": [[274, "dpnp.ndarray.strides"]], "sum() (dpnp.ndarray method)": [[275, "dpnp.ndarray.sum"]], "swapaxes() (dpnp.ndarray method)": [[276, "dpnp.ndarray.swapaxes"]], "take() (dpnp.ndarray method)": [[277, "dpnp.ndarray.take"]], "transpose() (dpnp.ndarray method)": [[278, "dpnp.ndarray.transpose"]], "var() (dpnp.ndarray method)": [[279, "dpnp.ndarray.var"]], "negative() (in module dpnp)": [[280, "dpnp.negative"]], "nonzero() (in module dpnp)": [[281, "dpnp.nonzero"]], "not_equal() (in module dpnp)": [[282, "dpnp.not_equal"]], "ogrid (in module dpnp)": [[283, "dpnp.ogrid"]], "ones() (in module dpnp)": [[284, "dpnp.ones"]], "ones_like() (in module dpnp)": [[285, "dpnp.ones_like"]], "outer() (in module dpnp)": [[286, "dpnp.outer"]], "partition() (in module dpnp)": [[287, "dpnp.partition"]], "place() (in module dpnp)": [[288, "dpnp.place"]], "positive() (in module dpnp)": [[289, "dpnp.positive"]], "power() (in module dpnp)": [[290, "dpnp.power"]], "prod() (in module dpnp)": [[291, "dpnp.prod"]], "proj() (in module dpnp)": [[292, "dpnp.proj"]], "ptp() (in module dpnp)": [[293, "dpnp.ptp"]], "put() (in module dpnp)": [[294, "dpnp.put"]], "put_along_axis() (in module dpnp)": [[295, "dpnp.put_along_axis"]], "putmask() (in module dpnp)": [[296, "dpnp.putmask"]], "rad2deg() (in module dpnp)": [[297, "dpnp.rad2deg"]], "radians() (in module dpnp)": [[298, "dpnp.radians"]], "randomstate (class in dpnp.random)": [[299, "dpnp.random.RandomState"]], "__eq__() (dpnp.random.randomstate method)": [[299, "dpnp.random.RandomState.__eq__"]], "__ge__() (dpnp.random.randomstate method)": [[299, "dpnp.random.RandomState.__ge__"]], "__gt__() (dpnp.random.randomstate method)": [[299, "dpnp.random.RandomState.__gt__"]], "__le__() (dpnp.random.randomstate method)": [[299, "dpnp.random.RandomState.__le__"]], "__lt__() (dpnp.random.randomstate method)": [[299, "dpnp.random.RandomState.__lt__"]], "__ne__() (dpnp.random.randomstate method)": [[299, "dpnp.random.RandomState.__ne__"]], "get_state() (dpnp.random.randomstate method)": [[299, "dpnp.random.RandomState.get_state"]], "get_sycl_device() (dpnp.random.randomstate method)": [[299, "dpnp.random.RandomState.get_sycl_device"]], "get_sycl_queue() (dpnp.random.randomstate method)": [[299, "dpnp.random.RandomState.get_sycl_queue"]], "normal() (dpnp.random.randomstate method)": [[299, "dpnp.random.RandomState.normal"]], "rand() (dpnp.random.randomstate method)": [[299, "dpnp.random.RandomState.rand"]], "randint() (dpnp.random.randomstate method)": [[299, "dpnp.random.RandomState.randint"]], "randn() (dpnp.random.randomstate method)": [[299, "dpnp.random.RandomState.randn"]], "random_sample() (dpnp.random.randomstate method)": [[299, "dpnp.random.RandomState.random_sample"]], "standard_normal() (dpnp.random.randomstate method)": [[299, "dpnp.random.RandomState.standard_normal"]], "uniform() (dpnp.random.randomstate method)": [[299, "dpnp.random.RandomState.uniform"]], "beta() (in module dpnp.random)": [[300, "dpnp.random.beta"]], "binomial() (in module dpnp.random)": [[301, "dpnp.random.binomial"]], "bytes() (in module dpnp.random)": [[302, "dpnp.random.bytes"]], "chisquare() (in module dpnp.random)": [[303, "dpnp.random.chisquare"]], "choice() (in module dpnp.random)": [[304, "dpnp.random.choice"]], "dirichlet() (in module dpnp.random)": [[305, "dpnp.random.dirichlet"]], "exponential() (in module dpnp.random)": [[306, "dpnp.random.exponential"]], "f() (in module dpnp.random)": [[307, "dpnp.random.f"]], "gamma() (in module dpnp.random)": [[308, "dpnp.random.gamma"]], "geometric() (in module dpnp.random)": [[309, "dpnp.random.geometric"]], "gumbel() (in module dpnp.random)": [[310, "dpnp.random.gumbel"]], "hypergeometric() (in module dpnp.random)": [[311, "dpnp.random.hypergeometric"]], "laplace() (in module dpnp.random)": [[312, "dpnp.random.laplace"]], "logistic() (in module dpnp.random)": [[313, "dpnp.random.logistic"]], "lognormal() (in module dpnp.random)": [[314, "dpnp.random.lognormal"]], "logseries() (in module dpnp.random)": [[315, "dpnp.random.logseries"]], "multinomial() (in module dpnp.random)": [[316, "dpnp.random.multinomial"]], "multivariate_normal() (in module dpnp.random)": [[317, "dpnp.random.multivariate_normal"]], "negative_binomial() (in module dpnp.random)": [[318, "dpnp.random.negative_binomial"]], "noncentral_chisquare() (in module dpnp.random)": [[319, "dpnp.random.noncentral_chisquare"]], "noncentral_f() (in module dpnp.random)": [[320, "dpnp.random.noncentral_f"]], "normal() (in module dpnp.random)": [[321, "dpnp.random.normal"]], "pareto() (in module dpnp.random)": [[322, "dpnp.random.pareto"]], "permutation() (in module dpnp.random)": [[323, "dpnp.random.permutation"]], "poisson() (in module dpnp.random)": [[324, "dpnp.random.poisson"]], "power() (in module dpnp.random)": [[325, "dpnp.random.power"]], "rand() (in module dpnp.random)": [[326, "dpnp.random.rand"]], "randint() (in module dpnp.random)": [[327, "dpnp.random.randint"]], "randn() (in module dpnp.random)": [[328, "dpnp.random.randn"]], "random() (in module dpnp.random)": [[329, "dpnp.random.random"]], "random_integers() (in module dpnp.random)": [[330, "dpnp.random.random_integers"]], "random_sample() (in module dpnp.random)": [[331, "dpnp.random.random_sample"]], "ranf() (in module dpnp.random)": [[332, "dpnp.random.ranf"]], "rayleigh() (in module dpnp.random)": [[333, "dpnp.random.rayleigh"]], "sample() (in module dpnp.random)": [[334, "dpnp.random.sample"]], "seed() (in module dpnp.random)": [[335, "dpnp.random.seed"]], "shuffle() (in module dpnp.random)": [[336, "dpnp.random.shuffle"]], "standard_cauchy() (in module dpnp.random)": [[337, "dpnp.random.standard_cauchy"]], "standard_exponential() (in module dpnp.random)": [[338, "dpnp.random.standard_exponential"]], "standard_gamma() (in module dpnp.random)": [[339, "dpnp.random.standard_gamma"]], "standard_normal() (in module dpnp.random)": [[340, "dpnp.random.standard_normal"]], "standard_t() (in module dpnp.random)": [[341, "dpnp.random.standard_t"]], "triangular() (in module dpnp.random)": [[342, "dpnp.random.triangular"]], "uniform() (in module dpnp.random)": [[343, "dpnp.random.uniform"]], "vonmises() (in module dpnp.random)": [[344, "dpnp.random.vonmises"]], "wald() (in module dpnp.random)": [[345, "dpnp.random.wald"]], "weibull() (in module dpnp.random)": [[346, "dpnp.random.weibull"]], "zipf() (in module dpnp.random)": [[347, "dpnp.random.zipf"]], "ravel() (in module dpnp)": [[348, "dpnp.ravel"]], "reciprocal() (in module dpnp)": [[349, "dpnp.reciprocal"]], "remainder() (in module dpnp)": [[350, "dpnp.remainder"]], "repeat() (in module dpnp)": [[351, "dpnp.repeat"]], "reshape() (in module dpnp)": [[352, "dpnp.reshape"]], "result_type() (in module dpnp)": [[353, "dpnp.result_type"]], "right_shift() (in module dpnp)": [[354, "dpnp.right_shift"]], "rint() (in module dpnp)": [[355, "dpnp.rint"]], "roll() (in module dpnp)": [[356, "dpnp.roll"]], "rollaxis() (in module dpnp)": [[357, "dpnp.rollaxis"]], "round() (in module dpnp)": [[358, "dpnp.round"]], "searchsorted() (in module dpnp)": [[359, "dpnp.searchsorted"]], "select() (in module dpnp)": [[360, "dpnp.select"]], "shape() (in module dpnp)": [[361, "dpnp.shape"]], "sign() (in module dpnp)": [[362, "dpnp.sign"]], "signbit() (in module dpnp)": [[363, "dpnp.signbit"]], "sin() (in module dpnp)": [[364, "dpnp.sin"]], "sinh() (in module dpnp)": [[365, "dpnp.sinh"]], "sort() (in module dpnp)": [[366, "dpnp.sort"]], "sqrt() (in module dpnp)": [[367, "dpnp.sqrt"]], "square() (in module dpnp)": [[368, "dpnp.square"]], "squeeze() (in module dpnp)": [[369, "dpnp.squeeze"]], "stack() (in module dpnp)": [[370, "dpnp.stack"]], "std() (in module dpnp)": [[371, "dpnp.std"]], "subtract() (in module dpnp)": [[372, "dpnp.subtract"]], "sum() (in module dpnp)": [[373, "dpnp.sum"]], "swapaxes() (in module dpnp)": [[374, "dpnp.swapaxes"]], "take() (in module dpnp)": [[375, "dpnp.take"]], "take_along_axis() (in module dpnp)": [[376, "dpnp.take_along_axis"]], "tan() (in module dpnp)": [[377, "dpnp.tan"]], "tanh() (in module dpnp)": [[378, "dpnp.tanh"]], "tensordot() (in module dpnp)": [[379, "dpnp.tensordot"]], "trace() (in module dpnp)": [[380, "dpnp.trace"]], "transpose() (in module dpnp)": [[381, "dpnp.transpose"]], "trapz() (in module dpnp)": [[382, "dpnp.trapz"]], "tri() (in module dpnp)": [[383, "dpnp.tri"]], "tril() (in module dpnp)": [[384, "dpnp.tril"]], "tril_indices() (in module dpnp)": [[385, "dpnp.tril_indices"]], "tril_indices_from() (in module dpnp)": [[386, "dpnp.tril_indices_from"]], "triu() (in module dpnp)": [[387, "dpnp.triu"]], "triu_indices() (in module dpnp)": [[388, "dpnp.triu_indices"]], "triu_indices_from() (in module dpnp)": [[389, "dpnp.triu_indices_from"]], "true_divide() (in module dpnp)": [[390, "dpnp.true_divide"]], "trunc() (in module dpnp)": [[391, "dpnp.trunc"]], "unique() (in module dpnp)": [[392, "dpnp.unique"]], "unwrap() (in module dpnp)": [[393, "dpnp.unwrap"]], "vander() (in module dpnp)": [[394, "dpnp.vander"]], "var() (in module dpnp)": [[395, "dpnp.var"]], "vdot() (in module dpnp)": [[396, "dpnp.vdot"]], "vstack() (in module dpnp)": [[397, "dpnp.vstack"]], "where() (in module dpnp)": [[398, "dpnp.where"]], "zeros() (in module dpnp)": [[399, "dpnp.zeros"]], "zeros_like() (in module dpnp)": [[400, "dpnp.zeros_like"]], "dpnp.random": [[411, "module-dpnp.random"]]}})