Search.setIndex({"docnames": ["dpctl", "dpnp_backend_api", "index", "overview", "quick_start_guide", "reference/binary", "reference/comparison", "reference/creation", "reference/dtype", "reference/dtypes_table", "reference/fft", "reference/generated/dpnp.abs", "reference/generated/dpnp.absolute", "reference/generated/dpnp.add", "reference/generated/dpnp.all", "reference/generated/dpnp.allclose", "reference/generated/dpnp.amax", "reference/generated/dpnp.amin", "reference/generated/dpnp.any", "reference/generated/dpnp.arange", "reference/generated/dpnp.arccos", "reference/generated/dpnp.arccosh", "reference/generated/dpnp.arcsin", "reference/generated/dpnp.arcsinh", "reference/generated/dpnp.arctan", "reference/generated/dpnp.arctan2", "reference/generated/dpnp.arctanh", "reference/generated/dpnp.argmax", "reference/generated/dpnp.argmin", "reference/generated/dpnp.argsort", "reference/generated/dpnp.around", "reference/generated/dpnp.array", "reference/generated/dpnp.array_equal", "reference/generated/dpnp.asanyarray", "reference/generated/dpnp.asarray", "reference/generated/dpnp.ascontiguousarray", "reference/generated/dpnp.asfarray", "reference/generated/dpnp.asfortranarray", "reference/generated/dpnp.asnumpy", "reference/generated/dpnp.atleast_1d", "reference/generated/dpnp.atleast_2d", "reference/generated/dpnp.atleast_3d", "reference/generated/dpnp.average", "reference/generated/dpnp.bincount", "reference/generated/dpnp.bitwise_and", "reference/generated/dpnp.bitwise_not", "reference/generated/dpnp.bitwise_or", "reference/generated/dpnp.bitwise_xor", "reference/generated/dpnp.broadcast_arrays", "reference/generated/dpnp.broadcast_to", "reference/generated/dpnp.can_cast", "reference/generated/dpnp.cbrt", "reference/generated/dpnp.ceil", "reference/generated/dpnp.choose", "reference/generated/dpnp.clip", "reference/generated/dpnp.concatenate", "reference/generated/dpnp.conj", "reference/generated/dpnp.conjugate", "reference/generated/dpnp.convolve", "reference/generated/dpnp.copy", "reference/generated/dpnp.copysign", "reference/generated/dpnp.copyto", "reference/generated/dpnp.correlate", "reference/generated/dpnp.cos", "reference/generated/dpnp.cosh", "reference/generated/dpnp.count_nonzero", "reference/generated/dpnp.cov", "reference/generated/dpnp.cross", "reference/generated/dpnp.cumprod", "reference/generated/dpnp.cumsum", "reference/generated/dpnp.deg2rad", "reference/generated/dpnp.degrees", "reference/generated/dpnp.diag", "reference/generated/dpnp.diag_indices", "reference/generated/dpnp.diag_indices_from", "reference/generated/dpnp.diagflat", "reference/generated/dpnp.diagonal", "reference/generated/dpnp.diff", "reference/generated/dpnp.divide", "reference/generated/dpnp.dot", "reference/generated/dpnp.dpnp_array.dpnp_array", "reference/generated/dpnp.dtype", "reference/generated/dpnp.ediff1d", "reference/generated/dpnp.einsum", "reference/generated/dpnp.einsum_path", "reference/generated/dpnp.empty", "reference/generated/dpnp.empty_like", "reference/generated/dpnp.equal", "reference/generated/dpnp.erf", "reference/generated/dpnp.exp", "reference/generated/dpnp.exp2", "reference/generated/dpnp.expand_dims", "reference/generated/dpnp.expm1", "reference/generated/dpnp.extract", "reference/generated/dpnp.eye", "reference/generated/dpnp.fabs", "reference/generated/dpnp.fft.fft", "reference/generated/dpnp.fft.fft2", "reference/generated/dpnp.fft.fftfreq", "reference/generated/dpnp.fft.fftn", "reference/generated/dpnp.fft.fftshift", "reference/generated/dpnp.fft.hfft", "reference/generated/dpnp.fft.ifft", "reference/generated/dpnp.fft.ifft2", "reference/generated/dpnp.fft.ifftn", "reference/generated/dpnp.fft.ifftshift", "reference/generated/dpnp.fft.ihfft", "reference/generated/dpnp.fft.irfft", "reference/generated/dpnp.fft.irfft2", "reference/generated/dpnp.fft.irfftn", "reference/generated/dpnp.fft.rfft", "reference/generated/dpnp.fft.rfft2", "reference/generated/dpnp.fft.rfftfreq", "reference/generated/dpnp.fft.rfftn", "reference/generated/dpnp.fill_diagonal", "reference/generated/dpnp.finfo", "reference/generated/dpnp.flatiter", "reference/generated/dpnp.flip", "reference/generated/dpnp.fliplr", "reference/generated/dpnp.flipud", "reference/generated/dpnp.floor", "reference/generated/dpnp.floor_divide", "reference/generated/dpnp.fmax", "reference/generated/dpnp.fmin", "reference/generated/dpnp.fmod", "reference/generated/dpnp.from_dlpack", "reference/generated/dpnp.frombuffer", "reference/generated/dpnp.fromfile", "reference/generated/dpnp.fromfunction", "reference/generated/dpnp.fromiter", "reference/generated/dpnp.fromstring", "reference/generated/dpnp.full", "reference/generated/dpnp.full_like", "reference/generated/dpnp.geomspace", "reference/generated/dpnp.get_include", "reference/generated/dpnp.gradient", "reference/generated/dpnp.greater", "reference/generated/dpnp.greater_equal", "reference/generated/dpnp.histogram", "reference/generated/dpnp.hstack", "reference/generated/dpnp.hypot", "reference/generated/dpnp.identity", "reference/generated/dpnp.iinfo", "reference/generated/dpnp.imag", "reference/generated/dpnp.indices", "reference/generated/dpnp.inner", "reference/generated/dpnp.invert", "reference/generated/dpnp.isclose", "reference/generated/dpnp.isfinite", "reference/generated/dpnp.isinf", "reference/generated/dpnp.isnan", "reference/generated/dpnp.isscalar", "reference/generated/dpnp.issubdtype", "reference/generated/dpnp.issubsctype", "reference/generated/dpnp.kron", "reference/generated/dpnp.left_shift", "reference/generated/dpnp.less", "reference/generated/dpnp.less_equal", "reference/generated/dpnp.linalg.cholesky", "reference/generated/dpnp.linalg.cond", "reference/generated/dpnp.linalg.det", "reference/generated/dpnp.linalg.eig", "reference/generated/dpnp.linalg.eigh", "reference/generated/dpnp.linalg.eigvals", "reference/generated/dpnp.linalg.inv", "reference/generated/dpnp.linalg.matrix_power", "reference/generated/dpnp.linalg.matrix_rank", "reference/generated/dpnp.linalg.multi_dot", "reference/generated/dpnp.linalg.norm", "reference/generated/dpnp.linalg.qr", "reference/generated/dpnp.linalg.solve", "reference/generated/dpnp.linalg.svd", "reference/generated/dpnp.linspace", "reference/generated/dpnp.loadtxt", "reference/generated/dpnp.log", "reference/generated/dpnp.log10", "reference/generated/dpnp.log1p", "reference/generated/dpnp.log2", "reference/generated/dpnp.logaddexp", "reference/generated/dpnp.logical_and", "reference/generated/dpnp.logical_not", "reference/generated/dpnp.logical_or", "reference/generated/dpnp.logical_xor", "reference/generated/dpnp.logspace", "reference/generated/dpnp.matmul", "reference/generated/dpnp.max", "reference/generated/dpnp.maximum", "reference/generated/dpnp.mean", "reference/generated/dpnp.median", "reference/generated/dpnp.meshgrid", "reference/generated/dpnp.mgrid", "reference/generated/dpnp.min", "reference/generated/dpnp.minimum", "reference/generated/dpnp.mod", "reference/generated/dpnp.modf", "reference/generated/dpnp.moveaxis", "reference/generated/dpnp.multiply", "reference/generated/dpnp.nanargmax", "reference/generated/dpnp.nanargmin", "reference/generated/dpnp.nancumprod", "reference/generated/dpnp.nancumsum", "reference/generated/dpnp.nanmax", "reference/generated/dpnp.nanmin", "reference/generated/dpnp.nanprod", "reference/generated/dpnp.nansum", "reference/generated/dpnp.nanvar", "reference/generated/dpnp.ndarray", "reference/generated/dpnp.ndarray.T", "reference/generated/dpnp.ndarray.__abs__", "reference/generated/dpnp.ndarray.__add__", "reference/generated/dpnp.ndarray.__and__", "reference/generated/dpnp.ndarray.__complex__", "reference/generated/dpnp.ndarray.__copy__", "reference/generated/dpnp.ndarray.__eq__", "reference/generated/dpnp.ndarray.__float__", "reference/generated/dpnp.ndarray.__floordiv__", "reference/generated/dpnp.ndarray.__ge__", "reference/generated/dpnp.ndarray.__getitem__", "reference/generated/dpnp.ndarray.__gt__", "reference/generated/dpnp.ndarray.__iadd__", "reference/generated/dpnp.ndarray.__iand__", "reference/generated/dpnp.ndarray.__ifloordiv__", "reference/generated/dpnp.ndarray.__ilshift__", "reference/generated/dpnp.ndarray.__imod__", "reference/generated/dpnp.ndarray.__imul__", "reference/generated/dpnp.ndarray.__int__", "reference/generated/dpnp.ndarray.__invert__", "reference/generated/dpnp.ndarray.__ior__", "reference/generated/dpnp.ndarray.__ipow__", "reference/generated/dpnp.ndarray.__irshift__", "reference/generated/dpnp.ndarray.__isub__", "reference/generated/dpnp.ndarray.__itruediv__", "reference/generated/dpnp.ndarray.__ixor__", "reference/generated/dpnp.ndarray.__le__", "reference/generated/dpnp.ndarray.__len__", "reference/generated/dpnp.ndarray.__lshift__", "reference/generated/dpnp.ndarray.__lt__", "reference/generated/dpnp.ndarray.__mod__", "reference/generated/dpnp.ndarray.__mul__", "reference/generated/dpnp.ndarray.__ne__", "reference/generated/dpnp.ndarray.__neg__", "reference/generated/dpnp.ndarray.__new__", "reference/generated/dpnp.ndarray.__or__", "reference/generated/dpnp.ndarray.__pos__", "reference/generated/dpnp.ndarray.__pow__", "reference/generated/dpnp.ndarray.__repr__", "reference/generated/dpnp.ndarray.__rshift__", "reference/generated/dpnp.ndarray.__setitem__", "reference/generated/dpnp.ndarray.__str__", "reference/generated/dpnp.ndarray.__sub__", "reference/generated/dpnp.ndarray.__truediv__", "reference/generated/dpnp.ndarray.__xor__", "reference/generated/dpnp.ndarray.all", "reference/generated/dpnp.ndarray.any", "reference/generated/dpnp.ndarray.argmax", "reference/generated/dpnp.ndarray.argmin", "reference/generated/dpnp.ndarray.argsort", "reference/generated/dpnp.ndarray.astype", "reference/generated/dpnp.ndarray.choose", "reference/generated/dpnp.ndarray.clip", "reference/generated/dpnp.ndarray.conj", "reference/generated/dpnp.ndarray.conjugate", "reference/generated/dpnp.ndarray.copy", "reference/generated/dpnp.ndarray.cumsum", "reference/generated/dpnp.ndarray.diagonal", "reference/generated/dpnp.ndarray.dtype", "reference/generated/dpnp.ndarray.fill", "reference/generated/dpnp.ndarray.flags", "reference/generated/dpnp.ndarray.flat", "reference/generated/dpnp.ndarray.flatten", "reference/generated/dpnp.ndarray.imag", "reference/generated/dpnp.ndarray.item", "reference/generated/dpnp.ndarray.itemsize", "reference/generated/dpnp.ndarray.max", "reference/generated/dpnp.ndarray.mean", "reference/generated/dpnp.ndarray.min", "reference/generated/dpnp.ndarray.nbytes", "reference/generated/dpnp.ndarray.ndim", "reference/generated/dpnp.ndarray.nonzero", "reference/generated/dpnp.ndarray.partition", "reference/generated/dpnp.ndarray.prod", "reference/generated/dpnp.ndarray.put", "reference/generated/dpnp.ndarray.ravel", "reference/generated/dpnp.ndarray.real", "reference/generated/dpnp.ndarray.repeat", "reference/generated/dpnp.ndarray.reshape", "reference/generated/dpnp.ndarray.round", "reference/generated/dpnp.ndarray.shape", "reference/generated/dpnp.ndarray.size", "reference/generated/dpnp.ndarray.squeeze", "reference/generated/dpnp.ndarray.std", "reference/generated/dpnp.ndarray.strides", "reference/generated/dpnp.ndarray.sum", "reference/generated/dpnp.ndarray.swapaxes", "reference/generated/dpnp.ndarray.take", "reference/generated/dpnp.ndarray.transpose", "reference/generated/dpnp.ndarray.var", "reference/generated/dpnp.negative", "reference/generated/dpnp.nonzero", "reference/generated/dpnp.not_equal", "reference/generated/dpnp.ogrid", "reference/generated/dpnp.ones", "reference/generated/dpnp.ones_like", "reference/generated/dpnp.outer", "reference/generated/dpnp.partition", "reference/generated/dpnp.place", "reference/generated/dpnp.positive", "reference/generated/dpnp.power", "reference/generated/dpnp.prod", "reference/generated/dpnp.proj", "reference/generated/dpnp.ptp", "reference/generated/dpnp.put", "reference/generated/dpnp.put_along_axis", "reference/generated/dpnp.putmask", "reference/generated/dpnp.rad2deg", "reference/generated/dpnp.radians", "reference/generated/dpnp.random.RandomState", "reference/generated/dpnp.random.beta", "reference/generated/dpnp.random.binomial", "reference/generated/dpnp.random.bytes", "reference/generated/dpnp.random.chisquare", "reference/generated/dpnp.random.choice", "reference/generated/dpnp.random.dirichlet", "reference/generated/dpnp.random.exponential", "reference/generated/dpnp.random.f", "reference/generated/dpnp.random.gamma", "reference/generated/dpnp.random.geometric", "reference/generated/dpnp.random.gumbel", "reference/generated/dpnp.random.hypergeometric", "reference/generated/dpnp.random.laplace", "reference/generated/dpnp.random.logistic", "reference/generated/dpnp.random.lognormal", "reference/generated/dpnp.random.logseries", "reference/generated/dpnp.random.multinomial", "reference/generated/dpnp.random.multivariate_normal", "reference/generated/dpnp.random.negative_binomial", "reference/generated/dpnp.random.noncentral_chisquare", "reference/generated/dpnp.random.noncentral_f", "reference/generated/dpnp.random.normal", "reference/generated/dpnp.random.pareto", "reference/generated/dpnp.random.permutation", "reference/generated/dpnp.random.poisson", "reference/generated/dpnp.random.power", "reference/generated/dpnp.random.rand", "reference/generated/dpnp.random.randint", "reference/generated/dpnp.random.randn", "reference/generated/dpnp.random.random", "reference/generated/dpnp.random.random_integers", "reference/generated/dpnp.random.random_sample", "reference/generated/dpnp.random.ranf", "reference/generated/dpnp.random.rayleigh", "reference/generated/dpnp.random.sample", "reference/generated/dpnp.random.seed", "reference/generated/dpnp.random.shuffle", "reference/generated/dpnp.random.standard_cauchy", "reference/generated/dpnp.random.standard_exponential", "reference/generated/dpnp.random.standard_gamma", "reference/generated/dpnp.random.standard_normal", "reference/generated/dpnp.random.standard_t", "reference/generated/dpnp.random.triangular", "reference/generated/dpnp.random.uniform", "reference/generated/dpnp.random.vonmises", "reference/generated/dpnp.random.wald", "reference/generated/dpnp.random.weibull", "reference/generated/dpnp.random.zipf", "reference/generated/dpnp.ravel", "reference/generated/dpnp.real", "reference/generated/dpnp.reciprocal", "reference/generated/dpnp.remainder", "reference/generated/dpnp.repeat", "reference/generated/dpnp.reshape", "reference/generated/dpnp.result_type", "reference/generated/dpnp.right_shift", "reference/generated/dpnp.rint", "reference/generated/dpnp.roll", "reference/generated/dpnp.rollaxis", "reference/generated/dpnp.round", "reference/generated/dpnp.searchsorted", "reference/generated/dpnp.select", "reference/generated/dpnp.shape", "reference/generated/dpnp.sign", "reference/generated/dpnp.signbit", "reference/generated/dpnp.sin", "reference/generated/dpnp.sinh", "reference/generated/dpnp.sort", "reference/generated/dpnp.sqrt", "reference/generated/dpnp.square", "reference/generated/dpnp.squeeze", "reference/generated/dpnp.stack", "reference/generated/dpnp.std", "reference/generated/dpnp.subtract", "reference/generated/dpnp.sum", "reference/generated/dpnp.swapaxes", "reference/generated/dpnp.take", "reference/generated/dpnp.take_along_axis", "reference/generated/dpnp.tan", "reference/generated/dpnp.tanh", "reference/generated/dpnp.tensordot", "reference/generated/dpnp.tile", "reference/generated/dpnp.trace", "reference/generated/dpnp.transpose", "reference/generated/dpnp.trapz", "reference/generated/dpnp.tri", "reference/generated/dpnp.tril", "reference/generated/dpnp.tril_indices", "reference/generated/dpnp.tril_indices_from", "reference/generated/dpnp.triu", "reference/generated/dpnp.triu_indices", "reference/generated/dpnp.triu_indices_from", "reference/generated/dpnp.true_divide", "reference/generated/dpnp.trunc", "reference/generated/dpnp.unique", "reference/generated/dpnp.unwrap", "reference/generated/dpnp.vander", "reference/generated/dpnp.var", "reference/generated/dpnp.vdot", "reference/generated/dpnp.vstack", "reference/generated/dpnp.where", "reference/generated/dpnp.zeros", "reference/generated/dpnp.zeros_like", "reference/index", "reference/indexing", "reference/linalg", "reference/logic", "reference/manipulation", "reference/math", "reference/misc", "reference/ndarray", "reference/pad", "reference/polynomials", "reference/random", "reference/routines", "reference/sorting", "reference/special", "reference/statistics", "reference/ufunc"], "filenames": ["dpctl.rst", "dpnp_backend_api.rst", "index.rst", "overview.rst", "quick_start_guide.rst", "reference/binary.rst", "reference/comparison.rst", "reference/creation.rst", "reference/dtype.rst", "reference/dtypes_table.rst", "reference/fft.rst", "reference/generated/dpnp.abs.rst", "reference/generated/dpnp.absolute.rst", "reference/generated/dpnp.add.rst", "reference/generated/dpnp.all.rst", "reference/generated/dpnp.allclose.rst", "reference/generated/dpnp.amax.rst", "reference/generated/dpnp.amin.rst", "reference/generated/dpnp.any.rst", "reference/generated/dpnp.arange.rst", "reference/generated/dpnp.arccos.rst", "reference/generated/dpnp.arccosh.rst", "reference/generated/dpnp.arcsin.rst", "reference/generated/dpnp.arcsinh.rst", "reference/generated/dpnp.arctan.rst", "reference/generated/dpnp.arctan2.rst", "reference/generated/dpnp.arctanh.rst", "reference/generated/dpnp.argmax.rst", "reference/generated/dpnp.argmin.rst", "reference/generated/dpnp.argsort.rst", "reference/generated/dpnp.around.rst", "reference/generated/dpnp.array.rst", "reference/generated/dpnp.array_equal.rst", "reference/generated/dpnp.asanyarray.rst", "reference/generated/dpnp.asarray.rst", "reference/generated/dpnp.ascontiguousarray.rst", "reference/generated/dpnp.asfarray.rst", "reference/generated/dpnp.asfortranarray.rst", "reference/generated/dpnp.asnumpy.rst", "reference/generated/dpnp.atleast_1d.rst", "reference/generated/dpnp.atleast_2d.rst", "reference/generated/dpnp.atleast_3d.rst", "reference/generated/dpnp.average.rst", "reference/generated/dpnp.bincount.rst", "reference/generated/dpnp.bitwise_and.rst", "reference/generated/dpnp.bitwise_not.rst", "reference/generated/dpnp.bitwise_or.rst", "reference/generated/dpnp.bitwise_xor.rst", "reference/generated/dpnp.broadcast_arrays.rst", "reference/generated/dpnp.broadcast_to.rst", "reference/generated/dpnp.can_cast.rst", "reference/generated/dpnp.cbrt.rst", "reference/generated/dpnp.ceil.rst", "reference/generated/dpnp.choose.rst", "reference/generated/dpnp.clip.rst", "reference/generated/dpnp.concatenate.rst", "reference/generated/dpnp.conj.rst", "reference/generated/dpnp.conjugate.rst", "reference/generated/dpnp.convolve.rst", "reference/generated/dpnp.copy.rst", "reference/generated/dpnp.copysign.rst", "reference/generated/dpnp.copyto.rst", "reference/generated/dpnp.correlate.rst", "reference/generated/dpnp.cos.rst", "reference/generated/dpnp.cosh.rst", "reference/generated/dpnp.count_nonzero.rst", "reference/generated/dpnp.cov.rst", "reference/generated/dpnp.cross.rst", "reference/generated/dpnp.cumprod.rst", "reference/generated/dpnp.cumsum.rst", "reference/generated/dpnp.deg2rad.rst", "reference/generated/dpnp.degrees.rst", "reference/generated/dpnp.diag.rst", "reference/generated/dpnp.diag_indices.rst", "reference/generated/dpnp.diag_indices_from.rst", "reference/generated/dpnp.diagflat.rst", "reference/generated/dpnp.diagonal.rst", "reference/generated/dpnp.diff.rst", "reference/generated/dpnp.divide.rst", "reference/generated/dpnp.dot.rst", "reference/generated/dpnp.dpnp_array.dpnp_array.rst", "reference/generated/dpnp.dtype.rst", "reference/generated/dpnp.ediff1d.rst", "reference/generated/dpnp.einsum.rst", "reference/generated/dpnp.einsum_path.rst", "reference/generated/dpnp.empty.rst", "reference/generated/dpnp.empty_like.rst", "reference/generated/dpnp.equal.rst", "reference/generated/dpnp.erf.rst", "reference/generated/dpnp.exp.rst", "reference/generated/dpnp.exp2.rst", "reference/generated/dpnp.expand_dims.rst", "reference/generated/dpnp.expm1.rst", "reference/generated/dpnp.extract.rst", "reference/generated/dpnp.eye.rst", "reference/generated/dpnp.fabs.rst", "reference/generated/dpnp.fft.fft.rst", "reference/generated/dpnp.fft.fft2.rst", "reference/generated/dpnp.fft.fftfreq.rst", "reference/generated/dpnp.fft.fftn.rst", "reference/generated/dpnp.fft.fftshift.rst", "reference/generated/dpnp.fft.hfft.rst", "reference/generated/dpnp.fft.ifft.rst", "reference/generated/dpnp.fft.ifft2.rst", "reference/generated/dpnp.fft.ifftn.rst", "reference/generated/dpnp.fft.ifftshift.rst", "reference/generated/dpnp.fft.ihfft.rst", "reference/generated/dpnp.fft.irfft.rst", "reference/generated/dpnp.fft.irfft2.rst", "reference/generated/dpnp.fft.irfftn.rst", "reference/generated/dpnp.fft.rfft.rst", "reference/generated/dpnp.fft.rfft2.rst", "reference/generated/dpnp.fft.rfftfreq.rst", "reference/generated/dpnp.fft.rfftn.rst", "reference/generated/dpnp.fill_diagonal.rst", "reference/generated/dpnp.finfo.rst", "reference/generated/dpnp.flatiter.rst", "reference/generated/dpnp.flip.rst", "reference/generated/dpnp.fliplr.rst", "reference/generated/dpnp.flipud.rst", "reference/generated/dpnp.floor.rst", "reference/generated/dpnp.floor_divide.rst", "reference/generated/dpnp.fmax.rst", "reference/generated/dpnp.fmin.rst", "reference/generated/dpnp.fmod.rst", "reference/generated/dpnp.from_dlpack.rst", "reference/generated/dpnp.frombuffer.rst", "reference/generated/dpnp.fromfile.rst", "reference/generated/dpnp.fromfunction.rst", "reference/generated/dpnp.fromiter.rst", "reference/generated/dpnp.fromstring.rst", "reference/generated/dpnp.full.rst", "reference/generated/dpnp.full_like.rst", "reference/generated/dpnp.geomspace.rst", "reference/generated/dpnp.get_include.rst", "reference/generated/dpnp.gradient.rst", "reference/generated/dpnp.greater.rst", "reference/generated/dpnp.greater_equal.rst", "reference/generated/dpnp.histogram.rst", "reference/generated/dpnp.hstack.rst", "reference/generated/dpnp.hypot.rst", "reference/generated/dpnp.identity.rst", "reference/generated/dpnp.iinfo.rst", "reference/generated/dpnp.imag.rst", "reference/generated/dpnp.indices.rst", "reference/generated/dpnp.inner.rst", "reference/generated/dpnp.invert.rst", "reference/generated/dpnp.isclose.rst", "reference/generated/dpnp.isfinite.rst", "reference/generated/dpnp.isinf.rst", "reference/generated/dpnp.isnan.rst", "reference/generated/dpnp.isscalar.rst", "reference/generated/dpnp.issubdtype.rst", "reference/generated/dpnp.issubsctype.rst", "reference/generated/dpnp.kron.rst", "reference/generated/dpnp.left_shift.rst", "reference/generated/dpnp.less.rst", "reference/generated/dpnp.less_equal.rst", "reference/generated/dpnp.linalg.cholesky.rst", "reference/generated/dpnp.linalg.cond.rst", "reference/generated/dpnp.linalg.det.rst", "reference/generated/dpnp.linalg.eig.rst", "reference/generated/dpnp.linalg.eigh.rst", "reference/generated/dpnp.linalg.eigvals.rst", "reference/generated/dpnp.linalg.inv.rst", "reference/generated/dpnp.linalg.matrix_power.rst", "reference/generated/dpnp.linalg.matrix_rank.rst", "reference/generated/dpnp.linalg.multi_dot.rst", "reference/generated/dpnp.linalg.norm.rst", "reference/generated/dpnp.linalg.qr.rst", "reference/generated/dpnp.linalg.solve.rst", "reference/generated/dpnp.linalg.svd.rst", "reference/generated/dpnp.linspace.rst", "reference/generated/dpnp.loadtxt.rst", "reference/generated/dpnp.log.rst", "reference/generated/dpnp.log10.rst", "reference/generated/dpnp.log1p.rst", "reference/generated/dpnp.log2.rst", "reference/generated/dpnp.logaddexp.rst", "reference/generated/dpnp.logical_and.rst", "reference/generated/dpnp.logical_not.rst", "reference/generated/dpnp.logical_or.rst", "reference/generated/dpnp.logical_xor.rst", "reference/generated/dpnp.logspace.rst", "reference/generated/dpnp.matmul.rst", "reference/generated/dpnp.max.rst", "reference/generated/dpnp.maximum.rst", "reference/generated/dpnp.mean.rst", "reference/generated/dpnp.median.rst", "reference/generated/dpnp.meshgrid.rst", "reference/generated/dpnp.mgrid.rst", "reference/generated/dpnp.min.rst", "reference/generated/dpnp.minimum.rst", "reference/generated/dpnp.mod.rst", "reference/generated/dpnp.modf.rst", "reference/generated/dpnp.moveaxis.rst", "reference/generated/dpnp.multiply.rst", "reference/generated/dpnp.nanargmax.rst", "reference/generated/dpnp.nanargmin.rst", "reference/generated/dpnp.nancumprod.rst", "reference/generated/dpnp.nancumsum.rst", "reference/generated/dpnp.nanmax.rst", "reference/generated/dpnp.nanmin.rst", "reference/generated/dpnp.nanprod.rst", "reference/generated/dpnp.nansum.rst", "reference/generated/dpnp.nanvar.rst", "reference/generated/dpnp.ndarray.rst", "reference/generated/dpnp.ndarray.T.rst", "reference/generated/dpnp.ndarray.__abs__.rst", "reference/generated/dpnp.ndarray.__add__.rst", "reference/generated/dpnp.ndarray.__and__.rst", "reference/generated/dpnp.ndarray.__complex__.rst", "reference/generated/dpnp.ndarray.__copy__.rst", "reference/generated/dpnp.ndarray.__eq__.rst", "reference/generated/dpnp.ndarray.__float__.rst", "reference/generated/dpnp.ndarray.__floordiv__.rst", "reference/generated/dpnp.ndarray.__ge__.rst", "reference/generated/dpnp.ndarray.__getitem__.rst", "reference/generated/dpnp.ndarray.__gt__.rst", "reference/generated/dpnp.ndarray.__iadd__.rst", "reference/generated/dpnp.ndarray.__iand__.rst", "reference/generated/dpnp.ndarray.__ifloordiv__.rst", "reference/generated/dpnp.ndarray.__ilshift__.rst", "reference/generated/dpnp.ndarray.__imod__.rst", "reference/generated/dpnp.ndarray.__imul__.rst", "reference/generated/dpnp.ndarray.__int__.rst", "reference/generated/dpnp.ndarray.__invert__.rst", "reference/generated/dpnp.ndarray.__ior__.rst", "reference/generated/dpnp.ndarray.__ipow__.rst", "reference/generated/dpnp.ndarray.__irshift__.rst", "reference/generated/dpnp.ndarray.__isub__.rst", "reference/generated/dpnp.ndarray.__itruediv__.rst", "reference/generated/dpnp.ndarray.__ixor__.rst", "reference/generated/dpnp.ndarray.__le__.rst", "reference/generated/dpnp.ndarray.__len__.rst", "reference/generated/dpnp.ndarray.__lshift__.rst", "reference/generated/dpnp.ndarray.__lt__.rst", "reference/generated/dpnp.ndarray.__mod__.rst", "reference/generated/dpnp.ndarray.__mul__.rst", "reference/generated/dpnp.ndarray.__ne__.rst", "reference/generated/dpnp.ndarray.__neg__.rst", "reference/generated/dpnp.ndarray.__new__.rst", "reference/generated/dpnp.ndarray.__or__.rst", "reference/generated/dpnp.ndarray.__pos__.rst", "reference/generated/dpnp.ndarray.__pow__.rst", "reference/generated/dpnp.ndarray.__repr__.rst", "reference/generated/dpnp.ndarray.__rshift__.rst", "reference/generated/dpnp.ndarray.__setitem__.rst", "reference/generated/dpnp.ndarray.__str__.rst", "reference/generated/dpnp.ndarray.__sub__.rst", "reference/generated/dpnp.ndarray.__truediv__.rst", "reference/generated/dpnp.ndarray.__xor__.rst", "reference/generated/dpnp.ndarray.all.rst", "reference/generated/dpnp.ndarray.any.rst", "reference/generated/dpnp.ndarray.argmax.rst", "reference/generated/dpnp.ndarray.argmin.rst", "reference/generated/dpnp.ndarray.argsort.rst", "reference/generated/dpnp.ndarray.astype.rst", "reference/generated/dpnp.ndarray.choose.rst", "reference/generated/dpnp.ndarray.clip.rst", "reference/generated/dpnp.ndarray.conj.rst", "reference/generated/dpnp.ndarray.conjugate.rst", "reference/generated/dpnp.ndarray.copy.rst", "reference/generated/dpnp.ndarray.cumsum.rst", "reference/generated/dpnp.ndarray.diagonal.rst", "reference/generated/dpnp.ndarray.dtype.rst", "reference/generated/dpnp.ndarray.fill.rst", "reference/generated/dpnp.ndarray.flags.rst", "reference/generated/dpnp.ndarray.flat.rst", "reference/generated/dpnp.ndarray.flatten.rst", "reference/generated/dpnp.ndarray.imag.rst", "reference/generated/dpnp.ndarray.item.rst", "reference/generated/dpnp.ndarray.itemsize.rst", "reference/generated/dpnp.ndarray.max.rst", "reference/generated/dpnp.ndarray.mean.rst", "reference/generated/dpnp.ndarray.min.rst", "reference/generated/dpnp.ndarray.nbytes.rst", "reference/generated/dpnp.ndarray.ndim.rst", "reference/generated/dpnp.ndarray.nonzero.rst", "reference/generated/dpnp.ndarray.partition.rst", "reference/generated/dpnp.ndarray.prod.rst", "reference/generated/dpnp.ndarray.put.rst", "reference/generated/dpnp.ndarray.ravel.rst", "reference/generated/dpnp.ndarray.real.rst", "reference/generated/dpnp.ndarray.repeat.rst", "reference/generated/dpnp.ndarray.reshape.rst", "reference/generated/dpnp.ndarray.round.rst", "reference/generated/dpnp.ndarray.shape.rst", "reference/generated/dpnp.ndarray.size.rst", "reference/generated/dpnp.ndarray.squeeze.rst", "reference/generated/dpnp.ndarray.std.rst", "reference/generated/dpnp.ndarray.strides.rst", "reference/generated/dpnp.ndarray.sum.rst", "reference/generated/dpnp.ndarray.swapaxes.rst", "reference/generated/dpnp.ndarray.take.rst", "reference/generated/dpnp.ndarray.transpose.rst", "reference/generated/dpnp.ndarray.var.rst", "reference/generated/dpnp.negative.rst", "reference/generated/dpnp.nonzero.rst", "reference/generated/dpnp.not_equal.rst", "reference/generated/dpnp.ogrid.rst", "reference/generated/dpnp.ones.rst", "reference/generated/dpnp.ones_like.rst", "reference/generated/dpnp.outer.rst", "reference/generated/dpnp.partition.rst", "reference/generated/dpnp.place.rst", "reference/generated/dpnp.positive.rst", "reference/generated/dpnp.power.rst", "reference/generated/dpnp.prod.rst", "reference/generated/dpnp.proj.rst", "reference/generated/dpnp.ptp.rst", "reference/generated/dpnp.put.rst", "reference/generated/dpnp.put_along_axis.rst", "reference/generated/dpnp.putmask.rst", "reference/generated/dpnp.rad2deg.rst", "reference/generated/dpnp.radians.rst", "reference/generated/dpnp.random.RandomState.rst", "reference/generated/dpnp.random.beta.rst", "reference/generated/dpnp.random.binomial.rst", "reference/generated/dpnp.random.bytes.rst", "reference/generated/dpnp.random.chisquare.rst", "reference/generated/dpnp.random.choice.rst", "reference/generated/dpnp.random.dirichlet.rst", "reference/generated/dpnp.random.exponential.rst", "reference/generated/dpnp.random.f.rst", "reference/generated/dpnp.random.gamma.rst", "reference/generated/dpnp.random.geometric.rst", "reference/generated/dpnp.random.gumbel.rst", "reference/generated/dpnp.random.hypergeometric.rst", "reference/generated/dpnp.random.laplace.rst", "reference/generated/dpnp.random.logistic.rst", "reference/generated/dpnp.random.lognormal.rst", "reference/generated/dpnp.random.logseries.rst", "reference/generated/dpnp.random.multinomial.rst", "reference/generated/dpnp.random.multivariate_normal.rst", "reference/generated/dpnp.random.negative_binomial.rst", "reference/generated/dpnp.random.noncentral_chisquare.rst", "reference/generated/dpnp.random.noncentral_f.rst", "reference/generated/dpnp.random.normal.rst", "reference/generated/dpnp.random.pareto.rst", "reference/generated/dpnp.random.permutation.rst", "reference/generated/dpnp.random.poisson.rst", "reference/generated/dpnp.random.power.rst", "reference/generated/dpnp.random.rand.rst", "reference/generated/dpnp.random.randint.rst", "reference/generated/dpnp.random.randn.rst", "reference/generated/dpnp.random.random.rst", "reference/generated/dpnp.random.random_integers.rst", "reference/generated/dpnp.random.random_sample.rst", "reference/generated/dpnp.random.ranf.rst", "reference/generated/dpnp.random.rayleigh.rst", "reference/generated/dpnp.random.sample.rst", "reference/generated/dpnp.random.seed.rst", "reference/generated/dpnp.random.shuffle.rst", "reference/generated/dpnp.random.standard_cauchy.rst", "reference/generated/dpnp.random.standard_exponential.rst", "reference/generated/dpnp.random.standard_gamma.rst", "reference/generated/dpnp.random.standard_normal.rst", "reference/generated/dpnp.random.standard_t.rst", "reference/generated/dpnp.random.triangular.rst", "reference/generated/dpnp.random.uniform.rst", "reference/generated/dpnp.random.vonmises.rst", "reference/generated/dpnp.random.wald.rst", "reference/generated/dpnp.random.weibull.rst", "reference/generated/dpnp.random.zipf.rst", "reference/generated/dpnp.ravel.rst", "reference/generated/dpnp.real.rst", "reference/generated/dpnp.reciprocal.rst", "reference/generated/dpnp.remainder.rst", "reference/generated/dpnp.repeat.rst", "reference/generated/dpnp.reshape.rst", "reference/generated/dpnp.result_type.rst", "reference/generated/dpnp.right_shift.rst", "reference/generated/dpnp.rint.rst", "reference/generated/dpnp.roll.rst", "reference/generated/dpnp.rollaxis.rst", "reference/generated/dpnp.round.rst", "reference/generated/dpnp.searchsorted.rst", "reference/generated/dpnp.select.rst", "reference/generated/dpnp.shape.rst", "reference/generated/dpnp.sign.rst", "reference/generated/dpnp.signbit.rst", "reference/generated/dpnp.sin.rst", "reference/generated/dpnp.sinh.rst", "reference/generated/dpnp.sort.rst", "reference/generated/dpnp.sqrt.rst", "reference/generated/dpnp.square.rst", "reference/generated/dpnp.squeeze.rst", "reference/generated/dpnp.stack.rst", "reference/generated/dpnp.std.rst", "reference/generated/dpnp.subtract.rst", "reference/generated/dpnp.sum.rst", "reference/generated/dpnp.swapaxes.rst", "reference/generated/dpnp.take.rst", "reference/generated/dpnp.take_along_axis.rst", "reference/generated/dpnp.tan.rst", "reference/generated/dpnp.tanh.rst", "reference/generated/dpnp.tensordot.rst", "reference/generated/dpnp.tile.rst", "reference/generated/dpnp.trace.rst", "reference/generated/dpnp.transpose.rst", "reference/generated/dpnp.trapz.rst", "reference/generated/dpnp.tri.rst", "reference/generated/dpnp.tril.rst", "reference/generated/dpnp.tril_indices.rst", "reference/generated/dpnp.tril_indices_from.rst", "reference/generated/dpnp.triu.rst", "reference/generated/dpnp.triu_indices.rst", "reference/generated/dpnp.triu_indices_from.rst", "reference/generated/dpnp.true_divide.rst", "reference/generated/dpnp.trunc.rst", "reference/generated/dpnp.unique.rst", "reference/generated/dpnp.unwrap.rst", "reference/generated/dpnp.vander.rst", "reference/generated/dpnp.var.rst", "reference/generated/dpnp.vdot.rst", "reference/generated/dpnp.vstack.rst", "reference/generated/dpnp.where.rst", "reference/generated/dpnp.zeros.rst", "reference/generated/dpnp.zeros_like.rst", "reference/index.rst", "reference/indexing.rst", "reference/linalg.rst", "reference/logic.rst", "reference/manipulation.rst", "reference/math.rst", "reference/misc.rst", "reference/ndarray.rst", "reference/pad.rst", "reference/polynomials.rst", "reference/random.rst", "reference/routines.rst", "reference/sorting.rst", "reference/special.rst", "reference/statistics.rst", "reference/ufunc.rst"], "titles": ["Interplay with the Data Parallel Control Library", "C++ backend API Reference", "Data Parallel Extension for NumPy*", "Overview", "Quick Start Guide", "Binary Operations", "Comparison Table NumPy/ DPNP/ CuPy", "Array Creation Routines", "Data type routines", "Available array data types", "FFT Functions", "dpnp.abs", "dpnp.absolute", "dpnp.add", "dpnp.all", "dpnp.allclose", "dpnp.amax", "dpnp.amin", "dpnp.any", "dpnp.arange", "dpnp.arccos", "dpnp.arccosh", "dpnp.arcsin", "dpnp.arcsinh", "dpnp.arctan", "dpnp.arctan2", "dpnp.arctanh", "dpnp.argmax", "dpnp.argmin", "dpnp.argsort", "dpnp.around", "dpnp.array", "dpnp.array_equal", "dpnp.asanyarray", "dpnp.asarray", "dpnp.ascontiguousarray", "dpnp.asfarray", "dpnp.asfortranarray", "dpnp.asnumpy", "dpnp.atleast_1d", "dpnp.atleast_2d", "dpnp.atleast_3d", "dpnp.average", "dpnp.bincount", "dpnp.bitwise_and", "dpnp.bitwise_not", "dpnp.bitwise_or", "dpnp.bitwise_xor", "dpnp.broadcast_arrays", "dpnp.broadcast_to", "dpnp.can_cast", "dpnp.cbrt", "dpnp.ceil", "dpnp.choose", "dpnp.clip", "dpnp.concatenate", "dpnp.conj", "dpnp.conjugate", "dpnp.convolve", "dpnp.copy", "dpnp.copysign", "dpnp.copyto", "dpnp.correlate", "dpnp.cos", "dpnp.cosh", "dpnp.count_nonzero", "dpnp.cov", "dpnp.cross", "dpnp.cumprod", "dpnp.cumsum", "dpnp.deg2rad", "dpnp.degrees", "dpnp.diag", "dpnp.diag_indices", "dpnp.diag_indices_from", "dpnp.diagflat", "dpnp.diagonal", "dpnp.diff", "dpnp.divide", "dpnp.dot", "dpnp.dpnp_array.dpnp_array", "dpnp.dtype", "dpnp.ediff1d", "dpnp.einsum", "dpnp.einsum_path", "dpnp.empty", "dpnp.empty_like", "dpnp.equal", "dpnp.erf", "dpnp.exp", "dpnp.exp2", "dpnp.expand_dims", "dpnp.expm1", "dpnp.extract", "dpnp.eye", "dpnp.fabs", "dpnp.fft.fft", "dpnp.fft.fft2", "dpnp.fft.fftfreq", "dpnp.fft.fftn", "dpnp.fft.fftshift", "dpnp.fft.hfft", "dpnp.fft.ifft", "dpnp.fft.ifft2", "dpnp.fft.ifftn", "dpnp.fft.ifftshift", "dpnp.fft.ihfft", "dpnp.fft.irfft", "dpnp.fft.irfft2", "dpnp.fft.irfftn", "dpnp.fft.rfft", "dpnp.fft.rfft2", "dpnp.fft.rfftfreq", "dpnp.fft.rfftn", "dpnp.fill_diagonal", "dpnp.finfo", "dpnp.flatiter", "dpnp.flip", "dpnp.fliplr", "dpnp.flipud", "dpnp.floor", "dpnp.floor_divide", "dpnp.fmax", "dpnp.fmin", "dpnp.fmod", "dpnp.from_dlpack", "dpnp.frombuffer", "dpnp.fromfile", "dpnp.fromfunction", "dpnp.fromiter", "dpnp.fromstring", "dpnp.full", "dpnp.full_like", "dpnp.geomspace", "dpnp.get_include", "dpnp.gradient", "dpnp.greater", "dpnp.greater_equal", "dpnp.histogram", "dpnp.hstack", "dpnp.hypot", "dpnp.identity", "dpnp.iinfo", "dpnp.imag", "dpnp.indices", "dpnp.inner", "dpnp.invert", "dpnp.isclose", "dpnp.isfinite", "dpnp.isinf", "dpnp.isnan", "dpnp.isscalar", "dpnp.issubdtype", "dpnp.issubsctype", "dpnp.kron", "dpnp.left_shift", "dpnp.less", "dpnp.less_equal", "dpnp.linalg.cholesky", "dpnp.linalg.cond", "dpnp.linalg.det", "dpnp.linalg.eig", "dpnp.linalg.eigh", "dpnp.linalg.eigvals", "dpnp.linalg.inv", "dpnp.linalg.matrix_power", "dpnp.linalg.matrix_rank", "dpnp.linalg.multi_dot", "dpnp.linalg.norm", "dpnp.linalg.qr", "dpnp.linalg.solve", "dpnp.linalg.svd", "dpnp.linspace", "dpnp.loadtxt", "dpnp.log", "dpnp.log10", "dpnp.log1p", "dpnp.log2", "dpnp.logaddexp", "dpnp.logical_and", "dpnp.logical_not", "dpnp.logical_or", "dpnp.logical_xor", "dpnp.logspace", "dpnp.matmul", "dpnp.max", "dpnp.maximum", "dpnp.mean", "dpnp.median", "dpnp.meshgrid", "dpnp.mgrid", "dpnp.min", "dpnp.minimum", "dpnp.mod", "dpnp.modf", "dpnp.moveaxis", "dpnp.multiply", "dpnp.nanargmax", "dpnp.nanargmin", "dpnp.nancumprod", "dpnp.nancumsum", "dpnp.nanmax", "dpnp.nanmin", "dpnp.nanprod", "dpnp.nansum", "dpnp.nanvar", "dpnp.ndarray", "dpnp.ndarray.T", "dpnp.ndarray.__abs__", "dpnp.ndarray.__add__", "dpnp.ndarray.__and__", "dpnp.ndarray.__complex__", "dpnp.ndarray.__copy__", "dpnp.ndarray.__eq__", "dpnp.ndarray.__float__", "dpnp.ndarray.__floordiv__", "dpnp.ndarray.__ge__", "dpnp.ndarray.__getitem__", "dpnp.ndarray.__gt__", "dpnp.ndarray.__iadd__", "dpnp.ndarray.__iand__", "dpnp.ndarray.__ifloordiv__", "dpnp.ndarray.__ilshift__", "dpnp.ndarray.__imod__", "dpnp.ndarray.__imul__", "dpnp.ndarray.__int__", "dpnp.ndarray.__invert__", "dpnp.ndarray.__ior__", "dpnp.ndarray.__ipow__", "dpnp.ndarray.__irshift__", "dpnp.ndarray.__isub__", "dpnp.ndarray.__itruediv__", "dpnp.ndarray.__ixor__", "dpnp.ndarray.__le__", "dpnp.ndarray.__len__", "dpnp.ndarray.__lshift__", "dpnp.ndarray.__lt__", "dpnp.ndarray.__mod__", "dpnp.ndarray.__mul__", "dpnp.ndarray.__ne__", "dpnp.ndarray.__neg__", "dpnp.ndarray.__new__", "dpnp.ndarray.__or__", "dpnp.ndarray.__pos__", "dpnp.ndarray.__pow__", "dpnp.ndarray.__repr__", "dpnp.ndarray.__rshift__", "dpnp.ndarray.__setitem__", "dpnp.ndarray.__str__", "dpnp.ndarray.__sub__", "dpnp.ndarray.__truediv__", "dpnp.ndarray.__xor__", "dpnp.ndarray.all", "dpnp.ndarray.any", "dpnp.ndarray.argmax", "dpnp.ndarray.argmin", "dpnp.ndarray.argsort", "dpnp.ndarray.astype", "dpnp.ndarray.choose", "dpnp.ndarray.clip", "dpnp.ndarray.conj", "dpnp.ndarray.conjugate", "dpnp.ndarray.copy", "dpnp.ndarray.cumsum", "dpnp.ndarray.diagonal", "dpnp.ndarray.dtype", "dpnp.ndarray.fill", "dpnp.ndarray.flags", "dpnp.ndarray.flat", "dpnp.ndarray.flatten", "dpnp.ndarray.imag", "dpnp.ndarray.item", "dpnp.ndarray.itemsize", "dpnp.ndarray.max", "dpnp.ndarray.mean", "dpnp.ndarray.min", "dpnp.ndarray.nbytes", "dpnp.ndarray.ndim", "dpnp.ndarray.nonzero", "dpnp.ndarray.partition", "dpnp.ndarray.prod", "dpnp.ndarray.put", "dpnp.ndarray.ravel", "dpnp.ndarray.real", "dpnp.ndarray.repeat", "dpnp.ndarray.reshape", "dpnp.ndarray.round", "dpnp.ndarray.shape", "dpnp.ndarray.size", "dpnp.ndarray.squeeze", "dpnp.ndarray.std", "dpnp.ndarray.strides", "dpnp.ndarray.sum", "dpnp.ndarray.swapaxes", "dpnp.ndarray.take", "dpnp.ndarray.transpose", "dpnp.ndarray.var", "dpnp.negative", "dpnp.nonzero", "dpnp.not_equal", "dpnp.ogrid", "dpnp.ones", "dpnp.ones_like", "dpnp.outer", "dpnp.partition", "dpnp.place", "dpnp.positive", "dpnp.power", "dpnp.prod", "dpnp.proj", "dpnp.ptp", "dpnp.put", "dpnp.put_along_axis", "dpnp.putmask", "dpnp.rad2deg", "dpnp.radians", "dpnp.random.RandomState", "dpnp.random.beta", "dpnp.random.binomial", "dpnp.random.bytes", "dpnp.random.chisquare", "dpnp.random.choice", "dpnp.random.dirichlet", "dpnp.random.exponential", "dpnp.random.f", "dpnp.random.gamma", "dpnp.random.geometric", "dpnp.random.gumbel", "dpnp.random.hypergeometric", "dpnp.random.laplace", "dpnp.random.logistic", "dpnp.random.lognormal", "dpnp.random.logseries", "dpnp.random.multinomial", "dpnp.random.multivariate_normal", "dpnp.random.negative_binomial", "dpnp.random.noncentral_chisquare", "dpnp.random.noncentral_f", "dpnp.random.normal", "dpnp.random.pareto", "dpnp.random.permutation", "dpnp.random.poisson", "dpnp.random.power", "dpnp.random.rand", "dpnp.random.randint", "dpnp.random.randn", "dpnp.random.random", "dpnp.random.random_integers", "dpnp.random.random_sample", "dpnp.random.ranf", "dpnp.random.rayleigh", "dpnp.random.sample", "dpnp.random.seed", "dpnp.random.shuffle", "dpnp.random.standard_cauchy", "dpnp.random.standard_exponential", "dpnp.random.standard_gamma", "dpnp.random.standard_normal", "dpnp.random.standard_t", "dpnp.random.triangular", "dpnp.random.uniform", "dpnp.random.vonmises", "dpnp.random.wald", "dpnp.random.weibull", "dpnp.random.zipf", "dpnp.ravel", "dpnp.real", "dpnp.reciprocal", "dpnp.remainder", "dpnp.repeat", "dpnp.reshape", "dpnp.result_type", "dpnp.right_shift", "dpnp.rint", "dpnp.roll", "dpnp.rollaxis", "dpnp.round", "dpnp.searchsorted", "dpnp.select", "dpnp.shape", "dpnp.sign", "dpnp.signbit", "dpnp.sin", "dpnp.sinh", "dpnp.sort", "dpnp.sqrt", "dpnp.square", "dpnp.squeeze", "dpnp.stack", "dpnp.std", "dpnp.subtract", "dpnp.sum", "dpnp.swapaxes", "dpnp.take", "dpnp.take_along_axis", "dpnp.tan", "dpnp.tanh", "dpnp.tensordot", "dpnp.tile", "dpnp.trace", "dpnp.transpose", "dpnp.trapz", "dpnp.tri", "dpnp.tril", "dpnp.tril_indices", "dpnp.tril_indices_from", "dpnp.triu", "dpnp.triu_indices", "dpnp.triu_indices_from", "dpnp.true_divide", "dpnp.trunc", "dpnp.unique", "dpnp.unwrap", "dpnp.vander", "dpnp.var", "dpnp.vdot", "dpnp.vstack", "dpnp.where", "dpnp.zeros", "dpnp.zeros_like", "API Reference", "Array Indexing Routines", "Linear Algebra", "Logic Functions", "Array Manipulation Routines", "Mathematical Functions", "Miscellaneous routines", "Multi-Dimensional Array (ndarray)", "Padding", "Polynomials", "Random Sampling (<code class=\"docutils literal notranslate\"><span class=\"pre\">dpnp.random</span></code>)", "Routines", "Sorting, Searching, and Counting", "Special Functions", "Statistical Functions", "Universal Functions (ufunc)"], "terms": {"provid": [0, 6, 27, 28, 55, 61, 80, 91, 139, 185, 191, 197, 198, 201, 202, 316, 344, 347, 388, 393, 416, 417, 435], "api": [0, 2, 3, 6, 81, 316, 338, 343, 344, 345, 346, 347, 348, 349, 351, 352, 357, 360, 391], "manag": 0, "specif": [0, 4, 81], "sycl": [0, 3, 316, 338, 343, 344, 345, 346, 347, 348, 349, 351, 352, 357, 360], "resourc": 0, "base": [0, 4, 81, 133, 171, 174, 175, 176, 177, 183, 305, 307, 311, 313], "python": [0, 2, 3, 80, 81, 125, 271, 391, 427], "packag": [0, 3], "an": [0, 3, 4, 11, 12, 14, 16, 17, 18, 19, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 59, 72, 73, 74, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 91, 93, 114, 115, 117, 118, 122, 123, 125, 127, 128, 129, 132, 134, 135, 139, 141, 142, 144, 146, 155, 160, 166, 168, 185, 186, 187, 191, 192, 194, 195, 197, 198, 201, 202, 205, 212, 256, 258, 259, 262, 271, 273, 279, 281, 284, 285, 287, 289, 291, 293, 294, 295, 300, 301, 302, 304, 305, 307, 310, 311, 312, 313, 316, 318, 323, 324, 326, 335, 338, 343, 344, 345, 346, 347, 348, 349, 351, 352, 357, 360, 364, 365, 369, 370, 371, 372, 374, 375, 378, 379, 380, 381, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 398, 400, 402, 403, 404, 406, 407, 409, 411, 414, 416, 417, 418, 419, 427], "below": [0, 4, 9, 81, 166, 168, 402, 406, 427], "demonstr": [0, 4, 81], "how": [0, 4, 81, 393], "extens": [0, 1, 3, 4, 9, 134, 420], "numpi": [0, 1, 3, 4, 9, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 161, 162, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 256, 257, 260, 261, 265, 270, 271, 281, 283, 285, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 406, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 427, 431], "can": [0, 3, 4, 13, 15, 25, 44, 45, 46, 47, 50, 60, 73, 78, 79, 80, 81, 87, 121, 122, 123, 124, 127, 136, 137, 139, 140, 146, 155, 156, 157, 178, 179, 181, 182, 186, 192, 193, 196, 257, 297, 298, 299, 303, 306, 307, 312, 316, 338, 343, 344, 345, 346, 347, 348, 349, 351, 352, 357, 360, 368, 370, 372, 390, 393, 394, 407, 409, 427], "easili": 0, "combin": [0, 81, 91], "devic": [0, 2, 3, 19, 31, 33, 34, 35, 36, 37, 72, 75, 80, 85, 86, 94, 125, 131, 132, 133, 141, 172, 183, 205, 301, 302, 316, 338, 343, 344, 345, 346, 347, 348, 349, 351, 352, 357, 360, 387, 389, 402, 413, 414, 418, 419], "interfac": 0, "dpctl": [0, 4, 11, 12, 13, 14, 15, 18, 20, 21, 22, 23, 24, 25, 26, 30, 44, 45, 46, 47, 48, 49, 51, 52, 56, 57, 60, 61, 63, 64, 65, 78, 79, 80, 86, 87, 89, 90, 91, 92, 93, 117, 118, 119, 120, 121, 122, 123, 124, 132, 136, 137, 140, 143, 146, 148, 149, 150, 155, 156, 157, 162, 170, 171, 174, 175, 176, 177, 178, 179, 180, 181, 182, 185, 186, 187, 189, 191, 192, 193, 195, 196, 197, 198, 201, 202, 203, 297, 298, 299, 302, 303, 305, 306, 307, 308, 309, 310, 311, 316, 338, 343, 344, 345, 346, 347, 348, 349, 351, 352, 357, 360, 366, 368, 371, 372, 373, 374, 375, 376, 380, 381, 382, 383, 385, 386, 387, 390, 391, 392, 393, 395, 396, 400, 403, 406, 409, 410, 417, 419], "liter": 0, "queue": [0, 316, 338, 343, 344, 345, 346, 347, 348, 349, 351, 352, 357, 360], "from": [0, 3, 27, 28, 29, 33, 34, 50, 53, 55, 61, 70, 71, 80, 81, 90, 93, 125, 127, 129, 130, 139, 141, 173, 189, 248, 258, 262, 289, 294, 300, 307, 312, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 348, 350, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 370, 371, 378, 386, 387, 388, 393, 394, 412, 416, 417, 431], "allow": [0, 80, 257, 285, 427], "set": [0, 27, 28, 31, 53, 73, 80, 81, 85, 131, 141, 166, 168, 247, 257, 258, 268, 301, 302, 380, 381, 418, 419, 427], "input": [0, 11, 12, 13, 14, 15, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 49, 51, 52, 54, 56, 57, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 75, 76, 77, 78, 79, 80, 82, 85, 86, 87, 88, 89, 90, 91, 92, 95, 107, 108, 109, 110, 111, 113, 117, 118, 119, 120, 121, 122, 123, 124, 131, 132, 135, 136, 137, 139, 140, 141, 143, 145, 146, 147, 148, 149, 150, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 168, 169, 170, 171, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 257, 269, 297, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 338, 344, 360, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 409, 410, 412, 414, 417, 418, 419], "current": [0, 11, 12, 13, 15, 20, 21, 22, 23, 24, 25, 26, 44, 45, 46, 47, 51, 52, 54, 60, 63, 64, 67, 68, 69, 78, 79, 81, 82, 89, 90, 92, 95, 120, 121, 122, 123, 124, 135, 140, 141, 145, 146, 155, 175, 176, 177, 178, 186, 192, 193, 194, 196, 199, 200, 204, 297, 306, 307, 309, 367, 368, 372, 373, 380, 381, 382, 383, 384, 390, 395, 396, 397, 401, 402, 409, 410], "usabl": 0, "insid": 0, "context": 0, "": [0, 3, 4, 80, 81, 97, 99, 103, 104, 108, 109, 111, 113, 140, 166, 168, 171, 265, 316, 317, 318, 323, 324, 325, 327, 328, 329, 330, 331, 333, 335, 338, 339, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 398, 427], "scope": [0, 4], "thi": [0, 11, 12, 16, 17, 27, 28, 30, 38, 54, 55, 59, 70, 73, 77, 80, 81, 115, 118, 119, 127, 134, 139, 168, 185, 191, 193, 197, 198, 201, 202, 256, 257, 262, 266, 279, 285, 287, 312, 314, 349, 351, 365, 370, 388, 393, 394, 398, 415, 416, 417], "wai": [0, 3, 4, 80, 127, 279], "arrai": [0, 2, 3, 4, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 99, 103, 104, 108, 109, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 154, 155, 156, 157, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 212, 248, 254, 255, 256, 257, 258, 259, 262, 265, 266, 267, 269, 270, 271, 272, 274, 276, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 335, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 431], "creation": [0, 81, 84, 420, 427, 431], "function": [0, 2, 3, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 37, 38, 42, 44, 45, 46, 47, 51, 52, 56, 57, 59, 60, 62, 63, 64, 66, 67, 68, 69, 70, 76, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 120, 121, 122, 123, 124, 127, 128, 131, 132, 134, 135, 136, 137, 140, 141, 145, 146, 147, 148, 149, 150, 155, 156, 157, 164, 167, 168, 171, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 186, 188, 189, 192, 193, 194, 196, 197, 198, 199, 200, 203, 204, 252, 253, 262, 285, 295, 297, 298, 299, 301, 302, 303, 305, 306, 307, 308, 309, 311, 314, 315, 316, 319, 321, 322, 332, 337, 353, 367, 368, 372, 373, 376, 380, 381, 382, 383, 384, 385, 386, 389, 390, 391, 393, 394, 395, 396, 397, 398, 401, 402, 403, 406, 409, 410, 414, 415, 417, 418, 419, 420, 427, 431], "dpnp": [0, 2, 3, 4, 420, 427, 431, 432, 435], "which": [0, 3, 4, 27, 28, 33, 34, 55, 61, 77, 80, 81, 91, 115, 139, 158, 166, 168, 185, 191, 197, 198, 201, 202, 203, 205, 256, 257, 298, 308, 311, 369, 387, 388, 389, 404, 407, 414, 427], "i": [0, 3, 4, 6, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 131, 132, 135, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 158, 159, 162, 164, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 212, 256, 257, 262, 269, 279, 285, 297, 298, 301, 302, 304, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 320, 323, 324, 325, 326, 327, 328, 329, 330, 331, 335, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 409, 410, 412, 413, 414, 417, 418, 419, 427], "defin": [0, 80, 81, 256, 306, 427], "alloc": [0, 3, 4, 80, 195, 205, 257, 316, 338, 343, 344, 345, 346, 347, 348, 349, 351, 357, 360, 387, 389, 414], "us": [0, 4, 13, 29, 44, 45, 46, 47, 54, 55, 73, 78, 80, 81, 87, 91, 120, 121, 127, 133, 134, 136, 137, 146, 155, 156, 157, 158, 172, 179, 181, 183, 189, 196, 205, 212, 256, 257, 262, 297, 298, 299, 306, 307, 312, 316, 319, 321, 322, 332, 337, 338, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 357, 360, 365, 368, 369, 370, 372, 389, 390, 393, 394, 398, 401, 407, 409, 414, 427], "import": [0, 3, 4, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 75, 77, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 117, 118, 119, 120, 121, 122, 123, 124, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 143, 145, 146, 147, 148, 149, 150, 155, 156, 157, 162, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 257, 262, 270, 279, 283, 295, 297, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 312, 315, 341, 350, 354, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 406, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419], "np": [0, 3, 4, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 51, 52, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 75, 77, 78, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 117, 118, 119, 120, 121, 122, 123, 124, 131, 132, 133, 135, 136, 137, 139, 140, 141, 143, 145, 146, 147, 148, 149, 150, 155, 156, 157, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 257, 262, 266, 270, 271, 279, 283, 297, 298, 299, 300, 301, 302, 303, 306, 308, 309, 310, 311, 312, 315, 341, 350, 363, 364, 365, 366, 367, 368, 369, 372, 373, 374, 375, 376, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 401, 402, 403, 406, 409, 410, 411, 412, 413, 414, 416, 418, 419], "device_context": 0, "opencl": 0, "gpu": [0, 3, 4], "x": [0, 3, 4, 11, 12, 14, 18, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 35, 37, 39, 40, 41, 45, 48, 49, 51, 52, 56, 57, 59, 60, 62, 63, 64, 66, 67, 68, 69, 72, 75, 77, 80, 81, 82, 85, 86, 88, 89, 90, 91, 92, 93, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 116, 120, 121, 128, 131, 132, 135, 141, 143, 145, 146, 148, 149, 150, 168, 170, 174, 175, 176, 177, 179, 180, 181, 182, 189, 194, 195, 199, 200, 257, 262, 270, 271, 283, 297, 298, 301, 302, 303, 305, 306, 308, 309, 310, 311, 334, 340, 365, 366, 367, 369, 373, 374, 375, 376, 380, 381, 382, 383, 385, 386, 387, 391, 392, 393, 395, 396, 397, 401, 410, 411, 413, 417, 418, 419], "1": [0, 3, 4, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 31, 33, 34, 35, 37, 39, 40, 41, 42, 43, 48, 49, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 115, 117, 118, 119, 120, 121, 122, 123, 124, 126, 129, 130, 132, 133, 135, 137, 138, 139, 141, 143, 145, 147, 155, 156, 157, 159, 162, 164, 167, 168, 170, 173, 174, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 256, 257, 262, 264, 266, 270, 271, 279, 283, 295, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 315, 316, 318, 320, 321, 323, 325, 327, 329, 330, 331, 333, 334, 335, 338, 340, 341, 342, 343, 344, 346, 348, 349, 350, 351, 355, 357, 360, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 406, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 427], "2": [0, 3, 4, 11, 12, 13, 19, 21, 23, 27, 28, 29, 31, 33, 34, 35, 36, 37, 39, 40, 42, 44, 46, 48, 49, 51, 52, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 75, 77, 78, 79, 80, 81, 82, 86, 87, 88, 89, 90, 91, 92, 94, 95, 97, 103, 108, 111, 117, 118, 119, 120, 121, 122, 123, 124, 133, 135, 136, 137, 138, 139, 141, 143, 144, 145, 155, 156, 157, 159, 162, 164, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 257, 262, 266, 271, 279, 295, 298, 299, 300, 301, 302, 303, 307, 308, 309, 310, 311, 315, 316, 320, 324, 328, 334, 340, 343, 345, 356, 358, 359, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 379, 381, 382, 383, 385, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 398, 400, 401, 402, 403, 406, 407, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419], "3": [0, 3, 4, 13, 19, 20, 25, 27, 28, 29, 31, 33, 34, 35, 36, 37, 39, 40, 41, 42, 44, 47, 48, 49, 51, 54, 55, 58, 59, 60, 61, 62, 65, 66, 67, 68, 69, 72, 73, 75, 77, 78, 79, 80, 81, 82, 86, 87, 88, 89, 90, 92, 94, 117, 118, 119, 120, 121, 122, 123, 124, 133, 135, 138, 139, 140, 141, 143, 145, 155, 170, 171, 172, 173, 175, 176, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 262, 271, 279, 295, 298, 299, 300, 302, 303, 307, 308, 309, 311, 316, 320, 324, 331, 334, 340, 343, 344, 345, 355, 359, 362, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 379, 381, 384, 385, 387, 388, 389, 390, 391, 392, 393, 397, 398, 400, 401, 402, 403, 406, 409, 411, 412, 413, 414, 416, 417, 419], "sum": [0, 3, 4, 6, 13, 69, 72, 75, 77, 79, 80, 138, 184, 200, 204, 263, 318, 333, 335, 399, 427, 431], "For": [0, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 162, 164, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 257, 260, 261, 270, 271, 280, 281, 282, 283, 284, 285, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 406, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 427], "more": [0, 3, 4, 31, 39, 40, 41, 81, 118, 119, 125, 139, 166, 167, 388, 403, 406, 427], "inform": [0, 35, 37, 80, 81, 115, 267, 427, 431], "pleas": [0, 3, 427], "refer": [0, 2, 3, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 162, 164, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 252, 253, 254, 255, 257, 259, 260, 261, 270, 271, 273, 274, 275, 279, 280, 281, 282, 283, 284, 285, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 406, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 427], "document": [0, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 162, 164, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 252, 253, 254, 255, 256, 257, 259, 260, 261, 270, 271, 273, 274, 275, 279, 280, 281, 282, 283, 284, 285, 286, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 406, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 427], "time": [0, 13, 15, 25, 44, 46, 47, 60, 77, 78, 79, 87, 121, 122, 123, 124, 136, 137, 140, 150, 155, 156, 157, 178, 179, 181, 182, 186, 192, 193, 196, 299, 303, 307, 318, 333, 368, 369, 372, 390, 394, 398, 409], "def": 0, "run": [0, 4], "executor": 0, "size": [0, 6, 31, 55, 62, 66, 67, 80, 81, 133, 139, 168, 172, 183, 187, 271, 272, 287, 301, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 344, 346, 347, 348, 349, 350, 351, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 387, 388, 407, 416, 418], "test_typ": 0, "repetit": [0, 369, 398], "reshap": [0, 6, 13, 27, 28, 39, 41, 72, 73, 78, 80, 91, 117, 124, 185, 191, 196, 287, 295, 340, 365, 374, 390, 409, 427], "arang": [0, 6, 13, 27, 28, 39, 40, 41, 42, 43, 54, 60, 71, 72, 73, 78, 87, 89, 90, 92, 117, 124, 132, 133, 138, 172, 175, 176, 179, 180, 181, 182, 183, 185, 189, 191, 196, 299, 302, 307, 311, 315, 340, 368, 371, 374, 390, 409, 417, 419], "dtype": [0, 9, 11, 12, 13, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33, 34, 35, 36, 37, 44, 45, 46, 47, 50, 51, 52, 55, 56, 57, 60, 63, 64, 66, 73, 78, 80, 85, 86, 87, 89, 90, 92, 94, 115, 120, 121, 122, 123, 124, 129, 131, 132, 133, 135, 136, 137, 139, 140, 141, 142, 144, 146, 148, 149, 150, 155, 156, 157, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 191, 192, 193, 196, 197, 198, 201, 202, 203, 205, 257, 263, 274, 280, 290, 292, 296, 297, 299, 301, 302, 306, 307, 308, 309, 316, 338, 344, 360, 368, 371, 372, 373, 380, 381, 382, 383, 385, 386, 388, 389, 390, 391, 395, 396, 399, 402, 409, 410, 414, 416, 418, 419, 427], "_": [0, 388], "rang": [0, 138, 310, 311, 335, 340, 388, 412, 431], "start_tim": 0, "perf_count": 0, "result": [0, 4, 14, 18, 27, 28, 44, 45, 46, 47, 50, 54, 55, 67, 68, 69, 81, 82, 95, 128, 135, 145, 146, 148, 149, 150, 155, 168, 179, 180, 181, 182, 185, 191, 194, 197, 198, 199, 200, 201, 202, 203, 205, 303, 307, 308, 316, 318, 348, 370, 371, 372, 388, 389, 391, 394, 397, 398, 414, 427], "end_tim": 0, "append": [0, 6, 77, 91], "return": [0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 160, 162, 163, 165, 166, 167, 168, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 208, 209, 210, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 249, 250, 251, 252, 253, 254, 255, 256, 257, 261, 262, 263, 264, 265, 267, 268, 269, 271, 273, 274, 275, 278, 279, 280, 282, 285, 286, 290, 291, 292, 295, 296, 297, 298, 299, 301, 302, 303, 304, 306, 307, 308, 309, 310, 316, 319, 338, 340, 343, 344, 345, 346, 347, 348, 349, 351, 352, 357, 360, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 413, 414, 415, 416, 417, 418, 419, 427], "median": [0, 6], "get_dtyp": 0, "_dtypes_list": 0, "int32": [0, 9, 36, 81, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 126, 127, 128, 129, 130, 173, 316, 318, 326, 328, 333, 335, 341, 344, 360, 371], "int64": [0, 9, 81, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 126, 127, 128, 129, 130, 173, 371], "float32": [0, 36, 80, 81, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 126, 127, 128, 129, 130, 173, 257, 316, 338, 343, 345, 346, 348, 349, 351, 357, 360, 371], "select_default_devic": 0, "has_aspect_fp64": 0, "float64": [0, 36, 80, 81, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 126, 127, 128, 129, 130, 173, 257, 316, 317, 323, 324, 325, 327, 329, 330, 331, 338, 339, 342, 343, 345, 346, 348, 349, 350, 351, 356, 357, 358, 359, 360, 361, 362, 363, 364, 371, 402], "test_repetit": 0, "5": [0, 6, 13, 14, 19, 26, 27, 39, 42, 43, 44, 46, 47, 48, 52, 54, 55, 58, 61, 62, 65, 67, 68, 69, 72, 73, 77, 78, 80, 82, 88, 117, 118, 119, 120, 121, 122, 123, 124, 133, 135, 138, 139, 140, 143, 155, 162, 170, 172, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 196, 257, 262, 298, 300, 301, 302, 307, 310, 311, 316, 317, 318, 320, 323, 335, 339, 340, 341, 342, 345, 348, 363, 365, 366, 367, 368, 370, 372, 373, 374, 375, 376, 380, 388, 389, 391, 392, 393, 397, 398, 400, 402, 403, 406, 409, 410, 412, 413, 416, 417, 418, 419], "type_nam": 0, "name": [0, 6, 81], "print": [0, 4, 31, 43, 58, 81, 85, 138, 248, 316, 335, 340, 411], "f": [0, 6, 35, 37, 51, 54, 60, 80, 81, 85, 86, 90, 94, 131, 132, 257, 262, 269, 301, 302, 337, 365, 370, 418, 419], "test": [0, 2, 14, 15, 18, 148, 149, 150, 203, 318, 431], "type": [0, 2, 3, 4, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 75, 77, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 139, 140, 141, 142, 143, 146, 147, 148, 149, 150, 151, 152, 155, 156, 157, 158, 160, 162, 163, 165, 166, 167, 168, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 256, 257, 262, 265, 269, 285, 295, 297, 298, 299, 301, 302, 303, 306, 307, 308, 309, 310, 311, 315, 316, 317, 318, 320, 323, 324, 325, 326, 327, 328, 329, 330, 331, 335, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 406, 407, 409, 410, 412, 413, 414, 416, 417, 418, 419, 420, 431], "each": [0, 11, 12, 20, 21, 22, 23, 24, 26, 39, 40, 41, 43, 48, 49, 51, 52, 56, 57, 60, 63, 64, 80, 81, 118, 119, 120, 121, 128, 162, 163, 173, 189, 286, 287, 297, 306, 309, 312, 318, 335, 369, 380, 381, 382, 383, 385, 388, 394, 395, 396, 398, 404, 407, 410, 427], "64": [0, 4, 133, 307, 376], "128": [0, 133], "256": [0, 133], "512": 0, "1024": 0, "2048": 0, "4096": 0, "time_numpi": 0, "result_numpi": 0, "time_dpnp": 0, "result_dpnp": 0, "verif": 0, "true": [0, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 35, 37, 39, 44, 45, 46, 47, 50, 51, 52, 56, 57, 59, 60, 61, 63, 64, 65, 66, 78, 80, 81, 87, 89, 90, 91, 92, 93, 117, 118, 119, 120, 121, 122, 123, 124, 133, 136, 137, 138, 140, 146, 147, 148, 149, 150, 151, 152, 155, 156, 157, 166, 168, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 189, 191, 192, 193, 196, 197, 198, 201, 202, 203, 205, 252, 253, 257, 262, 273, 274, 275, 280, 290, 292, 296, 297, 299, 306, 307, 308, 309, 312, 321, 368, 370, 372, 373, 380, 381, 382, 383, 385, 386, 389, 390, 391, 394, 395, 396, 409, 410, 413, 414, 417], "els": 0, "msg": 0, "n": [0, 4, 69, 73, 74, 77, 81, 82, 91, 94, 96, 98, 99, 101, 102, 104, 106, 107, 109, 110, 112, 113, 114, 135, 141, 166, 168, 171, 189, 205, 311, 318, 333, 335, 345, 355, 379, 386, 389, 392, 393, 402, 404, 407, 413, 414, 427], "4": [0, 13, 14, 19, 27, 28, 31, 39, 41, 42, 44, 46, 48, 54, 55, 58, 61, 63, 65, 67, 68, 69, 72, 73, 75, 77, 78, 80, 81, 82, 85, 87, 90, 117, 121, 122, 123, 131, 133, 135, 136, 137, 138, 139, 140, 143, 157, 172, 177, 179, 183, 184, 185, 186, 187, 188, 190, 191, 192, 195, 196, 197, 198, 199, 200, 204, 205, 262, 279, 295, 298, 300, 302, 307, 308, 310, 311, 316, 317, 320, 340, 345, 361, 365, 366, 368, 369, 370, 374, 375, 376, 380, 384, 385, 388, 389, 390, 391, 392, 393, 397, 398, 400, 401, 403, 406, 409, 413, 414, 416, 417, 419], "3e": 0, "ratio": 0, "6": [0, 4, 6, 13, 19, 27, 28, 39, 46, 47, 54, 55, 61, 67, 68, 69, 71, 72, 73, 77, 78, 80, 81, 82, 87, 92, 95, 117, 132, 139, 143, 171, 172, 183, 199, 200, 203, 262, 271, 298, 302, 307, 310, 315, 316, 333, 335, 340, 345, 365, 366, 370, 374, 375, 376, 388, 390, 391, 392, 393, 397, 401, 403, 406, 409, 412, 416, 417, 419], "2f": 0, "__name__": 0, "__main__": 0, "try": [0, 4], "gpu_queu": 0, "get_sycl_devic": [0, 316], "print_device_info": 0, "except": [0, 4, 15, 31, 33, 34, 35, 37, 48, 49, 54, 55, 59, 61, 65, 72, 75, 77, 80, 91, 96, 102, 110, 117, 118, 119, 139, 171, 185, 187, 191, 195, 201, 202, 205, 257, 287, 369, 370, 374, 375, 387, 389, 391, 392, 413, 414], "importerror": 0, "data": [1, 3, 4, 11, 12, 13, 14, 15, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 38, 42, 44, 45, 46, 47, 49, 50, 51, 52, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 75, 78, 79, 80, 81, 82, 87, 88, 89, 90, 91, 92, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 130, 135, 136, 137, 139, 140, 142, 143, 146, 147, 148, 149, 150, 155, 156, 157, 162, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 257, 285, 295, 297, 298, 299, 303, 306, 307, 308, 309, 311, 312, 315, 316, 317, 318, 320, 323, 324, 325, 326, 327, 328, 329, 330, 331, 335, 338, 339, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 372, 373, 374, 375, 376, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 401, 402, 403, 406, 409, 410, 412, 413, 414, 416, 417, 420, 431], "parallel": [1, 3, 4, 9, 420], "overview": 2, "quick": [2, 3], "start": [2, 3, 19, 35, 37, 133, 172, 183, 375], "guid": [2, 3], "driver": 2, "interpret": [2, 33, 34, 59, 81, 126, 427], "instal": 2, "exampl": [2, 3, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 75, 77, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 117, 118, 119, 120, 121, 122, 123, 124, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 143, 145, 146, 147, 148, 149, 150, 155, 156, 157, 162, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 248, 257, 262, 266, 270, 271, 279, 283, 285, 295, 297, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 320, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 406, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419], "multi": [2, 80, 97, 99, 103, 104, 108, 109, 111, 113, 190, 291, 300, 420], "dimension": [2, 4, 27, 28, 58, 62, 65, 73, 74, 75, 77, 80, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 126, 129, 185, 189, 190, 191, 197, 198, 201, 202, 205, 289, 300, 389, 391, 398, 414, 420], "ndarrai": [2, 3, 6, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 51, 52, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 75, 76, 77, 78, 79, 80, 81, 82, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 117, 118, 119, 120, 121, 122, 123, 124, 133, 135, 136, 137, 139, 140, 141, 143, 145, 146, 147, 148, 149, 150, 155, 156, 157, 159, 162, 163, 164, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 297, 298, 299, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 338, 343, 344, 345, 346, 347, 348, 349, 351, 357, 360, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 407, 409, 410, 412, 413, 414, 416, 417, 420], "univers": [2, 420, 427], "ufunc": [2, 420, 427], "routin": [2, 420, 427], "special": [2, 81, 88, 420, 431], "avail": [2, 3, 4, 81, 420, 427], "comparison": [2, 87, 136, 137, 156, 157, 299, 420, 431], "tabl": [2, 9, 168, 420], "cupi": [2, 420], "miscellan": [2, 420, 431], "c": [2, 4, 35, 37, 38, 51, 54, 60, 80, 81, 85, 86, 90, 94, 131, 132, 134, 173, 184, 257, 262, 269, 282, 301, 302, 307, 365, 370, 398, 418, 419], "backend": [2, 134, 319, 321, 322, 332, 337, 353], "The": [3, 4, 13, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 36, 37, 44, 45, 46, 47, 51, 52, 54, 55, 56, 57, 60, 61, 63, 64, 66, 72, 75, 77, 78, 80, 81, 82, 87, 89, 91, 92, 96, 102, 110, 117, 120, 121, 122, 123, 124, 128, 136, 137, 139, 140, 141, 143, 146, 155, 156, 157, 162, 163, 167, 168, 171, 174, 175, 176, 177, 179, 181, 185, 186, 191, 192, 193, 195, 196, 197, 198, 201, 202, 205, 256, 262, 269, 270, 279, 283, 297, 299, 306, 307, 309, 310, 312, 316, 319, 321, 322, 332, 337, 338, 343, 344, 345, 346, 347, 348, 349, 351, 352, 357, 360, 365, 366, 368, 369, 370, 371, 372, 373, 376, 379, 380, 382, 383, 388, 389, 390, 391, 394, 395, 396, 398, 404, 405, 407, 408, 409, 410, 414, 416, 417, 427, 431], "librari": [3, 4, 427], "implement": [3, 6, 125], "subset": [3, 387, 431], "execut": [3, 4, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 33, 34, 42, 44, 45, 46, 47, 51, 52, 56, 57, 60, 62, 63, 64, 66, 67, 68, 69, 76, 78, 79, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 120, 121, 122, 123, 124, 128, 131, 132, 135, 136, 137, 140, 141, 145, 146, 147, 148, 149, 150, 155, 156, 157, 164, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 186, 188, 189, 192, 193, 194, 196, 199, 200, 203, 204, 297, 298, 299, 301, 302, 303, 305, 306, 307, 308, 311, 319, 321, 322, 332, 337, 353, 367, 368, 372, 373, 376, 380, 381, 382, 383, 384, 385, 386, 390, 393, 395, 396, 397, 401, 402, 403, 406, 409, 410, 417, 418, 419], "ani": [3, 6, 14, 15, 48, 49, 77, 80, 81, 114, 139, 201, 202, 257, 316, 360, 385, 427], "drop": [3, 81], "replac": [3, 36, 54, 312, 321, 427], "core": [3, 81, 427], "numer": [3, 4, 60, 81, 297, 306, 431], "being": [3, 81], "develop": [3, 4], "part": [3, 56, 57, 80, 143, 194, 270, 283, 309, 366, 427], "intel": [3, 4], "ai": [3, 312, 394], "analyt": 3, "toolkit": 3, "distribut": [3, 4, 183, 316, 317, 318, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 348, 350, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 431], "also": [3, 50, 60, 81, 91, 354, 427], "anaconda": 3, "cloud": 3, "page": [3, 431], "learn": [3, 4], "Being": 3, "mean": [3, 6, 42, 80, 168, 188, 205, 257, 269, 316, 329, 331, 334, 338, 357, 361, 362, 365, 370, 389, 414, 427], "usag": [3, 4], "veri": [3, 189], "similar": [3, 33, 34, 80, 81, 133, 172, 183, 262, 316, 344], "class": [3, 80, 81, 82, 116, 144, 316, 344, 385, 386, 402, 431], "compat": [3, 27, 28, 80, 185, 191, 197, 198, 201, 202, 205, 257, 370, 389, 414, 431], "altern": [3, 4, 184, 205, 389, 414], "abov": [3, 403], "instanc": [3, 80, 189, 316, 338, 343, 344, 345, 346, 347, 348, 349, 351, 352, 357, 360], "creat": [3, 4, 31, 33, 34, 59, 72, 73, 75, 80, 81, 125, 129, 262, 312, 316, 338, 343, 344, 345, 346, 347, 348, 349, 351, 352, 357, 360, 427, 431], "ident": [3, 6, 81, 170, 355], "one": [3, 4, 31, 36, 39, 40, 41, 54, 58, 61, 62, 80, 81, 85, 87, 92, 96, 98, 101, 102, 106, 107, 110, 112, 118, 119, 131, 139, 141, 168, 174, 175, 176, 177, 189, 199, 262, 269, 272, 302, 309, 335, 387, 388, 404, 407, 418, 427], "kei": [3, 29, 80, 81, 116, 217, 247, 256, 384], "differ": [3, 69, 77, 80, 81, 82, 115, 118, 119, 135, 163, 168, 184, 256, 262, 307, 390, 431], "memori": [3, 33, 34, 35, 37, 51, 54, 60, 80, 81, 90, 267, 269, 291, 370, 420], "default": [3, 11, 12, 13, 14, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 42, 44, 45, 46, 47, 48, 49, 51, 52, 54, 55, 56, 57, 59, 60, 62, 63, 64, 66, 76, 77, 78, 80, 81, 82, 85, 86, 87, 89, 90, 92, 94, 96, 102, 114, 120, 121, 122, 123, 124, 131, 132, 136, 137, 139, 140, 144, 146, 148, 149, 150, 155, 156, 157, 166, 168, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 191, 192, 193, 196, 197, 198, 201, 202, 203, 205, 256, 257, 262, 269, 297, 299, 301, 302, 304, 306, 307, 308, 309, 311, 316, 320, 338, 343, 344, 345, 346, 347, 348, 349, 351, 352, 354, 355, 357, 360, 365, 368, 369, 370, 372, 373, 376, 377, 378, 380, 381, 382, 383, 385, 386, 388, 389, 390, 391, 393, 395, 396, 399, 404, 407, 409, 410, 414, 416, 418, 419, 427], "system": [3, 4, 170], "integr": [3, 4, 194, 205, 307, 389, 401, 414], "discret": [3, 58, 62, 69, 77, 82, 96, 97, 98, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 135, 316, 420], "otherwis": [3, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 42, 44, 45, 46, 47, 48, 49, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 75, 76, 77, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 117, 118, 119, 120, 121, 122, 123, 124, 131, 132, 135, 136, 137, 140, 141, 145, 146, 147, 148, 149, 150, 155, 156, 157, 164, 171, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 257, 269, 285, 297, 298, 299, 301, 302, 303, 305, 306, 307, 308, 311, 316, 317, 318, 320, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 356, 357, 358, 359, 360, 361, 362, 363, 364, 367, 368, 370, 372, 373, 374, 375, 376, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 395, 396, 397, 401, 402, 403, 406, 409, 410, 413, 414, 417, 418, 419], "host": [3, 4, 316, 338, 343, 344, 345, 346, 347, 348, 349, 351, 357, 360], "do": [3, 4, 81, 318], "have": [3, 4, 27, 28, 32, 39, 40, 41, 49, 51, 55, 60, 81, 90, 115, 139, 173, 185, 191, 195, 197, 198, 201, 202, 205, 335, 388, 389, 398, 414, 416, 427], "most": [3, 4, 77, 81, 387], "manipul": [3, 73, 420, 431], "ar": [3, 4, 11, 12, 13, 14, 15, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 39, 40, 41, 42, 44, 45, 46, 47, 48, 51, 52, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 76, 77, 78, 79, 80, 81, 82, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 135, 136, 137, 140, 143, 144, 145, 146, 147, 148, 149, 150, 155, 156, 157, 158, 162, 163, 166, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 257, 278, 279, 297, 298, 299, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 315, 316, 317, 318, 320, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 338, 339, 341, 342, 344, 347, 348, 350, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 372, 373, 374, 375, 376, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 395, 396, 397, 399, 401, 402, 405, 408, 409, 410, 411, 412, 414, 417, 427], "done": [3, 80, 257], "see": [3, 30, 80, 81, 125, 168, 256, 333, 376, 404, 405, 407, 408, 427], "complet": [3, 4, 427], "list": [3, 6, 9, 39, 40, 41, 48, 55, 80, 81, 139, 256, 371, 378, 388, 416], "support": [3, 9, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 33, 34, 35, 36, 37, 42, 44, 45, 46, 47, 48, 49, 51, 52, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 75, 76, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 155, 156, 157, 159, 162, 164, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 257, 297, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 315, 316, 317, 318, 320, 323, 324, 325, 326, 327, 328, 329, 330, 331, 334, 335, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 395, 396, 397, 399, 400, 401, 402, 403, 406, 409, 410, 412, 413, 414, 417, 418, 419, 435], "along": [3, 4, 14, 16, 17, 18, 27, 28, 42, 55, 65, 68, 69, 72, 75, 77, 80, 82, 117, 118, 119, 122, 123, 135, 139, 145, 168, 185, 186, 187, 188, 191, 192, 197, 198, 199, 200, 201, 202, 205, 254, 255, 256, 263, 273, 275, 280, 281, 290, 292, 294, 296, 310, 311, 312, 369, 374, 375, 388, 389, 393, 394, 397, 398, 399, 401, 404, 407, 414, 416, 427], "limit": [3, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 33, 34, 35, 37, 42, 44, 45, 46, 47, 48, 49, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 155, 156, 157, 159, 162, 164, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 257, 259, 297, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 315, 316, 317, 318, 320, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 338, 339, 341, 342, 344, 347, 350, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 395, 396, 397, 399, 400, 401, 402, 403, 406, 409, 410, 412, 413, 414, 417, 418, 419], "To": 4, "program": [4, 120], "beyond": [4, 374], "cpu": [4, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 42, 44, 45, 46, 47, 51, 52, 56, 57, 60, 62, 63, 64, 66, 67, 68, 69, 76, 78, 79, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 120, 121, 122, 123, 124, 131, 132, 135, 136, 137, 140, 141, 145, 146, 147, 148, 149, 150, 155, 156, 157, 164, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 186, 188, 189, 192, 193, 194, 196, 199, 200, 203, 204, 297, 298, 299, 301, 302, 303, 305, 306, 307, 308, 311, 367, 368, 372, 373, 376, 380, 381, 382, 383, 384, 385, 386, 390, 393, 395, 396, 397, 401, 402, 403, 406, 409, 410, 417, 418, 419], "you": [4, 394, 427], "need": [4, 80, 134, 256, 394], "appropri": [4, 27, 28, 134, 185, 191, 197, 198, 201, 202, 316, 344, 347, 427], "hardwar": 4, "work": [4, 30, 38, 70, 193, 314, 394, 415, 427], "fine": 4, "laptop": 4, "graphic": 4, "In": [4, 27, 28, 80, 158, 256, 311, 316, 360, 370, 393], "major": [4, 33, 34, 35, 37, 80, 257, 269, 365], "case": [4, 27, 28, 77, 171, 203, 308, 309, 370], "your": 4, "window": 4, "alreadi": [4, 34, 39, 40, 41], "ha": [4, 44, 45, 46, 47, 81, 91, 101, 106, 128, 139, 146, 171, 205, 311, 369, 375, 387, 388, 389, 391, 392, 398, 414, 427], "all": [4, 6, 9, 15, 18, 32, 65, 77, 80, 81, 89, 90, 92, 117, 118, 119, 139, 141, 158, 197, 198, 201, 202, 256, 257, 260, 266, 279, 309, 318, 385, 387, 416, 427], "necessari": [4, 39, 61, 205, 370, 389, 414], "But": [4, 81], "want": [4, 394], "up": [4, 81, 119], "date": [4, 80, 256], "alwai": [4, 33, 80, 257, 370, 389, 414], "updat": 4, "latest": [4, 125], "follow": [4, 81, 91, 115, 142, 427, 431], "instruct": 4, "step": [4, 19, 133, 172, 183], "8": [4, 13, 15, 39, 51, 54, 61, 72, 73, 77, 81, 117, 133, 143, 147, 171, 172, 183, 199, 307, 308, 310, 316, 340, 359, 366, 374, 382, 393, 397, 401, 403, 406, 413, 417], "9": [4, 13, 39, 54, 61, 72, 73, 78, 80, 95, 121, 133, 171, 183, 184, 196, 271, 310, 316, 318, 320, 340, 366, 374, 385, 390, 397, 403, 406, 409, 413, 417], "10": [4, 13, 21, 23, 27, 28, 54, 59, 69, 73, 77, 80, 81, 92, 131, 133, 138, 143, 155, 174, 175, 176, 177, 183, 188, 196, 204, 285, 310, 312, 316, 318, 328, 340, 371, 372, 374, 376, 388, 394, 403, 406, 417], "If": [4, 15, 27, 28, 36, 50, 54, 55, 77, 79, 80, 81, 91, 115, 139, 166, 167, 168, 171, 185, 187, 191, 197, 198, 201, 202, 205, 256, 257, 287, 312, 316, 338, 360, 370, 385, 388, 389, 391, 392, 394, 398, 414, 416, 427], "yet": [4, 6], "easiest": 4, "It": [4, 27, 28, 54, 185, 191, 197, 198, 201, 202, 205, 389, 414], "essenti": 4, "machin": [4, 115, 142], "optim": [4, 84], "includ": [4, 27, 28, 134, 183, 185, 191, 197, 198, 201, 202, 205, 309, 316, 360, 389, 414], "anoth": [4, 61, 80, 125, 262, 281, 311], "vendor": 4, "too": 4, "manual": [4, 81, 398], "shown": 4, "next": [4, 115], "section": [4, 81, 427], "recommend": [4, 298, 398], "org": 4, "channel": 4, "command": 4, "forg": 4, "pip": 4, "http": [4, 125], "pypi": 4, "simpl": [4, 182, 431], "These": [4, 48, 81, 91, 427, 431], "its": [4, 6, 15, 30, 56, 57, 80, 96, 102, 115, 140, 141, 162, 163, 187, 205, 295, 353, 365, 370, 376, 389, 400, 402, 414, 427], "depend": [4, 162, 168, 171, 172, 378, 417], "control": [4, 50, 55, 80, 139, 257, 388, 416], "requir": [4, 6, 31, 35, 37, 80, 81, 257], "compil": [4, 81, 134], "runtim": 4, "onemkl": 4, "befor": [4, 55, 80, 118, 119, 279, 389, 398, 414], "strongli": [4, 398], "advis": 4, "version": [4, 80, 81, 268, 298], "activ": 4, "local": 4, "environ": 4, "env": 4, "And": [4, 73, 80, 257], "sourc": [4, 6, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 297, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419], "recip": 4, "finanli": 4, "setuptool": 4, "o": [4, 81], "On": 4, "linux": 4, "cython": 4, "dpcpp_linux": 4, "mkl": 4, "devel": 4, "dpcpp": 4, "tbb": 4, "onedpl": 4, "cmake": 4, "ninja": 4, "pytest": 4, "dpcpp_win": 4, "setup": 4, "py": 4, "g": [4, 80, 81, 291, 316], "dcmake_c_compil": 4, "path": 4, "icx": 4, "dcmake_cxx_compil": 4, "icpx": 4, "script": 4, "build_loc": 4, "suit": 4, "element": [4, 11, 12, 13, 14, 15, 18, 20, 21, 22, 23, 24, 25, 26, 30, 32, 43, 44, 45, 46, 47, 51, 52, 54, 56, 57, 60, 61, 63, 64, 68, 69, 77, 78, 80, 81, 82, 87, 89, 90, 92, 93, 95, 117, 118, 119, 120, 121, 122, 123, 124, 136, 137, 141, 143, 146, 147, 148, 149, 150, 155, 156, 157, 158, 164, 174, 175, 176, 177, 178, 179, 180, 181, 182, 185, 186, 187, 191, 192, 193, 194, 196, 199, 200, 201, 202, 203, 205, 252, 253, 260, 261, 263, 265, 266, 269, 271, 272, 274, 276, 278, 279, 284, 285, 286, 288, 290, 291, 294, 296, 297, 298, 299, 305, 306, 307, 308, 309, 311, 313, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 389, 390, 391, 393, 395, 396, 398, 403, 406, 409, 410, 411, 414, 417, 427, 431], "asarrai": [4, 6, 33, 38], "y": [4, 35, 36, 37, 39, 48, 49, 59, 66, 67, 79, 80, 81, 91, 128, 135, 189, 194, 262, 285, 295, 370, 385, 400, 401, 417], "locat": [4, 134, 327, 329], "same": [4, 13, 15, 25, 30, 32, 35, 37, 38, 44, 46, 47, 49, 55, 60, 70, 77, 78, 79, 80, 86, 87, 91, 93, 121, 122, 123, 124, 125, 132, 136, 137, 139, 140, 155, 156, 157, 173, 178, 179, 180, 181, 182, 185, 186, 191, 192, 193, 195, 196, 201, 202, 205, 257, 285, 299, 302, 303, 307, 311, 312, 314, 316, 338, 344, 360, 365, 368, 369, 372, 374, 375, 385, 386, 387, 388, 389, 390, 394, 405, 408, 409, 414, 415, 416, 419], "shape": [4, 6, 27, 28, 31, 32, 35, 41, 48, 49, 51, 54, 55, 60, 62, 66, 67, 73, 77, 80, 81, 85, 86, 90, 91, 93, 117, 128, 131, 132, 139, 164, 166, 170, 171, 179, 180, 181, 182, 184, 185, 191, 195, 197, 198, 201, 202, 205, 257, 285, 289, 295, 301, 302, 311, 312, 316, 325, 328, 333, 334, 339, 343, 344, 345, 346, 347, 348, 349, 351, 356, 357, 363, 365, 369, 370, 375, 385, 386, 387, 388, 389, 393, 398, 400, 402, 407, 414, 416, 418, 419, 420, 431], "0": [4, 6, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 39, 40, 41, 43, 52, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 71, 72, 73, 75, 76, 77, 78, 80, 81, 82, 85, 86, 87, 88, 89, 91, 92, 94, 95, 98, 112, 115, 117, 118, 119, 120, 121, 122, 123, 124, 132, 133, 135, 138, 141, 145, 148, 149, 150, 162, 164, 172, 173, 174, 175, 176, 177, 180, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 256, 262, 264, 266, 270, 271, 283, 286, 290, 291, 292, 295, 296, 298, 300, 301, 302, 307, 308, 309, 310, 311, 312, 315, 316, 318, 323, 325, 326, 327, 329, 330, 331, 333, 334, 335, 338, 340, 341, 342, 343, 346, 348, 349, 350, 351, 354, 357, 359, 360, 361, 367, 368, 369, 373, 374, 375, 376, 378, 379, 380, 382, 383, 386, 387, 388, 389, 390, 391, 392, 393, 394, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 414, 417, 418, 419], "expect": [4, 51, 60, 81, 90, 205, 389, 414], "comput": [4, 25, 30, 42, 44, 45, 46, 47, 52, 77, 91, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 120, 121, 138, 145, 146, 159, 160, 161, 163, 167, 168, 169, 171, 179, 180, 181, 182, 185, 187, 188, 191, 193, 201, 202, 205, 368, 373, 376, 389, 391, 396, 397, 410, 414], "empti": [4, 6, 31, 80, 86, 131, 132, 266, 301, 302, 418, 419], "found": [4, 427], "here": [6, 81], "correspond": [6, 27, 28, 54, 55, 80, 162, 205, 265, 316, 338, 343, 344, 345, 346, 347, 348, 349, 351, 352, 357, 360, 379, 389, 414, 427], "column": [6, 33, 34, 35, 37, 55, 80, 118, 119, 139, 162, 167, 171, 257, 269, 365, 404, 407, 416], "v1": 6, "23": [6, 316], "v0": 6, "13": [6, 27, 28, 45, 73, 80, 81, 146, 200, 256], "1dev1": 6, "63": [6, 133], "ge08cccdd32": 6, "v9": 6, "397": 6, "227": 6, "299": 6, "56": 6, "35": [6, 326], "47": 6, "20": [6, 155, 312, 318, 333, 394], "14": [6, 27, 28, 44, 45, 73, 79, 146, 397], "16": [6, 44, 73, 81, 133, 135, 196, 307, 395], "18": [6, 81, 82, 183], "51": 6, "48": [6, 199], "49": 6, "total": [6, 65, 80, 205, 276, 389, 414], "542": 6, "342": 6, "429": 6, "ab": [6, 12], "absolut": [6, 11, 95, 309, 389, 414], "add": [6, 81], "add_docstr": 6, "add_newdoc": 6, "add_newdoc_ufunc": 6, "allclos": [6, 32, 147, 170, 171], "alltru": 6, "amax": [6, 185], "amin": [6, 191], "angl": [6, 24, 25, 70, 71, 314, 315, 412], "apply_along_axi": 6, "apply_over_ax": 6, "arcco": [6, 21, 22, 24, 25, 63], "arccosh": [6, 20, 23, 26, 64], "arcsin": [6, 20, 23, 24, 25, 382], "arcsinh": [6, 21, 22, 26, 383], "arctan": [6, 20, 22, 25, 26, 395], "arctan2": [6, 24], "arctanh": [6, 21, 23, 24, 25, 396], "argmax": [6, 28, 80, 197, 312, 394, 427], "argmin": [6, 27, 80, 198, 394, 427], "argpartit": [6, 29, 427], "argsort": [6, 80, 384, 394, 400, 427], "argwher": 6, "around": [6, 80, 133, 286, 311, 376], "array2str": 6, "array_equ": 6, "array_equiv": [6, 32], "array_repr": 6, "array_split": [6, 55], "array_str": 6, "asanyarrai": [6, 34, 37], "asarray_chkfinit": [6, 33, 34], "ascontiguousarrai": [6, 33, 34, 37], "asfarrai": [6, 33, 34], "asfortranarrai": [6, 33, 34, 35], "asmatrix": 6, "atleast_1d": [6, 40, 41, 91], "atleast_2d": [6, 39, 41, 91], "atleast_3d": [6, 39, 40, 91], "averag": [6, 80, 187, 274, 431], "bartlett": 6, "base_repr": 6, "binary_repr": 6, "bincount": 6, "bitwise_and": [6, 45, 46, 47, 146, 179], "bitwise_not": 6, "bitwise_or": [6, 44, 45, 47, 146, 181], "bitwise_xor": [6, 44, 45, 46, 146, 182], "blackman": 6, "block": [6, 55, 139, 388, 416], "bmat": 6, "broadcast_arrai": [6, 49], "broadcast_shap": 6, "broadcast_to": [6, 48, 398], "busday_count": 6, "busday_offset": 6, "byte_bound": 6, "can_cast": [6, 431], "cbrt": [6, 385], "ceil": [6, 30, 120, 121, 373, 376, 410], "choos": [6, 24, 25, 80, 427], "clip": [6, 80, 311, 393, 427], "column_stack": [6, 55, 416], "common_typ": 6, "compare_chararrai": 6, "compress": [6, 393, 427], "concaten": [6, 139, 388, 394, 416], "conj": [6, 80, 143, 309, 366], "conjug": [6, 56, 79, 80, 143, 158, 162, 184, 260, 309, 366], "convolv": [6, 62], "copi": [6, 31, 34, 35, 37, 39, 40, 41, 61, 80, 81, 189, 212, 257, 269, 271, 279, 285, 287, 304, 306, 316, 338, 343, 344, 345, 346, 347, 348, 349, 351, 357, 360, 370, 384, 387, 403, 406, 427], "copysign": [6, 297, 306], "copyto": [6, 80, 262], "corrcoef": [6, 66], "correl": [6, 431], "co": [6, 20, 64, 382, 395], "cosh": [6, 21, 63, 383, 396], "count_nonzero": [6, 298], "cov": [6, 334], "cross": [6, 62], "cumprod": [6, 199, 427], "cumproduct": 6, "cumsum": [6, 77, 80, 200, 427], "datetime_as_str": 6, "datetime_data": 6, "deg2rad": [6, 314, 315, 412], "degre": [6, 70, 205, 314, 315, 358, 389, 412, 414], "delet": 6, "deprec": 6, "deprecate_with_doc": 6, "diag": [6, 75, 118, 119, 141, 171], "diag_indic": [6, 74, 114], "diag_indices_from": [6, 73, 114], "diagflat": [6, 72], "diagon": [6, 72, 73, 74, 75, 80, 94, 114, 141, 158, 399, 402, 403, 404, 405, 406, 407, 408, 427], "diff": [6, 69, 82, 135, 138], "digit": [6, 115], "disp": 6, "divid": [6, 121, 124, 164, 193, 368, 409], "divmod": [6, 427], "dot": [6, 80, 83, 84, 145, 165, 167, 170, 171, 184, 397, 415], "dsplit": [6, 55], "dstack": [6, 55, 416], "ediff1d": [6, 77], "einsum": [6, 84, 145, 184, 303, 397], "einsum_path": [6, 83], "empty_lik": [6, 31, 85, 132, 302, 419], "equal": [6, 14, 15, 18, 32, 55, 62, 66, 80, 121, 133, 136, 137, 139, 147, 152, 156, 157, 164, 172, 183, 279, 299, 316, 326, 360, 368, 384, 387, 388, 404, 407, 416], "exp": [6, 90, 92, 174, 176, 178], "exp2": [6, 89, 92], "expand_dim": [6, 27, 28], "expm1": [6, 89, 90, 176], "extract": [6, 72, 75], "ey": [6, 56, 57, 65, 122, 123, 141, 182, 186, 192, 379], "fab": [6, 11, 12], "fastcopyandtranspos": 6, "fill_diagon": 6, "find_common_typ": 6, "fix": [6, 81, 311], "flatnonzero": [6, 298], "flip": [6, 118, 119, 318], "fliplr": [6, 117, 119], "flipud": [6, 117, 118], "float_pow": 6, "floor": [6, 30, 52, 121, 368, 373, 376, 410], "floor_divid": [6, 124, 193, 368], "fmax": [6, 123, 185, 186, 192, 201, 307], "fmin": [6, 122, 186, 191, 192, 202, 307], "fmod": [6, 122, 123, 193, 307, 368], "format_float_posit": 6, "format_float_scientif": 6, "frexp": 6, "from_dlpack": 6, "frombuff": 6, "fromfil": 6, "fromfunct": [6, 33, 34], "fromit": [6, 33, 34], "frompyfunc": 6, "fromregex": 6, "fromstr": 6, "full": [6, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 162, 164, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 252, 253, 254, 255, 257, 259, 260, 261, 270, 271, 273, 274, 275, 279, 280, 281, 282, 283, 284, 285, 286, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419], "full_lik": [6, 31, 86, 131, 302, 419], "gcd": 6, "genfromtxt": 6, "geomspac": [6, 172, 183], "get_array_wrap": 6, "get_includ": 6, "get_printopt": 6, "getbufs": 6, "geterr": 6, "geterrcal": 6, "geterrobj": 6, "gradient": [6, 77], "greater": [6, 80, 87, 137, 156, 157, 166, 279, 299], "greater_equ": [6, 87, 136, 156, 157, 299], "ham": 6, "han": 6, "heavisid": 6, "histogram": [6, 431], "histogram2d": 6, "histogram_bin_edg": 6, "histogramdd": 6, "hsplit": [6, 55], "hstack": [6, 55, 416], "hypot": 6, "i0": 6, "imag": [6, 80, 366, 427], "in1d": 6, "indic": [6, 27, 28, 29, 73, 74, 80, 81, 114, 197, 198, 254, 255, 256, 278, 281, 294, 298, 311, 312, 370, 377, 380, 381, 393, 394, 400, 404, 405, 407, 408], "info": 6, "inner": [6, 83, 84, 303], "insert": [6, 27, 28, 91, 185, 191, 197, 198, 201, 202, 312, 377, 431], "interp": 6, "intersect1d": 6, "invert": [6, 45], "is_busdai": 6, "isclos": [6, 15], "iscomplex": 6, "iscomplexobj": 6, "isfinit": [6, 149, 150, 201, 202], "isfortran": 6, "isin": 6, "isinf": [6, 148, 150], "isnan": [6, 148, 149, 201, 202, 203], "isnat": [6, 150], "isneginf": [6, 148, 149, 150], "isposinf": [6, 148, 149, 150], "isreal": 6, "isrealobj": 6, "isscalar": 6, "issctyp": 6, "issubclass_": 6, "issubdtyp": 6, "issubsctyp": 6, "iter": [6, 33, 34, 80, 116, 129, 268, 431], "ix_": 6, "kaiser": 6, "kron": 6, "lcm": 6, "ldexp": 6, "left_shift": [6, 372], "less": [6, 87, 136, 137, 157, 299, 380, 381], "less_equ": [6, 87, 136, 137, 156, 299], "lexsort": [6, 29, 80, 256, 384], "linspac": [6, 19, 88, 133, 183, 189, 412], "load": [6, 173], "loadtxt": 6, "log": [6, 92, 133, 172, 175, 176, 177, 178, 183, 331], "log10": [6, 174, 176, 177], "log1p": [6, 90, 92, 174, 175, 177], "log2": [6, 174, 175, 176], "logaddexp": 6, "logaddexp2": 6, "logical_and": [6, 44, 180, 181, 182], "logical_not": [6, 45, 146, 179, 181, 182], "logical_or": [6, 46, 179, 180, 182], "logical_xor": [6, 47, 179, 180, 181], "logspac": [6, 133, 172], "lookfor": 6, "mask_indic": 6, "mat": 6, "matmul": [6, 171], "max": [6, 16, 27, 80, 115, 122, 142, 166, 186, 191, 192, 201, 259, 333, 394, 398, 427], "maximum": [6, 16, 27, 28, 54, 80, 122, 123, 185, 191, 192, 197, 198, 201, 202, 254, 273, 307, 310, 312], "maximum_sctyp": 6, "may_share_memori": 6, "meshgrid": [6, 190, 300], "min": [6, 17, 28, 54, 80, 115, 123, 142, 171, 185, 186, 192, 202, 259, 394, 427], "min_scalar_typ": 6, "minimum": [6, 17, 27, 28, 54, 80, 122, 123, 185, 186, 191, 197, 198, 201, 202, 255, 275, 307, 310], "mintypecod": 6, "mod": [6, 368], "modf": 6, "moveaxi": [6, 374, 375, 400], "msort": 6, "multipli": 6, "nan_to_num": 6, "nanargmax": [6, 27, 198], "nanargmin": [6, 28, 197], "nancumprod": [6, 200], "nancumsum": 6, "nanmax": [6, 122, 185, 186, 192, 202], "nanmean": [6, 187, 205, 389, 414], "nanmedian": 6, "nanmin": [6, 123, 186, 191, 192, 201], "nanpercentil": 6, "nanprod": [6, 308], "nanquantil": 6, "nanstd": [6, 187, 205, 389, 414], "nansum": 6, "nanvar": [6, 187, 389, 414], "ndim": [6, 31, 35, 37, 39, 40, 41, 66, 73, 80, 81, 256, 301, 398, 418], "neg": [6, 14, 18, 43, 60, 91, 148, 149, 150, 201, 202, 306, 307, 335, 385, 393], "nested_it": 6, "nextaft": 6, "nonzero": [6, 65, 80, 417, 427], "not_equ": [6, 87, 136, 137, 156, 157], "obj2sctyp": 6, "ones": [6, 31, 35, 37, 78, 85, 86, 87, 91, 94, 131, 132, 140, 141, 184, 203, 302, 308, 371, 375, 400, 402, 409, 418, 419], "ones_lik": [6, 31, 86, 132, 301, 419], "outer": [6, 83, 84, 154], "packbit": 6, "pad": [6, 81], "partit": [6, 80, 316, 338, 343, 344, 345, 346, 347, 348, 349, 351, 352, 357, 360, 384, 427], "percentil": [6, 188], "piecewis": 6, "place": [6, 54, 55, 205, 311, 353, 370, 388, 389, 414, 427], "poli": 6, "polyadd": 6, "polyd": 6, "polydiv": 6, "polyfit": 6, "polyint": 6, "polymul": 6, "polysub": 6, "polyv": 6, "posit": [6, 14, 18, 33, 34, 51, 60, 80, 91, 115, 148, 149, 150, 158, 195, 201, 202, 279, 297, 307, 309, 318, 342, 374, 375, 385, 386, 400, 402], "power": [6, 90, 165, 386], "printopt": 6, "prod": [6, 80, 203, 427], "product": [6, 67, 68, 79, 83, 84, 145, 154, 165, 167, 170, 184, 196, 199, 203, 303, 308, 397, 415, 431], "promote_typ": 6, "ptp": [6, 427], "put": [6, 80, 312, 394, 427], "put_along_axi": [6, 311, 394], "putmask": [6, 311], "quantil": 6, "rad2deg": [6, 70, 71, 412], "radian": [6, 70, 71, 314, 412], "ravel": [6, 80, 168, 269, 427], "ravel_multi_index": 6, "real": [6, 24, 51, 52, 60, 80, 107, 108, 109, 110, 111, 113, 115, 120, 122, 123, 140, 143, 158, 162, 163, 166, 205, 309, 318, 335, 381, 385, 389, 410, 414, 427, 431], "real_if_clos": 6, "recfromcsv": 6, "recfromtxt": 6, "reciproc": [6, 385], "remaind": [6, 121, 122, 123, 124, 193, 307], "repeat": [6, 80, 162, 163, 398, 427], "resiz": [6, 91, 427], "result_typ": [6, 50, 81, 431], "right_shift": [6, 155], "rint": [6, 30, 376], "roll": [6, 375], "rollaxi": [6, 374], "root": [6, 51, 385, 386], "rot90": 6, "round": [6, 30, 80, 120, 121, 368, 373, 410, 427, 431], "round_": 6, "row_stack": 6, "safe_ev": 6, "save": 6, "savetxt": 6, "savez": 6, "savez_compress": 6, "sctype2char": 6, "searchsort": [6, 384, 427], "select": [6, 61, 387, 420], "set_numeric_op": 6, "set_printopt": 6, "set_string_funct": 6, "setbufs": 6, "setdiff1d": 6, "seterr": 6, "seterrcal": 6, "seterrobj": 6, "setxor1d": 6, "shares_memori": 6, "show_config": 6, "sign": [6, 56, 57, 60, 81, 297, 306, 381], "signbit": [6, 380], "sin": [6, 22, 63, 189, 383, 395], "sinc": 6, "sinh": [6, 23, 64, 382, 396], "sometru": 6, "sort": [6, 29, 80, 171, 256, 279, 377, 394, 400, 420, 427, 431], "sort_complex": 6, "space": [6, 19, 133, 172, 183], "split": [6, 55, 139, 388, 416, 431], "sqrt": [6, 51, 80, 270, 283, 386], "squar": [6, 51, 141, 158, 161, 162, 165, 320, 336, 385, 389, 405, 408, 414], "squeez": [6, 80, 91, 427], "stack": [6, 55, 139, 166, 394, 416], "std": [6, 80, 187, 205, 414, 427], "subtract": 6, "swapax": [6, 80, 195, 427], "take": [6, 80, 312, 370, 394, 427], "take_along_axi": [6, 27, 28, 29, 53, 312, 393], "tan": [6, 24, 25, 63, 382, 396], "tanh": [6, 26, 64, 383, 395], "tensordot": [6, 79, 145, 184], "tile": [6, 369, 431], "trace": [6, 72, 75, 427], "transpos": [6, 80, 158, 195, 207, 427, 431], "trapz": 6, "tri": 6, "tril": [6, 72, 402, 404, 405, 408], "tril_indic": [6, 405, 408], "tril_indices_from": 6, "trim_zero": 6, "triu": [6, 72, 402, 407], "triu_indic": 6, "triu_indices_from": 6, "true_divid": [6, 78], "trunc": [6, 30, 52, 120, 373, 376], "typenam": 6, "union1d": 6, "uniqu": [6, 43, 81, 205, 389, 414], "unpackbit": 6, "unravel_index": [6, 27, 28], "unwrap": [6, 70, 314], "vander": 6, "var": [6, 80, 187, 205, 389, 427], "vdot": [6, 79, 184], "vsplit": [6, 55], "vstack": [6, 55, 139], "where": [6, 11, 12, 13, 14, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 40, 41, 44, 45, 46, 47, 51, 52, 54, 56, 57, 60, 61, 63, 64, 77, 78, 80, 87, 89, 90, 92, 93, 120, 121, 122, 123, 124, 136, 137, 140, 146, 147, 148, 149, 150, 155, 156, 157, 158, 169, 171, 174, 175, 176, 177, 178, 179, 180, 181, 182, 185, 186, 187, 191, 192, 193, 196, 201, 202, 203, 205, 252, 253, 273, 274, 275, 280, 290, 292, 296, 297, 299, 306, 307, 308, 309, 316, 338, 343, 344, 345, 346, 347, 348, 349, 351, 352, 357, 360, 368, 372, 373, 375, 377, 380, 381, 382, 383, 385, 386, 389, 390, 391, 395, 396, 409, 410, 414], "who": 6, "zero": [6, 14, 18, 27, 28, 31, 65, 73, 77, 80, 85, 86, 94, 100, 105, 120, 131, 132, 141, 166, 171, 185, 187, 191, 195, 197, 198, 201, 202, 204, 205, 278, 298, 301, 302, 307, 309, 316, 318, 346, 348, 349, 351, 380, 381, 389, 391, 402, 403, 406, 414, 419], "zeros_lik": [6, 31, 86, 132, 302, 418], "astyp": [6, 80, 133, 298], "byteswap": 6, "dump": 6, "fill": [6, 31, 80, 85, 86, 114, 131, 132, 262, 301, 302, 393, 402, 418, 419], "flatten": [6, 27, 28, 55, 72, 75, 80, 197, 198, 256, 268, 282, 298, 312, 365, 369, 394], "getfield": [6, 81], "item": [6, 80, 420], "itemset": 6, "newbyteord": [6, 81], "setfield": [6, 81], "setflag": 6, "tobyt": 6, "tofil": [6, 127], "tolist": 6, "tostr": 6, "view": [6, 39, 40, 41, 48, 80, 91, 117, 118, 119, 207, 285, 295, 312, 370, 387, 392, 400], "linalg": [6, 386], "choleski": 6, "cond": 6, "det": 6, "eig": [6, 162, 163], "eigh": 6, "eigval": [6, 162], "eigvalsh": 6, "inv": 6, "lstsq": 6, "matrix_pow": [6, 386], "matrix_rank": 6, "multi_dot": 6, "norm": [6, 96, 97, 99, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 113, 159, 431], "pinv": 6, "qr": 6, "slogdet": 6, "solv": [6, 431], "svd": [6, 166], "tensorinv": 6, "tensorsolv": 6, "fft": [6, 420, 431], "fft2": 6, "fftfreq": 6, "fftn": 6, "fftshift": 6, "hfft": 6, "ifft": 6, "ifft2": 6, "ifftn": 6, "ifftshift": 6, "ihfft": 6, "irfft": 6, "irfft2": 6, "irfftn": 6, "rfft": 6, "rfft2": 6, "rfftfreq": 6, "rfftn": 6, "beta": [6, 327], "binomi": [6, 335], "byte": [6, 80, 81, 257, 272, 276], "chisquar": 6, "choic": [6, 53, 80, 258], "default_rng": 6, "dirichlet": 6, "exponenti": [6, 89, 90, 92, 174, 178, 329, 355], "gamma": [6, 356], "geometr": [6, 133, 172], "get_stat": [6, 316], "gumbel": 6, "hypergeometr": 6, "laplac": 6, "logist": 6, "lognorm": 6, "logseri": 6, "multinomi": 6, "multivariate_norm": 6, "negative_binomi": 6, "noncentral_chisquar": 6, "noncentral_f": 6, "normal": [6, 66, 162, 316, 331, 334, 345, 357], "pareto": 6, "permut": [6, 80, 195, 295, 400, 431], "poisson": 6, "rand": [6, 316, 346, 348, 349, 351], "randint": [6, 80, 271, 316, 347], "randn": [6, 117, 118, 119, 171, 316, 388], "random_integ": [6, 316, 344], "random_sampl": [6, 316, 343, 346, 349, 351], "ranf": 6, "rayleigh": 6, "seed": [6, 80, 271, 316], "set_stat": 6, "shuffl": 6, "standard_cauchi": 6, "standard_exponenti": 6, "standard_gamma": 6, "standard_norm": [6, 316, 345], "standard_t": 6, "triangular": [6, 158, 169], "uniform": [6, 81, 316, 343, 346, 348, 349, 351], "vonmis": 6, "wald": 6, "weibul": [6, 364], "zipf": 6, "show": [9, 81, 140, 182, 189, 201, 202, 354], "constant": [9, 81], "alias": 9, "bool": [9, 14, 18, 27, 28, 36, 50, 80, 81, 87, 96, 102, 110, 136, 137, 148, 149, 150, 156, 157, 166, 168, 185, 191, 197, 198, 201, 202, 205, 257, 298, 299, 370, 389, 414], "complex64": [9, 96, 102], "complex128": [9, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 371], "bool_": 9, "cdoubl": 9, "complex": [9, 11, 12, 24, 25, 56, 57, 79, 80, 81, 88, 115, 143, 162, 163, 171, 184, 260, 261, 309, 366, 380, 385, 389, 414, 427, 431], "cfloat": 9, "csingl": 9, "doubl": [9, 329], "float": [9, 15, 24, 33, 34, 36, 60, 81, 90, 115, 135, 166, 168, 172, 183, 185, 191, 205, 316, 320, 345, 346, 348, 349, 351, 354, 355, 357, 360, 389, 414, 427, 431], "float_": 9, "float16": 9, "int": [9, 27, 28, 36, 43, 55, 73, 77, 80, 81, 87, 94, 115, 133, 135, 142, 144, 185, 191, 197, 198, 201, 202, 205, 256, 257, 304, 308, 312, 316, 344, 347, 369, 370, 376, 379, 388, 389, 394, 402, 404, 405, 407, 408, 414, 427], "int_": 9, "intc": 9, "singl": [9, 80, 167, 289, 316, 335, 344, 345, 346, 347, 348, 349, 351, 357, 427], "singlecomplex": 9, "e": [9, 21, 23, 80, 81, 91, 174, 291, 316, 392], "euler_gamma": 9, "inf": [9, 15, 25, 33, 34, 60, 78, 148, 149, 150, 159, 168, 174, 175, 177, 186, 192, 197, 198, 201, 202, 309, 385, 409], "infin": [9, 14, 18, 120, 121, 148, 149, 150, 201, 202, 368, 410, 431], "infti": 9, "nan": [9, 14, 15, 18, 27, 28, 33, 34, 78, 122, 123, 148, 149, 150, 175, 185, 186, 187, 191, 192, 197, 198, 199, 200, 201, 202, 203, 204, 205, 307, 308, 309, 385, 389, 409, 414, 431], "ninf": [9, 201, 202], "nzero": 9, "pi": [9, 25, 63, 64, 71, 382, 383, 395, 396, 412], "pinf": 9, "pzero": 9, "out": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 37, 39, 40, 41, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 63, 64, 65, 66, 71, 72, 75, 77, 78, 79, 80, 87, 88, 89, 90, 91, 92, 93, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 133, 136, 137, 139, 140, 141, 142, 143, 146, 147, 148, 149, 150, 155, 156, 157, 167, 170, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192, 193, 195, 196, 197, 198, 201, 202, 203, 205, 252, 253, 254, 255, 258, 259, 262, 263, 269, 273, 274, 275, 280, 286, 290, 292, 294, 296, 297, 298, 299, 303, 306, 307, 308, 309, 310, 315, 316, 338, 343, 344, 345, 346, 347, 348, 349, 351, 357, 360, 365, 366, 367, 368, 369, 371, 372, 373, 376, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 399, 402, 409, 410, 412, 413, 414, 416], "none": [11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 60, 63, 64, 65, 66, 67, 72, 75, 77, 78, 79, 80, 81, 82, 85, 86, 87, 89, 90, 91, 92, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 117, 120, 121, 122, 123, 124, 131, 132, 133, 136, 137, 138, 139, 140, 141, 146, 148, 149, 150, 155, 156, 157, 159, 166, 167, 168, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192, 193, 196, 197, 198, 201, 202, 203, 205, 252, 253, 254, 255, 256, 258, 259, 263, 271, 273, 274, 275, 279, 280, 281, 284, 286, 289, 290, 292, 294, 296, 297, 299, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 368, 369, 370, 372, 373, 374, 376, 377, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 399, 400, 401, 402, 404, 407, 409, 410, 413, 414, 416, 417, 418, 419, 427], "order": [11, 12, 13, 20, 21, 22, 23, 24, 25, 26, 29, 31, 33, 34, 35, 37, 38, 44, 45, 46, 47, 51, 52, 54, 56, 57, 59, 60, 63, 64, 78, 80, 81, 83, 84, 85, 86, 87, 89, 90, 92, 94, 117, 118, 119, 120, 121, 131, 132, 136, 137, 140, 146, 148, 149, 150, 155, 156, 157, 162, 163, 168, 171, 174, 175, 176, 177, 178, 179, 180, 181, 182, 186, 192, 193, 195, 196, 212, 256, 257, 262, 269, 279, 282, 297, 299, 301, 302, 304, 306, 307, 309, 365, 368, 370, 372, 373, 377, 380, 381, 382, 383, 385, 386, 390, 395, 396, 409, 410, 418, 419, 431], "k": [11, 12, 13, 20, 21, 22, 23, 24, 25, 26, 31, 44, 45, 46, 47, 51, 52, 54, 56, 57, 59, 60, 63, 64, 72, 75, 78, 80, 87, 89, 90, 92, 94, 120, 121, 136, 137, 140, 146, 148, 149, 150, 155, 156, 157, 170, 171, 174, 175, 176, 177, 178, 179, 180, 181, 182, 186, 192, 193, 196, 212, 257, 262, 269, 297, 299, 306, 307, 309, 368, 372, 373, 380, 381, 382, 383, 385, 386, 390, 395, 396, 402, 403, 404, 405, 406, 407, 408, 409, 410, 435], "subok": [11, 12, 13, 20, 21, 22, 23, 24, 25, 26, 31, 44, 45, 46, 47, 48, 49, 51, 52, 56, 57, 59, 60, 63, 64, 78, 80, 86, 87, 89, 90, 92, 120, 121, 122, 123, 124, 132, 136, 137, 140, 146, 148, 149, 150, 155, 156, 157, 174, 175, 176, 177, 178, 179, 180, 181, 182, 186, 192, 193, 196, 257, 297, 299, 302, 306, 307, 309, 368, 372, 373, 380, 381, 382, 383, 385, 386, 390, 395, 396, 409, 410, 419], "kwarg": [11, 12, 13, 15, 20, 21, 22, 23, 24, 25, 26, 44, 45, 46, 47, 51, 52, 54, 56, 57, 60, 63, 64, 67, 68, 69, 78, 79, 80, 83, 87, 89, 90, 92, 95, 120, 121, 122, 123, 124, 126, 127, 128, 130, 135, 136, 137, 140, 145, 146, 148, 149, 150, 155, 156, 157, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 186, 192, 193, 194, 196, 199, 200, 204, 241, 259, 285, 297, 299, 306, 307, 309, 367, 368, 372, 373, 380, 381, 382, 383, 384, 385, 386, 390, 395, 396, 397, 401, 402, 409, 410, 411, 415], "calcul": [11, 12, 69, 77, 82, 89, 90, 92, 95, 120, 122, 123, 135, 178, 193, 204, 205, 307, 368, 385, 389, 414, 420], "valu": [11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 37, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 76, 77, 78, 80, 81, 82, 85, 86, 87, 89, 90, 92, 93, 94, 95, 96, 102, 114, 115, 116, 120, 121, 122, 123, 124, 128, 131, 132, 136, 137, 140, 141, 144, 146, 148, 149, 150, 155, 156, 157, 158, 163, 166, 168, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 191, 192, 193, 196, 197, 198, 201, 202, 203, 205, 209, 210, 213, 215, 216, 218, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 242, 244, 246, 247, 248, 249, 250, 251, 254, 255, 257, 259, 262, 266, 268, 279, 281, 297, 298, 299, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 316, 326, 343, 344, 360, 368, 369, 370, 372, 373, 376, 377, 378, 380, 381, 382, 383, 385, 386, 389, 390, 391, 393, 394, 395, 396, 397, 399, 409, 410, 412, 414, 418, 419, 427, 431], "wise": [11, 12, 13, 15, 20, 21, 22, 23, 24, 25, 26, 30, 32, 44, 45, 46, 47, 51, 52, 55, 56, 57, 60, 63, 64, 78, 80, 87, 89, 90, 92, 95, 120, 122, 123, 124, 136, 137, 139, 143, 146, 147, 148, 149, 150, 155, 156, 157, 164, 174, 175, 176, 177, 178, 179, 180, 181, 182, 185, 186, 191, 192, 193, 194, 196, 201, 202, 203, 261, 297, 299, 306, 307, 309, 366, 367, 368, 372, 373, 376, 380, 381, 382, 383, 385, 386, 390, 395, 396, 409, 410, 416, 427], "contain": [11, 12, 14, 18, 19, 27, 28, 44, 45, 46, 47, 54, 80, 81, 125, 134, 146, 155, 162, 171, 185, 187, 191, 197, 198, 201, 202, 205, 285, 316, 372, 385, 389, 391, 404, 407, 414, 427], "paramet": [11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 75, 76, 77, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 131, 132, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 155, 156, 157, 158, 159, 160, 162, 163, 165, 166, 167, 168, 169, 170, 171, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 256, 257, 266, 269, 285, 297, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 316, 317, 318, 320, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 413, 414, 416, 417, 418, 419], "onli": [11, 12, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 33, 34, 35, 37, 39, 42, 51, 52, 54, 56, 57, 59, 62, 63, 64, 66, 72, 75, 76, 80, 81, 82, 85, 86, 89, 90, 92, 94, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 120, 126, 127, 128, 129, 130, 131, 132, 143, 144, 148, 149, 150, 155, 158, 172, 173, 174, 175, 176, 177, 180, 185, 187, 188, 189, 191, 197, 198, 201, 202, 203, 205, 257, 297, 301, 302, 304, 306, 308, 309, 311, 316, 338, 344, 360, 366, 370, 372, 373, 376, 377, 378, 380, 381, 382, 383, 389, 393, 394, 395, 396, 397, 399, 402, 403, 406, 410, 413, 414, 417, 418, 419, 427], "either": [11, 12, 13, 14, 15, 18, 20, 21, 22, 23, 24, 25, 26, 30, 37, 44, 45, 46, 47, 48, 49, 51, 52, 56, 57, 60, 61, 63, 64, 65, 78, 79, 81, 87, 89, 90, 91, 92, 93, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 117, 118, 119, 120, 121, 122, 123, 124, 136, 137, 140, 143, 146, 147, 148, 149, 150, 155, 156, 157, 168, 170, 174, 175, 176, 177, 178, 179, 180, 181, 182, 185, 186, 187, 189, 191, 192, 193, 195, 196, 197, 198, 201, 202, 203, 297, 298, 299, 303, 305, 306, 307, 308, 309, 311, 352, 366, 368, 371, 372, 373, 374, 375, 376, 380, 381, 382, 383, 385, 386, 387, 390, 391, 392, 393, 394, 395, 396, 400, 409, 410, 417], "tensor": [11, 12, 13, 14, 15, 18, 20, 21, 22, 23, 24, 25, 26, 30, 44, 45, 46, 47, 48, 49, 51, 52, 56, 57, 60, 61, 63, 64, 65, 78, 79, 80, 86, 87, 89, 90, 91, 92, 93, 117, 118, 119, 120, 121, 122, 123, 124, 132, 136, 137, 140, 143, 145, 146, 148, 149, 150, 155, 156, 157, 162, 170, 171, 174, 175, 176, 177, 178, 179, 180, 181, 182, 185, 186, 187, 189, 191, 192, 193, 195, 196, 197, 198, 201, 202, 203, 297, 298, 299, 302, 303, 305, 306, 307, 308, 309, 310, 311, 366, 368, 371, 372, 373, 374, 375, 376, 380, 381, 382, 383, 385, 386, 387, 390, 391, 392, 393, 395, 396, 397, 400, 403, 406, 409, 410, 417, 419], "usm_ndarrai": [11, 12, 13, 14, 15, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 39, 40, 41, 44, 45, 46, 47, 48, 49, 51, 52, 54, 55, 56, 57, 60, 61, 63, 64, 65, 77, 78, 79, 80, 86, 87, 89, 90, 91, 92, 93, 117, 118, 119, 120, 121, 122, 123, 124, 132, 136, 137, 139, 140, 143, 146, 148, 149, 150, 155, 156, 157, 162, 170, 171, 174, 175, 176, 177, 178, 179, 180, 181, 182, 185, 186, 187, 189, 191, 192, 193, 195, 196, 197, 198, 201, 202, 203, 205, 257, 297, 298, 299, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 400, 403, 406, 409, 410, 414, 416, 417, 419], "keyword": [11, 12, 13, 15, 20, 21, 22, 23, 24, 25, 26, 44, 45, 46, 47, 51, 52, 54, 60, 63, 64, 67, 68, 69, 78, 79, 82, 89, 90, 92, 95, 120, 121, 122, 123, 124, 135, 140, 145, 146, 155, 175, 176, 177, 178, 186, 192, 193, 194, 196, 199, 200, 204, 297, 306, 307, 309, 367, 368, 372, 373, 380, 381, 382, 383, 384, 390, 395, 396, 397, 401, 402, 409, 410, 427], "argument": [11, 12, 13, 15, 20, 21, 22, 23, 24, 25, 26, 44, 45, 46, 47, 50, 51, 52, 54, 55, 60, 63, 64, 67, 68, 69, 78, 79, 80, 81, 82, 88, 89, 90, 92, 95, 120, 121, 122, 123, 124, 135, 140, 143, 145, 146, 152, 153, 155, 164, 167, 175, 176, 177, 178, 186, 192, 193, 194, 196, 199, 200, 204, 256, 285, 297, 306, 307, 309, 366, 367, 368, 371, 372, 373, 380, 381, 382, 383, 384, 388, 390, 395, 396, 397, 401, 402, 409, 410, 427], "unsupport": [11, 12, 13, 15, 20, 21, 22, 23, 24, 25, 26, 44, 45, 46, 47, 51, 52, 54, 60, 63, 64, 67, 68, 69, 78, 79, 89, 90, 92, 95, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 120, 121, 122, 123, 124, 135, 140, 145, 146, 155, 167, 175, 176, 177, 178, 186, 192, 193, 194, 196, 199, 200, 204, 297, 306, 307, 309, 367, 368, 372, 373, 380, 381, 382, 383, 384, 390, 395, 396, 397, 401, 402, 409, 410], "sequenti": [11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 42, 44, 45, 46, 47, 51, 52, 56, 57, 60, 62, 63, 64, 66, 67, 68, 69, 76, 78, 79, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 120, 121, 122, 123, 124, 131, 132, 135, 136, 137, 140, 141, 145, 146, 147, 148, 149, 150, 155, 156, 157, 164, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 186, 188, 189, 192, 193, 194, 196, 199, 200, 203, 204, 297, 298, 299, 301, 302, 303, 305, 306, 307, 308, 311, 367, 368, 372, 373, 376, 380, 381, 382, 383, 384, 385, 386, 390, 393, 395, 396, 397, 401, 402, 403, 406, 409, 410, 417, 418, 419], "exclud": [11, 12, 316, 360], "note": [11, 12, 13, 14, 18, 27, 28, 30, 36, 38, 59, 70, 78, 80, 81, 91, 120, 148, 168, 183, 193, 196, 256, 262, 285, 298, 311, 314, 319, 321, 322, 332, 337, 370, 389, 390, 392, 393, 398, 409, 414, 415], "shorthand": [11, 12, 13, 44, 45, 46, 47, 78, 87, 121, 136, 137, 146, 155, 156, 157, 179, 181, 196, 297, 299, 306, 307, 368, 372, 390, 409, 417], "1j": [11, 12, 56, 57, 80, 143, 171, 270, 283, 366, 386], "5620499351813308": [11, 12], "x1": [13, 15, 24, 25, 42, 43, 44, 46, 47, 53, 60, 62, 67, 68, 69, 70, 71, 74, 76, 78, 79, 80, 82, 86, 87, 95, 114, 121, 122, 123, 124, 132, 135, 136, 137, 140, 145, 147, 154, 155, 156, 157, 161, 168, 169, 178, 179, 180, 181, 182, 184, 186, 188, 189, 192, 193, 194, 196, 199, 200, 204, 257, 297, 299, 302, 303, 304, 306, 307, 313, 314, 315, 353, 367, 368, 372, 374, 377, 384, 390, 397, 399, 401, 403, 405, 406, 408, 409, 412, 413, 419], "x2": [13, 14, 15, 18, 24, 25, 31, 44, 46, 47, 60, 62, 67, 78, 79, 87, 121, 122, 123, 124, 136, 137, 140, 145, 147, 154, 155, 156, 157, 178, 179, 180, 181, 182, 184, 186, 189, 192, 193, 196, 297, 298, 299, 303, 306, 307, 368, 372, 374, 377, 385, 390, 397, 409], "scalar": [13, 15, 25, 44, 46, 47, 50, 60, 61, 77, 78, 79, 80, 81, 87, 121, 122, 123, 124, 136, 137, 140, 151, 155, 156, 157, 170, 178, 179, 181, 182, 186, 189, 192, 193, 196, 266, 271, 299, 303, 307, 312, 316, 317, 318, 320, 323, 324, 325, 326, 327, 328, 329, 330, 331, 335, 338, 339, 341, 342, 344, 347, 350, 352, 356, 358, 359, 360, 361, 362, 363, 364, 368, 372, 390, 409, 417, 427], "both": [13, 15, 25, 44, 46, 47, 54, 60, 78, 79, 87, 121, 122, 123, 124, 136, 137, 140, 155, 156, 157, 168, 178, 179, 181, 182, 186, 192, 193, 196, 299, 303, 307, 368, 372, 390, 409], "equival": [13, 14, 16, 17, 18, 27, 28, 30, 59, 78, 80, 91, 196, 212, 252, 253, 285, 295, 306, 315, 316, 344, 370, 376, 379, 390, 400, 409, 427], "term": [13, 78, 196, 390, 409], "broadcast": [13, 48, 49, 54, 61, 78, 122, 123, 140, 168, 179, 181, 182, 184, 186, 192, 196, 205, 307, 311, 312, 369, 389, 390, 394, 398, 409, 414], "b": [13, 15, 27, 28, 44, 47, 55, 61, 68, 69, 79, 81, 82, 87, 124, 136, 137, 139, 145, 156, 157, 170, 171, 179, 181, 184, 185, 191, 199, 200, 299, 303, 307, 317, 388, 397, 398, 401, 416], "7": [13, 15, 19, 39, 52, 54, 61, 65, 69, 72, 73, 77, 78, 80, 82, 89, 117, 120, 133, 135, 147, 171, 184, 188, 196, 200, 271, 298, 309, 310, 316, 340, 366, 368, 371, 373, 374, 390, 392, 393, 397, 403, 406, 409, 410, 417], "oper": [13, 44, 45, 46, 47, 78, 81, 87, 91, 121, 136, 137, 146, 155, 156, 157, 158, 179, 180, 181, 182, 196, 297, 299, 306, 307, 311, 368, 372, 390, 398, 409, 420, 431], "axi": [14, 16, 17, 18, 27, 28, 29, 42, 55, 65, 67, 68, 69, 77, 80, 82, 91, 96, 101, 102, 106, 107, 110, 117, 118, 119, 122, 123, 133, 135, 139, 168, 172, 183, 185, 186, 187, 188, 191, 192, 197, 198, 199, 200, 201, 202, 203, 205, 252, 253, 254, 255, 256, 263, 273, 274, 275, 279, 280, 281, 284, 289, 290, 292, 294, 296, 304, 308, 310, 311, 312, 365, 369, 370, 374, 375, 387, 388, 389, 391, 392, 393, 394, 398, 401, 414, 416, 427], "keepdim": [14, 16, 17, 18, 27, 28, 65, 80, 168, 185, 187, 188, 191, 197, 198, 201, 202, 203, 205, 252, 253, 254, 255, 273, 274, 275, 280, 290, 292, 296, 308, 310, 312, 389, 391, 394, 414], "fals": [14, 15, 16, 17, 18, 27, 28, 31, 32, 35, 37, 42, 44, 45, 47, 48, 49, 59, 65, 66, 80, 81, 86, 87, 114, 132, 133, 136, 137, 144, 146, 147, 148, 149, 150, 156, 157, 166, 168, 171, 172, 179, 180, 181, 182, 183, 185, 187, 188, 189, 191, 197, 198, 201, 202, 203, 205, 252, 253, 254, 255, 257, 273, 274, 275, 280, 290, 292, 296, 299, 302, 308, 310, 370, 381, 389, 391, 413, 414, 419], "whether": [14, 15, 18, 81, 158, 172, 370], "given": [14, 18, 19, 27, 28, 30, 31, 59, 65, 66, 68, 69, 77, 79, 80, 81, 82, 85, 86, 114, 117, 122, 123, 131, 132, 135, 140, 185, 186, 189, 191, 192, 199, 200, 201, 202, 203, 205, 254, 255, 256, 257, 263, 275, 280, 281, 286, 290, 292, 296, 301, 302, 308, 310, 311, 316, 321, 343, 360, 369, 373, 374, 375, 376, 389, 391, 398, 401, 402, 414, 416, 418, 419, 427], "evalu": [14, 15, 18, 80, 83, 84, 87, 145, 189, 252, 253, 303, 397], "logic": [14, 18, 179, 181, 182, 420, 431], "AND": [14, 44, 45, 46, 47, 146, 179, 180, 181, 182], "reduct": [14, 18], "method": [14, 16, 17, 18, 59, 80, 81, 116, 125, 127, 166, 257, 262, 285, 316, 370, 379, 400, 420], "Not": [14, 18, 80, 148, 199, 201, 202, 203, 204, 256, 308], "number": [14, 18, 19, 30, 43, 48, 49, 56, 57, 65, 77, 80, 81, 91, 115, 120, 121, 133, 142, 148, 159, 166, 168, 171, 172, 173, 183, 199, 201, 202, 203, 204, 205, 277, 286, 287, 288, 298, 308, 309, 316, 318, 328, 352, 368, 369, 373, 374, 375, 376, 380, 381, 389, 392, 398, 410, 414, 431], "becaus": [14, 18], "x3": [14, 18], "rtol": [15, 147], "1e": [15, 92, 147, 175, 176, 178, 334], "05": [15, 147], "atol": [15, 147], "08": [15, 63, 147, 334, 382], "two": [15, 32, 39, 40, 44, 45, 46, 47, 58, 62, 67, 75, 77, 80, 81, 83, 84, 145, 146, 147, 154, 162, 167, 170, 179, 181, 182, 184, 185, 186, 191, 192, 195, 201, 202, 279, 293, 303, 316, 345, 392, 403, 404, 406, 407, 415], "within": [15, 19, 32, 80, 147, 257, 311, 316, 360], "toler": [15, 32, 147], "A": [15, 51, 54, 60, 61, 80, 81, 90, 91, 117, 118, 119, 125, 127, 130, 163, 203, 257, 262, 269, 287, 308, 316, 318, 335, 338, 343, 344, 345, 346, 347, 348, 349, 351, 352, 357, 360, 369, 381, 392, 398, 400], "boolean": [15, 44, 46, 47, 81, 147, 148, 149, 150, 179, 180, 181, 182, 203, 205, 370, 381, 389, 393, 414], "dim": 15, "typeerror": [15, 48, 49, 61, 65, 72, 75, 91, 96, 102, 110, 117, 118, 119, 171, 195, 374, 375, 387, 392, 413], "rais": [15, 31, 33, 34, 35, 37, 48, 49, 53, 54, 59, 61, 65, 72, 75, 80, 90, 91, 96, 102, 110, 117, 118, 119, 165, 171, 185, 187, 191, 195, 197, 198, 201, 202, 205, 257, 258, 287, 307, 370, 374, 375, 386, 387, 389, 391, 392, 413, 414], "integ": [15, 30, 44, 45, 46, 47, 50, 72, 75, 81, 120, 121, 142, 146, 147, 155, 165, 168, 185, 191, 201, 202, 205, 307, 311, 316, 344, 347, 352, 368, 370, 372, 373, 376, 386, 389, 393, 402, 403, 406, 410, 413, 414, 427], "1e10": [15, 147], "00001e10": [15, 147], "initi": [16, 17, 80, 85, 130, 185, 191, 201, 202, 203, 273, 275, 280, 292, 308, 316, 391], "alia": [16, 17, 78, 115, 206, 316, 346, 349, 351, 409], "OR": [18, 44, 45, 46, 47, 146, 179, 180, 181, 182], "stop": [19, 133, 172, 183], "like": [19, 31, 33, 34, 35, 37, 39, 40, 41, 80, 85, 94, 131, 141, 173, 257, 301, 316, 360, 370, 418, 431], "usm_typ": [19, 31, 33, 34, 35, 36, 37, 72, 75, 80, 85, 86, 94, 131, 132, 133, 141, 172, 183, 301, 302, 316, 338, 343, 344, 345, 346, 347, 348, 349, 351, 357, 360, 402, 413, 418, 419], "sycl_queu": [19, 31, 33, 34, 35, 36, 37, 72, 75, 80, 85, 86, 94, 131, 132, 133, 141, 172, 183, 301, 302, 316, 338, 343, 344, 345, 346, 347, 348, 349, 351, 352, 357, 360, 402, 413, 418, 419], "evenli": [19, 133, 172, 183, 373, 376], "interv": [19, 91, 172, 316, 344, 346, 348, 349, 351, 359, 360, 392], "d": [19, 55, 72, 73, 75, 81, 94, 97, 98, 99, 103, 104, 108, 109, 111, 112, 113, 118, 119, 130, 139, 141, 162, 167, 168, 189, 298, 307, 311, 321, 365, 370, 379, 393, 398, 416, 417, 427], "care": 19, "handl": [19, 81, 298, 393, 431], "endpoint": [19, 133, 172, 183], "trigonometr": [20, 21, 22, 23, 24, 25, 26, 63, 64, 382, 383, 395, 396, 431], "invers": [20, 21, 22, 23, 24, 25, 26, 45, 63, 64, 90, 91, 92, 102, 103, 104, 105, 106, 107, 108, 109, 146, 174, 176, 362, 382, 383, 395, 396], "cosin": [20, 21, 22, 23, 24, 25, 26, 63, 64, 382, 383, 395, 396], "tangent": [20, 21, 22, 23, 24, 25, 26, 63, 64, 382, 383, 395, 396], "sine": [20, 21, 22, 23, 24, 25, 26, 63, 64, 382, 383, 395, 396], "hyperbol": [20, 21, 22, 23, 24, 25, 26, 63, 64, 382, 383, 395, 396, 431], "14159265": [20, 25], "65745445": 21, "99322285": 21, "5707963267948966": 22, "72538256": 23, "99822295": 23, "point": [24, 33, 34, 60, 81, 90, 115, 172, 205, 316, 345, 357, 389, 414, 431], "arc": [24, 25], "quadrant": [24, 25], "correctli": [24, 25, 168, 298], "78539816": [24, 25, 412], "57079633": [25, 315, 412], "180": 25, "135": 25, "45": 25, "54930614": 26, "dpnp_arrai": [27, 28, 54, 86, 115, 125, 132, 142, 185, 189, 191, 197, 198, 201, 202, 205, 206, 302, 310, 316, 338, 343, 344, 345, 346, 347, 348, 349, 351, 352, 357, 360, 365, 369, 389, 403, 406, 414, 419, 420], "option": [27, 28, 50, 51, 54, 55, 60, 77, 80, 81, 90, 139, 166, 167, 168, 172, 185, 191, 197, 198, 201, 202, 205, 256, 257, 269, 316, 338, 343, 344, 345, 346, 347, 348, 349, 351, 352, 357, 360, 365, 369, 370, 388, 389, 393, 404, 405, 407, 408, 414, 416], "search": [27, 28, 197, 198, 420, 431], "must": [27, 28, 49, 51, 54, 55, 60, 77, 90, 91, 93, 139, 158, 167, 168, 173, 185, 191, 197, 198, 201, 202, 205, 311, 312, 388, 389, 392, 394, 414, 416], "index": [27, 28, 53, 80, 81, 189, 197, 198, 258, 291, 311, 312, 365, 370, 393, 394, 420, 431], "should": [27, 28, 80, 134, 147, 185, 191, 197, 198, 201, 202, 256, 257, 333, 370, 377, 427], "reduc": [27, 28, 169, 171, 185, 191, 197, 198, 201, 202, 205, 389, 414], "ax": [27, 28, 77, 79, 80, 97, 99, 100, 103, 104, 105, 108, 109, 111, 113, 145, 168, 170, 184, 185, 187, 191, 195, 197, 198, 201, 202, 205, 287, 293, 295, 374, 375, 387, 389, 392, 397, 398, 400, 414], "dimens": [27, 28, 31, 39, 40, 41, 55, 66, 73, 77, 80, 81, 91, 118, 119, 139, 144, 164, 168, 185, 191, 195, 197, 198, 201, 202, 205, 269, 277, 287, 312, 316, 346, 348, 349, 351, 370, 379, 384, 387, 388, 389, 392, 394, 398, 403, 404, 405, 406, 407, 408, 414, 427, 431], "singleton": [27, 28, 91, 185, 191, 197, 198, 201, 202, 205, 387, 389, 414], "accordingli": [27, 28, 185, 191, 197, 198, 201, 202], "first": [27, 28, 55, 60, 80, 81, 90, 152, 153, 167, 185, 191, 197, 198, 256, 307, 365, 370, 374, 386, 394, 416], "occurr": [27, 28, 43, 197, 198], "non": [27, 28, 43, 65, 80, 148, 162, 185, 191, 197, 198, 201, 202, 278, 298, 307, 316, 338, 343, 344, 345, 346, 347, 348, 349, 351, 352, 357, 360, 385], "igonr": [27, 28, 197, 198], "convert": [27, 28, 33, 34, 35, 36, 37, 39, 40, 41, 70, 71, 81, 314, 315, 412], "flat": [27, 28, 80, 116, 269, 369], "tupl": [27, 28, 73, 80, 81, 91, 168, 185, 191, 201, 202, 205, 287, 298, 370, 379, 389, 404, 407, 414, 427], "appli": [27, 28, 29, 50, 179, 181, 182, 371], "index_arrai": [27, 28, 29, 80, 256], "call": [27, 28, 29, 35, 37, 81, 167, 212, 387, 398, 417], "multipl": [27, 28, 29, 55, 80, 81, 139, 162, 163, 185, 191, 201, 202, 205, 256, 384, 388, 389, 414, 416, 420], "11": [27, 28, 64, 73, 80, 135, 285, 335, 344, 376, 383, 403, 406], "12": [27, 28, 41, 73, 81, 143, 183, 308, 310, 340, 403, 406], "15": [27, 28, 69, 73, 175, 340, 391], "24": [27, 28, 68, 82, 308], "re": [27, 28, 43, 138, 374, 411], "in_array1": [29, 88], "kind": [29, 50, 55, 80, 81, 115, 139, 256, 257, 279, 304, 388, 416, 431], "would": [29, 55, 80, 81, 279, 316, 388, 400], "describ": [29, 80, 81, 168, 256, 391, 431], "algorithm": [29, 80, 256], "indirect": [29, 80, 256, 384], "stabl": [29, 80, 256, 384], "partial": [29, 384], "decim": [30, 80, 115, 286, 373, 376], "detail": [30, 125, 376, 404, 405, 407, 408, 427], "nearest": [30, 120, 121, 368, 373, 376, 410], "truncat": [30, 50, 52, 120, 354, 373, 376, 410], "ndmin": 31, "object": [31, 34, 35, 37, 59, 80, 81, 91, 115, 116, 125, 129, 142, 158, 162, 168, 173, 190, 285, 300, 316, 338, 343, 344, 345, 346, 347, 348, 349, 351, 352, 357, 360, 370, 427], "satisfi": [31, 35, 37, 80, 93, 257], "specifi": [31, 35, 42, 49, 55, 72, 75, 76, 80, 133, 145, 168, 172, 183, 187, 188, 203, 205, 256, 264, 308, 316, 329, 339, 357, 365, 374, 375, 388, 389, 397, 414], "valueerror": [31, 33, 34, 35, 37, 59, 197, 198, 370, 387], "new": [31, 48, 49, 55, 80, 81, 85, 86, 91, 125, 129, 130, 131, 132, 139, 141, 195, 203, 257, 285, 295, 301, 302, 308, 370, 374, 375, 388, 398, 400, 416, 418, 419, 427], "uniniti": [31, 86, 131, 301, 418], "than": [31, 80, 115, 118, 119, 139, 166, 279, 380, 381, 388], "a1": 32, "a2": 32, "equal_nan": [32, 147], "consist": [32, 394], "contigu": [33, 34, 35, 37, 80, 269, 282, 365, 370], "check": [33, 34, 158, 170], "construct": [33, 34, 53, 72, 75, 80, 81, 127, 128, 190, 258, 300, 369, 398, 420], "grid": [33, 34, 144, 189], "No": [34, 158], "perform": [34, 54, 77, 158], "match": [34, 55, 77, 81, 311, 312, 388, 393, 394], "pass": [34, 80, 81, 285], "through": [34, 81, 427], "subclass": [34, 153], "content": [35, 80, 353], "flag": [35, 37, 80, 81, 262], "about": [35, 37, 80, 115, 267, 427], "layout": [35, 37, 51, 54, 60, 80, 90, 267, 370, 420], "f_contigu": [35, 37], "make": [35, 37, 81, 189], "now": [35, 37, 73], "c_contigu": [35, 37, 80, 262], "Then": [35, 37], "laid": 37, "fortran": [37, 80, 257, 269, 365, 370], "row": [37, 55, 80, 118, 119, 139, 167, 171, 173, 257, 269, 365, 404, 416], "exactli": [38, 70, 314, 316, 344], "ari": [39, 40, 41], "least": [39, 40, 41, 81, 147, 416], "One": [39, 40, 41, 81, 370], "sequenc": [39, 40, 41, 55, 58, 62, 139, 165, 167, 340, 353, 371, 388, 416], "preserv": [39, 40, 41, 54, 80, 81, 117, 118, 119, 257], "made": [39, 81], "three": [39, 40, 41, 316, 352], "avoid": [40, 41, 80, 256], "possibl": [40, 41, 80, 91, 257, 285, 370, 387, 392, 400], "weight": [42, 43, 66, 138, 187], "arithmet": [42, 133, 187, 188, 205, 306, 389, 414, 420, 431], "minlength": 43, "count": [43, 65, 81, 129, 165, 298, 318, 420, 431], "find": [43, 166, 377, 384, 411, 431], "bit": [44, 45, 46, 47, 81, 115, 142, 146, 155, 179, 181, 182, 372, 431], "truth": [44, 45, 46, 47, 87, 136, 137, 146, 156, 157, 179, 180, 181, 182, 299, 431], "xor": [44, 45, 46, 47, 146, 179, 180, 181, 182], "255": [44, 46], "NOT": [45, 146, 179, 180, 181, 182], "31": [47, 133], "26": 47, "arg": [48, 83, 316, 415], "against": [48, 49, 54, 134, 168, 312, 394], "other": [48, 49, 77, 80, 81, 120, 141, 167, 195, 209, 210, 213, 215, 216, 218, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 242, 244, 246, 249, 250, 251, 256, 257, 309, 316, 360, 420, 431], "origin": [48, 80, 168, 195, 256, 370], "notimplementederror": [48, 49, 54, 80, 185, 187, 191, 201, 202, 205, 257, 389, 391, 414], "dp": [49, 78, 79, 80, 162, 170, 295, 307, 370, 371, 379, 390, 400, 409, 417], "from_": 50, "cast": [50, 55, 61, 80, 139, 205, 257, 388, 389, 414, 416], "safe": [50, 55, 80, 139, 257, 388, 416], "between": [50, 77, 82, 115, 163, 172, 333, 347, 412], "occur": [50, 55, 80, 139, 257, 269, 388, 416], "accord": [50, 81, 115, 162, 163, 205, 389, 414], "rule": [50, 61, 184, 205, 371, 389, 401, 414], "without": [50, 80, 85, 287, 295, 365, 370, 427], "overflow": 50, "target": [50, 80, 257], "equiv": [50, 55, 80, 139, 257, 388, 416], "same_kind": [50, 55, 61, 80, 139, 257, 388, 416], "unsaf": [50, 55, 80, 139, 257, 388, 416], "what": [50, 55, 80, 81, 87, 139, 257, 318, 335, 388, 416], "mai": [50, 54, 55, 80, 81, 91, 139, 162, 183, 205, 257, 312, 388, 398, 416, 427], "promot": [50, 371, 398], "cube": [51, 385], "output": [51, 54, 60, 75, 77, 81, 87, 90, 136, 137, 156, 157, 165, 167, 189, 198, 205, 248, 299, 316, 317, 318, 320, 323, 324, 325, 326, 327, 328, 329, 330, 331, 335, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 369, 387, 389, 398, 414, 431], "popul": [51, 60, 80, 90, 316, 343], "correct": [51, 55, 60, 90, 170, 388], "newli": [51, 54, 60, 80, 90, 257], "27": [51, 183, 307, 413], "mode": [53, 58, 62, 80, 169, 258, 281, 294, 311, 354, 359, 393], "prefer": [53, 59, 80, 262], "a_min": 54, "a_max": 54, "edg": 54, "right": [54, 118, 119, 140, 155, 161, 162, 359, 372, 377], "hold": [54, 168, 203, 308], "Its": [54, 312], "those": [54, 312], "join": [55, 139, 388, 416, 431], "exist": [55, 81, 91, 139, 370, 388, 416], "destin": [55, 139, 195, 311, 312, 388, 394, 416], "were": [55, 316, 345, 388], "str": [55, 81, 139, 388, 416], "cannot": [55, 80, 197, 198, 287, 387, 388], "togeth": [55, 81, 388], "sub": [55, 81, 139, 388, 416], "horizont": [55, 117, 139, 416], "vertic": [55, 117, 118, 139, 416], "3rd": 55, "depth": [55, 416], "assembl": [55, 139, 388, 416], "third": [55, 416], "t": [55, 66, 80, 81, 163, 295, 358], "obtain": [56, 57, 298], "chang": [56, 57, 59, 60, 80, 81, 256, 257, 291, 295, 297, 305, 306, 311, 312, 313, 365, 370, 412, 431], "imaginari": [56, 57, 80, 143, 270, 309, 366], "2j": [56, 57, 143, 162, 366, 380], "j": [56, 57, 143, 162, 177, 309, 312, 366, 386, 394], "v": [58, 72, 75, 81, 162], "linear": [58, 62, 170, 183, 420, 431], "convolut": [58, 62], "ca": 58, "z": [59, 128, 189, 326], "when": [59, 80, 81, 168, 183, 201, 202, 256, 257, 393, 402, 417], "we": [59, 73, 312, 394], "modifi": [59, 353], "second": [60, 80, 81, 90, 139, 153, 185, 191, 256, 307, 386], "dst": 61, "src": 61, "violat": 61, "valid": [62, 91, 392, 404, 405, 407, 408], "000000e": [63, 382], "00": [63, 382], "371139e": 63, "5091786": 64, "591953": 64, "coordin": [65, 128, 189], "19": [65, 81], "m": [66, 81, 94, 117, 118, 119, 158, 160, 162, 163, 166, 170, 171, 312, 394, 402, 404, 407], "rowvar": 66, "bia": 66, "ddof": [66, 80, 205, 290, 296, 389, 414], "fweight": 66, "aweight": 66, "estim": [66, 318, 335], "covari": 66, "matrix": [66, 158, 159, 162, 163, 165, 166, 168, 169, 170, 171, 184, 386, 406, 413, 420, 431], "variabl": 66, "axisa": 67, "axisb": 67, "axisc": 67, "vector": [67, 159, 166, 167, 168, 171, 189, 415, 431], "cumul": [68, 69, 77, 80, 199, 200, 263], "120": [68, 71], "720": 68, "th": [69, 77, 82, 135, 188, 403, 406], "21": [69, 81], "remov": [70, 80, 91, 289, 314, 387, 431], "larg": [70, 81, 314], "jump": [70, 314], "wrap": [70, 80, 114, 281, 294, 311, 314, 393], "rad": 71, "30": [71, 312, 315, 394], "60": [71, 312, 394, 417], "90": [71, 417], "150": 71, "upper": [72, 158, 169, 402, 406, 407], "triangl": [72, 140, 402, 403, 404, 405, 406, 407, 408], "lower": [72, 152, 158, 402, 403, 404, 405, 408], "access": [73, 74, 114, 427], "main": [73, 74, 114, 141, 163], "usual": [73, 81], "di": 73, "100": [73, 133, 183, 328, 354], "d3": 73, "offset": [76, 80, 81, 264, 399, 404, 405, 407, 408], "axis1": [76, 80, 264, 293, 392, 399], "axis2": [76, 80, 264, 293, 392, 399], "prepend": [77, 91, 398], "differenc": 77, "taken": [77, 389, 404, 407, 414], "last": [77, 167, 365, 370, 374, 387], "prior": 77, "expand": [77, 91], "length": [77, 80, 87, 139, 171, 287, 319, 370, 371, 379, 387, 398, 416], "direct": [77, 118, 119], "smaller": [77, 80, 115, 121, 279, 368], "consecut": [77, 82], "quotient": [78, 193, 368, 409], "over": [79, 116, 128, 168, 172, 184, 185, 189, 191, 199, 201, 202, 203, 205, 308, 316, 343, 348, 359, 360, 389, 391, 414, 431], "arbitrari": [79, 81, 184, 371], "buffer": [80, 126, 370], "stride": [80, 257], "wrapper": 80, "compliant": 80, "__getitem__": [80, 81, 116], "self": [80, 81, 116, 208, 209, 210, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 249, 250, 251, 268, 316], "__setitem__": [80, 116], "val": [80, 114, 116, 247, 281, 305, 311], "__len__": [80, 81], "len": [80, 81, 144, 234, 379], "versionchang": [80, 256], "previous": [80, 256], "wa": [80, 81, 185, 191, 201, 202, 205, 256, 316, 357, 389, 391, 414], "error": [80, 88, 256, 420], "At": [80, 256], "some": [80, 81, 91, 93, 120, 256, 427], "futur": [80, 81, 256], "intend": [80, 256], "until": [80, 256, 374, 375], "explicitli": [80, 256], "arr": [80, 81, 256, 298, 313, 340, 405, 408], "futurewarn": [80, 256], "quicksort": [80, 256], "mergesort": [80, 256], "heapsort": [80, 256], "field": [80, 81, 189, 256], "compar": [80, 87, 256], "etc": [80, 81, 256, 335], "word": [80, 120, 256, 316, 360], "yield": [80, 256, 316, 427], "maskedarrai": [80, 256], "inplac": [80, 256], "asnumpi": 80, "style": [80, 257, 269, 365], "keep": [80, 257], "close": [80, 91, 172, 257, 316, 344], "happen": [80, 257, 318], "itself": [80, 81, 257, 427], "backward": [80, 257, 374, 375], "convers": [80, 257, 420], "By": [80, 185, 191, 201, 202, 257, 365, 369, 404, 407], "instead": [80, 91, 120, 133, 172, 183, 257, 298], "arr_t": [80, 257], "unless": [80, 168, 203, 257, 308], "condit": [80, 93, 159, 257, 305, 311, 313, 378, 417], "behavior": [80, 262, 398], "assign": [80, 266], "collaps": [80, 269], "get_arrai": 80, "get": [80, 291, 394, 427], "id": [80, 271], "standard": [80, 115, 121, 124, 187, 193, 205, 248, 271, 290, 316, 331, 338, 345, 354, 355, 356, 357, 358, 368, 389, 391, 414, 427, 431], "random": [80, 117, 118, 119, 171, 271, 388, 420, 431], "123": [80, 271], "kth": [80, 279, 304], "introselect": [80, 279, 304], "rearrang": [80, 279, 431], "move": [80, 195, 279, 374, 375, 400], "behind": [80, 279], "undefin": [80, 279], "sh": [80, 285], "unlik": [80, 285], "free": [80, 285], "separ": [80, 81, 285], "entri": [80, 81, 85, 117, 118, 119, 289], "deviat": [80, 187, 205, 290, 316, 331, 338, 389, 414], "interchang": [80, 195, 293, 392], "to_devic": 80, "target_devic": 80, "transfer": 80, "suitabl": [80, 295], "properti": [80, 207, 265, 267, 268, 270, 272, 276, 277, 283, 287, 288, 291, 295, 316, 338, 343, 344, 345, 346, 347, 348, 349, 351, 352, 357, 360, 427], "give": [80, 295, 370, 379], "varianc": [80, 187, 205, 296, 389, 414, 431], "__eq__": [80, 81, 116, 316], "__ne__": [80, 81, 116, 316], "__lt__": [80, 81, 116, 316], "__le__": [80, 81, 116, 316], "__gt__": [80, 81, 116, 316], "__ge__": [80, 81, 116, 316], "attribut": [80, 81, 115, 142, 420], "0j": [80, 270, 283, 380], "70710677": [80, 270, 283], "items": [80, 81], "nbyte": 80, "consum": [80, 276], "repres": [80, 81, 125, 144, 287, 316, 427], "setter": [80, 287], "involv": [80, 287], "displac": [80, 291], "upon": [80, 291], "unit": [80, 291], "respect": [80, 291], "s1": [80, 81, 291], "s2": [80, 81, 291], "s3": [80, 291], "i1": [80, 81, 291], "i2": [80, 81, 291], "i3": [80, 291], "sycl_context": 80, "sycl_devic": 80, "align": 81, "homogen": 81, "fundament": 81, "struct": 81, "obj": [81, 125, 151], "dictionari": 81, "comma": 81, "string": [81, 130, 316, 338, 343, 344, 345, 346, 347, 348, 349, 351, 352, 357, 360, 427], "sticki": 81, "isalignedstruct": 81, "just": 81, "built": 81, "int16": 81, "structur": 81, "f1": 81, "unsign": 81, "uint64": 81, "f2": 81, "u8": 81, "i4": 81, "protocol": [81, 125], "f8": 81, "s10": 81, "format": [81, 127, 431], "f0": 81, "void": 81, "flexibl": 81, "hello": 81, "world": [81, 318, 335], "i8": 81, "v10": 81, "subdivid": 81, "int8": [81, 308], "gender": 81, "ag": 81, "uint8": 81, "u1": 81, "25": [81, 88, 135, 138, 172, 196, 205, 345, 354, 413, 414], "surnam": 81, "s25": 81, "new_ord": 81, "forc": 81, "swap": [81, 392], "code": 81, "opposit": 81, "endian": 81, "littl": 81, "big": 81, "nativ": 81, "ignor": [81, 122, 123, 185, 186, 187, 191, 192, 197, 198, 201, 202, 205, 389, 414], "new_dtyp": 81, "sy": 81, "sys_is_l": 81, "byteord": 81, "native_cod": 81, "swapped_cod": 81, "native_dt": 81, "swapped_dt": 81, "l": [81, 158, 162], "subarrai": 81, "regardless": 81, "subdtyp": 81, "8f": 81, "charact": 81, "applic": 81, "dt": 81, "relev": 81, "ascii": 81, "even": [81, 376], "char": 81, "descr": 81, "__array_interface__": 81, "descript": [81, 427], "warn": [81, 197, 198, 334], "directli": [81, 183, 394], "accur": 81, "reconstruct": [81, 171], "str_": 81, "grade": 81, "u16": 81, "fulli": 81, "titl": 81, "32": [81, 133, 397], "present": [81, 201, 202], "unicod": 81, "meta": 81, "notic": 81, "s16": 81, "mask": [81, 305, 313, 393], "multiarrai": 81, "item_hasobject": 81, "list_pickl": 81, "item_is_point": 81, "needs_init": 81, "needs_pyapi": 81, "use_getitem": 81, "use_setitem": 81, "explan": 81, "thei": [81, 163, 402, 427], "user": 81, "particular": 81, "hasobject": 81, "recal": 81, "actual": [81, 158], "address": 81, "pointer": 81, "distinguish": 81, "won": 81, "maintain": [81, 377, 394], "so": [81, 87, 174, 205, 354, 385, 389, 398, 414], "produc": 81, "isbuiltin": 81, "relat": 81, "read": [81, 127, 365, 370], "machineri": 81, "extend": [81, 427], "field1": 81, "isn": 81, "platform": 81, "anyth": 81, "80": [81, 417], "biufcmmosuv": 81, "identifi": 81, "gener": [81, 163, 316, 318, 321, 352, 413, 427, 431], "u": [81, 171], "timedelta": 81, "datetim": 81, "metadata": 81, "readonli": 81, "mappingproxi": 81, "approach": 81, "propag": [81, 122, 123, 185, 186, 191, 192, 201, 202, 203], "although": [81, 398], "guarante": [81, 370], "certain": 81, "project": [81, 309], "featur": 81, "long": 81, "undocu": 81, "well": [81, 127, 318, 335, 354], "aspect": 81, "ad": [81, 431], "datatyp": [81, 166], "dt2": 81, "key2": 81, "value2": 81, "arr2": 81, "clear": 81, "width": 81, "un": 81, "void640": 81, "increas": [81, 91, 413], "walk": 81, "num": [81, 88, 133, 172, 183, 412], "roughli": 81, "precis": [81, 115], "typestr": 81, "item_dtyp": 81, "whose": [81, 163, 374, 405, 408], "retriev": 81, "extra": 81, "impli": 81, "tack": 81, "end": [81, 172], "to_end": 82, "to_begin": 82, "einstein": [83, 84, 145, 184, 303, 397], "summat": [83, 84, 145, 184, 303, 397], "convent": [83, 84, 145, 184, 303, 397], "operand": [83, 84, 145, 303, 397], "lowest": [83, 84, 316, 344], "cost": [83, 84], "contract": [83, 84], "express": [83, 84], "subscript": 84, "greedi": 84, "consid": [84, 148, 166, 316, 344], "intermedi": 84, "scipi": 88, "math": 88, "75": [88, 135, 172], "99532227": 88, "99853728": 88, "99959305": 88, "99989938": 88, "99997791": 88, "718281828": [89, 92], "389056099": [89, 92], "p": [90, 159, 318, 321, 326, 332, 335], "appear": [91, 118, 119], "whenev": [91, 392, 400], "rank": [91, 93, 166, 392], "resid": 91, "henc": 91, "resolv": 91, "newaxi": 91, "minu": [92, 120, 121, 368, 410], "callcul": 92, "00000000005e": 92, "000000082740371e": 92, "elsewher": [94, 141, 402, 417], "fourier": [96, 97, 98, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 420], "transform": [96, 97, 98, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 420], "batch": [97, 99, 103, 104, 108, 109, 111, 113], "sampl": [98, 112, 133, 172, 183, 312, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 350, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 394, 420, 431], "frequenc": [98, 100, 105, 112], "shift": [100, 105, 155, 372, 374], "compon": [100, 105, 115, 143, 309, 366], "center": [100, 105], "spectrum": [100, 105], "signal": [101, 106], "hermitian": [101, 106, 158, 162, 166, 171, 431], "symmetri": [101, 106], "occupi": [115, 142], "ep": [115, 166], "smallest": [115, 142], "represent": [115, 142, 427], "larger": 115, "ieee": 115, "754": 115, "epsneg": 115, "largest": [115, 121, 142, 368], "approxim": 115, "resolut": 115, "tini": 115, "smallest_norm": 115, "finfo_object": 115, "__next__": 116, "__iter__": 116, "revers": [117, 118, 119], "reorder": 117, "left": [118, 119, 155, 168, 359, 372, 377], "down": 119, "toward": [120, 121, 368, 410], "spreadsheet": 120, "definit": [120, 158], "divis": [121, 122, 123, 124, 193, 307, 368], "floordivid": 121, "complementari": [121, 124, 193], "__dlpack__": 125, "dmlc": 125, "github": 125, "io": [125, 173], "dlpack": 125, "__dlpack_device__": 125, "file": [127, 134, 173], "text": [127, 130, 173], "binari": [127, 420, 431], "highli": 127, "effici": [127, 166], "known": [127, 354], "pars": 127, "simpli": 127, "written": 127, "therefor": 128, "fn": 128, "fill_valu": [131, 132], "scale": [133, 172, 183, 316, 323, 325, 327, 328, 329, 330, 338, 350, 355, 362], "progress": [133, 172], "1000": [133, 183, 317, 318, 323, 325, 327, 328, 329, 330, 331, 338, 339, 342, 344, 346, 349, 351, 357, 361, 362, 363, 364], "62341325": 133, "6227766": 133, "177": [133, 183], "827941": [133, 183], "127": 133, "directori": 134, "h": [134, 158, 189], "header": 134, "modul": [134, 420], "vararg": 135, "y1": [135, 401], "bin": [138, 354], "densiti": 138, "dataset": 138, "hist": [138, 354], "bin_edg": 138, "4999999999999996": 138, "tup": [139, 416], "nd": [139, 388, 416], "nest": [139, 388, 416], "leg": 140, "hypotenus": 140, "iinfo_object": 142, "4j": [143, 366], "6j": [143, 366], "spars": [144, 189], "finit": [148, 149, 150, 309], "nat": 150, "arg1": [152, 153], "arg2": [152, 153], "typecod": 152, "hierarchi": 152, "determin": [153, 160, 179, 181, 182], "kroneck": 154, "40": [155, 312, 394], "decomposit": [158, 171, 431], "ordinari": 158, "symmetr": [158, 162, 166], "verifi": 158, "addit": 158, "array_lik": [158, 160, 163, 165, 166, 167, 168, 312, 316, 379, 398, 405, 408], "factor": [158, 169], "fro": 159, "eigenvalu": [161, 162, 163, 431], "eigenvector": [161, 162, 163], "uplo": 162, "w": [162, 163], "ascend": 162, "17157288": 162, "82842712": 162, "92387953": 162, "38268343": 162, "vari": [162, 205], "38268343j": 162, "92387953j": 162, "aren": 163, "necessarili": 163, "nor": [163, 201, 202], "matric": [163, 166, 168, 189], "suppli": [165, 167, 316, 345], "tol": [166, 334], "singular": [166, 171], "threshold": 166, "epsilon": 166, "assum": 166, "enabl": 166, "treat": [167, 199, 203, 204, 308, 309, 312, 394, 398, 427], "ord": 168, "abl": 168, "eight": 168, "infinit": [168, 309], "under": 168, "With": 168, "q": [169, 188], "orthonorm": 169, "r": 169, "equat": [170, 431], "solut": 170, "full_matric": 171, "compute_uv": 171, "unitari": 171, "neither": [171, 201, 202], "vh": 171, "descend": 171, "linalgerror": 171, "2d": 171, "smat": 171, "4d": 171, "retstep": 172, "There": 172, "half": [172, 316, 346, 348, 349, 351, 360, 392], "open": [172, 300, 316, 346, 348, 349, 351, 360, 392], "logarithm": [172, 174, 175, 176, 177, 178, 332, 431], "fname": 173, "stringio": 173, "behav": 173, "n2": 173, "natur": [174, 175, 176, 177, 178], "plu": [174, 175, 176, 177], "30102999566": 175, "69314718": 176, "09861229": 176, "99": [176, 312], "xi": [177, 189], "26618007j": 177, "prob1": 178, "50": [178, 183, 312, 394, 397, 417], "prob2": 178, "5e": 178, "prob12": 178, "113": 178, "87649168": 178, "uniformli": [183, 316, 360], "215": 183, "443469": 183, "464": 183, "15888336": 183, "316": 183, "22776602": 183, "562": 183, "34132519": 183, "0396842": 183, "34960421": 183, "98024613": 183, "72075441": 183, "entir": [185, 191, 201, 202, 205, 389, 391, 414], "maxima": 185, "while": [187, 205, 298, 389, 414], "overwrite_input": 188, "xy": 189, "xn": 189, "nx": 189, "ny": 189, "xv": 189, "yv": 189, "matplotlib": [189, 354], "pyplot": [189, 354], "plt": [189, 354], "xx": 189, "yy": 189, "contourf": 189, "dpnp_iface_arraycr": [190, 300], "mgridclass": 190, "dens": 190, "5j": [190, 300], "minima": 191, "fraction": 194, "remain": [195, 205, 370, 389, 414], "usm": [195, 316, 338, 343, 344, 345, 346, 347, 348, 349, 351, 357, 360, 387], "slice": [197, 198, 201, 202, 311, 312, 394, 407, 427], "trust": [197, 198], "encount": [201, 202], "runtimewarn": [201, 202], "across": 203, "delta": [205, 389, 412, 414], "freedom": [205, 358, 389, 414], "divisor": [205, 389, 414], "5555555555555554": 205, "repr": 245, "136": 248, "272": 248, "408": 248, "out2": 298, "ogridclass": 300, "expon": [307, 342, 431], "125": [307, 413], "effect": 307, "onto": 309, "riemann": 309, "sphere": 309, "magnitud": 309, "7j": 309, "1d": [311, 312, 394], "contrast": 311, "cyclic": 311, "clamp": [311, 393], "boundari": 311, "44": 311, "55": 311, "22": 311, "ni": [312, 394], "nk": [312, 394], "nj": [312, 394], "had": [312, 394], "been": [312, 375, 394], "everi": [312, 394], "deg": 315, "52359878": 315, "04719755": 315, "0943951": 315, "61799388": 315, "mersenn": 316, "twister": 316, "pseudo": 316, "maximumum": [316, 352], "sycldevic": [316, 338, 343, 344, 345, 346, 347, 348, 349, 351, 352, 357, 360], "syclqueu": [316, 338, 343, 344, 345, 346, 347, 348, 349, 351, 352, 357, 360], "concept": [316, 338, 343, 344, 345, 346, 347, 348, 349, 351, 352, 357, 360, 427], "oneapi": [316, 338, 343, 344, 345, 346, 347, 348, 349, 351, 352, 357, 360], "filter": [316, 338, 343, 344, 345, 346, 347, 348, 349, 351, 352, 357, 360], "selector": [316, 338, 343, 344, 345, 346, 347, 348, 349, 351, 352, 357, 360], "intern": 316, "state": 316, "get_sycl_queu": 316, "loc": [316, 327, 329, 330, 338, 362], "draw": [316, 317, 318, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 344, 350, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363], "gaussian": [316, 338, 362], "share": [316, 338, 343, 344, 345, 346, 347, 348, 349, 351, 357, 360], "drawn": [316, 317, 318, 320, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 338, 339, 341, 342, 344, 347, 350, 356, 357, 358, 359, 360, 361, 362, 363, 364, 378], "parameter": [316, 338, 360], "58997253": 316, "84288406": 316, "33836967": 316, "16394577": 316, "40882036": 316, "39295758": 316, "48927254": 316, "74921661": 316, "13436424": 316, "56920387": 316, "84743374": 316, "80226506": 316, "76377462": 316, "06310682": 316, "25506903": 316, "1179187": 316, "49543509": 316, "76096244": 316, "low": [316, 344, 347, 360, 427], "high": [316, 344, 347, 360], "inclus": [316, 344, 347], "exclus": [316, 344], "omit": [316, 344, 417], "d0": [316, 343, 345], "d1": [316, 345], "dn": [316, 343, 345], "84401099": 316, "four": [316, 345], "88997253": 316, "54288406": 316, "63836967": 316, "46394577": 316, "70882036": 316, "69295758": 316, "78927254": 316, "04921661": 316, "continu": [316, 348], "stdev": [316, 357], "81715362": 316, "54465213": 316, "18557831": 316, "28352814": 316, "67718303": 316, "11570901": 316, "21968665": 316, "18236388": 316, "08156915": 316, "21941987": 316, "24544512": 316, "63522211": 316, "673174": 316, "54": 316, "48093112": 316, "52928804": 316, "1196081": 316, "6990877": 316, "34074171": 316, "conveni": 316, "accept": 316, "alpha": [317, 322, 323, 339, 342], "trial": 318, "probabl": [318, 326, 335], "coin": 318, "compani": [318, 335], "drill": [318, 335], "wild": [318, 335], "cat": [318, 335], "oil": [318, 335], "explor": [318, 335], "success": [318, 326, 335], "nine": 318, "fail": 318, "let": 318, "000": 318, "model": 318, "20000": 318, "answer": 318, "38885": 318, "38": 318, "fallback": [319, 321, 322, 332, 337, 353], "df": [320, 336, 358, 359], "chi": [320, 336], "89920014": 320, "00867716": 320, "13710533": 320, "62318272": 320, "dfnum": [324, 337], "dfden": [324, 337], "ten": 326, "thousand": 326, "individu": 326, "10000": [326, 341, 350, 360], "mu": [327, 331, 338, 361], "ngood": 328, "nbad": 328, "nsampl": 328, "nsamp": 328, "good": 328, "bad": 328, "decai": 329, "sigma": [331, 338], "seri": 332, "pval": 333, "iinfo": 333, "throw": 333, "dice": 333, "check_valid": 334, "multivari": 334, "after": 335, "100000": 335, "nonc": [336, 337], "noncentr": [336, 337], "todo": 336, "ii": 339, "lomax": 339, "randomli": 340, "lam": 341, "randomst": 344, "1923875335537315": 345, "rese": 352, "legaci": 352, "mt19937": 352, "engin": 352, "cauchi": 354, "lorentz": 354, "plot": 354, "1000000": [354, 356, 358, 359], "3x8000": 355, "8000": 355, "student": 358, "kappa": 361, "von": 361, "mise": 361, "dispers": 361, "pack": [365, 431], "fastest": [365, 370], "back": [365, 370], "slowest": [365, 370], "subtyp": 365, "33": 367, "3003003": 367, "fit": 369, "rep": [369, 398], "newshap": 370, "infer": 370, "write": 370, "account": 370, "underli": 370, "never": 370, "reus": 370, "unspecifi": 370, "arrays_and_dtyp": 371, "introduc": 374, "rel": 374, "li": [374, 375], "reposit": 375, "desir": [375, 398], "37": 376, "side": 377, "sorter": 377, "condlist": 378, "choicelist": 378, "howev": 380, "742278e": 382, "3012989": 383, "548739": 383, "rsqrt": 385, "traceback": 387, "recent": 387, "nput": 389, "nonneg": [389, 414], "118033988749895": 389, "bound": 393, "fanci": 393, "trivial": 394, "ai_min": 394, "ai_max": 394, "22460635e": 395, "63317787e": 395, "996272": 396, "917152": 396, "replic": 398, "thu": 398, "dx": 401, "composit": 401, "trapezoid": 401, "ind": [404, 407], "complement": 412, "phase": 412, "49778714": 412, "28318531": 412, "vandermond": 413, "form": 416, "chosen": 417, "70": 417, "algebra": [420, 431], "mathemat": [420, 431], "statist": [420, 431], "summari": 420, "level": [420, 427], "util": 420, "counterpart": 427, "basic": [427, 431], "constructor": 427, "syntax": 427, "reflect": 427, "intrins": 427, "sometim": 427, "expos": 427, "them": 427, "reset": 427, "meaningfulli": 427, "associ": 427, "mani": 427, "fashion": 427, "typic": 427, "briefli": 427, "explain": 427, "docstr": 427, "proce": 427, "pow": 427, "short": 427, "unari": 427, "custom": 427, "cover": 431, "elementwis": [431, 435], "helper": 431, "ration": 431, "extrema": 431, "dparrai": 432, "variou": 435}, "objects": {"": [[3, 0, 0, "-", "dpnp"]], "dpnp": [[11, 1, 1, "", "abs"], [12, 1, 1, "", "absolute"], [13, 1, 1, "", "add"], [14, 1, 1, "", "all"], [15, 1, 1, "", "allclose"], [16, 1, 1, "", "amax"], [17, 1, 1, "", "amin"], [18, 1, 1, "", "any"], [19, 1, 1, "", "arange"], [20, 1, 1, "", "arccos"], [21, 1, 1, "", "arccosh"], [22, 1, 1, "", "arcsin"], [23, 1, 1, "", "arcsinh"], [24, 1, 1, "", "arctan"], [25, 1, 1, "", "arctan2"], [26, 1, 1, "", "arctanh"], [27, 1, 1, "", "argmax"], [28, 1, 1, "", "argmin"], [29, 1, 1, "", "argsort"], [30, 1, 1, "", "around"], [31, 1, 1, "", "array"], [32, 1, 1, "", "array_equal"], [33, 1, 1, "", "asanyarray"], [34, 1, 1, "", "asarray"], [35, 1, 1, "", "ascontiguousarray"], [36, 1, 1, "", "asfarray"], [37, 1, 1, "", "asfortranarray"], [38, 1, 1, "", "asnumpy"], [39, 1, 1, "", "atleast_1d"], [40, 1, 1, "", "atleast_2d"], [41, 1, 1, "", "atleast_3d"], [42, 1, 1, "", "average"], [43, 1, 1, "", "bincount"], [44, 1, 1, "", "bitwise_and"], [45, 1, 1, "", "bitwise_not"], [46, 1, 1, "", "bitwise_or"], [47, 1, 1, "", "bitwise_xor"], [48, 1, 1, "", "broadcast_arrays"], [49, 1, 1, "", "broadcast_to"], [50, 1, 1, "", "can_cast"], [51, 1, 1, "", "cbrt"], [52, 1, 1, "", "ceil"], [53, 1, 1, "", "choose"], [54, 1, 1, "", "clip"], [55, 1, 1, "", "concatenate"], [56, 1, 1, "", "conj"], [57, 1, 1, "", "conjugate"], [58, 1, 1, "", "convolve"], [59, 1, 1, "", "copy"], [60, 1, 1, "", "copysign"], [61, 1, 1, "", "copyto"], [62, 1, 1, "", "correlate"], [63, 1, 1, "", "cos"], [64, 1, 1, "", "cosh"], [65, 1, 1, "", "count_nonzero"], [66, 1, 1, "", "cov"], [67, 1, 1, "", "cross"], [68, 1, 1, "", "cumprod"], [69, 1, 1, "", "cumsum"], [70, 1, 1, "", "deg2rad"], [71, 1, 1, "", "degrees"], [72, 1, 1, "", "diag"], [73, 1, 1, "", "diag_indices"], [74, 1, 1, "", "diag_indices_from"], [75, 1, 1, "", "diagflat"], [76, 1, 1, "", "diagonal"], [77, 1, 1, "", "diff"], [78, 1, 1, "", "divide"], [79, 1, 1, "", "dot"], [81, 2, 1, "", "dtype"], [82, 1, 1, "", "ediff1d"], [83, 1, 1, "", "einsum"], [84, 1, 1, "", "einsum_path"], [85, 1, 1, "", "empty"], [86, 1, 1, "", "empty_like"], [87, 1, 1, "", "equal"], [88, 1, 1, "", "erf"], [89, 1, 1, "", "exp"], [90, 1, 1, "", "exp2"], [91, 1, 1, "", "expand_dims"], [92, 1, 1, "", "expm1"], [93, 1, 1, "", "extract"], [94, 1, 1, "", "eye"], [95, 1, 1, "", "fabs"], [10, 0, 0, "-", "fft"], [114, 1, 1, "", "fill_diagonal"], [115, 1, 1, "", "finfo"], [116, 2, 1, "", "flatiter"], [117, 1, 1, "", "flip"], [118, 1, 1, "", "fliplr"], [119, 1, 1, "", "flipud"], [120, 1, 1, "", "floor"], [121, 1, 1, "", "floor_divide"], [122, 1, 1, "", "fmax"], [123, 1, 1, "", "fmin"], [124, 1, 1, "", "fmod"], [125, 1, 1, "", "from_dlpack"], [126, 1, 1, "", "frombuffer"], [127, 1, 1, "", "fromfile"], [128, 1, 1, "", "fromfunction"], [129, 1, 1, "", "fromiter"], [130, 1, 1, "", "fromstring"], [131, 1, 1, "", "full"], [132, 1, 1, "", "full_like"], [133, 1, 1, "", "geomspace"], [134, 1, 1, "", "get_include"], [135, 1, 1, "", "gradient"], [136, 1, 1, "", "greater"], [137, 1, 1, "", "greater_equal"], [138, 1, 1, "", "histogram"], [139, 1, 1, "", "hstack"], [140, 1, 1, "", "hypot"], [141, 1, 1, "", "identity"], [142, 1, 1, "", "iinfo"], [143, 1, 1, "", "imag"], [144, 1, 1, "", "indices"], [145, 1, 1, "", "inner"], [146, 1, 1, "", "invert"], [147, 1, 1, "", "isclose"], [148, 1, 1, "", "isfinite"], [149, 1, 1, "", "isinf"], [150, 1, 1, "", "isnan"], [151, 1, 1, "", "isscalar"], [152, 1, 1, "", "issubdtype"], [153, 1, 1, "", "issubsctype"], [154, 1, 1, "", "kron"], [155, 1, 1, "", "left_shift"], [156, 1, 1, "", "less"], [157, 1, 1, "", "less_equal"], [172, 1, 1, "", "linspace"], [173, 1, 1, "", "loadtxt"], [174, 1, 1, "", "log"], [175, 1, 1, "", "log10"], [176, 1, 1, "", "log1p"], [177, 1, 1, "", "log2"], [178, 1, 1, "", "logaddexp"], [179, 1, 1, "", "logical_and"], [180, 1, 1, "", "logical_not"], [181, 1, 1, "", "logical_or"], [182, 1, 1, "", "logical_xor"], [183, 1, 1, "", "logspace"], [184, 1, 1, "", "matmul"], [185, 1, 1, "", "max"], [186, 1, 1, "", "maximum"], [187, 1, 1, "", "mean"], [188, 1, 1, "", "median"], [189, 1, 1, "", "meshgrid"], [190, 5, 1, "", "mgrid"], [191, 1, 1, "", "min"], [192, 1, 1, "", "minimum"], [193, 1, 1, "", "mod"], [194, 1, 1, "", "modf"], [195, 1, 1, "", "moveaxis"], [196, 1, 1, "", "multiply"], [197, 1, 1, "", "nanargmax"], [198, 1, 1, "", "nanargmin"], [199, 1, 1, "", "nancumprod"], [200, 1, 1, "", "nancumsum"], [201, 1, 1, "", "nanmax"], [202, 1, 1, "", "nanmin"], [203, 1, 1, "", "nanprod"], [204, 1, 1, "", "nansum"], [205, 1, 1, "", "nanvar"], [206, 3, 1, "", "ndarray"], [297, 1, 1, "", "negative"], [298, 1, 1, "", "nonzero"], [299, 1, 1, "", "not_equal"], [300, 5, 1, "", "ogrid"], [301, 1, 1, "", "ones"], [302, 1, 1, "", "ones_like"], [303, 1, 1, "", "outer"], [304, 1, 1, "", "partition"], [305, 1, 1, "", "place"], [306, 1, 1, "", "positive"], [307, 1, 1, "", "power"], [308, 1, 1, "", "prod"], [309, 1, 1, "", "proj"], [310, 1, 1, "", "ptp"], [311, 1, 1, "", "put"], [312, 1, 1, "", "put_along_axis"], [313, 1, 1, "", "putmask"], [314, 1, 1, "", "rad2deg"], [315, 1, 1, "", "radians"], [430, 0, 0, "-", "random"], [365, 1, 1, "", "ravel"], [366, 1, 1, "", "real"], [367, 1, 1, "", "reciprocal"], [368, 1, 1, "", "remainder"], [369, 1, 1, "", "repeat"], [370, 1, 1, "", "reshape"], [371, 1, 1, "", "result_type"], [372, 1, 1, "", "right_shift"], [373, 1, 1, "", "rint"], [374, 1, 1, "", "roll"], [375, 1, 1, "", "rollaxis"], [376, 1, 1, "", "round"], [377, 1, 1, "", "searchsorted"], [378, 1, 1, "", "select"], [379, 1, 1, "", "shape"], [380, 1, 1, "", "sign"], [381, 1, 1, "", "signbit"], [382, 1, 1, "", "sin"], [383, 1, 1, "", "sinh"], [384, 1, 1, "", "sort"], [385, 1, 1, "", "sqrt"], [386, 1, 1, "", "square"], [387, 1, 1, "", "squeeze"], [388, 1, 1, "", "stack"], [389, 1, 1, "", "std"], [390, 1, 1, "", "subtract"], [391, 1, 1, "", "sum"], [392, 1, 1, "", "swapaxes"], [393, 1, 1, "", "take"], [394, 1, 1, "", "take_along_axis"], [395, 1, 1, "", "tan"], [396, 1, 1, "", "tanh"], [397, 1, 1, "", "tensordot"], [398, 1, 1, "", "tile"], [399, 1, 1, "", "trace"], [400, 1, 1, "", "transpose"], [401, 1, 1, "", "trapz"], [402, 1, 1, "", "tri"], [403, 1, 1, "", "tril"], [404, 1, 1, "", "tril_indices"], [405, 1, 1, "", "tril_indices_from"], [406, 1, 1, "", "triu"], [407, 1, 1, "", "triu_indices"], [408, 1, 1, "", "triu_indices_from"], [409, 1, 1, "", "true_divide"], [410, 1, 1, "", "trunc"], [411, 1, 1, "", "unique"], [412, 1, 1, "", "unwrap"], [413, 1, 1, "", "vander"], [414, 1, 1, "", "var"], [415, 1, 1, "", "vdot"], [416, 1, 1, "", "vstack"], [417, 1, 1, "", "where"], [418, 1, 1, "", "zeros"], [419, 1, 1, "", "zeros_like"]], "dpnp.dpnp_array": [[80, 2, 1, "", "dpnp_array"]], "dpnp.dpnp_array.dpnp_array": [[80, 3, 1, "", "T"], [80, 4, 1, "", "__eq__"], [80, 4, 1, "", "__ge__"], [80, 4, 1, "", "__getitem__"], [80, 4, 1, "", "__gt__"], [80, 4, 1, "", "__le__"], [80, 4, 1, "", "__len__"], [80, 4, 1, "", "__lt__"], [80, 4, 1, "", "__ne__"], [80, 4, 1, "", "__setitem__"], [80, 4, 1, "", "all"], [80, 4, 1, "", "any"], [80, 4, 1, "", "argmax"], [80, 4, 1, "", "argmin"], [80, 4, 1, "", "argsort"], [80, 4, 1, "", "asnumpy"], [80, 4, 1, "", "astype"], [80, 4, 1, "", "choose"], [80, 4, 1, "", "clip"], [80, 4, 1, "", "conj"], [80, 4, 1, "", "conjugate"], [80, 4, 1, "", "copy"], [80, 4, 1, "", "cumsum"], [80, 3, 1, "", "device"], [80, 4, 1, "", "diagonal"], [80, 4, 1, "", "dot"], [80, 3, 1, "", "dtype"], [80, 4, 1, "", "fill"], [80, 3, 1, "", "flags"], [80, 3, 1, "", "flat"], [80, 4, 1, "", "flatten"], [80, 4, 1, "", "get_array"], [80, 3, 1, "", "imag"], [80, 4, 1, "", "item"], [80, 3, 1, "", "itemsize"], [80, 4, 1, "", "max"], [80, 4, 1, "", "mean"], [80, 4, 1, "", "min"], [80, 3, 1, "", "nbytes"], [80, 3, 1, "", "ndim"], [80, 4, 1, "", "nonzero"], [80, 4, 1, "", "partition"], [80, 4, 1, "", "prod"], [80, 4, 1, "", "put"], [80, 4, 1, "", "ravel"], [80, 3, 1, "", "real"], [80, 4, 1, "", "repeat"], [80, 4, 1, "", "reshape"], [80, 4, 1, "", "round"], [80, 3, 1, "", "shape"], [80, 3, 1, "", "size"], [80, 4, 1, "", "squeeze"], [80, 4, 1, "", "std"], [80, 3, 1, "", "strides"], [80, 4, 1, "", "sum"], [80, 4, 1, "", "swapaxes"], [80, 3, 1, "", "sycl_context"], [80, 3, 1, "", "sycl_device"], [80, 3, 1, "", "sycl_queue"], [80, 4, 1, "", "take"], [80, 4, 1, "", "to_device"], [80, 4, 1, "", "transpose"], [80, 3, 1, "", "usm_type"], [80, 4, 1, "", "var"]], "dpnp.dtype": [[81, 4, 1, "", "__eq__"], [81, 4, 1, "", "__ge__"], [81, 4, 1, "", "__getitem__"], [81, 4, 1, "", "__gt__"], [81, 4, 1, "", "__le__"], [81, 4, 1, "", "__len__"], [81, 4, 1, "", "__lt__"], [81, 4, 1, "", "__ne__"], [81, 3, 1, "", "alignment"], [81, 3, 1, "", "base"], [81, 3, 1, "", "byteorder"], [81, 3, 1, "", "char"], [81, 3, 1, "", "descr"], [81, 3, 1, "", "fields"], [81, 3, 1, "", "flags"], [81, 3, 1, "", "hasobject"], [81, 3, 1, "", "isalignedstruct"], [81, 3, 1, "", "isbuiltin"], [81, 3, 1, "", "isnative"], [81, 3, 1, "", "itemsize"], [81, 3, 1, "", "kind"], [81, 3, 1, "", "metadata"], [81, 3, 1, "", "name"], [81, 3, 1, "", "names"], [81, 3, 1, "", "ndim"], [81, 4, 1, "", "newbyteorder"], [81, 3, 1, "", "num"], [81, 3, 1, "", "shape"], [81, 3, 1, "", "str"], [81, 3, 1, "", "subdtype"], [81, 3, 1, "", "type"]], "dpnp.fft": [[96, 1, 1, "", "fft"], [97, 1, 1, "", "fft2"], [98, 1, 1, "", "fftfreq"], [99, 1, 1, "", "fftn"], [100, 1, 1, "", "fftshift"], [101, 1, 1, "", "hfft"], [102, 1, 1, "", "ifft"], [103, 1, 1, "", "ifft2"], [104, 1, 1, "", "ifftn"], [105, 1, 1, "", "ifftshift"], [106, 1, 1, "", "ihfft"], [107, 1, 1, "", "irfft"], [108, 1, 1, "", "irfft2"], [109, 1, 1, "", "irfftn"], [110, 1, 1, "", "rfft"], [111, 1, 1, "", "rfft2"], [112, 1, 1, "", "rfftfreq"], [113, 1, 1, "", "rfftn"]], "dpnp.flatiter": [[116, 4, 1, "", "__eq__"], [116, 4, 1, "", "__ge__"], [116, 4, 1, "", "__getitem__"], [116, 4, 1, "", "__gt__"], [116, 4, 1, "", "__iter__"], [116, 4, 1, "", "__le__"], [116, 4, 1, "", "__lt__"], [116, 4, 1, "", "__ne__"], [116, 4, 1, "", "__next__"], [116, 4, 1, "", "__setitem__"]], "dpnp.linalg": [[158, 1, 1, "", "cholesky"], [159, 1, 1, "", "cond"], [160, 1, 1, "", "det"], [161, 1, 1, "", "eig"], [162, 1, 1, "", "eigh"], [163, 1, 1, "", "eigvals"], [164, 1, 1, "", "inv"], [165, 1, 1, "", "matrix_power"], [166, 1, 1, "", "matrix_rank"], [167, 1, 1, "", "multi_dot"], [168, 1, 1, "", "norm"], [169, 1, 1, "", "qr"], [170, 1, 1, "", "solve"], [171, 1, 1, "", "svd"]], "dpnp.ndarray": [[207, 6, 1, "", "T"], [208, 4, 1, "", "__abs__"], [209, 4, 1, "", "__add__"], [210, 4, 1, "", "__and__"], [211, 4, 1, "", "__complex__"], [212, 4, 1, "", "__copy__"], [213, 4, 1, "", "__eq__"], [214, 4, 1, "", "__float__"], [215, 4, 1, "", "__floordiv__"], [216, 4, 1, "", "__ge__"], [217, 4, 1, "", "__getitem__"], [218, 4, 1, "", "__gt__"], [219, 4, 1, "", "__iadd__"], [220, 4, 1, "", "__iand__"], [221, 4, 1, "", "__ifloordiv__"], [222, 4, 1, "", "__ilshift__"], [223, 4, 1, "", "__imod__"], [224, 4, 1, "", "__imul__"], [225, 4, 1, "", "__int__"], [226, 4, 1, "", "__invert__"], [227, 4, 1, "", "__ior__"], [228, 4, 1, "", "__ipow__"], [229, 4, 1, "", "__irshift__"], [230, 4, 1, "", "__isub__"], [231, 4, 1, "", "__itruediv__"], [232, 4, 1, "", "__ixor__"], [233, 4, 1, "", "__le__"], [234, 4, 1, "", "__len__"], [235, 4, 1, "", "__lshift__"], [236, 4, 1, "", "__lt__"], [237, 4, 1, "", "__mod__"], [238, 4, 1, "", "__mul__"], [239, 4, 1, "", "__ne__"], [240, 4, 1, "", "__neg__"], [241, 4, 1, "", "__new__"], [242, 4, 1, "", "__or__"], [243, 4, 1, "", "__pos__"], [244, 4, 1, "", "__pow__"], [245, 4, 1, "", "__repr__"], [246, 4, 1, "", "__rshift__"], [247, 4, 1, "", "__setitem__"], [248, 4, 1, "", "__str__"], [249, 4, 1, "", "__sub__"], [250, 4, 1, "", "__truediv__"], [251, 4, 1, "", "__xor__"], [252, 4, 1, "", "all"], [253, 4, 1, "", "any"], [254, 4, 1, "", "argmax"], [255, 4, 1, "", "argmin"], [256, 4, 1, "", "argsort"], [257, 4, 1, "", "astype"], [258, 4, 1, "", "choose"], [259, 4, 1, "", "clip"], [260, 4, 1, "", "conj"], [261, 4, 1, "", "conjugate"], [262, 4, 1, "", "copy"], [263, 4, 1, "", "cumsum"], [264, 4, 1, "", "diagonal"], [265, 6, 1, "", "dtype"], [266, 4, 1, "", "fill"], [267, 6, 1, "", "flags"], [268, 6, 1, "", "flat"], [269, 4, 1, "", "flatten"], [270, 6, 1, "", "imag"], [271, 4, 1, "", "item"], [272, 6, 1, "", "itemsize"], [273, 4, 1, "", "max"], [274, 4, 1, "", "mean"], [275, 4, 1, "", "min"], [276, 6, 1, "", "nbytes"], [277, 6, 1, "", "ndim"], [278, 4, 1, "", "nonzero"], [279, 4, 1, "", "partition"], [280, 4, 1, "", "prod"], [281, 4, 1, "", "put"], [282, 4, 1, "", "ravel"], [283, 6, 1, "", "real"], [284, 4, 1, "", "repeat"], [285, 4, 1, "", "reshape"], [286, 4, 1, "", "round"], [287, 6, 1, "", "shape"], [288, 6, 1, "", "size"], [289, 4, 1, "", "squeeze"], [290, 4, 1, "", "std"], [291, 6, 1, "", "strides"], [292, 4, 1, "", "sum"], [293, 4, 1, "", "swapaxes"], [294, 4, 1, "", "take"], [295, 4, 1, "", "transpose"], [296, 4, 1, "", "var"]], "dpnp.random": [[316, 2, 1, "", "RandomState"], [317, 1, 1, "", "beta"], [318, 1, 1, "", "binomial"], [319, 1, 1, "", "bytes"], [320, 1, 1, "", "chisquare"], [321, 1, 1, "", "choice"], [322, 1, 1, "", "dirichlet"], [323, 1, 1, "", "exponential"], [324, 1, 1, "", "f"], [325, 1, 1, "", "gamma"], [326, 1, 1, "", "geometric"], [327, 1, 1, "", "gumbel"], [328, 1, 1, "", "hypergeometric"], [329, 1, 1, "", "laplace"], [330, 1, 1, "", "logistic"], [331, 1, 1, "", "lognormal"], [332, 1, 1, "", "logseries"], [333, 1, 1, "", "multinomial"], [334, 1, 1, "", "multivariate_normal"], [335, 1, 1, "", "negative_binomial"], [336, 1, 1, "", "noncentral_chisquare"], [337, 1, 1, "", "noncentral_f"], [338, 1, 1, "", "normal"], [339, 1, 1, "", "pareto"], [340, 1, 1, "", "permutation"], [341, 1, 1, "", "poisson"], [342, 1, 1, "", "power"], [343, 1, 1, "", "rand"], [344, 1, 1, "", "randint"], [345, 1, 1, "", "randn"], [346, 1, 1, "", "random"], [347, 1, 1, "", "random_integers"], [348, 1, 1, "", "random_sample"], [349, 1, 1, "", "ranf"], [350, 1, 1, "", "rayleigh"], [351, 1, 1, "", "sample"], [352, 1, 1, "", "seed"], [353, 1, 1, "", "shuffle"], [354, 1, 1, "", "standard_cauchy"], [355, 1, 1, "", "standard_exponential"], [356, 1, 1, "", "standard_gamma"], [357, 1, 1, "", "standard_normal"], [358, 1, 1, "", "standard_t"], [359, 1, 1, "", "triangular"], [360, 1, 1, "", "uniform"], [361, 1, 1, "", "vonmises"], [362, 1, 1, "", "wald"], [363, 1, 1, "", "weibull"], [364, 1, 1, "", "zipf"]], "dpnp.random.RandomState": [[316, 4, 1, "", "__eq__"], [316, 4, 1, "", "__ge__"], [316, 4, 1, "", "__gt__"], [316, 4, 1, "", "__le__"], [316, 4, 1, "", "__lt__"], [316, 4, 1, "", "__ne__"], [316, 4, 1, "", "get_state"], [316, 4, 1, "", "get_sycl_device"], [316, 4, 1, "", "get_sycl_queue"], [316, 4, 1, "", "normal"], [316, 4, 1, "", "rand"], [316, 4, 1, "", "randint"], [316, 4, 1, "", "randn"], [316, 4, 1, "", "random_sample"], [316, 4, 1, "", "standard_normal"], [316, 4, 1, "", "uniform"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:attribute", "4": "py:method", "5": "py:data", "6": "py:property"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "method", "Python method"], "5": ["py", "data", "Python data"], "6": ["py", "property", "Python property"]}, "titleterms": {"interplai": 0, "data": [0, 2, 7, 8, 9, 421, 427, 430], "parallel": [0, 2], "control": 0, "librari": 0, "exampl": [0, 4], "c": 1, "backend": 1, "api": [1, 420], "refer": [1, 420], "extens": 2, "numpi": [2, 6], "develop": 2, "inform": [2, 8], "overview": 3, "quick": 4, "start": 4, "guid": 4, "devic": 4, "driver": 4, "python": 4, "interpret": 4, "instal": 4, "packag": [4, 429], "from": [4, 7], "anaconda": 4, "build": 4, "conda": 4, "scikit": 4, "test": [4, 8, 423], "binari": 5, "oper": [5, 421, 423, 424, 425, 427, 435], "elementwis": 5, "bit": [5, 435], "pack": 5, "output": 5, "format": 5, "comparison": [6, 423, 427, 435], "tabl": 6, "dpnp": [6, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 430], "cupi": 6, "summari": 6, "modul": [6, 429], "level": 6, "multi": [6, 427], "dimension": [6, 427], "arrai": [6, 7, 9, 31, 421, 423, 424, 427], "linear": [6, 422], "algebra": [6, 422], "discret": 6, "fourier": 6, "transform": 6, "random": [6, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 430], "sampl": [6, 351, 430], "creation": 7, "routin": [7, 8, 10, 421, 424, 425, 426, 431], "basic": [7, 424, 429], "other": [7, 422, 425, 427], "numer": 7, "rang": 7, "matrix": [7, 422, 427], "The": 7, "class": 7, "type": [8, 9, 423, 427], "creat": 8, "miscellan": [8, 425, 426], "avail": [9, 435], "fft": [10, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113], "function": [10, 423, 425, 433, 434, 435], "standard": 10, "real": [10, 283, 366], "hermitian": 10, "helper": 10, "ab": 11, "absolut": 12, "add": 13, "all": [14, 252], "allclos": 15, "amax": 16, "amin": 17, "ani": [18, 253], "arang": 19, "arcco": 20, "arccosh": 21, "arcsin": 22, "arcsinh": 23, "arctan": 24, "arctan2": 25, "arctanh": 26, "argmax": [27, 254], "argmin": [28, 255], "argsort": [29, 256], "around": 30, "array_equ": 32, "asanyarrai": 33, "asarrai": 34, "ascontiguousarrai": 35, "asfarrai": 36, "asfortranarrai": 37, "asnumpi": 38, "atleast_1d": 39, "atleast_2d": 40, "atleast_3d": 41, "averag": [42, 434], "bincount": 43, "bitwise_and": 44, "bitwise_not": 45, "bitwise_or": 46, "bitwise_xor": 47, "broadcast_arrai": 48, "broadcast_to": 49, "can_cast": 50, "cbrt": 51, "ceil": 52, "choos": [53, 258], "clip": [54, 259], "concaten": 55, "conj": [56, 260], "conjug": [57, 261], "convolv": 58, "copi": [59, 262], "copysign": 60, "copyto": 61, "correl": [62, 434], "co": 63, "cosh": 64, "count_nonzero": 65, "cov": 66, "cross": 67, "cumprod": 68, "cumsum": [69, 263], "deg2rad": 70, "degre": 71, "diag": 72, "diag_indic": 73, "diag_indices_from": 74, "diagflat": 75, "diagon": [76, 264], "diff": 77, "divid": 78, "dot": 79, "dpnp_arrai": 80, "dtype": [81, 265], "ediff1d": 82, "einsum": 83, "einsum_path": 84, "empti": 85, "empty_lik": 86, "equal": 87, "erf": 88, "exp": 89, "exp2": 90, "expand_dim": 91, "expm1": 92, "extract": 93, "ey": 94, "fab": 95, "fft2": 97, "fftfreq": 98, "fftn": 99, "fftshift": 100, "hfft": 101, "ifft": 102, "ifft2": 103, "ifftn": 104, "ifftshift": 105, "ihfft": 106, "irfft": 107, "irfft2": 108, "irfftn": 109, "rfft": 110, "rfft2": 111, "rfftfreq": 112, "rfftn": 113, "fill_diagon": 114, "finfo": 115, "flatit": 116, "flip": 117, "fliplr": 118, "flipud": 119, "floor": 120, "floor_divid": 121, "fmax": 122, "fmin": 123, "fmod": 124, "from_dlpack": 125, "frombuff": 126, "fromfil": 127, "fromfunct": 128, "fromit": 129, "fromstr": 130, "full": 131, "full_lik": 132, "geomspac": 133, "get_includ": 134, "gradient": 135, "greater": 136, "greater_equ": 137, "histogram": [138, 434], "hstack": 139, "hypot": 140, "ident": 141, "iinfo": 142, "imag": [143, 270], "indic": 144, "inner": 145, "invert": 146, "isclos": 147, "isfinit": 148, "isinf": 149, "isnan": 150, "isscalar": 151, "issubdtyp": 152, "issubsctyp": 153, "kron": 154, "left_shift": 155, "less": 156, "less_equ": 157, "linalg": [158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171], "choleski": 158, "cond": 159, "det": 160, "eig": 161, "eigh": 162, "eigval": 163, "inv": 164, "matrix_pow": 165, "matrix_rank": 166, "multi_dot": 167, "norm": [168, 422], "qr": 169, "solv": [170, 422], "svd": 171, "linspac": 172, "loadtxt": 173, "log": 174, "log10": 175, "log1p": 176, "log2": 177, "logaddexp": 178, "logical_and": 179, "logical_not": 180, "logical_or": 181, "logical_xor": 182, "logspac": 183, "matmul": 184, "max": [185, 273], "maximum": 186, "mean": [187, 274], "median": 188, "meshgrid": 189, "mgrid": 190, "min": [191, 275], "minimum": 192, "mod": 193, "modf": 194, "moveaxi": 195, "multipli": 196, "nanargmax": 197, "nanargmin": 198, "nancumprod": 199, "nancumsum": 200, "nanmax": 201, "nanmin": 202, "nanprod": 203, "nansum": 204, "nanvar": 205, "ndarrai": [206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 427], "t": 207, "__abs__": 208, "__add__": 209, "__and__": 210, "__complex__": 211, "__copy__": 212, "__eq__": 213, "__float__": 214, "__floordiv__": 215, "__ge__": 216, "__getitem__": 217, "__gt__": 218, "__iadd__": 219, "__iand__": 220, "__ifloordiv__": 221, "__ilshift__": 222, "__imod__": 223, "__imul__": 224, "__int__": 225, "__invert__": 226, "__ior__": 227, "__ipow__": 228, "__irshift__": 229, "__isub__": 230, "__itruediv__": 231, "__ixor__": 232, "__le__": 233, "__len__": 234, "__lshift__": 235, "__lt__": 236, "__mod__": 237, "__mul__": 238, "__ne__": 239, "__neg__": 240, "__new__": 241, "__or__": 242, "__pos__": 243, "__pow__": 244, "__repr__": 245, "__rshift__": 246, "__setitem__": 247, "__str__": 248, "__sub__": 249, "__truediv__": 250, "__xor__": 251, "astyp": 257, "fill": 266, "flag": 267, "flat": 268, "flatten": 269, "item": [271, 427], "items": 272, "nbyte": 276, "ndim": 277, "nonzero": [278, 298], "partit": [279, 304], "prod": [280, 308], "put": [281, 311], "ravel": [282, 365], "repeat": [284, 369], "reshap": [285, 370], "round": [286, 376, 425], "shape": [287, 379, 424, 427], "size": 288, "squeez": [289, 387], "std": [290, 389], "stride": 291, "sum": [292, 391, 425], "swapax": [293, 392], "take": [294, 393], "transpos": [295, 400, 424], "var": [296, 414], "neg": 297, "not_equ": 299, "ogrid": 300, "ones": 301, "ones_lik": 302, "outer": 303, "place": 305, "posit": 306, "power": [307, 342], "proj": 309, "ptp": 310, "put_along_axi": 312, "putmask": 313, "rad2deg": 314, "radian": 315, "randomst": 316, "beta": 317, "binomi": 318, "byte": 319, "chisquar": 320, "choic": 321, "dirichlet": 322, "exponenti": 323, "f": 324, "gamma": 325, "geometr": 326, "gumbel": 327, "hypergeometr": 328, "laplac": 329, "logist": 330, "lognorm": 331, "logseri": 332, "multinomi": 333, "multivariate_norm": 334, "negative_binomi": 335, "noncentral_chisquar": 336, "noncentral_f": 337, "normal": 338, "pareto": 339, "permut": [340, 430], "poisson": 341, "rand": 343, "randint": 344, "randn": 345, "random_integ": 347, "random_sampl": 348, "ranf": 349, "rayleigh": 350, "seed": 352, "shuffl": 353, "standard_cauchi": 354, "standard_exponenti": 355, "standard_gamma": 356, "standard_norm": 357, "standard_t": 358, "triangular": 359, "uniform": 360, "vonmis": 361, "wald": 362, "weibul": 363, "zipf": 364, "reciproc": 367, "remaind": 368, "result_typ": 371, "right_shift": 372, "rint": 373, "roll": 374, "rollaxi": 375, "searchsort": 377, "select": [378, 427], "sign": 380, "signbit": 381, "sin": 382, "sinh": 383, "sort": [384, 432], "sqrt": 385, "squar": 386, "stack": 388, "subtract": 390, "take_along_axi": 394, "tan": 395, "tanh": 396, "tensordot": 397, "tile": [398, 424], "trace": 399, "trapz": 401, "tri": 402, "tril": 403, "tril_indic": 404, "tril_indices_from": 405, "triu": 406, "triu_indic": 407, "triu_indices_from": 408, "true_divid": 409, "trunc": 410, "uniqu": 411, "unwrap": 412, "vander": 413, "vdot": 415, "vstack": 416, "where": 417, "zero": 418, "zeros_lik": 419, "index": [421, 427], "gener": [421, 430], "like": [421, 424], "insert": 421, "iter": 421, "over": 421, "vector": 422, "product": [422, 425], "decomposit": 422, "eigenvalu": 422, "number": [422, 424, 425], "equat": 422, "logic": 423, "truth": 423, "valu": 423, "infin": 423, "nan": 423, "manipul": [424, 427], "chang": 424, "dimens": 424, "kind": 424, "join": 424, "split": 424, "ad": 424, "remov": 424, "element": 424, "rearrang": 424, "mathemat": 425, "trigonometr": [425, 435], "hyperbol": 425, "differ": 425, "expon": 425, "logarithm": 425, "special": [425, 427, 433], "float": [425, 435], "point": 425, "ration": 425, "arithmet": [425, 427, 429], "handl": 425, "complex": 425, "extrema": 425, "find": 425, "util": 426, "construct": 427, "attribut": 427, "memori": 427, "layout": 427, "method": 427, "convers": 427, "calcul": 427, "multipl": 427, "pad": 428, "polynomi": 429, "polyutil": 429, "poly1d": 429, "simpl": 430, "distribut": 430, "search": 432, "count": 432, "error": 433, "statist": 434, "order": 434, "varianc": 434, "univers": 435, "ufunc": 435, "math": 435, "twiddl": 435}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1, "sphinx.ext.intersphinx": 1, "sphinx": 60}, "alltitles": {"Interplay with the Data Parallel Control Library": [[0, "interplay-with-the-data-parallel-control-library"]], "Example": [[0, "example"]], "C++ backend API Reference": [[1, "c-backend-api-reference"]], "Data Parallel Extension for NumPy*": [[2, "module-dpnp"]], "Development information": [[2, null]], "Overview": [[3, "id1"]], "Quick Start Guide": [[4, "id1"]], "Device Drivers": [[4, "device-drivers"]], "Python Interpreter": [[4, "python-interpreter"]], "Installation": [[4, "installation"]], "Install Package from Anaconda": [[4, "install-package-from-anaconda"]], "Build and Install Conda Package": [[4, "build-and-install-conda-package"]], "Build and Install with scikit-build": [[4, "build-and-install-with-scikit-build"]], "Testing": [[4, "testing"]], "Examples": [[4, "examples"]], "Binary Operations": [[5, "binary-operations"]], "Elementwise bit operations": [[5, "elementwise-bit-operations"]], "Bit packing": [[5, "bit-packing"]], "Output formatting": [[5, "output-formatting"]], "Comparison Table NumPy/ DPNP/ CuPy": [[6, "comparison-table-numpy-dpnp-cupy"]], "Summary": [[6, "summary"]], "Module-Level": [[6, "module-level"]], "Multi-Dimensional Array": [[6, "multi-dimensional-array"]], "Linear Algebra": [[6, "linear-algebra"], [422, "linear-algebra"]], "Discrete Fourier Transform": [[6, "discrete-fourier-transform"]], "Random Sampling": [[6, "random-sampling"]], "Array Creation Routines": [[7, "array-creation-routines"]], "Basic creation routines": [[7, "basic-creation-routines"]], "Creation from other data": [[7, "creation-from-other-data"]], "Numerical ranges": [[7, "numerical-ranges"]], "Matrix creation": [[7, "matrix-creation"]], "The Matrix class": [[7, "the-matrix-class"]], "Data type routines": [[8, "data-type-routines"]], "Creating data types": [[8, "creating-data-types"]], "Data type information": [[8, "data-type-information"]], "Data type testing": [[8, "data-type-testing"]], "Miscellaneous": [[8, "miscellaneous"], [425, "miscellaneous"]], "Available array data types": [[9, "available-array-data-types"]], "FFT Functions": [[10, "fft-functions"]], "Standard FFTs": [[10, "standard-ffts"]], "Real FFTs": [[10, "real-ffts"]], "Hermitian FFTs": [[10, "hermitian-ffts"]], "Helper routines": [[10, "helper-routines"]], "dpnp.abs": [[11, "dpnp-abs"]], "dpnp.absolute": [[12, "dpnp-absolute"]], "dpnp.add": [[13, "dpnp-add"]], "dpnp.all": [[14, "dpnp-all"]], "dpnp.allclose": [[15, "dpnp-allclose"]], "dpnp.amax": [[16, "dpnp-amax"]], "dpnp.amin": [[17, "dpnp-amin"]], "dpnp.any": [[18, "dpnp-any"]], "dpnp.arange": [[19, "dpnp-arange"]], "dpnp.arccos": [[20, "dpnp-arccos"]], "dpnp.arccosh": [[21, "dpnp-arccosh"]], "dpnp.arcsin": [[22, "dpnp-arcsin"]], "dpnp.arcsinh": [[23, "dpnp-arcsinh"]], "dpnp.arctan": [[24, "dpnp-arctan"]], "dpnp.arctan2": [[25, "dpnp-arctan2"]], "dpnp.arctanh": [[26, "dpnp-arctanh"]], "dpnp.argmax": [[27, "dpnp-argmax"]], "dpnp.argmin": [[28, "dpnp-argmin"]], "dpnp.argsort": [[29, "dpnp-argsort"]], "dpnp.around": [[30, "dpnp-around"]], "dpnp.array": [[31, "dpnp-array"]], "dpnp.array_equal": [[32, "dpnp-array-equal"]], "dpnp.asanyarray": [[33, "dpnp-asanyarray"]], "dpnp.asarray": [[34, "dpnp-asarray"]], "dpnp.ascontiguousarray": [[35, "dpnp-ascontiguousarray"]], "dpnp.asfarray": [[36, "dpnp-asfarray"]], "dpnp.asfortranarray": [[37, "dpnp-asfortranarray"]], "dpnp.asnumpy": [[38, "dpnp-asnumpy"]], "dpnp.atleast_1d": [[39, "dpnp-atleast-1d"]], "dpnp.atleast_2d": [[40, "dpnp-atleast-2d"]], "dpnp.atleast_3d": [[41, "dpnp-atleast-3d"]], "dpnp.average": [[42, "dpnp-average"]], "dpnp.bincount": [[43, "dpnp-bincount"]], "dpnp.bitwise_and": [[44, "dpnp-bitwise-and"]], "dpnp.bitwise_not": [[45, "dpnp-bitwise-not"]], "dpnp.bitwise_or": [[46, "dpnp-bitwise-or"]], "dpnp.bitwise_xor": [[47, "dpnp-bitwise-xor"]], "dpnp.broadcast_arrays": [[48, "dpnp-broadcast-arrays"]], "dpnp.broadcast_to": [[49, "dpnp-broadcast-to"]], "dpnp.can_cast": [[50, "dpnp-can-cast"]], "dpnp.cbrt": [[51, "dpnp-cbrt"]], "dpnp.ceil": [[52, "dpnp-ceil"]], "dpnp.choose": [[53, "dpnp-choose"]], "dpnp.clip": [[54, "dpnp-clip"]], "dpnp.concatenate": [[55, "dpnp-concatenate"]], "dpnp.conj": [[56, "dpnp-conj"]], "dpnp.conjugate": [[57, "dpnp-conjugate"]], "dpnp.convolve": [[58, "dpnp-convolve"]], "dpnp.copy": [[59, "dpnp-copy"]], "dpnp.copysign": [[60, "dpnp-copysign"]], "dpnp.copyto": [[61, "dpnp-copyto"]], "dpnp.correlate": [[62, "dpnp-correlate"]], "dpnp.cos": [[63, "dpnp-cos"]], "dpnp.cosh": [[64, "dpnp-cosh"]], "dpnp.count_nonzero": [[65, "dpnp-count-nonzero"]], "dpnp.cov": [[66, "dpnp-cov"]], "dpnp.cross": [[67, "dpnp-cross"]], "dpnp.cumprod": [[68, "dpnp-cumprod"]], "dpnp.cumsum": [[69, "dpnp-cumsum"]], "dpnp.deg2rad": [[70, "dpnp-deg2rad"]], "dpnp.degrees": [[71, "dpnp-degrees"]], "dpnp.diag": [[72, "dpnp-diag"]], "dpnp.diag_indices": [[73, "dpnp-diag-indices"]], "dpnp.diag_indices_from": [[74, "dpnp-diag-indices-from"]], "dpnp.diagflat": [[75, "dpnp-diagflat"]], "dpnp.diagonal": [[76, "dpnp-diagonal"]], "dpnp.diff": [[77, "dpnp-diff"]], "dpnp.divide": [[78, "dpnp-divide"]], "dpnp.dot": [[79, "dpnp-dot"]], "dpnp.dpnp_array.dpnp_array": [[80, "dpnp-dpnp-array-dpnp-array"]], "dpnp.dtype": [[81, "dpnp-dtype"]], "dpnp.ediff1d": [[82, "dpnp-ediff1d"]], "dpnp.einsum": [[83, "dpnp-einsum"]], "dpnp.einsum_path": [[84, "dpnp-einsum-path"]], "dpnp.empty": [[85, "dpnp-empty"]], "dpnp.empty_like": [[86, "dpnp-empty-like"]], "dpnp.equal": [[87, "dpnp-equal"]], "dpnp.erf": [[88, "dpnp-erf"]], "dpnp.exp": [[89, "dpnp-exp"]], "dpnp.exp2": [[90, "dpnp-exp2"]], "dpnp.expand_dims": [[91, "dpnp-expand-dims"]], "dpnp.expm1": [[92, "dpnp-expm1"]], "dpnp.extract": [[93, "dpnp-extract"]], "dpnp.eye": [[94, "dpnp-eye"]], "dpnp.fabs": [[95, "dpnp-fabs"]], "dpnp.fft.fft": [[96, "dpnp-fft-fft"]], "dpnp.fft.fft2": [[97, "dpnp-fft-fft2"]], "dpnp.fft.fftfreq": [[98, "dpnp-fft-fftfreq"]], "dpnp.fft.fftn": [[99, "dpnp-fft-fftn"]], "dpnp.fft.fftshift": [[100, "dpnp-fft-fftshift"]], "dpnp.fft.hfft": [[101, "dpnp-fft-hfft"]], "dpnp.fft.ifft": [[102, "dpnp-fft-ifft"]], "dpnp.fft.ifft2": [[103, "dpnp-fft-ifft2"]], "dpnp.fft.ifftn": [[104, "dpnp-fft-ifftn"]], "dpnp.fft.ifftshift": [[105, "dpnp-fft-ifftshift"]], "dpnp.fft.ihfft": [[106, "dpnp-fft-ihfft"]], "dpnp.fft.irfft": [[107, "dpnp-fft-irfft"]], "dpnp.fft.irfft2": [[108, "dpnp-fft-irfft2"]], "dpnp.fft.irfftn": [[109, "dpnp-fft-irfftn"]], "dpnp.fft.rfft": [[110, "dpnp-fft-rfft"]], "dpnp.fft.rfft2": [[111, "dpnp-fft-rfft2"]], "dpnp.fft.rfftfreq": [[112, "dpnp-fft-rfftfreq"]], "dpnp.fft.rfftn": [[113, "dpnp-fft-rfftn"]], "dpnp.fill_diagonal": [[114, "dpnp-fill-diagonal"]], "dpnp.finfo": [[115, "dpnp-finfo"]], "dpnp.flatiter": [[116, "dpnp-flatiter"]], "dpnp.flip": [[117, "dpnp-flip"]], "dpnp.fliplr": [[118, "dpnp-fliplr"]], "dpnp.flipud": [[119, "dpnp-flipud"]], "dpnp.floor": [[120, "dpnp-floor"]], "dpnp.floor_divide": [[121, "dpnp-floor-divide"]], "dpnp.fmax": [[122, "dpnp-fmax"]], "dpnp.fmin": [[123, "dpnp-fmin"]], "dpnp.fmod": [[124, "dpnp-fmod"]], "dpnp.from_dlpack": [[125, "dpnp-from-dlpack"]], "dpnp.frombuffer": [[126, "dpnp-frombuffer"]], "dpnp.fromfile": [[127, "dpnp-fromfile"]], "dpnp.fromfunction": [[128, "dpnp-fromfunction"]], "dpnp.fromiter": [[129, "dpnp-fromiter"]], "dpnp.fromstring": [[130, "dpnp-fromstring"]], "dpnp.full": [[131, "dpnp-full"]], "dpnp.full_like": [[132, "dpnp-full-like"]], "dpnp.geomspace": [[133, "dpnp-geomspace"]], "dpnp.get_include": [[134, "dpnp-get-include"]], "dpnp.gradient": [[135, "dpnp-gradient"]], "dpnp.greater": [[136, "dpnp-greater"]], "dpnp.greater_equal": [[137, "dpnp-greater-equal"]], "dpnp.histogram": [[138, "dpnp-histogram"]], "dpnp.hstack": [[139, "dpnp-hstack"]], "dpnp.hypot": [[140, "dpnp-hypot"]], "dpnp.identity": [[141, "dpnp-identity"]], "dpnp.iinfo": [[142, "dpnp-iinfo"]], "dpnp.imag": [[143, "dpnp-imag"]], "dpnp.indices": [[144, "dpnp-indices"]], "dpnp.inner": [[145, "dpnp-inner"]], "dpnp.invert": [[146, "dpnp-invert"]], "dpnp.isclose": [[147, "dpnp-isclose"]], "dpnp.isfinite": [[148, "dpnp-isfinite"]], "dpnp.isinf": [[149, "dpnp-isinf"]], "dpnp.isnan": [[150, "dpnp-isnan"]], "dpnp.isscalar": [[151, "dpnp-isscalar"]], "dpnp.issubdtype": [[152, "dpnp-issubdtype"]], "dpnp.issubsctype": [[153, "dpnp-issubsctype"]], "dpnp.kron": [[154, "dpnp-kron"]], "dpnp.left_shift": [[155, "dpnp-left-shift"]], "dpnp.less": [[156, "dpnp-less"]], "dpnp.less_equal": [[157, "dpnp-less-equal"]], "dpnp.linalg.cholesky": [[158, "dpnp-linalg-cholesky"]], "dpnp.linalg.cond": [[159, "dpnp-linalg-cond"]], "dpnp.linalg.det": [[160, "dpnp-linalg-det"]], "dpnp.linalg.eig": [[161, "dpnp-linalg-eig"]], "dpnp.linalg.eigh": [[162, "dpnp-linalg-eigh"]], "dpnp.linalg.eigvals": [[163, "dpnp-linalg-eigvals"]], "dpnp.linalg.inv": [[164, "dpnp-linalg-inv"]], "dpnp.linalg.matrix_power": [[165, "dpnp-linalg-matrix-power"]], "dpnp.linalg.matrix_rank": [[166, "dpnp-linalg-matrix-rank"]], "dpnp.linalg.multi_dot": [[167, "dpnp-linalg-multi-dot"]], "dpnp.linalg.norm": [[168, "dpnp-linalg-norm"]], "dpnp.linalg.qr": [[169, "dpnp-linalg-qr"]], "dpnp.linalg.solve": [[170, "dpnp-linalg-solve"]], "dpnp.linalg.svd": [[171, "dpnp-linalg-svd"]], "dpnp.linspace": [[172, "dpnp-linspace"]], "dpnp.loadtxt": [[173, "dpnp-loadtxt"]], "dpnp.log": [[174, "dpnp-log"]], "dpnp.log10": [[175, "dpnp-log10"]], "dpnp.log1p": [[176, "dpnp-log1p"]], "dpnp.log2": [[177, "dpnp-log2"]], "dpnp.logaddexp": [[178, "dpnp-logaddexp"]], "dpnp.logical_and": [[179, "dpnp-logical-and"]], "dpnp.logical_not": [[180, "dpnp-logical-not"]], "dpnp.logical_or": [[181, "dpnp-logical-or"]], "dpnp.logical_xor": [[182, "dpnp-logical-xor"]], "dpnp.logspace": [[183, "dpnp-logspace"]], "dpnp.matmul": [[184, "dpnp-matmul"]], "dpnp.max": [[185, "dpnp-max"]], "dpnp.maximum": [[186, "dpnp-maximum"]], "dpnp.mean": [[187, "dpnp-mean"]], "dpnp.median": [[188, "dpnp-median"]], "dpnp.meshgrid": [[189, "dpnp-meshgrid"]], "dpnp.mgrid": [[190, "dpnp-mgrid"]], "dpnp.min": [[191, "dpnp-min"]], "dpnp.minimum": [[192, "dpnp-minimum"]], "dpnp.mod": [[193, "dpnp-mod"]], "dpnp.modf": [[194, "dpnp-modf"]], "dpnp.moveaxis": [[195, "dpnp-moveaxis"]], "dpnp.multiply": [[196, "dpnp-multiply"]], "dpnp.nanargmax": [[197, "dpnp-nanargmax"]], "dpnp.nanargmin": [[198, "dpnp-nanargmin"]], "dpnp.nancumprod": [[199, "dpnp-nancumprod"]], "dpnp.nancumsum": [[200, "dpnp-nancumsum"]], "dpnp.nanmax": [[201, "dpnp-nanmax"]], "dpnp.nanmin": [[202, "dpnp-nanmin"]], "dpnp.nanprod": [[203, "dpnp-nanprod"]], "dpnp.nansum": [[204, "dpnp-nansum"]], "dpnp.nanvar": [[205, "dpnp-nanvar"]], "dpnp.ndarray": [[206, "dpnp-ndarray"]], "dpnp.ndarray.T": [[207, "dpnp-ndarray-t"]], "dpnp.ndarray.__abs__": [[208, "dpnp-ndarray-abs"]], "dpnp.ndarray.__add__": [[209, "dpnp-ndarray-add"]], "dpnp.ndarray.__and__": [[210, "dpnp-ndarray-and"]], "dpnp.ndarray.__complex__": [[211, "dpnp-ndarray-complex"]], "dpnp.ndarray.__copy__": [[212, "dpnp-ndarray-copy"]], "dpnp.ndarray.__eq__": [[213, "dpnp-ndarray-eq"]], "dpnp.ndarray.__float__": [[214, "dpnp-ndarray-float"]], "dpnp.ndarray.__floordiv__": [[215, "dpnp-ndarray-floordiv"]], "dpnp.ndarray.__ge__": [[216, "dpnp-ndarray-ge"]], "dpnp.ndarray.__getitem__": [[217, "dpnp-ndarray-getitem"]], "dpnp.ndarray.__gt__": [[218, "dpnp-ndarray-gt"]], "dpnp.ndarray.__iadd__": [[219, "dpnp-ndarray-iadd"]], "dpnp.ndarray.__iand__": [[220, "dpnp-ndarray-iand"]], "dpnp.ndarray.__ifloordiv__": [[221, "dpnp-ndarray-ifloordiv"]], "dpnp.ndarray.__ilshift__": [[222, "dpnp-ndarray-ilshift"]], "dpnp.ndarray.__imod__": [[223, "dpnp-ndarray-imod"]], "dpnp.ndarray.__imul__": [[224, "dpnp-ndarray-imul"]], "dpnp.ndarray.__int__": [[225, "dpnp-ndarray-int"]], "dpnp.ndarray.__invert__": [[226, "dpnp-ndarray-invert"]], "dpnp.ndarray.__ior__": [[227, "dpnp-ndarray-ior"]], "dpnp.ndarray.__ipow__": [[228, "dpnp-ndarray-ipow"]], "dpnp.ndarray.__irshift__": [[229, "dpnp-ndarray-irshift"]], "dpnp.ndarray.__isub__": [[230, "dpnp-ndarray-isub"]], "dpnp.ndarray.__itruediv__": [[231, "dpnp-ndarray-itruediv"]], "dpnp.ndarray.__ixor__": [[232, "dpnp-ndarray-ixor"]], "dpnp.ndarray.__le__": [[233, "dpnp-ndarray-le"]], "dpnp.ndarray.__len__": [[234, "dpnp-ndarray-len"]], "dpnp.ndarray.__lshift__": [[235, "dpnp-ndarray-lshift"]], "dpnp.ndarray.__lt__": [[236, "dpnp-ndarray-lt"]], "dpnp.ndarray.__mod__": [[237, "dpnp-ndarray-mod"]], "dpnp.ndarray.__mul__": [[238, "dpnp-ndarray-mul"]], "dpnp.ndarray.__ne__": [[239, "dpnp-ndarray-ne"]], "dpnp.ndarray.__neg__": [[240, "dpnp-ndarray-neg"]], "dpnp.ndarray.__new__": [[241, "dpnp-ndarray-new"]], "dpnp.ndarray.__or__": [[242, "dpnp-ndarray-or"]], "dpnp.ndarray.__pos__": [[243, "dpnp-ndarray-pos"]], "dpnp.ndarray.__pow__": [[244, "dpnp-ndarray-pow"]], "dpnp.ndarray.__repr__": [[245, "dpnp-ndarray-repr"]], "dpnp.ndarray.__rshift__": [[246, "dpnp-ndarray-rshift"]], "dpnp.ndarray.__setitem__": [[247, "dpnp-ndarray-setitem"]], "dpnp.ndarray.__str__": [[248, "dpnp-ndarray-str"]], "dpnp.ndarray.__sub__": [[249, "dpnp-ndarray-sub"]], "dpnp.ndarray.__truediv__": [[250, "dpnp-ndarray-truediv"]], "dpnp.ndarray.__xor__": [[251, "dpnp-ndarray-xor"]], "dpnp.ndarray.all": [[252, "dpnp-ndarray-all"]], "dpnp.ndarray.any": [[253, "dpnp-ndarray-any"]], "dpnp.ndarray.argmax": [[254, "dpnp-ndarray-argmax"]], "dpnp.ndarray.argmin": [[255, "dpnp-ndarray-argmin"]], "dpnp.ndarray.argsort": [[256, "dpnp-ndarray-argsort"]], "dpnp.ndarray.astype": [[257, "dpnp-ndarray-astype"]], "dpnp.ndarray.choose": [[258, "dpnp-ndarray-choose"]], "dpnp.ndarray.clip": [[259, "dpnp-ndarray-clip"]], "dpnp.ndarray.conj": [[260, "dpnp-ndarray-conj"]], "dpnp.ndarray.conjugate": [[261, "dpnp-ndarray-conjugate"]], "dpnp.ndarray.copy": [[262, "dpnp-ndarray-copy"]], "dpnp.ndarray.cumsum": [[263, "dpnp-ndarray-cumsum"]], "dpnp.ndarray.diagonal": [[264, "dpnp-ndarray-diagonal"]], "dpnp.ndarray.dtype": [[265, "dpnp-ndarray-dtype"]], "dpnp.ndarray.fill": [[266, "dpnp-ndarray-fill"]], "dpnp.ndarray.flags": [[267, "dpnp-ndarray-flags"]], "dpnp.ndarray.flat": [[268, "dpnp-ndarray-flat"]], "dpnp.ndarray.flatten": [[269, "dpnp-ndarray-flatten"]], "dpnp.ndarray.imag": [[270, "dpnp-ndarray-imag"]], "dpnp.ndarray.item": [[271, "dpnp-ndarray-item"]], "dpnp.ndarray.itemsize": [[272, "dpnp-ndarray-itemsize"]], "dpnp.ndarray.max": [[273, "dpnp-ndarray-max"]], "dpnp.ndarray.mean": [[274, "dpnp-ndarray-mean"]], "dpnp.ndarray.min": [[275, "dpnp-ndarray-min"]], "dpnp.ndarray.nbytes": [[276, "dpnp-ndarray-nbytes"]], "dpnp.ndarray.ndim": [[277, "dpnp-ndarray-ndim"]], "dpnp.ndarray.nonzero": [[278, "dpnp-ndarray-nonzero"]], "dpnp.ndarray.partition": [[279, "dpnp-ndarray-partition"]], "dpnp.ndarray.prod": [[280, "dpnp-ndarray-prod"]], "dpnp.ndarray.put": [[281, "dpnp-ndarray-put"]], "dpnp.ndarray.ravel": [[282, "dpnp-ndarray-ravel"]], "dpnp.ndarray.real": [[283, "dpnp-ndarray-real"]], "dpnp.ndarray.repeat": [[284, "dpnp-ndarray-repeat"]], "dpnp.ndarray.reshape": [[285, "dpnp-ndarray-reshape"]], "dpnp.ndarray.round": [[286, "dpnp-ndarray-round"]], "dpnp.ndarray.shape": [[287, "dpnp-ndarray-shape"]], "dpnp.ndarray.size": [[288, "dpnp-ndarray-size"]], "dpnp.ndarray.squeeze": [[289, "dpnp-ndarray-squeeze"]], "dpnp.ndarray.std": [[290, "dpnp-ndarray-std"]], "dpnp.ndarray.strides": [[291, "dpnp-ndarray-strides"]], "dpnp.ndarray.sum": [[292, "dpnp-ndarray-sum"]], "dpnp.ndarray.swapaxes": [[293, "dpnp-ndarray-swapaxes"]], "dpnp.ndarray.take": [[294, "dpnp-ndarray-take"]], "dpnp.ndarray.transpose": [[295, "dpnp-ndarray-transpose"]], "dpnp.ndarray.var": [[296, "dpnp-ndarray-var"]], "dpnp.negative": [[297, "dpnp-negative"]], "dpnp.nonzero": [[298, "dpnp-nonzero"]], "dpnp.not_equal": [[299, "dpnp-not-equal"]], "dpnp.ogrid": [[300, "dpnp-ogrid"]], "dpnp.ones": [[301, "dpnp-ones"]], "dpnp.ones_like": [[302, "dpnp-ones-like"]], "dpnp.outer": [[303, "dpnp-outer"]], "dpnp.partition": [[304, "dpnp-partition"]], "dpnp.place": [[305, "dpnp-place"]], "dpnp.positive": [[306, "dpnp-positive"]], "dpnp.power": [[307, "dpnp-power"]], "dpnp.prod": [[308, "dpnp-prod"]], "dpnp.proj": [[309, "dpnp-proj"]], "dpnp.ptp": [[310, "dpnp-ptp"]], "dpnp.put": [[311, "dpnp-put"]], "dpnp.put_along_axis": [[312, "dpnp-put-along-axis"]], "dpnp.putmask": [[313, "dpnp-putmask"]], "dpnp.rad2deg": [[314, "dpnp-rad2deg"]], "dpnp.radians": [[315, "dpnp-radians"]], "dpnp.random.RandomState": [[316, "dpnp-random-randomstate"]], "dpnp.random.beta": [[317, "dpnp-random-beta"]], "dpnp.random.binomial": [[318, "dpnp-random-binomial"]], "dpnp.random.bytes": [[319, "dpnp-random-bytes"]], "dpnp.random.chisquare": [[320, "dpnp-random-chisquare"]], "dpnp.random.choice": [[321, "dpnp-random-choice"]], "dpnp.random.dirichlet": [[322, "dpnp-random-dirichlet"]], "dpnp.random.exponential": [[323, "dpnp-random-exponential"]], "dpnp.random.f": [[324, "dpnp-random-f"]], "dpnp.random.gamma": [[325, "dpnp-random-gamma"]], "dpnp.random.geometric": [[326, "dpnp-random-geometric"]], "dpnp.random.gumbel": [[327, "dpnp-random-gumbel"]], "dpnp.random.hypergeometric": [[328, "dpnp-random-hypergeometric"]], "dpnp.random.laplace": [[329, "dpnp-random-laplace"]], "dpnp.random.logistic": [[330, "dpnp-random-logistic"]], "dpnp.random.lognormal": [[331, "dpnp-random-lognormal"]], "dpnp.random.logseries": [[332, "dpnp-random-logseries"]], "dpnp.random.multinomial": [[333, "dpnp-random-multinomial"]], "dpnp.random.multivariate_normal": [[334, "dpnp-random-multivariate-normal"]], "dpnp.random.negative_binomial": [[335, "dpnp-random-negative-binomial"]], "dpnp.random.noncentral_chisquare": [[336, "dpnp-random-noncentral-chisquare"]], "dpnp.random.noncentral_f": [[337, "dpnp-random-noncentral-f"]], "dpnp.random.normal": [[338, "dpnp-random-normal"]], "dpnp.random.pareto": [[339, "dpnp-random-pareto"]], "dpnp.random.permutation": [[340, "dpnp-random-permutation"]], "dpnp.random.poisson": [[341, "dpnp-random-poisson"]], "dpnp.random.power": [[342, "dpnp-random-power"]], "dpnp.random.rand": [[343, "dpnp-random-rand"]], "dpnp.random.randint": [[344, "dpnp-random-randint"]], "dpnp.random.randn": [[345, "dpnp-random-randn"]], "dpnp.random.random": [[346, "dpnp-random-random"]], "dpnp.random.random_integers": [[347, "dpnp-random-random-integers"]], "dpnp.random.random_sample": [[348, "dpnp-random-random-sample"]], "dpnp.random.ranf": [[349, "dpnp-random-ranf"]], "dpnp.random.rayleigh": [[350, "dpnp-random-rayleigh"]], "dpnp.random.sample": [[351, "dpnp-random-sample"]], "dpnp.random.seed": [[352, "dpnp-random-seed"]], "dpnp.random.shuffle": [[353, "dpnp-random-shuffle"]], "dpnp.random.standard_cauchy": [[354, "dpnp-random-standard-cauchy"]], "dpnp.random.standard_exponential": [[355, "dpnp-random-standard-exponential"]], "dpnp.random.standard_gamma": [[356, "dpnp-random-standard-gamma"]], "dpnp.random.standard_normal": [[357, "dpnp-random-standard-normal"]], "dpnp.random.standard_t": [[358, "dpnp-random-standard-t"]], "dpnp.random.triangular": [[359, "dpnp-random-triangular"]], "dpnp.random.uniform": [[360, "dpnp-random-uniform"]], "dpnp.random.vonmises": [[361, "dpnp-random-vonmises"]], "dpnp.random.wald": [[362, "dpnp-random-wald"]], "dpnp.random.weibull": [[363, "dpnp-random-weibull"]], "dpnp.random.zipf": [[364, "dpnp-random-zipf"]], "dpnp.ravel": [[365, "dpnp-ravel"]], "dpnp.real": [[366, "dpnp-real"]], "dpnp.reciprocal": [[367, "dpnp-reciprocal"]], "dpnp.remainder": [[368, "dpnp-remainder"]], "dpnp.repeat": [[369, "dpnp-repeat"]], "dpnp.reshape": [[370, "dpnp-reshape"]], "dpnp.result_type": [[371, "dpnp-result-type"]], "dpnp.right_shift": [[372, "dpnp-right-shift"]], "dpnp.rint": [[373, "dpnp-rint"]], "dpnp.roll": [[374, "dpnp-roll"]], "dpnp.rollaxis": [[375, "dpnp-rollaxis"]], "dpnp.round": [[376, "dpnp-round"]], "dpnp.searchsorted": [[377, "dpnp-searchsorted"]], "dpnp.select": [[378, "dpnp-select"]], "dpnp.shape": [[379, "dpnp-shape"]], "dpnp.sign": [[380, "dpnp-sign"]], "dpnp.signbit": [[381, "dpnp-signbit"]], "dpnp.sin": [[382, "dpnp-sin"]], "dpnp.sinh": [[383, "dpnp-sinh"]], "dpnp.sort": [[384, "dpnp-sort"]], "dpnp.sqrt": [[385, "dpnp-sqrt"]], "dpnp.square": [[386, "dpnp-square"]], "dpnp.squeeze": [[387, "dpnp-squeeze"]], "dpnp.stack": [[388, "dpnp-stack"]], "dpnp.std": [[389, "dpnp-std"]], "dpnp.subtract": [[390, "dpnp-subtract"]], "dpnp.sum": [[391, "dpnp-sum"]], "dpnp.swapaxes": [[392, "dpnp-swapaxes"]], "dpnp.take": [[393, "dpnp-take"]], "dpnp.take_along_axis": [[394, "dpnp-take-along-axis"]], "dpnp.tan": [[395, "dpnp-tan"]], "dpnp.tanh": [[396, "dpnp-tanh"]], "dpnp.tensordot": [[397, "dpnp-tensordot"]], "dpnp.tile": [[398, "dpnp-tile"]], "dpnp.trace": [[399, "dpnp-trace"]], "dpnp.transpose": [[400, "dpnp-transpose"]], "dpnp.trapz": [[401, "dpnp-trapz"]], "dpnp.tri": [[402, "dpnp-tri"]], "dpnp.tril": [[403, "dpnp-tril"]], "dpnp.tril_indices": [[404, "dpnp-tril-indices"]], "dpnp.tril_indices_from": [[405, "dpnp-tril-indices-from"]], "dpnp.triu": [[406, "dpnp-triu"]], "dpnp.triu_indices": [[407, "dpnp-triu-indices"]], "dpnp.triu_indices_from": [[408, "dpnp-triu-indices-from"]], "dpnp.true_divide": [[409, "dpnp-true-divide"]], "dpnp.trunc": [[410, "dpnp-trunc"]], "dpnp.unique": [[411, "dpnp-unique"]], "dpnp.unwrap": [[412, "dpnp-unwrap"]], "dpnp.vander": [[413, "dpnp-vander"]], "dpnp.var": [[414, "dpnp-var"]], "dpnp.vdot": [[415, "dpnp-vdot"]], "dpnp.vstack": [[416, "dpnp-vstack"]], "dpnp.where": [[417, "dpnp-where"]], "dpnp.zeros": [[418, "dpnp-zeros"]], "dpnp.zeros_like": [[419, "dpnp-zeros-like"]], "API Reference": [[420, "api-reference"]], "Array Indexing Routines": [[421, "array-indexing-routines"]], "Generating index arrays": [[421, "generating-index-arrays"]], "Indexing-like operations": [[421, "indexing-like-operations"]], "Inserting data into arrays": [[421, "inserting-data-into-arrays"]], "Iterating over arrays": [[421, "iterating-over-arrays"]], "Matrix and vector products": [[422, "matrix-and-vector-products"]], "Decompositions": [[422, "decompositions"]], "Matrix eigenvalues": [[422, "matrix-eigenvalues"]], "Norms and other numbers": [[422, "norms-and-other-numbers"]], "Solving linear equations": [[422, "solving-linear-equations"]], "Logic Functions": [[423, "logic-functions"]], "Truth value testing": [[423, "truth-value-testing"]], "Infinities and NaNs": [[423, "infinities-and-nans"]], "Array type testing": [[423, "array-type-testing"]], "Logic operations": [[423, "logic-operations"]], "Comparison": [[423, "comparison"]], "Array Manipulation Routines": [[424, "array-manipulation-routines"]], "Basic operations": [[424, "basic-operations"]], "Changing array shape": [[424, "changing-array-shape"]], "Transpose-like operations": [[424, "transpose-like-operations"]], "Changing number of dimensions": [[424, "changing-number-of-dimensions"]], "Changing kind of array": [[424, "changing-kind-of-array"]], "Joining arrays": [[424, "joining-arrays"]], "Splitting arrays": [[424, "splitting-arrays"]], "Tiling arrays": [[424, "tiling-arrays"]], "Adding and removing elements": [[424, "adding-and-removing-elements"]], "Rearranging elements": [[424, "rearranging-elements"]], "Mathematical Functions": [[425, "mathematical-functions"]], "Trigonometric functions": [[425, "trigonometric-functions"], [435, "trigonometric-functions"]], "Hyperbolic functions": [[425, "hyperbolic-functions"]], "Rounding": [[425, "rounding"]], "Sums, products, differences": [[425, "sums-products-differences"]], "Exponents and logarithms": [[425, "exponents-and-logarithms"]], "Other special functions": [[425, "other-special-functions"]], "Floating point routines": [[425, "floating-point-routines"]], "Rational routines": [[425, "rational-routines"]], "Arithmetic operations": [[425, "arithmetic-operations"]], "Handling complex numbers": [[425, "handling-complex-numbers"]], "Extrema Finding": [[425, "extrema-finding"]], "Miscellaneous routines": [[426, "miscellaneous-routines"]], "Utility": [[426, "utility"]], "Multi-Dimensional Array (ndarray)": [[427, "multi-dimensional-array-ndarray"]], "Constructing arrays": [[427, "constructing-arrays"]], "Indexing arrays": [[427, "indexing-arrays"]], "Array attributes": [[427, "array-attributes"]], "Memory layout": [[427, "memory-layout"]], "Data type": [[427, "data-type"]], "Other attributes": [[427, "other-attributes"]], "Array methods": [[427, "array-methods"]], "Array conversion": [[427, "array-conversion"]], "Shape manipulation": [[427, "shape-manipulation"]], "Item selection and manipulation": [[427, "item-selection-and-manipulation"]], "Calculation": [[427, "calculation"]], "Arithmetic, matrix multiplication, and comparison operations": [[427, "arithmetic-matrix-multiplication-and-comparison-operations"]], "Special methods": [[427, "special-methods"]], "Padding": [[428, "padding"]], "Polynomials": [[429, "polynomials"]], "Polynomial Package": [[429, "polynomial-package"]], "Polynomial Module": [[429, "polynomial-module"]], "Polyutils": [[429, "polyutils"]], "Poly1d": [[429, "poly1d"]], "Basics": [[429, "basics"]], "Arithmetic": [[429, "arithmetic"]], "Random Sampling (dpnp.random)": [[430, "random-sampling-dpnp-random"]], "Simple random data": [[430, "simple-random-data"]], "Permutations": [[430, "permutations"]], "Distributions": [[430, "distributions"]], "Random generator": [[430, "random-generator"]], "Routines": [[431, "routines"]], "Sorting, Searching, and Counting": [[432, "sorting-searching-and-counting"]], "Sorting": [[432, "sorting"]], "Searching": [[432, "searching"]], "Counting": [[432, "counting"]], "Special Functions": [[433, "special-functions"]], "Error Function": [[433, "error-function"]], "Statistical Functions": [[434, "statistical-functions"]], "Order statistics": [[434, "order-statistics"]], "Averages and variances": [[434, "averages-and-variances"]], "Histograms": [[434, "histograms"]], "Correlations": [[434, "correlations"]], "Universal Functions (ufunc)": [[435, "universal-functions-ufunc"]], "Available ufuncs": [[435, "available-ufuncs"]], "Math operations": [[435, "math-operations"]], "Bit-twiddling functions": [[435, "bit-twiddling-functions"]], "Comparison functions": [[435, "comparison-functions"]], "Floating functions": [[435, "floating-functions"]]}, "indexentries": {"dpnp": [[2, "module-dpnp"], [3, "module-dpnp"]], "module": [[2, "module-dpnp"], [3, "module-dpnp"], [10, "module-dpnp.fft"], [430, "module-dpnp.random"]], "dpnp.fft": [[10, "module-dpnp.fft"]], "abs() (in module dpnp)": [[11, "dpnp.abs"]], "absolute() (in module dpnp)": [[12, "dpnp.absolute"]], "add() (in module dpnp)": [[13, "dpnp.add"]], "all() (in module dpnp)": [[14, "dpnp.all"]], "allclose() (in module dpnp)": [[15, "dpnp.allclose"]], "amax() (in module dpnp)": [[16, "dpnp.amax"]], "amin() (in module dpnp)": [[17, "dpnp.amin"]], "any() (in module dpnp)": [[18, "dpnp.any"]], "arange() (in module dpnp)": [[19, "dpnp.arange"]], "arccos() (in module dpnp)": [[20, "dpnp.arccos"]], "arccosh() (in module dpnp)": [[21, "dpnp.arccosh"]], "arcsin() (in module dpnp)": [[22, "dpnp.arcsin"]], "arcsinh() (in module dpnp)": [[23, "dpnp.arcsinh"]], "arctan() (in module dpnp)": [[24, "dpnp.arctan"]], "arctan2() (in module dpnp)": [[25, "dpnp.arctan2"]], "arctanh() (in module dpnp)": [[26, "dpnp.arctanh"]], "argmax() (in module dpnp)": [[27, "dpnp.argmax"]], "argmin() (in module dpnp)": [[28, "dpnp.argmin"]], "argsort() (in module dpnp)": [[29, "dpnp.argsort"]], "around() (in module dpnp)": [[30, "dpnp.around"]], "array() (in module dpnp)": [[31, "dpnp.array"]], "array_equal() (in module dpnp)": [[32, "dpnp.array_equal"]], "asanyarray() (in module dpnp)": [[33, "dpnp.asanyarray"]], "asarray() (in module dpnp)": [[34, "dpnp.asarray"]], "ascontiguousarray() (in module dpnp)": [[35, "dpnp.ascontiguousarray"]], "asfarray() (in module dpnp)": [[36, "dpnp.asfarray"]], "asfortranarray() (in module dpnp)": [[37, "dpnp.asfortranarray"]], "asnumpy() (in module dpnp)": [[38, "dpnp.asnumpy"]], "atleast_1d() (in module dpnp)": [[39, "dpnp.atleast_1d"]], "atleast_2d() (in module dpnp)": [[40, "dpnp.atleast_2d"]], "atleast_3d() (in module dpnp)": [[41, "dpnp.atleast_3d"]], "average() (in module dpnp)": [[42, "dpnp.average"]], "bincount() (in module dpnp)": [[43, "dpnp.bincount"]], "bitwise_and() (in module dpnp)": [[44, "dpnp.bitwise_and"]], "bitwise_not() (in module dpnp)": [[45, "dpnp.bitwise_not"]], "bitwise_or() (in module dpnp)": [[46, "dpnp.bitwise_or"]], "bitwise_xor() (in module dpnp)": [[47, "dpnp.bitwise_xor"]], "broadcast_arrays() (in module dpnp)": [[48, "dpnp.broadcast_arrays"]], "broadcast_to() (in module dpnp)": [[49, "dpnp.broadcast_to"]], "can_cast() (in module dpnp)": [[50, "dpnp.can_cast"]], "cbrt() (in module dpnp)": [[51, "dpnp.cbrt"]], "ceil() (in module dpnp)": [[52, "dpnp.ceil"]], "choose() (in module dpnp)": [[53, "dpnp.choose"]], "clip() (in module dpnp)": [[54, "dpnp.clip"]], "concatenate() (in module dpnp)": [[55, "dpnp.concatenate"]], "conj() (in module dpnp)": [[56, "dpnp.conj"]], "conjugate() (in module dpnp)": [[57, "dpnp.conjugate"]], "convolve() (in module dpnp)": [[58, "dpnp.convolve"]], "copy() (in module dpnp)": [[59, "dpnp.copy"]], "copysign() (in module dpnp)": [[60, "dpnp.copysign"]], "copyto() (in module dpnp)": [[61, "dpnp.copyto"]], "correlate() (in module dpnp)": [[62, "dpnp.correlate"]], "cos() (in module dpnp)": [[63, "dpnp.cos"]], "cosh() (in module dpnp)": [[64, "dpnp.cosh"]], "count_nonzero() (in module dpnp)": [[65, "dpnp.count_nonzero"]], "cov() (in module dpnp)": [[66, "dpnp.cov"]], "cross() (in module dpnp)": [[67, "dpnp.cross"]], "cumprod() (in module dpnp)": [[68, "dpnp.cumprod"]], "cumsum() (in module dpnp)": [[69, "dpnp.cumsum"]], "deg2rad() (in module dpnp)": [[70, "dpnp.deg2rad"]], "degrees() (in module dpnp)": [[71, "dpnp.degrees"]], "diag() (in module dpnp)": [[72, "dpnp.diag"]], "diag_indices() (in module dpnp)": [[73, "dpnp.diag_indices"]], "diag_indices_from() (in module dpnp)": [[74, "dpnp.diag_indices_from"]], "diagflat() (in module dpnp)": [[75, "dpnp.diagflat"]], "diagonal() (in module dpnp)": [[76, "dpnp.diagonal"]], "diff() (in module dpnp)": [[77, "dpnp.diff"]], "divide() (in module dpnp)": [[78, "dpnp.divide"]], "dot() (in module dpnp)": [[79, "dpnp.dot"]], "t (dpnp.dpnp_array.dpnp_array attribute)": [[80, "dpnp.dpnp_array.dpnp_array.T"]], "__eq__() (dpnp.dpnp_array.dpnp_array method)": [[80, "dpnp.dpnp_array.dpnp_array.__eq__"]], "__ge__() (dpnp.dpnp_array.dpnp_array method)": [[80, "dpnp.dpnp_array.dpnp_array.__ge__"]], "__getitem__() (dpnp.dpnp_array.dpnp_array method)": [[80, "dpnp.dpnp_array.dpnp_array.__getitem__"]], "__gt__() (dpnp.dpnp_array.dpnp_array method)": [[80, "dpnp.dpnp_array.dpnp_array.__gt__"]], "__le__() (dpnp.dpnp_array.dpnp_array method)": [[80, "dpnp.dpnp_array.dpnp_array.__le__"]], "__len__() (dpnp.dpnp_array.dpnp_array method)": [[80, "dpnp.dpnp_array.dpnp_array.__len__"]], "__lt__() (dpnp.dpnp_array.dpnp_array method)": [[80, "dpnp.dpnp_array.dpnp_array.__lt__"]], "__ne__() (dpnp.dpnp_array.dpnp_array method)": [[80, "dpnp.dpnp_array.dpnp_array.__ne__"]], "__setitem__() (dpnp.dpnp_array.dpnp_array method)": [[80, "dpnp.dpnp_array.dpnp_array.__setitem__"]], "all() (dpnp.dpnp_array.dpnp_array method)": [[80, "dpnp.dpnp_array.dpnp_array.all"]], "any() (dpnp.dpnp_array.dpnp_array method)": [[80, "dpnp.dpnp_array.dpnp_array.any"]], "argmax() (dpnp.dpnp_array.dpnp_array method)": [[80, "dpnp.dpnp_array.dpnp_array.argmax"]], "argmin() (dpnp.dpnp_array.dpnp_array method)": [[80, "dpnp.dpnp_array.dpnp_array.argmin"]], "argsort() (dpnp.dpnp_array.dpnp_array method)": [[80, "dpnp.dpnp_array.dpnp_array.argsort"]], "asnumpy() (dpnp.dpnp_array.dpnp_array method)": [[80, "dpnp.dpnp_array.dpnp_array.asnumpy"]], "astype() (dpnp.dpnp_array.dpnp_array method)": [[80, "dpnp.dpnp_array.dpnp_array.astype"]], "choose() (dpnp.dpnp_array.dpnp_array method)": [[80, "dpnp.dpnp_array.dpnp_array.choose"]], "clip() (dpnp.dpnp_array.dpnp_array method)": [[80, "dpnp.dpnp_array.dpnp_array.clip"]], "conj() (dpnp.dpnp_array.dpnp_array method)": [[80, "dpnp.dpnp_array.dpnp_array.conj"]], "conjugate() (dpnp.dpnp_array.dpnp_array method)": [[80, "dpnp.dpnp_array.dpnp_array.conjugate"]], "copy() (dpnp.dpnp_array.dpnp_array method)": [[80, "dpnp.dpnp_array.dpnp_array.copy"]], "cumsum() (dpnp.dpnp_array.dpnp_array method)": [[80, "dpnp.dpnp_array.dpnp_array.cumsum"]], "device (dpnp.dpnp_array.dpnp_array attribute)": [[80, "dpnp.dpnp_array.dpnp_array.device"]], "diagonal() (dpnp.dpnp_array.dpnp_array method)": [[80, "dpnp.dpnp_array.dpnp_array.diagonal"]], "dot() (dpnp.dpnp_array.dpnp_array method)": [[80, "dpnp.dpnp_array.dpnp_array.dot"]], "dpnp_array (class in dpnp.dpnp_array)": [[80, "dpnp.dpnp_array.dpnp_array"]], "dtype (dpnp.dpnp_array.dpnp_array attribute)": [[80, "dpnp.dpnp_array.dpnp_array.dtype"]], "fill() (dpnp.dpnp_array.dpnp_array method)": [[80, "dpnp.dpnp_array.dpnp_array.fill"]], "flags (dpnp.dpnp_array.dpnp_array attribute)": [[80, "dpnp.dpnp_array.dpnp_array.flags"]], "flat (dpnp.dpnp_array.dpnp_array attribute)": [[80, "dpnp.dpnp_array.dpnp_array.flat"]], "flatten() (dpnp.dpnp_array.dpnp_array method)": [[80, "dpnp.dpnp_array.dpnp_array.flatten"]], "get_array() (dpnp.dpnp_array.dpnp_array method)": [[80, "dpnp.dpnp_array.dpnp_array.get_array"]], "imag (dpnp.dpnp_array.dpnp_array attribute)": [[80, "dpnp.dpnp_array.dpnp_array.imag"]], "item() (dpnp.dpnp_array.dpnp_array method)": [[80, "dpnp.dpnp_array.dpnp_array.item"]], "itemsize (dpnp.dpnp_array.dpnp_array attribute)": [[80, "dpnp.dpnp_array.dpnp_array.itemsize"]], "max() (dpnp.dpnp_array.dpnp_array method)": [[80, "dpnp.dpnp_array.dpnp_array.max"]], "mean() (dpnp.dpnp_array.dpnp_array method)": [[80, "dpnp.dpnp_array.dpnp_array.mean"]], "min() (dpnp.dpnp_array.dpnp_array method)": [[80, "dpnp.dpnp_array.dpnp_array.min"]], "nbytes (dpnp.dpnp_array.dpnp_array attribute)": [[80, "dpnp.dpnp_array.dpnp_array.nbytes"]], "ndim (dpnp.dpnp_array.dpnp_array attribute)": [[80, "dpnp.dpnp_array.dpnp_array.ndim"]], "nonzero() (dpnp.dpnp_array.dpnp_array method)": [[80, "dpnp.dpnp_array.dpnp_array.nonzero"]], "partition() (dpnp.dpnp_array.dpnp_array method)": [[80, "dpnp.dpnp_array.dpnp_array.partition"]], "prod() (dpnp.dpnp_array.dpnp_array method)": [[80, "dpnp.dpnp_array.dpnp_array.prod"]], "put() (dpnp.dpnp_array.dpnp_array method)": [[80, "dpnp.dpnp_array.dpnp_array.put"]], "ravel() (dpnp.dpnp_array.dpnp_array method)": [[80, "dpnp.dpnp_array.dpnp_array.ravel"]], "real (dpnp.dpnp_array.dpnp_array attribute)": [[80, "dpnp.dpnp_array.dpnp_array.real"]], "repeat() (dpnp.dpnp_array.dpnp_array method)": [[80, "dpnp.dpnp_array.dpnp_array.repeat"]], "reshape() (dpnp.dpnp_array.dpnp_array method)": [[80, "dpnp.dpnp_array.dpnp_array.reshape"]], "round() (dpnp.dpnp_array.dpnp_array method)": [[80, "dpnp.dpnp_array.dpnp_array.round"]], "shape (dpnp.dpnp_array.dpnp_array attribute)": [[80, "dpnp.dpnp_array.dpnp_array.shape"]], "size (dpnp.dpnp_array.dpnp_array attribute)": [[80, "dpnp.dpnp_array.dpnp_array.size"]], "squeeze() (dpnp.dpnp_array.dpnp_array method)": [[80, "dpnp.dpnp_array.dpnp_array.squeeze"]], "std() (dpnp.dpnp_array.dpnp_array method)": [[80, "dpnp.dpnp_array.dpnp_array.std"]], "strides (dpnp.dpnp_array.dpnp_array attribute)": [[80, "dpnp.dpnp_array.dpnp_array.strides"]], "sum() (dpnp.dpnp_array.dpnp_array method)": [[80, "dpnp.dpnp_array.dpnp_array.sum"]], "swapaxes() (dpnp.dpnp_array.dpnp_array method)": [[80, "dpnp.dpnp_array.dpnp_array.swapaxes"]], "sycl_context (dpnp.dpnp_array.dpnp_array attribute)": [[80, "dpnp.dpnp_array.dpnp_array.sycl_context"]], "sycl_device (dpnp.dpnp_array.dpnp_array attribute)": [[80, "dpnp.dpnp_array.dpnp_array.sycl_device"]], "sycl_queue (dpnp.dpnp_array.dpnp_array attribute)": [[80, "dpnp.dpnp_array.dpnp_array.sycl_queue"]], "take() (dpnp.dpnp_array.dpnp_array method)": [[80, "dpnp.dpnp_array.dpnp_array.take"]], "to_device() (dpnp.dpnp_array.dpnp_array method)": [[80, "dpnp.dpnp_array.dpnp_array.to_device"]], "transpose() (dpnp.dpnp_array.dpnp_array method)": [[80, "dpnp.dpnp_array.dpnp_array.transpose"]], "usm_type (dpnp.dpnp_array.dpnp_array attribute)": [[80, "dpnp.dpnp_array.dpnp_array.usm_type"]], "var() (dpnp.dpnp_array.dpnp_array method)": [[80, "dpnp.dpnp_array.dpnp_array.var"]], "__eq__() (dpnp.dtype method)": [[81, "dpnp.dtype.__eq__"]], "__ge__() (dpnp.dtype method)": [[81, "dpnp.dtype.__ge__"]], "__getitem__() (dpnp.dtype method)": [[81, "dpnp.dtype.__getitem__"]], "__gt__() (dpnp.dtype method)": [[81, "dpnp.dtype.__gt__"]], "__le__() (dpnp.dtype method)": [[81, "dpnp.dtype.__le__"]], "__len__() (dpnp.dtype method)": [[81, "dpnp.dtype.__len__"]], "__lt__() (dpnp.dtype method)": [[81, "dpnp.dtype.__lt__"]], "__ne__() (dpnp.dtype method)": [[81, "dpnp.dtype.__ne__"]], "alignment (dpnp.dtype attribute)": [[81, "dpnp.dtype.alignment"]], "base (dpnp.dtype attribute)": [[81, "dpnp.dtype.base"]], "byteorder (dpnp.dtype attribute)": [[81, "dpnp.dtype.byteorder"]], "char (dpnp.dtype attribute)": [[81, "dpnp.dtype.char"]], "descr (dpnp.dtype attribute)": [[81, "dpnp.dtype.descr"]], "dtype (class in dpnp)": [[81, "dpnp.dtype"]], "fields (dpnp.dtype attribute)": [[81, "dpnp.dtype.fields"]], "flags (dpnp.dtype attribute)": [[81, "dpnp.dtype.flags"]], "hasobject (dpnp.dtype attribute)": [[81, "dpnp.dtype.hasobject"]], "isalignedstruct (dpnp.dtype attribute)": [[81, "dpnp.dtype.isalignedstruct"]], "isbuiltin (dpnp.dtype attribute)": [[81, "dpnp.dtype.isbuiltin"]], "isnative (dpnp.dtype attribute)": [[81, "dpnp.dtype.isnative"]], "itemsize (dpnp.dtype attribute)": [[81, "dpnp.dtype.itemsize"]], "kind (dpnp.dtype attribute)": [[81, "dpnp.dtype.kind"]], "metadata (dpnp.dtype attribute)": [[81, "dpnp.dtype.metadata"]], "name (dpnp.dtype attribute)": [[81, "dpnp.dtype.name"]], "names (dpnp.dtype attribute)": [[81, "dpnp.dtype.names"]], "ndim (dpnp.dtype attribute)": [[81, "dpnp.dtype.ndim"]], "newbyteorder() (dpnp.dtype method)": [[81, "dpnp.dtype.newbyteorder"]], "num (dpnp.dtype attribute)": [[81, "dpnp.dtype.num"]], "shape (dpnp.dtype attribute)": [[81, "dpnp.dtype.shape"]], "str (dpnp.dtype attribute)": [[81, "dpnp.dtype.str"]], "subdtype (dpnp.dtype attribute)": [[81, "dpnp.dtype.subdtype"]], "type (dpnp.dtype attribute)": [[81, "dpnp.dtype.type"]], "ediff1d() (in module dpnp)": [[82, "dpnp.ediff1d"]], "einsum() (in module dpnp)": [[83, "dpnp.einsum"]], "einsum_path() (in module dpnp)": [[84, "dpnp.einsum_path"]], "empty() (in module dpnp)": [[85, "dpnp.empty"]], "empty_like() (in module dpnp)": [[86, "dpnp.empty_like"]], "equal() (in module dpnp)": [[87, "dpnp.equal"]], "erf() (in module dpnp)": [[88, "dpnp.erf"]], "exp() (in module dpnp)": [[89, "dpnp.exp"]], "exp2() (in module dpnp)": [[90, "dpnp.exp2"]], "expand_dims() (in module dpnp)": [[91, "dpnp.expand_dims"]], "expm1() (in module dpnp)": [[92, "dpnp.expm1"]], "extract() (in module dpnp)": [[93, "dpnp.extract"]], "eye() (in module dpnp)": [[94, "dpnp.eye"]], "fabs() (in module dpnp)": [[95, "dpnp.fabs"]], "fft() (in module dpnp.fft)": [[96, "dpnp.fft.fft"]], "fft2() (in module dpnp.fft)": [[97, "dpnp.fft.fft2"]], "fftfreq() (in module dpnp.fft)": [[98, "dpnp.fft.fftfreq"]], "fftn() (in module dpnp.fft)": [[99, "dpnp.fft.fftn"]], "fftshift() (in module dpnp.fft)": [[100, "dpnp.fft.fftshift"]], "hfft() (in module dpnp.fft)": [[101, "dpnp.fft.hfft"]], "ifft() (in module dpnp.fft)": [[102, "dpnp.fft.ifft"]], "ifft2() (in module dpnp.fft)": [[103, "dpnp.fft.ifft2"]], "ifftn() (in module dpnp.fft)": [[104, "dpnp.fft.ifftn"]], "ifftshift() (in module dpnp.fft)": [[105, "dpnp.fft.ifftshift"]], "ihfft() (in module dpnp.fft)": [[106, "dpnp.fft.ihfft"]], "irfft() (in module dpnp.fft)": [[107, "dpnp.fft.irfft"]], "irfft2() (in module dpnp.fft)": [[108, "dpnp.fft.irfft2"]], "irfftn() (in module dpnp.fft)": [[109, "dpnp.fft.irfftn"]], "rfft() (in module dpnp.fft)": [[110, "dpnp.fft.rfft"]], "rfft2() (in module dpnp.fft)": [[111, "dpnp.fft.rfft2"]], "rfftfreq() (in module dpnp.fft)": [[112, "dpnp.fft.rfftfreq"]], "rfftn() (in module dpnp.fft)": [[113, "dpnp.fft.rfftn"]], "fill_diagonal() (in module dpnp)": [[114, "dpnp.fill_diagonal"]], "finfo() (in module dpnp)": [[115, "dpnp.finfo"]], "__eq__() (dpnp.flatiter method)": [[116, "dpnp.flatiter.__eq__"]], "__ge__() (dpnp.flatiter method)": [[116, "dpnp.flatiter.__ge__"]], "__getitem__() (dpnp.flatiter method)": [[116, "dpnp.flatiter.__getitem__"]], "__gt__() (dpnp.flatiter method)": [[116, "dpnp.flatiter.__gt__"]], "__iter__() (dpnp.flatiter method)": [[116, "dpnp.flatiter.__iter__"]], "__le__() (dpnp.flatiter method)": [[116, "dpnp.flatiter.__le__"]], "__lt__() (dpnp.flatiter method)": [[116, "dpnp.flatiter.__lt__"]], "__ne__() (dpnp.flatiter method)": [[116, "dpnp.flatiter.__ne__"]], "__next__() (dpnp.flatiter method)": [[116, "dpnp.flatiter.__next__"]], "__setitem__() (dpnp.flatiter method)": [[116, "dpnp.flatiter.__setitem__"]], "flatiter (class in dpnp)": [[116, "dpnp.flatiter"]], "flip() (in module dpnp)": [[117, "dpnp.flip"]], "fliplr() (in module dpnp)": [[118, "dpnp.fliplr"]], "flipud() (in module dpnp)": [[119, "dpnp.flipud"]], "floor() (in module dpnp)": [[120, "dpnp.floor"]], "floor_divide() (in module dpnp)": [[121, "dpnp.floor_divide"]], "fmax() (in module dpnp)": [[122, "dpnp.fmax"]], "fmin() (in module dpnp)": [[123, "dpnp.fmin"]], "fmod() (in module dpnp)": [[124, "dpnp.fmod"]], "from_dlpack() (in module dpnp)": [[125, "dpnp.from_dlpack"]], "frombuffer() (in module dpnp)": [[126, "dpnp.frombuffer"]], "fromfile() (in module dpnp)": [[127, "dpnp.fromfile"]], "fromfunction() (in module dpnp)": [[128, "dpnp.fromfunction"]], "fromiter() (in module dpnp)": [[129, "dpnp.fromiter"]], "fromstring() (in module dpnp)": [[130, "dpnp.fromstring"]], "full() (in module dpnp)": [[131, "dpnp.full"]], "full_like() (in module dpnp)": [[132, "dpnp.full_like"]], "geomspace() (in module dpnp)": [[133, "dpnp.geomspace"]], "get_include() (in module dpnp)": [[134, "dpnp.get_include"]], "gradient() (in module dpnp)": [[135, "dpnp.gradient"]], "greater() (in module dpnp)": [[136, "dpnp.greater"]], "greater_equal() (in module dpnp)": [[137, "dpnp.greater_equal"]], "histogram() (in module dpnp)": [[138, "dpnp.histogram"]], "hstack() (in module dpnp)": [[139, "dpnp.hstack"]], "hypot() (in module dpnp)": [[140, "dpnp.hypot"]], "identity() (in module dpnp)": [[141, "dpnp.identity"]], "iinfo() (in module dpnp)": [[142, "dpnp.iinfo"]], "imag() (in module dpnp)": [[143, "dpnp.imag"]], "indices() (in module dpnp)": [[144, "dpnp.indices"]], "inner() (in module dpnp)": [[145, "dpnp.inner"]], "invert() (in module dpnp)": [[146, "dpnp.invert"]], "isclose() (in module dpnp)": [[147, "dpnp.isclose"]], "isfinite() (in module dpnp)": [[148, "dpnp.isfinite"]], "isinf() (in module dpnp)": [[149, "dpnp.isinf"]], "isnan() (in module dpnp)": [[150, "dpnp.isnan"]], "isscalar() (in module dpnp)": [[151, "dpnp.isscalar"]], "issubdtype() (in module dpnp)": [[152, "dpnp.issubdtype"]], "issubsctype() (in module dpnp)": [[153, "dpnp.issubsctype"]], "kron() (in module dpnp)": [[154, "dpnp.kron"]], "left_shift() (in module dpnp)": [[155, "dpnp.left_shift"]], "less() (in module dpnp)": [[156, "dpnp.less"]], "less_equal() (in module dpnp)": [[157, "dpnp.less_equal"]], "cholesky() (in module dpnp.linalg)": [[158, "dpnp.linalg.cholesky"]], "cond() (in module dpnp.linalg)": [[159, "dpnp.linalg.cond"]], "det() (in module dpnp.linalg)": [[160, "dpnp.linalg.det"]], "eig() (in module dpnp.linalg)": [[161, "dpnp.linalg.eig"]], "eigh() (in module dpnp.linalg)": [[162, "dpnp.linalg.eigh"]], "eigvals() (in module dpnp.linalg)": [[163, "dpnp.linalg.eigvals"]], "inv() (in module dpnp.linalg)": [[164, "dpnp.linalg.inv"]], "matrix_power() (in module dpnp.linalg)": [[165, "dpnp.linalg.matrix_power"]], "matrix_rank() (in module dpnp.linalg)": [[166, "dpnp.linalg.matrix_rank"]], "multi_dot() (in module dpnp.linalg)": [[167, "dpnp.linalg.multi_dot"]], "norm() (in module dpnp.linalg)": [[168, "dpnp.linalg.norm"]], "qr() (in module dpnp.linalg)": [[169, "dpnp.linalg.qr"]], "solve() (in module dpnp.linalg)": [[170, "dpnp.linalg.solve"]], "svd() (in module dpnp.linalg)": [[171, "dpnp.linalg.svd"]], "linspace() (in module dpnp)": [[172, "dpnp.linspace"]], "loadtxt() (in module dpnp)": [[173, "dpnp.loadtxt"]], "log() (in module dpnp)": [[174, "dpnp.log"]], "log10() (in module dpnp)": [[175, "dpnp.log10"]], "log1p() (in module dpnp)": [[176, "dpnp.log1p"]], "log2() (in module dpnp)": [[177, "dpnp.log2"]], "logaddexp() (in module dpnp)": [[178, "dpnp.logaddexp"]], "logical_and() (in module dpnp)": [[179, "dpnp.logical_and"]], "logical_not() (in module dpnp)": [[180, "dpnp.logical_not"]], "logical_or() (in module dpnp)": [[181, "dpnp.logical_or"]], "logical_xor() (in module dpnp)": [[182, "dpnp.logical_xor"]], "logspace() (in module dpnp)": [[183, "dpnp.logspace"]], "matmul() (in module dpnp)": [[184, "dpnp.matmul"]], "max() (in module dpnp)": [[185, "dpnp.max"]], "maximum() (in module dpnp)": [[186, "dpnp.maximum"]], "mean() (in module dpnp)": [[187, "dpnp.mean"]], "median() (in module dpnp)": [[188, "dpnp.median"]], "meshgrid() (in module dpnp)": [[189, "dpnp.meshgrid"]], "mgrid (in module dpnp)": [[190, "dpnp.mgrid"]], "min() (in module dpnp)": [[191, "dpnp.min"]], "minimum() (in module dpnp)": [[192, "dpnp.minimum"]], "mod() (in module dpnp)": [[193, "dpnp.mod"]], "modf() (in module dpnp)": [[194, "dpnp.modf"]], "moveaxis() (in module dpnp)": [[195, "dpnp.moveaxis"]], "multiply() (in module dpnp)": [[196, "dpnp.multiply"]], "nanargmax() (in module dpnp)": [[197, "dpnp.nanargmax"]], "nanargmin() (in module dpnp)": [[198, "dpnp.nanargmin"]], "nancumprod() (in module dpnp)": [[199, "dpnp.nancumprod"]], "nancumsum() (in module dpnp)": [[200, "dpnp.nancumsum"]], "nanmax() (in module dpnp)": [[201, "dpnp.nanmax"]], "nanmin() (in module dpnp)": [[202, "dpnp.nanmin"]], "nanprod() (in module dpnp)": [[203, "dpnp.nanprod"]], "nansum() (in module dpnp)": [[204, "dpnp.nansum"]], "nanvar() (in module dpnp)": [[205, "dpnp.nanvar"]], "ndarray (in module dpnp)": [[206, "dpnp.ndarray"]], "t (dpnp.ndarray property)": [[207, "dpnp.ndarray.T"]], "__abs__() (dpnp.ndarray method)": [[208, "dpnp.ndarray.__abs__"]], "__add__() (dpnp.ndarray method)": [[209, "dpnp.ndarray.__add__"]], "__and__() (dpnp.ndarray method)": [[210, "dpnp.ndarray.__and__"]], "__complex__() (dpnp.ndarray method)": [[211, "dpnp.ndarray.__complex__"]], "__copy__() (dpnp.ndarray method)": [[212, "dpnp.ndarray.__copy__"]], "__eq__() (dpnp.ndarray method)": [[213, "dpnp.ndarray.__eq__"]], "__float__() (dpnp.ndarray method)": [[214, "dpnp.ndarray.__float__"]], "__floordiv__() (dpnp.ndarray method)": [[215, "dpnp.ndarray.__floordiv__"]], "__ge__() (dpnp.ndarray method)": [[216, "dpnp.ndarray.__ge__"]], "__getitem__() (dpnp.ndarray method)": [[217, "dpnp.ndarray.__getitem__"]], "__gt__() (dpnp.ndarray method)": [[218, "dpnp.ndarray.__gt__"]], "__iadd__() (dpnp.ndarray method)": [[219, "dpnp.ndarray.__iadd__"]], "__iand__() (dpnp.ndarray method)": [[220, "dpnp.ndarray.__iand__"]], "__ifloordiv__() (dpnp.ndarray method)": [[221, "dpnp.ndarray.__ifloordiv__"]], "__ilshift__() (dpnp.ndarray method)": [[222, "dpnp.ndarray.__ilshift__"]], "__imod__() (dpnp.ndarray method)": [[223, "dpnp.ndarray.__imod__"]], "__imul__() (dpnp.ndarray method)": [[224, "dpnp.ndarray.__imul__"]], "__int__() (dpnp.ndarray method)": [[225, "dpnp.ndarray.__int__"]], "__invert__() (dpnp.ndarray method)": [[226, "dpnp.ndarray.__invert__"]], "__ior__() (dpnp.ndarray method)": [[227, "dpnp.ndarray.__ior__"]], "__ipow__() (dpnp.ndarray method)": [[228, "dpnp.ndarray.__ipow__"]], "__irshift__() (dpnp.ndarray method)": [[229, "dpnp.ndarray.__irshift__"]], "__isub__() (dpnp.ndarray method)": [[230, "dpnp.ndarray.__isub__"]], "__itruediv__() (dpnp.ndarray method)": [[231, "dpnp.ndarray.__itruediv__"]], "__ixor__() (dpnp.ndarray method)": [[232, "dpnp.ndarray.__ixor__"]], "__le__() (dpnp.ndarray method)": [[233, "dpnp.ndarray.__le__"]], "__len__() (dpnp.ndarray method)": [[234, "dpnp.ndarray.__len__"]], "__lshift__() (dpnp.ndarray method)": [[235, "dpnp.ndarray.__lshift__"]], "__lt__() (dpnp.ndarray method)": [[236, "dpnp.ndarray.__lt__"]], "__mod__() (dpnp.ndarray method)": [[237, "dpnp.ndarray.__mod__"]], "__mul__() (dpnp.ndarray method)": [[238, "dpnp.ndarray.__mul__"]], "__ne__() (dpnp.ndarray method)": [[239, "dpnp.ndarray.__ne__"]], "__neg__() (dpnp.ndarray method)": [[240, "dpnp.ndarray.__neg__"]], "__new__() (dpnp.ndarray method)": [[241, "dpnp.ndarray.__new__"]], "__or__() (dpnp.ndarray method)": [[242, "dpnp.ndarray.__or__"]], "__pos__() (dpnp.ndarray method)": [[243, "dpnp.ndarray.__pos__"]], "__pow__() (dpnp.ndarray method)": [[244, "dpnp.ndarray.__pow__"]], "__repr__() (dpnp.ndarray method)": [[245, "dpnp.ndarray.__repr__"]], "__rshift__() (dpnp.ndarray method)": [[246, "dpnp.ndarray.__rshift__"]], "__setitem__() (dpnp.ndarray method)": [[247, "dpnp.ndarray.__setitem__"]], "__str__() (dpnp.ndarray method)": [[248, "dpnp.ndarray.__str__"]], "__sub__() (dpnp.ndarray method)": [[249, "dpnp.ndarray.__sub__"]], "__truediv__() (dpnp.ndarray method)": [[250, "dpnp.ndarray.__truediv__"]], "__xor__() (dpnp.ndarray method)": [[251, "dpnp.ndarray.__xor__"]], "all() (dpnp.ndarray method)": [[252, "dpnp.ndarray.all"]], "any() (dpnp.ndarray method)": [[253, "dpnp.ndarray.any"]], "argmax() (dpnp.ndarray method)": [[254, "dpnp.ndarray.argmax"]], "argmin() (dpnp.ndarray method)": [[255, "dpnp.ndarray.argmin"]], "argsort() (dpnp.ndarray method)": [[256, "dpnp.ndarray.argsort"]], "astype() (dpnp.ndarray method)": [[257, "dpnp.ndarray.astype"]], "choose() (dpnp.ndarray method)": [[258, "dpnp.ndarray.choose"]], "clip() (dpnp.ndarray method)": [[259, "dpnp.ndarray.clip"]], "conj() (dpnp.ndarray method)": [[260, "dpnp.ndarray.conj"]], "conjugate() (dpnp.ndarray method)": [[261, "dpnp.ndarray.conjugate"]], "copy() (dpnp.ndarray method)": [[262, "dpnp.ndarray.copy"]], "cumsum() (dpnp.ndarray method)": [[263, "dpnp.ndarray.cumsum"]], "diagonal() (dpnp.ndarray method)": [[264, "dpnp.ndarray.diagonal"]], "dtype (dpnp.ndarray property)": [[265, "dpnp.ndarray.dtype"]], "fill() (dpnp.ndarray method)": [[266, "dpnp.ndarray.fill"]], "flags (dpnp.ndarray property)": [[267, "dpnp.ndarray.flags"]], "flat (dpnp.ndarray property)": [[268, "dpnp.ndarray.flat"]], "flatten() (dpnp.ndarray method)": [[269, "dpnp.ndarray.flatten"]], "imag (dpnp.ndarray property)": [[270, "dpnp.ndarray.imag"]], "item() (dpnp.ndarray method)": [[271, "dpnp.ndarray.item"]], "itemsize (dpnp.ndarray property)": [[272, "dpnp.ndarray.itemsize"]], "max() (dpnp.ndarray method)": [[273, "dpnp.ndarray.max"]], "mean() (dpnp.ndarray method)": [[274, "dpnp.ndarray.mean"]], "min() (dpnp.ndarray method)": [[275, "dpnp.ndarray.min"]], "nbytes (dpnp.ndarray property)": [[276, "dpnp.ndarray.nbytes"]], "ndim (dpnp.ndarray property)": [[277, "dpnp.ndarray.ndim"]], "nonzero() (dpnp.ndarray method)": [[278, "dpnp.ndarray.nonzero"]], "partition() (dpnp.ndarray method)": [[279, "dpnp.ndarray.partition"]], "prod() (dpnp.ndarray method)": [[280, "dpnp.ndarray.prod"]], "put() (dpnp.ndarray method)": [[281, "dpnp.ndarray.put"]], "ravel() (dpnp.ndarray method)": [[282, "dpnp.ndarray.ravel"]], "real (dpnp.ndarray property)": [[283, "dpnp.ndarray.real"]], "repeat() (dpnp.ndarray method)": [[284, "dpnp.ndarray.repeat"]], "reshape() (dpnp.ndarray method)": [[285, "dpnp.ndarray.reshape"]], "round() (dpnp.ndarray method)": [[286, "dpnp.ndarray.round"]], "shape (dpnp.ndarray property)": [[287, "dpnp.ndarray.shape"]], "size (dpnp.ndarray property)": [[288, "dpnp.ndarray.size"]], "squeeze() (dpnp.ndarray method)": [[289, "dpnp.ndarray.squeeze"]], "std() (dpnp.ndarray method)": [[290, "dpnp.ndarray.std"]], "strides (dpnp.ndarray property)": [[291, "dpnp.ndarray.strides"]], "sum() (dpnp.ndarray method)": [[292, "dpnp.ndarray.sum"]], "swapaxes() (dpnp.ndarray method)": [[293, "dpnp.ndarray.swapaxes"]], "take() (dpnp.ndarray method)": [[294, "dpnp.ndarray.take"]], "transpose() (dpnp.ndarray method)": [[295, "dpnp.ndarray.transpose"]], "var() (dpnp.ndarray method)": [[296, "dpnp.ndarray.var"]], "negative() (in module dpnp)": [[297, "dpnp.negative"]], "nonzero() (in module dpnp)": [[298, "dpnp.nonzero"]], "not_equal() (in module dpnp)": [[299, "dpnp.not_equal"]], "ogrid (in module dpnp)": [[300, "dpnp.ogrid"]], "ones() (in module dpnp)": [[301, "dpnp.ones"]], "ones_like() (in module dpnp)": [[302, "dpnp.ones_like"]], "outer() (in module dpnp)": [[303, "dpnp.outer"]], "partition() (in module dpnp)": [[304, "dpnp.partition"]], "place() (in module dpnp)": [[305, "dpnp.place"]], "positive() (in module dpnp)": [[306, "dpnp.positive"]], "power() (in module dpnp)": [[307, "dpnp.power"]], "prod() (in module dpnp)": [[308, "dpnp.prod"]], "proj() (in module dpnp)": [[309, "dpnp.proj"]], "ptp() (in module dpnp)": [[310, "dpnp.ptp"]], "put() (in module dpnp)": [[311, "dpnp.put"]], "put_along_axis() (in module dpnp)": [[312, "dpnp.put_along_axis"]], "putmask() (in module dpnp)": [[313, "dpnp.putmask"]], "rad2deg() (in module dpnp)": [[314, "dpnp.rad2deg"]], "radians() (in module dpnp)": [[315, "dpnp.radians"]], "randomstate (class in dpnp.random)": [[316, "dpnp.random.RandomState"]], "__eq__() (dpnp.random.randomstate method)": [[316, "dpnp.random.RandomState.__eq__"]], "__ge__() (dpnp.random.randomstate method)": [[316, "dpnp.random.RandomState.__ge__"]], "__gt__() (dpnp.random.randomstate method)": [[316, "dpnp.random.RandomState.__gt__"]], "__le__() (dpnp.random.randomstate method)": [[316, "dpnp.random.RandomState.__le__"]], "__lt__() (dpnp.random.randomstate method)": [[316, "dpnp.random.RandomState.__lt__"]], "__ne__() (dpnp.random.randomstate method)": [[316, "dpnp.random.RandomState.__ne__"]], "get_state() (dpnp.random.randomstate method)": [[316, "dpnp.random.RandomState.get_state"]], "get_sycl_device() (dpnp.random.randomstate method)": [[316, "dpnp.random.RandomState.get_sycl_device"]], "get_sycl_queue() (dpnp.random.randomstate method)": [[316, "dpnp.random.RandomState.get_sycl_queue"]], "normal() (dpnp.random.randomstate method)": [[316, "dpnp.random.RandomState.normal"]], "rand() (dpnp.random.randomstate method)": [[316, "dpnp.random.RandomState.rand"]], "randint() (dpnp.random.randomstate method)": [[316, "dpnp.random.RandomState.randint"]], "randn() (dpnp.random.randomstate method)": [[316, "dpnp.random.RandomState.randn"]], "random_sample() (dpnp.random.randomstate method)": [[316, "dpnp.random.RandomState.random_sample"]], "standard_normal() (dpnp.random.randomstate method)": [[316, "dpnp.random.RandomState.standard_normal"]], "uniform() (dpnp.random.randomstate method)": [[316, "dpnp.random.RandomState.uniform"]], "beta() (in module dpnp.random)": [[317, "dpnp.random.beta"]], "binomial() (in module dpnp.random)": [[318, "dpnp.random.binomial"]], "bytes() (in module dpnp.random)": [[319, "dpnp.random.bytes"]], "chisquare() (in module dpnp.random)": [[320, "dpnp.random.chisquare"]], "choice() (in module dpnp.random)": [[321, "dpnp.random.choice"]], "dirichlet() (in module dpnp.random)": [[322, "dpnp.random.dirichlet"]], "exponential() (in module dpnp.random)": [[323, "dpnp.random.exponential"]], "f() (in module dpnp.random)": [[324, "dpnp.random.f"]], "gamma() (in module dpnp.random)": [[325, "dpnp.random.gamma"]], "geometric() (in module dpnp.random)": [[326, "dpnp.random.geometric"]], "gumbel() (in module dpnp.random)": [[327, "dpnp.random.gumbel"]], "hypergeometric() (in module dpnp.random)": [[328, "dpnp.random.hypergeometric"]], "laplace() (in module dpnp.random)": [[329, "dpnp.random.laplace"]], "logistic() (in module dpnp.random)": [[330, "dpnp.random.logistic"]], "lognormal() (in module dpnp.random)": [[331, "dpnp.random.lognormal"]], "logseries() (in module dpnp.random)": [[332, "dpnp.random.logseries"]], "multinomial() (in module dpnp.random)": [[333, "dpnp.random.multinomial"]], "multivariate_normal() (in module dpnp.random)": [[334, "dpnp.random.multivariate_normal"]], "negative_binomial() (in module dpnp.random)": [[335, "dpnp.random.negative_binomial"]], "noncentral_chisquare() (in module dpnp.random)": [[336, "dpnp.random.noncentral_chisquare"]], "noncentral_f() (in module dpnp.random)": [[337, "dpnp.random.noncentral_f"]], "normal() (in module dpnp.random)": [[338, "dpnp.random.normal"]], "pareto() (in module dpnp.random)": [[339, "dpnp.random.pareto"]], "permutation() (in module dpnp.random)": [[340, "dpnp.random.permutation"]], "poisson() (in module dpnp.random)": [[341, "dpnp.random.poisson"]], "power() (in module dpnp.random)": [[342, "dpnp.random.power"]], "rand() (in module dpnp.random)": [[343, "dpnp.random.rand"]], "randint() (in module dpnp.random)": [[344, "dpnp.random.randint"]], "randn() (in module dpnp.random)": [[345, "dpnp.random.randn"]], "random() (in module dpnp.random)": [[346, "dpnp.random.random"]], "random_integers() (in module dpnp.random)": [[347, "dpnp.random.random_integers"]], "random_sample() (in module dpnp.random)": [[348, "dpnp.random.random_sample"]], "ranf() (in module dpnp.random)": [[349, "dpnp.random.ranf"]], "rayleigh() (in module dpnp.random)": [[350, "dpnp.random.rayleigh"]], "sample() (in module dpnp.random)": [[351, "dpnp.random.sample"]], "seed() (in module dpnp.random)": [[352, "dpnp.random.seed"]], "shuffle() (in module dpnp.random)": [[353, "dpnp.random.shuffle"]], "standard_cauchy() (in module dpnp.random)": [[354, "dpnp.random.standard_cauchy"]], "standard_exponential() (in module dpnp.random)": [[355, "dpnp.random.standard_exponential"]], "standard_gamma() (in module dpnp.random)": [[356, "dpnp.random.standard_gamma"]], "standard_normal() (in module dpnp.random)": [[357, "dpnp.random.standard_normal"]], "standard_t() (in module dpnp.random)": [[358, "dpnp.random.standard_t"]], "triangular() (in module dpnp.random)": [[359, "dpnp.random.triangular"]], "uniform() (in module dpnp.random)": [[360, "dpnp.random.uniform"]], "vonmises() (in module dpnp.random)": [[361, "dpnp.random.vonmises"]], "wald() (in module dpnp.random)": [[362, "dpnp.random.wald"]], "weibull() (in module dpnp.random)": [[363, "dpnp.random.weibull"]], "zipf() (in module dpnp.random)": [[364, "dpnp.random.zipf"]], "ravel() (in module dpnp)": [[365, "dpnp.ravel"]], "real() (in module dpnp)": [[366, "dpnp.real"]], "reciprocal() (in module dpnp)": [[367, "dpnp.reciprocal"]], "remainder() (in module dpnp)": [[368, "dpnp.remainder"]], "repeat() (in module dpnp)": [[369, "dpnp.repeat"]], "reshape() (in module dpnp)": [[370, "dpnp.reshape"]], "result_type() (in module dpnp)": [[371, "dpnp.result_type"]], "right_shift() (in module dpnp)": [[372, "dpnp.right_shift"]], "rint() (in module dpnp)": [[373, "dpnp.rint"]], "roll() (in module dpnp)": [[374, "dpnp.roll"]], "rollaxis() (in module dpnp)": [[375, "dpnp.rollaxis"]], "round() (in module dpnp)": [[376, "dpnp.round"]], "searchsorted() (in module dpnp)": [[377, "dpnp.searchsorted"]], "select() (in module dpnp)": [[378, "dpnp.select"]], "shape() (in module dpnp)": [[379, "dpnp.shape"]], "sign() (in module dpnp)": [[380, "dpnp.sign"]], "signbit() (in module dpnp)": [[381, "dpnp.signbit"]], "sin() (in module dpnp)": [[382, "dpnp.sin"]], "sinh() (in module dpnp)": [[383, "dpnp.sinh"]], "sort() (in module dpnp)": [[384, "dpnp.sort"]], "sqrt() (in module dpnp)": [[385, "dpnp.sqrt"]], "square() (in module dpnp)": [[386, "dpnp.square"]], "squeeze() (in module dpnp)": [[387, "dpnp.squeeze"]], "stack() (in module dpnp)": [[388, "dpnp.stack"]], "std() (in module dpnp)": [[389, "dpnp.std"]], "subtract() (in module dpnp)": [[390, "dpnp.subtract"]], "sum() (in module dpnp)": [[391, "dpnp.sum"]], "swapaxes() (in module dpnp)": [[392, "dpnp.swapaxes"]], "take() (in module dpnp)": [[393, "dpnp.take"]], "take_along_axis() (in module dpnp)": [[394, "dpnp.take_along_axis"]], "tan() (in module dpnp)": [[395, "dpnp.tan"]], "tanh() (in module dpnp)": [[396, "dpnp.tanh"]], "tensordot() (in module dpnp)": [[397, "dpnp.tensordot"]], "tile() (in module dpnp)": [[398, "dpnp.tile"]], "trace() (in module dpnp)": [[399, "dpnp.trace"]], "transpose() (in module dpnp)": [[400, "dpnp.transpose"]], "trapz() (in module dpnp)": [[401, "dpnp.trapz"]], "tri() (in module dpnp)": [[402, "dpnp.tri"]], "tril() (in module dpnp)": [[403, "dpnp.tril"]], "tril_indices() (in module dpnp)": [[404, "dpnp.tril_indices"]], "tril_indices_from() (in module dpnp)": [[405, "dpnp.tril_indices_from"]], "triu() (in module dpnp)": [[406, "dpnp.triu"]], "triu_indices() (in module dpnp)": [[407, "dpnp.triu_indices"]], "triu_indices_from() (in module dpnp)": [[408, "dpnp.triu_indices_from"]], "true_divide() (in module dpnp)": [[409, "dpnp.true_divide"]], "trunc() (in module dpnp)": [[410, "dpnp.trunc"]], "unique() (in module dpnp)": [[411, "dpnp.unique"]], "unwrap() (in module dpnp)": [[412, "dpnp.unwrap"]], "vander() (in module dpnp)": [[413, "dpnp.vander"]], "var() (in module dpnp)": [[414, "dpnp.var"]], "vdot() (in module dpnp)": [[415, "dpnp.vdot"]], "vstack() (in module dpnp)": [[416, "dpnp.vstack"]], "where() (in module dpnp)": [[417, "dpnp.where"]], "zeros() (in module dpnp)": [[418, "dpnp.zeros"]], "zeros_like() (in module dpnp)": [[419, "dpnp.zeros_like"]], "dpnp.random": [[430, "module-dpnp.random"]]}})