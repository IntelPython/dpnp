Search.setIndex({"docnames": ["dpctl", "dpnp_backend_api", "index", "overview", "quick_start_guide", "reference/binary", "reference/comparison", "reference/creation", "reference/difference", "reference/dtype", "reference/fft", "reference/generated/dpnp.abs", "reference/generated/dpnp.absolute", "reference/generated/dpnp.add", "reference/generated/dpnp.all", "reference/generated/dpnp.allclose", "reference/generated/dpnp.amax", "reference/generated/dpnp.amin", "reference/generated/dpnp.any", "reference/generated/dpnp.arange", "reference/generated/dpnp.arccos", "reference/generated/dpnp.arccosh", "reference/generated/dpnp.arcsin", "reference/generated/dpnp.arcsinh", "reference/generated/dpnp.arctan", "reference/generated/dpnp.arctan2", "reference/generated/dpnp.arctanh", "reference/generated/dpnp.argmax", "reference/generated/dpnp.argmin", "reference/generated/dpnp.argsort", "reference/generated/dpnp.around", "reference/generated/dpnp.array", "reference/generated/dpnp.array_equal", "reference/generated/dpnp.asanyarray", "reference/generated/dpnp.asarray", "reference/generated/dpnp.ascontiguousarray", "reference/generated/dpnp.asfarray", "reference/generated/dpnp.asnumpy", "reference/generated/dpnp.atleast_1d", "reference/generated/dpnp.atleast_2d", "reference/generated/dpnp.atleast_3d", "reference/generated/dpnp.average", "reference/generated/dpnp.bincount", "reference/generated/dpnp.bitwise_and", "reference/generated/dpnp.bitwise_not", "reference/generated/dpnp.bitwise_or", "reference/generated/dpnp.bitwise_xor", "reference/generated/dpnp.broadcast_to", "reference/generated/dpnp.cbrt", "reference/generated/dpnp.ceil", "reference/generated/dpnp.choose", "reference/generated/dpnp.concatenate", "reference/generated/dpnp.conj", "reference/generated/dpnp.conjugate", "reference/generated/dpnp.convolve", "reference/generated/dpnp.copy", "reference/generated/dpnp.copysign", "reference/generated/dpnp.copyto", "reference/generated/dpnp.correlate", "reference/generated/dpnp.cos", "reference/generated/dpnp.cosh", "reference/generated/dpnp.count_nonzero", "reference/generated/dpnp.cov", "reference/generated/dpnp.cross", "reference/generated/dpnp.cumprod", "reference/generated/dpnp.cumsum", "reference/generated/dpnp.deg2rad", "reference/generated/dpnp.degrees", "reference/generated/dpnp.diag", "reference/generated/dpnp.diag_indices", "reference/generated/dpnp.diag_indices_from", "reference/generated/dpnp.diagflat", "reference/generated/dpnp.diagonal", "reference/generated/dpnp.diff", "reference/generated/dpnp.divide", "reference/generated/dpnp.dot", "reference/generated/dpnp.dpnp_array.dpnp_array", "reference/generated/dpnp.dtype", "reference/generated/dpnp.ediff1d", "reference/generated/dpnp.einsum", "reference/generated/dpnp.einsum_path", "reference/generated/dpnp.empty", "reference/generated/dpnp.empty_like", "reference/generated/dpnp.equal", "reference/generated/dpnp.erf", "reference/generated/dpnp.exp", "reference/generated/dpnp.exp2", "reference/generated/dpnp.expand_dims", "reference/generated/dpnp.expm1", "reference/generated/dpnp.extract", "reference/generated/dpnp.eye", "reference/generated/dpnp.fabs", "reference/generated/dpnp.fft.fft", "reference/generated/dpnp.fft.fft2", "reference/generated/dpnp.fft.fftfreq", "reference/generated/dpnp.fft.fftn", "reference/generated/dpnp.fft.fftshift", "reference/generated/dpnp.fft.hfft", "reference/generated/dpnp.fft.ifft", "reference/generated/dpnp.fft.ifft2", "reference/generated/dpnp.fft.ifftn", "reference/generated/dpnp.fft.ifftshift", "reference/generated/dpnp.fft.ihfft", "reference/generated/dpnp.fft.irfft", "reference/generated/dpnp.fft.irfft2", "reference/generated/dpnp.fft.irfftn", "reference/generated/dpnp.fft.rfft", "reference/generated/dpnp.fft.rfft2", "reference/generated/dpnp.fft.rfftfreq", "reference/generated/dpnp.fft.rfftn", "reference/generated/dpnp.fill_diagonal", "reference/generated/dpnp.flatiter", "reference/generated/dpnp.floor", "reference/generated/dpnp.floor_divide", "reference/generated/dpnp.fmax", "reference/generated/dpnp.fmin", "reference/generated/dpnp.fmod", "reference/generated/dpnp.from_dlpack", "reference/generated/dpnp.frombuffer", "reference/generated/dpnp.fromfile", "reference/generated/dpnp.fromfunction", "reference/generated/dpnp.fromiter", "reference/generated/dpnp.fromstring", "reference/generated/dpnp.full", "reference/generated/dpnp.full_like", "reference/generated/dpnp.geomspace", "reference/generated/dpnp.get_include", "reference/generated/dpnp.gradient", "reference/generated/dpnp.greater", "reference/generated/dpnp.greater_equal", "reference/generated/dpnp.histogram", "reference/generated/dpnp.hstack", "reference/generated/dpnp.hypot", "reference/generated/dpnp.identity", "reference/generated/dpnp.indices", "reference/generated/dpnp.inner", "reference/generated/dpnp.invert", "reference/generated/dpnp.isclose", "reference/generated/dpnp.isfinite", "reference/generated/dpnp.isinf", "reference/generated/dpnp.isnan", "reference/generated/dpnp.isscalar", "reference/generated/dpnp.issubdtype", "reference/generated/dpnp.issubsctype", "reference/generated/dpnp.kron", "reference/generated/dpnp.left_shift", "reference/generated/dpnp.less", "reference/generated/dpnp.less_equal", "reference/generated/dpnp.linalg.cholesky", "reference/generated/dpnp.linalg.cond", "reference/generated/dpnp.linalg.det", "reference/generated/dpnp.linalg.eig", "reference/generated/dpnp.linalg.eigh", "reference/generated/dpnp.linalg.eigvals", "reference/generated/dpnp.linalg.inv", "reference/generated/dpnp.linalg.matrix_power", "reference/generated/dpnp.linalg.matrix_rank", "reference/generated/dpnp.linalg.multi_dot", "reference/generated/dpnp.linalg.norm", "reference/generated/dpnp.linalg.qr", "reference/generated/dpnp.linalg.svd", "reference/generated/dpnp.linspace", "reference/generated/dpnp.loadtxt", "reference/generated/dpnp.log", "reference/generated/dpnp.log10", "reference/generated/dpnp.log1p", "reference/generated/dpnp.log2", "reference/generated/dpnp.logical_and", "reference/generated/dpnp.logical_not", "reference/generated/dpnp.logical_or", "reference/generated/dpnp.logical_xor", "reference/generated/dpnp.logspace", "reference/generated/dpnp.matmul", "reference/generated/dpnp.max", "reference/generated/dpnp.maximum", "reference/generated/dpnp.mean", "reference/generated/dpnp.median", "reference/generated/dpnp.meshgrid", "reference/generated/dpnp.mgrid", "reference/generated/dpnp.min", "reference/generated/dpnp.minimum", "reference/generated/dpnp.mod", "reference/generated/dpnp.modf", "reference/generated/dpnp.moveaxis", "reference/generated/dpnp.multiply", "reference/generated/dpnp.nancumprod", "reference/generated/dpnp.nancumsum", "reference/generated/dpnp.nanprod", "reference/generated/dpnp.nansum", "reference/generated/dpnp.nanvar", "reference/generated/dpnp.ndarray", "reference/generated/dpnp.ndarray.T", "reference/generated/dpnp.ndarray.__abs__", "reference/generated/dpnp.ndarray.__add__", "reference/generated/dpnp.ndarray.__and__", "reference/generated/dpnp.ndarray.__complex__", "reference/generated/dpnp.ndarray.__eq__", "reference/generated/dpnp.ndarray.__float__", "reference/generated/dpnp.ndarray.__ge__", "reference/generated/dpnp.ndarray.__getitem__", "reference/generated/dpnp.ndarray.__gt__", "reference/generated/dpnp.ndarray.__iadd__", "reference/generated/dpnp.ndarray.__iand__", "reference/generated/dpnp.ndarray.__ilshift__", "reference/generated/dpnp.ndarray.__imul__", "reference/generated/dpnp.ndarray.__int__", "reference/generated/dpnp.ndarray.__invert__", "reference/generated/dpnp.ndarray.__ior__", "reference/generated/dpnp.ndarray.__ipow__", "reference/generated/dpnp.ndarray.__irshift__", "reference/generated/dpnp.ndarray.__isub__", "reference/generated/dpnp.ndarray.__itruediv__", "reference/generated/dpnp.ndarray.__ixor__", "reference/generated/dpnp.ndarray.__le__", "reference/generated/dpnp.ndarray.__len__", "reference/generated/dpnp.ndarray.__lshift__", "reference/generated/dpnp.ndarray.__lt__", "reference/generated/dpnp.ndarray.__mod__", "reference/generated/dpnp.ndarray.__mul__", "reference/generated/dpnp.ndarray.__ne__", "reference/generated/dpnp.ndarray.__neg__", "reference/generated/dpnp.ndarray.__new__", "reference/generated/dpnp.ndarray.__or__", "reference/generated/dpnp.ndarray.__pow__", "reference/generated/dpnp.ndarray.__reduce__", "reference/generated/dpnp.ndarray.__repr__", "reference/generated/dpnp.ndarray.__rshift__", "reference/generated/dpnp.ndarray.__setitem__", "reference/generated/dpnp.ndarray.__str__", "reference/generated/dpnp.ndarray.__sub__", "reference/generated/dpnp.ndarray.__truediv__", "reference/generated/dpnp.ndarray.__xor__", "reference/generated/dpnp.ndarray.all", "reference/generated/dpnp.ndarray.any", "reference/generated/dpnp.ndarray.argmax", "reference/generated/dpnp.ndarray.argmin", "reference/generated/dpnp.ndarray.argsort", "reference/generated/dpnp.ndarray.astype", "reference/generated/dpnp.ndarray.choose", "reference/generated/dpnp.ndarray.conj", "reference/generated/dpnp.ndarray.conjugate", "reference/generated/dpnp.ndarray.cumsum", "reference/generated/dpnp.ndarray.diagonal", "reference/generated/dpnp.ndarray.dtype", "reference/generated/dpnp.ndarray.fill", "reference/generated/dpnp.ndarray.flags", "reference/generated/dpnp.ndarray.flat", "reference/generated/dpnp.ndarray.flatten", "reference/generated/dpnp.ndarray.item", "reference/generated/dpnp.ndarray.itemsize", "reference/generated/dpnp.ndarray.max", "reference/generated/dpnp.ndarray.mean", "reference/generated/dpnp.ndarray.min", "reference/generated/dpnp.ndarray.nbytes", "reference/generated/dpnp.ndarray.ndim", "reference/generated/dpnp.ndarray.nonzero", "reference/generated/dpnp.ndarray.partition", "reference/generated/dpnp.ndarray.prod", "reference/generated/dpnp.ndarray.reshape", "reference/generated/dpnp.ndarray.round", "reference/generated/dpnp.ndarray.shape", "reference/generated/dpnp.ndarray.size", "reference/generated/dpnp.ndarray.squeeze", "reference/generated/dpnp.ndarray.std", "reference/generated/dpnp.ndarray.strides", "reference/generated/dpnp.ndarray.sum", "reference/generated/dpnp.ndarray.take", "reference/generated/dpnp.ndarray.transpose", "reference/generated/dpnp.ndarray.var", "reference/generated/dpnp.negative", "reference/generated/dpnp.nonzero", "reference/generated/dpnp.not_equal", "reference/generated/dpnp.ogrid", "reference/generated/dpnp.ones", "reference/generated/dpnp.ones_like", "reference/generated/dpnp.outer", "reference/generated/dpnp.partition", "reference/generated/dpnp.place", "reference/generated/dpnp.power", "reference/generated/dpnp.prod", "reference/generated/dpnp.ptp", "reference/generated/dpnp.put", "reference/generated/dpnp.put_along_axis", "reference/generated/dpnp.putmask", "reference/generated/dpnp.rad2deg", "reference/generated/dpnp.radians", "reference/generated/dpnp.random.RandomState", "reference/generated/dpnp.random.beta", "reference/generated/dpnp.random.binomial", "reference/generated/dpnp.random.bytes", "reference/generated/dpnp.random.chisquare", "reference/generated/dpnp.random.choice", "reference/generated/dpnp.random.dirichlet", "reference/generated/dpnp.random.exponential", "reference/generated/dpnp.random.f", "reference/generated/dpnp.random.gamma", "reference/generated/dpnp.random.geometric", "reference/generated/dpnp.random.gumbel", "reference/generated/dpnp.random.hypergeometric", "reference/generated/dpnp.random.laplace", "reference/generated/dpnp.random.logistic", "reference/generated/dpnp.random.lognormal", "reference/generated/dpnp.random.logseries", "reference/generated/dpnp.random.multinomial", "reference/generated/dpnp.random.multivariate_normal", "reference/generated/dpnp.random.negative_binomial", "reference/generated/dpnp.random.noncentral_chisquare", "reference/generated/dpnp.random.noncentral_f", "reference/generated/dpnp.random.normal", "reference/generated/dpnp.random.pareto", "reference/generated/dpnp.random.permutation", "reference/generated/dpnp.random.poisson", "reference/generated/dpnp.random.power", "reference/generated/dpnp.random.rand", "reference/generated/dpnp.random.randint", "reference/generated/dpnp.random.randn", "reference/generated/dpnp.random.random", "reference/generated/dpnp.random.random_integers", "reference/generated/dpnp.random.random_sample", "reference/generated/dpnp.random.ranf", "reference/generated/dpnp.random.rayleigh", "reference/generated/dpnp.random.sample", "reference/generated/dpnp.random.seed", "reference/generated/dpnp.random.shuffle", "reference/generated/dpnp.random.standard_cauchy", "reference/generated/dpnp.random.standard_exponential", "reference/generated/dpnp.random.standard_gamma", "reference/generated/dpnp.random.standard_normal", "reference/generated/dpnp.random.standard_t", "reference/generated/dpnp.random.triangular", "reference/generated/dpnp.random.uniform", "reference/generated/dpnp.random.vonmises", "reference/generated/dpnp.random.wald", "reference/generated/dpnp.random.weibull", "reference/generated/dpnp.random.zipf", "reference/generated/dpnp.ravel", "reference/generated/dpnp.reciprocal", "reference/generated/dpnp.remainder", "reference/generated/dpnp.repeat", "reference/generated/dpnp.reshape", "reference/generated/dpnp.result_type", "reference/generated/dpnp.right_shift", "reference/generated/dpnp.rollaxis", "reference/generated/dpnp.searchsorted", "reference/generated/dpnp.select", "reference/generated/dpnp.shape", "reference/generated/dpnp.sign", "reference/generated/dpnp.sin", "reference/generated/dpnp.sinh", "reference/generated/dpnp.sort", "reference/generated/dpnp.sqrt", "reference/generated/dpnp.square", "reference/generated/dpnp.squeeze", "reference/generated/dpnp.stack", "reference/generated/dpnp.std", "reference/generated/dpnp.subtract", "reference/generated/dpnp.sum", "reference/generated/dpnp.swapaxes", "reference/generated/dpnp.take", "reference/generated/dpnp.take_along_axis", "reference/generated/dpnp.tan", "reference/generated/dpnp.tanh", "reference/generated/dpnp.tensordot", "reference/generated/dpnp.trace", "reference/generated/dpnp.transpose", "reference/generated/dpnp.trapz", "reference/generated/dpnp.tri", "reference/generated/dpnp.tril", "reference/generated/dpnp.tril_indices", "reference/generated/dpnp.tril_indices_from", "reference/generated/dpnp.triu", "reference/generated/dpnp.triu_indices", "reference/generated/dpnp.triu_indices_from", "reference/generated/dpnp.true_divide", "reference/generated/dpnp.trunc", "reference/generated/dpnp.unique", "reference/generated/dpnp.unwrap", "reference/generated/dpnp.vander", "reference/generated/dpnp.var", "reference/generated/dpnp.vdot", "reference/generated/dpnp.vstack", "reference/generated/dpnp.where", "reference/generated/dpnp.zeros", "reference/generated/dpnp.zeros_like", "reference/index", "reference/indexing", "reference/linalg", "reference/logic", "reference/manipulation", "reference/math", "reference/misc", "reference/ndarray", "reference/pad", "reference/polynomials", "reference/random", "reference/routines", "reference/sorting", "reference/special", "reference/statistics", "reference/ufunc"], "filenames": ["dpctl.rst", "dpnp_backend_api.rst", "index.rst", "overview.rst", "quick_start_guide.rst", "reference/binary.rst", "reference/comparison.rst", "reference/creation.rst", "reference/difference.rst", "reference/dtype.rst", "reference/fft.rst", "reference/generated/dpnp.abs.rst", "reference/generated/dpnp.absolute.rst", "reference/generated/dpnp.add.rst", "reference/generated/dpnp.all.rst", "reference/generated/dpnp.allclose.rst", "reference/generated/dpnp.amax.rst", "reference/generated/dpnp.amin.rst", "reference/generated/dpnp.any.rst", "reference/generated/dpnp.arange.rst", "reference/generated/dpnp.arccos.rst", "reference/generated/dpnp.arccosh.rst", "reference/generated/dpnp.arcsin.rst", "reference/generated/dpnp.arcsinh.rst", "reference/generated/dpnp.arctan.rst", "reference/generated/dpnp.arctan2.rst", "reference/generated/dpnp.arctanh.rst", "reference/generated/dpnp.argmax.rst", "reference/generated/dpnp.argmin.rst", "reference/generated/dpnp.argsort.rst", "reference/generated/dpnp.around.rst", "reference/generated/dpnp.array.rst", "reference/generated/dpnp.array_equal.rst", "reference/generated/dpnp.asanyarray.rst", "reference/generated/dpnp.asarray.rst", "reference/generated/dpnp.ascontiguousarray.rst", "reference/generated/dpnp.asfarray.rst", "reference/generated/dpnp.asnumpy.rst", "reference/generated/dpnp.atleast_1d.rst", "reference/generated/dpnp.atleast_2d.rst", "reference/generated/dpnp.atleast_3d.rst", "reference/generated/dpnp.average.rst", "reference/generated/dpnp.bincount.rst", "reference/generated/dpnp.bitwise_and.rst", "reference/generated/dpnp.bitwise_not.rst", "reference/generated/dpnp.bitwise_or.rst", "reference/generated/dpnp.bitwise_xor.rst", "reference/generated/dpnp.broadcast_to.rst", "reference/generated/dpnp.cbrt.rst", "reference/generated/dpnp.ceil.rst", "reference/generated/dpnp.choose.rst", "reference/generated/dpnp.concatenate.rst", "reference/generated/dpnp.conj.rst", "reference/generated/dpnp.conjugate.rst", "reference/generated/dpnp.convolve.rst", "reference/generated/dpnp.copy.rst", "reference/generated/dpnp.copysign.rst", "reference/generated/dpnp.copyto.rst", "reference/generated/dpnp.correlate.rst", "reference/generated/dpnp.cos.rst", "reference/generated/dpnp.cosh.rst", "reference/generated/dpnp.count_nonzero.rst", "reference/generated/dpnp.cov.rst", "reference/generated/dpnp.cross.rst", "reference/generated/dpnp.cumprod.rst", "reference/generated/dpnp.cumsum.rst", "reference/generated/dpnp.deg2rad.rst", "reference/generated/dpnp.degrees.rst", "reference/generated/dpnp.diag.rst", "reference/generated/dpnp.diag_indices.rst", "reference/generated/dpnp.diag_indices_from.rst", "reference/generated/dpnp.diagflat.rst", "reference/generated/dpnp.diagonal.rst", "reference/generated/dpnp.diff.rst", "reference/generated/dpnp.divide.rst", "reference/generated/dpnp.dot.rst", "reference/generated/dpnp.dpnp_array.dpnp_array.rst", "reference/generated/dpnp.dtype.rst", "reference/generated/dpnp.ediff1d.rst", "reference/generated/dpnp.einsum.rst", "reference/generated/dpnp.einsum_path.rst", "reference/generated/dpnp.empty.rst", "reference/generated/dpnp.empty_like.rst", "reference/generated/dpnp.equal.rst", "reference/generated/dpnp.erf.rst", "reference/generated/dpnp.exp.rst", "reference/generated/dpnp.exp2.rst", "reference/generated/dpnp.expand_dims.rst", "reference/generated/dpnp.expm1.rst", "reference/generated/dpnp.extract.rst", "reference/generated/dpnp.eye.rst", "reference/generated/dpnp.fabs.rst", "reference/generated/dpnp.fft.fft.rst", "reference/generated/dpnp.fft.fft2.rst", "reference/generated/dpnp.fft.fftfreq.rst", "reference/generated/dpnp.fft.fftn.rst", "reference/generated/dpnp.fft.fftshift.rst", "reference/generated/dpnp.fft.hfft.rst", "reference/generated/dpnp.fft.ifft.rst", "reference/generated/dpnp.fft.ifft2.rst", "reference/generated/dpnp.fft.ifftn.rst", "reference/generated/dpnp.fft.ifftshift.rst", "reference/generated/dpnp.fft.ihfft.rst", "reference/generated/dpnp.fft.irfft.rst", "reference/generated/dpnp.fft.irfft2.rst", "reference/generated/dpnp.fft.irfftn.rst", "reference/generated/dpnp.fft.rfft.rst", "reference/generated/dpnp.fft.rfft2.rst", "reference/generated/dpnp.fft.rfftfreq.rst", "reference/generated/dpnp.fft.rfftn.rst", "reference/generated/dpnp.fill_diagonal.rst", "reference/generated/dpnp.flatiter.rst", "reference/generated/dpnp.floor.rst", "reference/generated/dpnp.floor_divide.rst", "reference/generated/dpnp.fmax.rst", "reference/generated/dpnp.fmin.rst", "reference/generated/dpnp.fmod.rst", "reference/generated/dpnp.from_dlpack.rst", "reference/generated/dpnp.frombuffer.rst", "reference/generated/dpnp.fromfile.rst", "reference/generated/dpnp.fromfunction.rst", "reference/generated/dpnp.fromiter.rst", "reference/generated/dpnp.fromstring.rst", "reference/generated/dpnp.full.rst", "reference/generated/dpnp.full_like.rst", "reference/generated/dpnp.geomspace.rst", "reference/generated/dpnp.get_include.rst", "reference/generated/dpnp.gradient.rst", "reference/generated/dpnp.greater.rst", "reference/generated/dpnp.greater_equal.rst", "reference/generated/dpnp.histogram.rst", "reference/generated/dpnp.hstack.rst", "reference/generated/dpnp.hypot.rst", "reference/generated/dpnp.identity.rst", "reference/generated/dpnp.indices.rst", "reference/generated/dpnp.inner.rst", "reference/generated/dpnp.invert.rst", "reference/generated/dpnp.isclose.rst", "reference/generated/dpnp.isfinite.rst", "reference/generated/dpnp.isinf.rst", "reference/generated/dpnp.isnan.rst", "reference/generated/dpnp.isscalar.rst", "reference/generated/dpnp.issubdtype.rst", "reference/generated/dpnp.issubsctype.rst", "reference/generated/dpnp.kron.rst", "reference/generated/dpnp.left_shift.rst", "reference/generated/dpnp.less.rst", "reference/generated/dpnp.less_equal.rst", "reference/generated/dpnp.linalg.cholesky.rst", "reference/generated/dpnp.linalg.cond.rst", "reference/generated/dpnp.linalg.det.rst", "reference/generated/dpnp.linalg.eig.rst", "reference/generated/dpnp.linalg.eigh.rst", "reference/generated/dpnp.linalg.eigvals.rst", "reference/generated/dpnp.linalg.inv.rst", "reference/generated/dpnp.linalg.matrix_power.rst", "reference/generated/dpnp.linalg.matrix_rank.rst", "reference/generated/dpnp.linalg.multi_dot.rst", "reference/generated/dpnp.linalg.norm.rst", "reference/generated/dpnp.linalg.qr.rst", "reference/generated/dpnp.linalg.svd.rst", "reference/generated/dpnp.linspace.rst", "reference/generated/dpnp.loadtxt.rst", "reference/generated/dpnp.log.rst", "reference/generated/dpnp.log10.rst", "reference/generated/dpnp.log1p.rst", "reference/generated/dpnp.log2.rst", "reference/generated/dpnp.logical_and.rst", "reference/generated/dpnp.logical_not.rst", "reference/generated/dpnp.logical_or.rst", "reference/generated/dpnp.logical_xor.rst", "reference/generated/dpnp.logspace.rst", "reference/generated/dpnp.matmul.rst", "reference/generated/dpnp.max.rst", "reference/generated/dpnp.maximum.rst", "reference/generated/dpnp.mean.rst", "reference/generated/dpnp.median.rst", "reference/generated/dpnp.meshgrid.rst", "reference/generated/dpnp.mgrid.rst", "reference/generated/dpnp.min.rst", "reference/generated/dpnp.minimum.rst", "reference/generated/dpnp.mod.rst", "reference/generated/dpnp.modf.rst", "reference/generated/dpnp.moveaxis.rst", "reference/generated/dpnp.multiply.rst", "reference/generated/dpnp.nancumprod.rst", "reference/generated/dpnp.nancumsum.rst", "reference/generated/dpnp.nanprod.rst", "reference/generated/dpnp.nansum.rst", "reference/generated/dpnp.nanvar.rst", "reference/generated/dpnp.ndarray.rst", "reference/generated/dpnp.ndarray.T.rst", "reference/generated/dpnp.ndarray.__abs__.rst", "reference/generated/dpnp.ndarray.__add__.rst", "reference/generated/dpnp.ndarray.__and__.rst", "reference/generated/dpnp.ndarray.__complex__.rst", "reference/generated/dpnp.ndarray.__eq__.rst", "reference/generated/dpnp.ndarray.__float__.rst", "reference/generated/dpnp.ndarray.__ge__.rst", "reference/generated/dpnp.ndarray.__getitem__.rst", "reference/generated/dpnp.ndarray.__gt__.rst", "reference/generated/dpnp.ndarray.__iadd__.rst", "reference/generated/dpnp.ndarray.__iand__.rst", "reference/generated/dpnp.ndarray.__ilshift__.rst", "reference/generated/dpnp.ndarray.__imul__.rst", "reference/generated/dpnp.ndarray.__int__.rst", "reference/generated/dpnp.ndarray.__invert__.rst", "reference/generated/dpnp.ndarray.__ior__.rst", "reference/generated/dpnp.ndarray.__ipow__.rst", "reference/generated/dpnp.ndarray.__irshift__.rst", "reference/generated/dpnp.ndarray.__isub__.rst", "reference/generated/dpnp.ndarray.__itruediv__.rst", "reference/generated/dpnp.ndarray.__ixor__.rst", "reference/generated/dpnp.ndarray.__le__.rst", "reference/generated/dpnp.ndarray.__len__.rst", "reference/generated/dpnp.ndarray.__lshift__.rst", "reference/generated/dpnp.ndarray.__lt__.rst", "reference/generated/dpnp.ndarray.__mod__.rst", "reference/generated/dpnp.ndarray.__mul__.rst", "reference/generated/dpnp.ndarray.__ne__.rst", "reference/generated/dpnp.ndarray.__neg__.rst", "reference/generated/dpnp.ndarray.__new__.rst", "reference/generated/dpnp.ndarray.__or__.rst", "reference/generated/dpnp.ndarray.__pow__.rst", "reference/generated/dpnp.ndarray.__reduce__.rst", "reference/generated/dpnp.ndarray.__repr__.rst", "reference/generated/dpnp.ndarray.__rshift__.rst", "reference/generated/dpnp.ndarray.__setitem__.rst", "reference/generated/dpnp.ndarray.__str__.rst", "reference/generated/dpnp.ndarray.__sub__.rst", "reference/generated/dpnp.ndarray.__truediv__.rst", "reference/generated/dpnp.ndarray.__xor__.rst", "reference/generated/dpnp.ndarray.all.rst", "reference/generated/dpnp.ndarray.any.rst", "reference/generated/dpnp.ndarray.argmax.rst", "reference/generated/dpnp.ndarray.argmin.rst", "reference/generated/dpnp.ndarray.argsort.rst", "reference/generated/dpnp.ndarray.astype.rst", "reference/generated/dpnp.ndarray.choose.rst", "reference/generated/dpnp.ndarray.conj.rst", "reference/generated/dpnp.ndarray.conjugate.rst", "reference/generated/dpnp.ndarray.cumsum.rst", "reference/generated/dpnp.ndarray.diagonal.rst", "reference/generated/dpnp.ndarray.dtype.rst", "reference/generated/dpnp.ndarray.fill.rst", "reference/generated/dpnp.ndarray.flags.rst", "reference/generated/dpnp.ndarray.flat.rst", "reference/generated/dpnp.ndarray.flatten.rst", "reference/generated/dpnp.ndarray.item.rst", "reference/generated/dpnp.ndarray.itemsize.rst", "reference/generated/dpnp.ndarray.max.rst", "reference/generated/dpnp.ndarray.mean.rst", "reference/generated/dpnp.ndarray.min.rst", "reference/generated/dpnp.ndarray.nbytes.rst", "reference/generated/dpnp.ndarray.ndim.rst", "reference/generated/dpnp.ndarray.nonzero.rst", "reference/generated/dpnp.ndarray.partition.rst", "reference/generated/dpnp.ndarray.prod.rst", "reference/generated/dpnp.ndarray.reshape.rst", "reference/generated/dpnp.ndarray.round.rst", "reference/generated/dpnp.ndarray.shape.rst", "reference/generated/dpnp.ndarray.size.rst", "reference/generated/dpnp.ndarray.squeeze.rst", "reference/generated/dpnp.ndarray.std.rst", "reference/generated/dpnp.ndarray.strides.rst", "reference/generated/dpnp.ndarray.sum.rst", "reference/generated/dpnp.ndarray.take.rst", "reference/generated/dpnp.ndarray.transpose.rst", "reference/generated/dpnp.ndarray.var.rst", "reference/generated/dpnp.negative.rst", "reference/generated/dpnp.nonzero.rst", "reference/generated/dpnp.not_equal.rst", "reference/generated/dpnp.ogrid.rst", "reference/generated/dpnp.ones.rst", "reference/generated/dpnp.ones_like.rst", "reference/generated/dpnp.outer.rst", "reference/generated/dpnp.partition.rst", "reference/generated/dpnp.place.rst", "reference/generated/dpnp.power.rst", "reference/generated/dpnp.prod.rst", "reference/generated/dpnp.ptp.rst", "reference/generated/dpnp.put.rst", "reference/generated/dpnp.put_along_axis.rst", "reference/generated/dpnp.putmask.rst", "reference/generated/dpnp.rad2deg.rst", "reference/generated/dpnp.radians.rst", "reference/generated/dpnp.random.RandomState.rst", "reference/generated/dpnp.random.beta.rst", "reference/generated/dpnp.random.binomial.rst", "reference/generated/dpnp.random.bytes.rst", "reference/generated/dpnp.random.chisquare.rst", "reference/generated/dpnp.random.choice.rst", "reference/generated/dpnp.random.dirichlet.rst", "reference/generated/dpnp.random.exponential.rst", "reference/generated/dpnp.random.f.rst", "reference/generated/dpnp.random.gamma.rst", "reference/generated/dpnp.random.geometric.rst", "reference/generated/dpnp.random.gumbel.rst", "reference/generated/dpnp.random.hypergeometric.rst", "reference/generated/dpnp.random.laplace.rst", "reference/generated/dpnp.random.logistic.rst", "reference/generated/dpnp.random.lognormal.rst", "reference/generated/dpnp.random.logseries.rst", "reference/generated/dpnp.random.multinomial.rst", "reference/generated/dpnp.random.multivariate_normal.rst", "reference/generated/dpnp.random.negative_binomial.rst", "reference/generated/dpnp.random.noncentral_chisquare.rst", "reference/generated/dpnp.random.noncentral_f.rst", "reference/generated/dpnp.random.normal.rst", "reference/generated/dpnp.random.pareto.rst", "reference/generated/dpnp.random.permutation.rst", "reference/generated/dpnp.random.poisson.rst", "reference/generated/dpnp.random.power.rst", "reference/generated/dpnp.random.rand.rst", "reference/generated/dpnp.random.randint.rst", "reference/generated/dpnp.random.randn.rst", "reference/generated/dpnp.random.random.rst", "reference/generated/dpnp.random.random_integers.rst", "reference/generated/dpnp.random.random_sample.rst", "reference/generated/dpnp.random.ranf.rst", "reference/generated/dpnp.random.rayleigh.rst", "reference/generated/dpnp.random.sample.rst", "reference/generated/dpnp.random.seed.rst", "reference/generated/dpnp.random.shuffle.rst", "reference/generated/dpnp.random.standard_cauchy.rst", "reference/generated/dpnp.random.standard_exponential.rst", "reference/generated/dpnp.random.standard_gamma.rst", "reference/generated/dpnp.random.standard_normal.rst", "reference/generated/dpnp.random.standard_t.rst", "reference/generated/dpnp.random.triangular.rst", "reference/generated/dpnp.random.uniform.rst", "reference/generated/dpnp.random.vonmises.rst", "reference/generated/dpnp.random.wald.rst", "reference/generated/dpnp.random.weibull.rst", "reference/generated/dpnp.random.zipf.rst", "reference/generated/dpnp.ravel.rst", "reference/generated/dpnp.reciprocal.rst", "reference/generated/dpnp.remainder.rst", "reference/generated/dpnp.repeat.rst", "reference/generated/dpnp.reshape.rst", "reference/generated/dpnp.result_type.rst", "reference/generated/dpnp.right_shift.rst", "reference/generated/dpnp.rollaxis.rst", "reference/generated/dpnp.searchsorted.rst", "reference/generated/dpnp.select.rst", "reference/generated/dpnp.shape.rst", "reference/generated/dpnp.sign.rst", "reference/generated/dpnp.sin.rst", "reference/generated/dpnp.sinh.rst", "reference/generated/dpnp.sort.rst", "reference/generated/dpnp.sqrt.rst", "reference/generated/dpnp.square.rst", "reference/generated/dpnp.squeeze.rst", "reference/generated/dpnp.stack.rst", "reference/generated/dpnp.std.rst", "reference/generated/dpnp.subtract.rst", "reference/generated/dpnp.sum.rst", "reference/generated/dpnp.swapaxes.rst", "reference/generated/dpnp.take.rst", "reference/generated/dpnp.take_along_axis.rst", "reference/generated/dpnp.tan.rst", "reference/generated/dpnp.tanh.rst", "reference/generated/dpnp.tensordot.rst", "reference/generated/dpnp.trace.rst", "reference/generated/dpnp.transpose.rst", "reference/generated/dpnp.trapz.rst", "reference/generated/dpnp.tri.rst", "reference/generated/dpnp.tril.rst", "reference/generated/dpnp.tril_indices.rst", "reference/generated/dpnp.tril_indices_from.rst", "reference/generated/dpnp.triu.rst", "reference/generated/dpnp.triu_indices.rst", "reference/generated/dpnp.triu_indices_from.rst", "reference/generated/dpnp.true_divide.rst", "reference/generated/dpnp.trunc.rst", "reference/generated/dpnp.unique.rst", "reference/generated/dpnp.unwrap.rst", "reference/generated/dpnp.vander.rst", "reference/generated/dpnp.var.rst", "reference/generated/dpnp.vdot.rst", "reference/generated/dpnp.vstack.rst", "reference/generated/dpnp.where.rst", "reference/generated/dpnp.zeros.rst", "reference/generated/dpnp.zeros_like.rst", "reference/index.rst", "reference/indexing.rst", "reference/linalg.rst", "reference/logic.rst", "reference/manipulation.rst", "reference/math.rst", "reference/misc.rst", "reference/ndarray.rst", "reference/pad.rst", "reference/polynomials.rst", "reference/random.rst", "reference/routines.rst", "reference/sorting.rst", "reference/special.rst", "reference/statistics.rst", "reference/ufunc.rst"], "titles": ["Interplay with the Data Parallel Control Library", "C++ backend API Reference", "Data Parallel Extension for NumPy*", "Overview", "Quick Start Guide", "Binary Operations", "Comparison Table NumPy/ DPNP/ CuPy", "Array Creation Routines", "Difference with NumPy*", "Data type routines", "FFT Functions", "dpnp.abs", "dpnp.absolute", "dpnp.add", "dpnp.all", "dpnp.allclose", "dpnp.amax", "dpnp.amin", "dpnp.any", "dpnp.arange", "dpnp.arccos", "dpnp.arccosh", "dpnp.arcsin", "dpnp.arcsinh", "dpnp.arctan", "dpnp.arctan2", "dpnp.arctanh", "dpnp.argmax", "dpnp.argmin", "dpnp.argsort", "dpnp.around", "dpnp.array", "dpnp.array_equal", "dpnp.asanyarray", "dpnp.asarray", "dpnp.ascontiguousarray", "dpnp.asfarray", "dpnp.asnumpy", "dpnp.atleast_1d", "dpnp.atleast_2d", "dpnp.atleast_3d", "dpnp.average", "dpnp.bincount", "dpnp.bitwise_and", "dpnp.bitwise_not", "dpnp.bitwise_or", "dpnp.bitwise_xor", "dpnp.broadcast_to", "dpnp.cbrt", "dpnp.ceil", "dpnp.choose", "dpnp.concatenate", "dpnp.conj", "dpnp.conjugate", "dpnp.convolve", "dpnp.copy", "dpnp.copysign", "dpnp.copyto", "dpnp.correlate", "dpnp.cos", "dpnp.cosh", "dpnp.count_nonzero", "dpnp.cov", "dpnp.cross", "dpnp.cumprod", "dpnp.cumsum", "dpnp.deg2rad", "dpnp.degrees", "dpnp.diag", "dpnp.diag_indices", "dpnp.diag_indices_from", "dpnp.diagflat", "dpnp.diagonal", "dpnp.diff", "dpnp.divide", "dpnp.dot", "dpnp.dpnp_array.dpnp_array", "dpnp.dtype", "dpnp.ediff1d", "dpnp.einsum", "dpnp.einsum_path", "dpnp.empty", "dpnp.empty_like", "dpnp.equal", "dpnp.erf", "dpnp.exp", "dpnp.exp2", "dpnp.expand_dims", "dpnp.expm1", "dpnp.extract", "dpnp.eye", "dpnp.fabs", "dpnp.fft.fft", "dpnp.fft.fft2", "dpnp.fft.fftfreq", "dpnp.fft.fftn", "dpnp.fft.fftshift", "dpnp.fft.hfft", "dpnp.fft.ifft", "dpnp.fft.ifft2", "dpnp.fft.ifftn", "dpnp.fft.ifftshift", "dpnp.fft.ihfft", "dpnp.fft.irfft", "dpnp.fft.irfft2", "dpnp.fft.irfftn", "dpnp.fft.rfft", "dpnp.fft.rfft2", "dpnp.fft.rfftfreq", "dpnp.fft.rfftn", "dpnp.fill_diagonal", "dpnp.flatiter", "dpnp.floor", "dpnp.floor_divide", "dpnp.fmax", "dpnp.fmin", "dpnp.fmod", "dpnp.from_dlpack", "dpnp.frombuffer", "dpnp.fromfile", "dpnp.fromfunction", "dpnp.fromiter", "dpnp.fromstring", "dpnp.full", "dpnp.full_like", "dpnp.geomspace", "dpnp.get_include", "dpnp.gradient", "dpnp.greater", "dpnp.greater_equal", "dpnp.histogram", "dpnp.hstack", "dpnp.hypot", "dpnp.identity", "dpnp.indices", "dpnp.inner", "dpnp.invert", "dpnp.isclose", "dpnp.isfinite", "dpnp.isinf", "dpnp.isnan", "dpnp.isscalar", "dpnp.issubdtype", "dpnp.issubsctype", "dpnp.kron", "dpnp.left_shift", "dpnp.less", "dpnp.less_equal", "dpnp.linalg.cholesky", "dpnp.linalg.cond", "dpnp.linalg.det", "dpnp.linalg.eig", "dpnp.linalg.eigh", "dpnp.linalg.eigvals", "dpnp.linalg.inv", "dpnp.linalg.matrix_power", "dpnp.linalg.matrix_rank", "dpnp.linalg.multi_dot", "dpnp.linalg.norm", "dpnp.linalg.qr", "dpnp.linalg.svd", "dpnp.linspace", "dpnp.loadtxt", "dpnp.log", "dpnp.log10", "dpnp.log1p", "dpnp.log2", "dpnp.logical_and", "dpnp.logical_not", "dpnp.logical_or", "dpnp.logical_xor", "dpnp.logspace", "dpnp.matmul", "dpnp.max", "dpnp.maximum", "dpnp.mean", "dpnp.median", "dpnp.meshgrid", "dpnp.mgrid", "dpnp.min", "dpnp.minimum", "dpnp.mod", "dpnp.modf", "dpnp.moveaxis", "dpnp.multiply", "dpnp.nancumprod", "dpnp.nancumsum", "dpnp.nanprod", "dpnp.nansum", "dpnp.nanvar", "dpnp.ndarray", "dpnp.ndarray.T", "dpnp.ndarray.__abs__", "dpnp.ndarray.__add__", "dpnp.ndarray.__and__", "dpnp.ndarray.__complex__", "dpnp.ndarray.__eq__", "dpnp.ndarray.__float__", "dpnp.ndarray.__ge__", "dpnp.ndarray.__getitem__", "dpnp.ndarray.__gt__", "dpnp.ndarray.__iadd__", "dpnp.ndarray.__iand__", "dpnp.ndarray.__ilshift__", "dpnp.ndarray.__imul__", "dpnp.ndarray.__int__", "dpnp.ndarray.__invert__", "dpnp.ndarray.__ior__", "dpnp.ndarray.__ipow__", "dpnp.ndarray.__irshift__", "dpnp.ndarray.__isub__", "dpnp.ndarray.__itruediv__", "dpnp.ndarray.__ixor__", "dpnp.ndarray.__le__", "dpnp.ndarray.__len__", "dpnp.ndarray.__lshift__", "dpnp.ndarray.__lt__", "dpnp.ndarray.__mod__", "dpnp.ndarray.__mul__", "dpnp.ndarray.__ne__", "dpnp.ndarray.__neg__", "dpnp.ndarray.__new__", "dpnp.ndarray.__or__", "dpnp.ndarray.__pow__", "dpnp.ndarray.__reduce__", "dpnp.ndarray.__repr__", "dpnp.ndarray.__rshift__", "dpnp.ndarray.__setitem__", "dpnp.ndarray.__str__", "dpnp.ndarray.__sub__", "dpnp.ndarray.__truediv__", "dpnp.ndarray.__xor__", "dpnp.ndarray.all", "dpnp.ndarray.any", "dpnp.ndarray.argmax", "dpnp.ndarray.argmin", "dpnp.ndarray.argsort", "dpnp.ndarray.astype", "dpnp.ndarray.choose", "dpnp.ndarray.conj", "dpnp.ndarray.conjugate", "dpnp.ndarray.cumsum", "dpnp.ndarray.diagonal", "dpnp.ndarray.dtype", "dpnp.ndarray.fill", "dpnp.ndarray.flags", "dpnp.ndarray.flat", "dpnp.ndarray.flatten", "dpnp.ndarray.item", "dpnp.ndarray.itemsize", "dpnp.ndarray.max", "dpnp.ndarray.mean", "dpnp.ndarray.min", "dpnp.ndarray.nbytes", "dpnp.ndarray.ndim", "dpnp.ndarray.nonzero", "dpnp.ndarray.partition", "dpnp.ndarray.prod", "dpnp.ndarray.reshape", "dpnp.ndarray.round", "dpnp.ndarray.shape", "dpnp.ndarray.size", "dpnp.ndarray.squeeze", "dpnp.ndarray.std", "dpnp.ndarray.strides", "dpnp.ndarray.sum", "dpnp.ndarray.take", "dpnp.ndarray.transpose", "dpnp.ndarray.var", "dpnp.negative", "dpnp.nonzero", "dpnp.not_equal", "dpnp.ogrid", "dpnp.ones", "dpnp.ones_like", "dpnp.outer", "dpnp.partition", "dpnp.place", "dpnp.power", "dpnp.prod", "dpnp.ptp", "dpnp.put", "dpnp.put_along_axis", "dpnp.putmask", "dpnp.rad2deg", "dpnp.radians", "dpnp.random.RandomState", "dpnp.random.beta", "dpnp.random.binomial", "dpnp.random.bytes", "dpnp.random.chisquare", "dpnp.random.choice", "dpnp.random.dirichlet", "dpnp.random.exponential", "dpnp.random.f", "dpnp.random.gamma", "dpnp.random.geometric", "dpnp.random.gumbel", "dpnp.random.hypergeometric", "dpnp.random.laplace", "dpnp.random.logistic", "dpnp.random.lognormal", "dpnp.random.logseries", "dpnp.random.multinomial", "dpnp.random.multivariate_normal", "dpnp.random.negative_binomial", "dpnp.random.noncentral_chisquare", "dpnp.random.noncentral_f", "dpnp.random.normal", "dpnp.random.pareto", "dpnp.random.permutation", "dpnp.random.poisson", "dpnp.random.power", "dpnp.random.rand", "dpnp.random.randint", "dpnp.random.randn", "dpnp.random.random", "dpnp.random.random_integers", "dpnp.random.random_sample", "dpnp.random.ranf", "dpnp.random.rayleigh", "dpnp.random.sample", "dpnp.random.seed", "dpnp.random.shuffle", "dpnp.random.standard_cauchy", "dpnp.random.standard_exponential", "dpnp.random.standard_gamma", "dpnp.random.standard_normal", "dpnp.random.standard_t", "dpnp.random.triangular", "dpnp.random.uniform", "dpnp.random.vonmises", "dpnp.random.wald", "dpnp.random.weibull", "dpnp.random.zipf", "dpnp.ravel", "dpnp.reciprocal", "dpnp.remainder", "dpnp.repeat", "dpnp.reshape", "dpnp.result_type", "dpnp.right_shift", "dpnp.rollaxis", "dpnp.searchsorted", "dpnp.select", "dpnp.shape", "dpnp.sign", "dpnp.sin", "dpnp.sinh", "dpnp.sort", "dpnp.sqrt", "dpnp.square", "dpnp.squeeze", "dpnp.stack", "dpnp.std", "dpnp.subtract", "dpnp.sum", "dpnp.swapaxes", "dpnp.take", "dpnp.take_along_axis", "dpnp.tan", "dpnp.tanh", "dpnp.tensordot", "dpnp.trace", "dpnp.transpose", "dpnp.trapz", "dpnp.tri", "dpnp.tril", "dpnp.tril_indices", "dpnp.tril_indices_from", "dpnp.triu", "dpnp.triu_indices", "dpnp.triu_indices_from", "dpnp.true_divide", "dpnp.trunc", "dpnp.unique", "dpnp.unwrap", "dpnp.vander", "dpnp.var", "dpnp.vdot", "dpnp.vstack", "dpnp.where", "dpnp.zeros", "dpnp.zeros_like", "API Reference", "Array Indexing Routines", "Linear Algebra", "Logic Functions", "Array Manipulation Routines", "Mathematical Functions", "Miscellaneous routines", "Multi-Dimensional Array (ndarray)", "Padding", "Polynomials", "Random Sampling (<code class=\"docutils literal notranslate\"><span class=\"pre\">dpnp.random</span></code>)", "Routines", "Sorting, Searching, and Counting", "Special Functions", "Statistical Functions", "Universal Functions (ufunc)"], "terms": {"provid": [0, 6, 76, 286, 314, 317, 358, 373, 381, 399], "api": [0, 2, 3, 6, 77, 286, 308, 313, 314, 315, 316, 317, 318, 319, 321, 322, 327, 330, 356], "manag": 0, "specif": [0, 4, 77], "sycl": [0, 3, 286, 308, 313, 314, 315, 316, 317, 318, 319, 321, 322, 327, 330], "resourc": 0, "base": [0, 4, 77, 125, 160, 163, 166, 171, 277, 278, 283], "python": [0, 2, 3, 76, 77, 117, 248, 356, 391], "packag": [0, 3, 395], "an": [0, 3, 4, 12, 16, 17, 19, 27, 28, 29, 31, 33, 34, 35, 36, 42, 43, 44, 45, 46, 47, 48, 50, 51, 55, 69, 70, 76, 77, 78, 79, 80, 81, 82, 83, 87, 89, 110, 117, 119, 120, 121, 124, 126, 127, 134, 136, 145, 150, 156, 158, 173, 175, 182, 183, 236, 238, 248, 250, 256, 258, 260, 262, 264, 266, 267, 272, 273, 274, 276, 277, 278, 280, 281, 283, 286, 288, 293, 294, 296, 305, 308, 313, 314, 315, 316, 317, 318, 319, 321, 322, 327, 330, 334, 338, 339, 340, 341, 342, 344, 345, 346, 349, 350, 351, 352, 356, 357, 358, 359, 364, 366, 367, 368, 370, 371, 375, 381, 382, 383, 391], "below": [0, 4, 77, 156, 158, 366, 370, 391], "demonstr": [0, 4, 77], "how": [0, 4, 77, 358], "extens": [0, 1, 3, 4, 126, 384], "numpi": [0, 1, 3, 4, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 151, 152, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 236, 237, 239, 240, 243, 248, 258, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 370, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 391, 395], "can": [0, 3, 4, 13, 43, 45, 46, 69, 74, 75, 76, 77, 83, 119, 128, 129, 145, 146, 147, 167, 169, 170, 184, 234, 235, 270, 271, 275, 278, 286, 308, 313, 314, 315, 316, 317, 318, 319, 321, 322, 327, 330, 339, 341, 355, 358, 371, 391], "easili": 0, "combin": [0, 77, 87], "devic": [0, 2, 3, 19, 31, 34, 36, 76, 81, 82, 90, 117, 123, 124, 161, 273, 274, 286, 308, 313, 314, 315, 316, 317, 318, 319, 321, 322, 327, 330, 352, 382, 383], "interfac": 0, "dpctl": [0, 4, 12, 13, 43, 44, 45, 46, 47, 59, 74, 75, 76, 82, 83, 89, 124, 128, 129, 136, 138, 139, 140, 145, 146, 147, 152, 163, 167, 168, 169, 170, 175, 177, 183, 184, 270, 271, 274, 275, 277, 278, 286, 308, 313, 314, 315, 316, 317, 318, 319, 321, 322, 327, 330, 340, 341, 347, 350, 351, 352, 355, 356, 358, 364, 367, 370, 381, 383], "liter": 0, "queue": [0, 286, 308, 313, 314, 315, 316, 317, 318, 319, 321, 322, 327, 330], "from": [0, 3, 27, 28, 29, 33, 34, 50, 57, 66, 67, 76, 77, 86, 89, 117, 119, 121, 122, 162, 177, 228, 238, 262, 266, 272, 278, 282, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 315, 317, 318, 320, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 339, 340, 344, 351, 352, 358, 359, 376, 381, 395], "allow": [0, 76, 258, 391], "set": [0, 31, 50, 69, 76, 77, 81, 123, 156, 158, 238, 246, 273, 274, 382, 383, 391], "input": [0, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 56, 57, 58, 59, 60, 62, 63, 64, 65, 67, 71, 72, 73, 74, 75, 76, 78, 81, 82, 83, 84, 85, 86, 88, 91, 103, 104, 105, 106, 107, 109, 112, 113, 116, 123, 124, 127, 128, 129, 132, 135, 136, 137, 138, 139, 140, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 158, 159, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 235, 247, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 308, 314, 330, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 373, 374, 376, 378, 381, 382, 383], "current": [0, 12, 13, 15, 22, 24, 25, 43, 44, 45, 46, 49, 56, 63, 64, 65, 74, 75, 76, 77, 78, 91, 112, 113, 116, 127, 132, 133, 135, 136, 145, 174, 180, 182, 184, 185, 186, 187, 188, 237, 269, 278, 336, 337, 341, 346, 349, 355, 360, 362, 365, 374], "usabl": 0, "insid": 0, "context": 0, "": [0, 3, 4, 76, 77, 93, 95, 99, 100, 104, 105, 107, 109, 156, 158, 160, 243, 286, 287, 288, 293, 294, 295, 297, 298, 299, 300, 301, 303, 305, 308, 309, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 391], "scope": [0, 4], "thi": [0, 16, 17, 36, 37, 66, 69, 76, 77, 114, 115, 119, 126, 158, 181, 236, 237, 244, 256, 258, 260, 284, 319, 321, 339, 358, 373, 379, 381], "wai": [0, 3, 4, 76, 119, 256], "arrai": [0, 2, 3, 4, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 95, 99, 100, 104, 105, 107, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 191, 228, 234, 235, 236, 237, 238, 243, 244, 245, 247, 248, 249, 251, 253, 254, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 305, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 395], "creation": [0, 77, 80, 384, 391, 395], "function": [0, 2, 3, 12, 13, 14, 15, 16, 17, 18, 19, 25, 27, 28, 29, 30, 33, 34, 36, 37, 41, 43, 44, 45, 46, 47, 49, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 89, 90, 91, 112, 113, 114, 115, 116, 119, 120, 123, 124, 126, 127, 128, 129, 132, 135, 136, 137, 138, 139, 140, 145, 146, 147, 154, 157, 158, 161, 163, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 232, 233, 258, 267, 268, 269, 270, 271, 273, 274, 275, 277, 278, 284, 285, 286, 289, 291, 292, 302, 307, 323, 335, 336, 337, 338, 341, 342, 346, 347, 349, 350, 351, 352, 354, 355, 356, 357, 358, 362, 365, 367, 370, 373, 374, 378, 379, 381, 382, 383, 384, 391, 395], "dpnp": [0, 2, 3, 4, 8, 384, 391, 395, 396, 399], "which": [0, 3, 4, 33, 34, 76, 77, 148, 156, 158, 234, 235, 236, 268, 270, 352, 368, 371, 391], "i": [0, 3, 4, 6, 11, 12, 14, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 55, 57, 58, 59, 60, 61, 62, 64, 65, 67, 69, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 123, 124, 125, 127, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 145, 148, 149, 152, 154, 156, 157, 158, 159, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 179, 182, 183, 185, 186, 187, 188, 189, 234, 235, 236, 237, 247, 256, 258, 269, 270, 273, 274, 276, 279, 280, 281, 285, 286, 287, 288, 290, 293, 294, 295, 296, 297, 298, 299, 300, 301, 305, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 354, 356, 357, 358, 360, 361, 362, 363, 364, 367, 368, 370, 371, 374, 376, 378, 381, 382, 383, 391], "defin": [0, 76, 77, 236, 391], "alloc": [0, 3, 4, 183, 286, 308, 313, 314, 315, 316, 317, 318, 319, 321, 327, 330, 352], "us": [0, 4, 29, 69, 76, 77, 83, 87, 112, 119, 125, 126, 128, 129, 146, 147, 148, 161, 167, 169, 171, 177, 236, 237, 270, 271, 286, 289, 291, 292, 302, 307, 308, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 327, 330, 339, 358, 359, 365, 371, 391], "import": [0, 3, 4, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 71, 74, 75, 76, 77, 78, 81, 82, 83, 84, 85, 86, 87, 88, 91, 112, 113, 116, 123, 124, 125, 127, 128, 129, 130, 132, 133, 135, 136, 137, 138, 139, 140, 145, 146, 147, 152, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 256, 267, 269, 270, 271, 272, 273, 274, 275, 278, 279, 285, 311, 320, 324, 335, 336, 337, 338, 339, 340, 341, 342, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 360, 361, 362, 364, 365, 366, 367, 370, 374, 375, 376, 377, 378, 381, 382, 383], "np": [0, 3, 4, 11, 15, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 41, 42, 43, 45, 46, 48, 49, 52, 53, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 71, 76, 77, 78, 81, 82, 83, 84, 85, 86, 87, 88, 91, 112, 113, 116, 123, 124, 125, 127, 128, 129, 132, 133, 135, 137, 138, 139, 140, 145, 146, 147, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 185, 186, 187, 188, 234, 244, 248, 256, 269, 270, 271, 272, 273, 274, 275, 279, 285, 311, 320, 333, 334, 335, 336, 337, 338, 341, 342, 345, 346, 347, 348, 349, 350, 351, 352, 354, 356, 357, 358, 360, 361, 362, 365, 366, 367, 370, 374, 375, 376, 377, 378, 382, 383], "device_context": 0, "opencl": 0, "gpu": [0, 3, 4], "x": [0, 3, 4, 11, 12, 14, 18, 20, 21, 22, 23, 24, 26, 29, 31, 33, 34, 35, 43, 44, 45, 46, 47, 48, 49, 52, 53, 55, 56, 58, 59, 60, 62, 63, 64, 65, 68, 76, 77, 78, 81, 82, 84, 85, 86, 87, 88, 89, 91, 111, 112, 116, 120, 123, 124, 125, 127, 135, 136, 138, 139, 140, 158, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 174, 175, 177, 180, 182, 183, 185, 186, 248, 269, 270, 273, 274, 275, 277, 278, 304, 310, 335, 336, 337, 338, 339, 346, 347, 348, 350, 351, 352, 356, 357, 358, 360, 361, 362, 365, 374, 375, 377, 381, 382, 383], "1": [0, 3, 4, 6, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 29, 30, 31, 33, 34, 35, 38, 41, 42, 47, 48, 49, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 82, 83, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 112, 113, 116, 118, 121, 122, 124, 125, 127, 129, 130, 133, 135, 137, 145, 146, 147, 149, 152, 154, 157, 158, 162, 163, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 234, 236, 242, 244, 248, 256, 267, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 285, 286, 288, 290, 291, 293, 295, 297, 299, 300, 301, 303, 304, 305, 308, 310, 311, 312, 313, 314, 316, 318, 319, 320, 321, 325, 327, 330, 335, 336, 337, 338, 339, 341, 342, 345, 346, 347, 349, 350, 351, 352, 354, 356, 357, 358, 360, 362, 363, 364, 365, 366, 367, 370, 374, 375, 376, 377, 378, 381, 382, 383, 391], "2": [0, 3, 4, 11, 12, 13, 19, 21, 23, 27, 28, 29, 30, 31, 33, 34, 35, 41, 43, 45, 47, 48, 49, 51, 52, 53, 54, 55, 56, 58, 59, 62, 63, 64, 65, 68, 69, 71, 74, 75, 76, 77, 78, 82, 83, 84, 85, 86, 87, 90, 91, 93, 99, 104, 107, 112, 113, 116, 127, 128, 129, 130, 134, 135, 145, 146, 147, 149, 152, 154, 157, 158, 160, 161, 162, 163, 166, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 184, 185, 186, 187, 188, 234, 244, 248, 256, 267, 270, 271, 272, 273, 274, 275, 278, 279, 285, 286, 290, 294, 298, 304, 310, 313, 315, 326, 328, 329, 332, 334, 335, 336, 337, 338, 339, 341, 342, 345, 347, 348, 350, 352, 354, 355, 356, 357, 360, 361, 362, 364, 365, 366, 367, 370, 371, 374, 375, 376, 377, 378, 381, 382, 383], "3": [0, 3, 4, 6, 13, 19, 20, 27, 28, 29, 30, 31, 33, 34, 35, 41, 43, 46, 47, 48, 51, 54, 55, 58, 61, 62, 63, 64, 65, 68, 69, 71, 74, 75, 76, 77, 78, 82, 83, 84, 85, 86, 88, 112, 116, 127, 130, 132, 133, 135, 145, 160, 161, 162, 164, 165, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 183, 184, 186, 187, 188, 234, 248, 256, 267, 270, 271, 272, 274, 275, 278, 279, 286, 290, 294, 301, 304, 310, 313, 314, 315, 325, 329, 332, 335, 336, 337, 338, 339, 340, 341, 342, 345, 349, 350, 352, 354, 355, 356, 357, 358, 362, 364, 365, 366, 367, 370, 375, 376, 377, 378, 381, 383], "sum": [0, 3, 4, 6, 13, 65, 75, 76, 130, 172, 186, 188, 241, 257, 288, 303, 305, 363, 391, 395], "For": [0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 152, 154, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 239, 240, 248, 258, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 370, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 391], "more": [0, 3, 4, 31, 77, 117, 156, 157, 367, 370, 391], "inform": [0, 76, 77, 245, 391, 395], "pleas": [0, 3, 391], "refer": [0, 2, 3, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 152, 154, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 232, 233, 239, 240, 248, 256, 258, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 370, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 391], "document": [0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 152, 154, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 232, 233, 236, 239, 240, 248, 256, 257, 258, 259, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 370, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 391], "time": [0, 13, 43, 45, 46, 74, 75, 83, 128, 129, 140, 145, 146, 147, 167, 169, 170, 184, 271, 275, 278, 288, 303, 341, 355], "def": 0, "run": [0, 4], "executor": 0, "size": [0, 6, 31, 58, 62, 63, 76, 77, 125, 158, 161, 171, 248, 249, 260, 273, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 314, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 337, 352, 354, 371, 378, 382], "test_typ": 0, "repetit": 0, "reshap": [0, 6, 27, 28, 35, 68, 69, 76, 87, 173, 179, 234, 260, 267, 310, 391], "arang": [0, 6, 27, 28, 35, 41, 42, 67, 68, 69, 76, 83, 85, 86, 88, 124, 125, 130, 161, 164, 165, 167, 168, 169, 170, 171, 173, 177, 179, 234, 271, 274, 285, 310, 340, 381, 383], "dtype": [0, 8, 12, 13, 19, 25, 31, 33, 34, 35, 36, 43, 44, 45, 46, 51, 56, 59, 62, 69, 74, 76, 81, 82, 83, 90, 113, 116, 121, 123, 124, 125, 127, 128, 129, 132, 133, 134, 136, 138, 139, 140, 145, 146, 147, 160, 161, 163, 167, 168, 169, 170, 171, 174, 175, 180, 184, 189, 237, 241, 257, 263, 265, 268, 271, 273, 274, 278, 279, 286, 308, 314, 330, 337, 340, 341, 347, 350, 351, 354, 355, 356, 363, 366, 378, 382, 383, 391], "_": 0, "rang": [0, 130, 280, 305, 310, 376, 395], "start_tim": 0, "perf_count": 0, "result": [0, 4, 11, 12, 13, 43, 44, 45, 46, 49, 56, 63, 64, 65, 74, 76, 77, 78, 91, 112, 116, 120, 127, 135, 136, 138, 139, 140, 145, 158, 167, 168, 169, 170, 174, 180, 182, 184, 185, 186, 234, 235, 268, 269, 275, 278, 286, 288, 318, 337, 339, 340, 341, 346, 355, 356, 362, 374, 391], "end_tim": 0, "append": [0, 6, 73], "return": [0, 12, 13, 15, 16, 17, 19, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 41, 43, 44, 45, 46, 47, 48, 49, 52, 53, 54, 55, 59, 62, 63, 64, 65, 69, 70, 72, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 89, 90, 110, 111, 112, 117, 123, 124, 125, 126, 127, 128, 129, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 150, 152, 153, 155, 156, 157, 158, 161, 163, 166, 167, 168, 169, 170, 171, 173, 175, 177, 179, 182, 183, 184, 185, 186, 196, 198, 200, 213, 216, 219, 225, 232, 233, 234, 235, 236, 237, 240, 241, 242, 243, 245, 246, 247, 248, 250, 251, 252, 256, 257, 258, 259, 263, 264, 265, 267, 268, 270, 271, 273, 274, 275, 276, 278, 286, 289, 308, 310, 313, 314, 315, 316, 317, 318, 319, 321, 322, 327, 330, 334, 335, 336, 337, 339, 340, 341, 344, 345, 346, 347, 349, 350, 351, 352, 355, 356, 358, 362, 363, 364, 367, 368, 369, 370, 371, 372, 379, 381, 382, 383, 391], "median": [0, 6], "get_dtyp": 0, "_dtypes_list": 0, "int32": [0, 8, 43, 44, 45, 46, 77, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 118, 119, 120, 121, 122, 136, 162, 286, 288, 296, 298, 303, 305, 311, 314, 330, 340], "int64": [0, 8, 43, 44, 45, 46, 77, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 118, 119, 120, 121, 122, 136, 162, 340], "float32": [0, 8, 77, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 118, 119, 120, 121, 122, 162, 286, 308, 313, 315, 316, 318, 319, 321, 327, 330, 340], "select_default_devic": 0, "has_aspect_fp64": 0, "float64": [0, 8, 77, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 118, 119, 120, 121, 122, 162, 286, 287, 293, 294, 295, 297, 299, 300, 301, 308, 309, 312, 313, 315, 316, 318, 319, 320, 321, 326, 327, 328, 329, 330, 331, 332, 333, 334, 340, 366], "test_repetit": 0, "5": [0, 6, 14, 19, 26, 27, 30, 35, 41, 42, 43, 45, 46, 49, 51, 54, 58, 61, 63, 64, 65, 68, 69, 74, 76, 78, 84, 112, 116, 125, 127, 130, 132, 145, 152, 161, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 180, 183, 184, 234, 270, 272, 273, 274, 278, 286, 287, 288, 290, 293, 305, 309, 310, 311, 312, 315, 318, 333, 335, 336, 339, 341, 342, 346, 356, 358, 362, 364, 366, 367, 370, 374, 376, 377, 381, 382, 383], "type_nam": 0, "name": [0, 6, 77], "print": [0, 4, 13, 31, 34, 42, 51, 54, 74, 77, 81, 130, 184, 228, 286, 305, 310, 355, 375], "f": [0, 6, 76, 77, 81, 82, 90, 123, 124, 237, 247, 273, 274, 307, 339, 382, 383], "test": [0, 2, 14, 18, 138, 139, 140, 288, 395], "type": [0, 3, 4, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 36, 41, 43, 44, 45, 46, 47, 48, 49, 56, 57, 58, 59, 60, 62, 63, 64, 65, 67, 74, 75, 76, 77, 78, 81, 82, 83, 84, 85, 86, 88, 89, 91, 112, 113, 116, 117, 118, 119, 120, 121, 122, 123, 124, 127, 128, 129, 132, 136, 137, 138, 139, 140, 141, 142, 145, 146, 147, 148, 150, 152, 153, 155, 156, 157, 158, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 182, 183, 184, 185, 186, 187, 188, 234, 235, 236, 237, 243, 247, 258, 267, 269, 270, 271, 273, 274, 275, 278, 279, 285, 286, 287, 288, 290, 293, 294, 295, 296, 297, 298, 299, 300, 301, 305, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 360, 361, 362, 364, 365, 367, 368, 370, 371, 374, 376, 378, 381, 382, 383, 384, 395], "each": [0, 12, 42, 59, 76, 77, 120, 152, 153, 162, 177, 259, 260, 288, 305, 347, 350, 368, 371, 391], "64": [0, 4, 30], "128": 0, "256": 0, "512": 0, "1024": 0, "2048": 0, "4096": 0, "time_numpi": 0, "result_numpi": 0, "time_dpnp": 0, "result_dpnp": 0, "verif": 0, "true": [0, 12, 13, 14, 15, 18, 25, 31, 32, 43, 44, 45, 46, 55, 56, 57, 59, 62, 74, 76, 77, 83, 87, 89, 113, 116, 125, 128, 129, 130, 132, 136, 137, 138, 139, 140, 141, 142, 145, 146, 147, 156, 158, 160, 161, 163, 167, 168, 169, 170, 171, 173, 174, 175, 177, 179, 180, 184, 232, 233, 237, 257, 265, 271, 278, 279, 291, 337, 339, 341, 347, 350, 351, 355, 356, 373, 377, 381], "els": 0, "msg": 0, "n": [0, 4, 69, 70, 73, 77, 78, 90, 92, 94, 95, 97, 98, 100, 102, 103, 105, 106, 108, 109, 110, 133, 156, 158, 177, 288, 303, 305, 315, 325, 345, 351, 358, 366, 368, 371, 377, 391], "4": [0, 13, 14, 19, 30, 31, 35, 41, 43, 45, 51, 54, 59, 63, 64, 65, 68, 69, 71, 74, 76, 77, 78, 81, 83, 86, 113, 116, 123, 125, 127, 128, 129, 130, 132, 147, 161, 166, 167, 171, 172, 173, 174, 175, 176, 178, 179, 180, 183, 184, 185, 186, 187, 188, 256, 267, 270, 272, 274, 278, 279, 286, 287, 290, 310, 315, 331, 335, 337, 338, 339, 342, 346, 349, 350, 354, 355, 356, 358, 362, 364, 365, 367, 370, 377, 378, 381, 383], "3e": 0, "ratio": 0, "6": [0, 4, 13, 19, 27, 28, 30, 35, 45, 46, 51, 56, 63, 64, 65, 67, 68, 69, 74, 76, 77, 78, 83, 88, 91, 124, 160, 161, 171, 185, 186, 234, 248, 270, 274, 285, 286, 303, 305, 310, 315, 335, 339, 342, 356, 358, 362, 365, 367, 370, 376, 381, 383], "2f": 0, "__name__": 0, "__main__": 0, "try": [0, 4], "gpu_queu": 0, "get_sycl_devic": [0, 286], "print_device_info": 0, "except": [0, 4, 76, 260, 339], "importerror": 0, "data": [1, 3, 4, 12, 13, 14, 15, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 37, 41, 43, 44, 45, 46, 47, 48, 49, 56, 57, 58, 59, 60, 62, 63, 64, 65, 67, 74, 75, 76, 77, 78, 83, 84, 85, 86, 88, 91, 112, 113, 116, 117, 119, 122, 127, 128, 129, 132, 136, 137, 138, 139, 140, 145, 146, 147, 152, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 182, 183, 184, 185, 186, 187, 188, 237, 258, 267, 269, 270, 271, 275, 278, 279, 282, 285, 286, 287, 288, 290, 293, 294, 295, 296, 297, 298, 299, 300, 301, 305, 308, 309, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 365, 367, 370, 374, 376, 378, 381, 384, 395], "parallel": [1, 3, 4, 384], "overview": 2, "quick": [2, 3], "start": [2, 3, 19, 125, 161, 171, 342], "guid": [2, 3], "driver": 2, "interpret": [2, 77, 118, 391], "instal": 2, "exampl": [2, 3, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 71, 74, 75, 76, 77, 78, 81, 82, 83, 84, 85, 86, 87, 88, 91, 112, 113, 116, 123, 124, 125, 127, 128, 129, 130, 132, 133, 135, 136, 137, 138, 139, 140, 145, 146, 147, 152, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 228, 234, 244, 248, 256, 258, 267, 269, 270, 271, 272, 273, 274, 275, 278, 279, 285, 286, 287, 288, 290, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 360, 361, 362, 364, 365, 366, 367, 370, 374, 375, 376, 377, 378, 381, 382, 383], "multi": [2, 76, 93, 95, 99, 100, 104, 105, 107, 109, 178, 235, 264, 272, 384], "dimension": [2, 4, 38, 54, 58, 69, 70, 71, 76, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 118, 121, 177, 178, 262, 272, 356, 384], "ndarrai": [2, 3, 6, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33, 34, 35, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 72, 73, 74, 75, 76, 77, 78, 83, 84, 85, 86, 88, 89, 91, 112, 113, 116, 127, 128, 129, 132, 135, 136, 137, 138, 139, 140, 145, 146, 147, 149, 152, 153, 154, 157, 158, 159, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 269, 270, 271, 275, 276, 277, 278, 280, 281, 283, 285, 286, 308, 313, 314, 315, 316, 317, 318, 319, 321, 327, 330, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 371, 374, 376, 378, 381, 384], "construct": [2, 33, 34, 50, 68, 76, 77, 119, 120, 178, 238, 272, 384], "index": [2, 27, 28, 50, 76, 77, 87, 177, 234, 235, 238, 264, 282, 339, 358, 359, 384, 395], "attribut": [2, 76, 77, 384], "method": [2, 76, 77, 111, 117, 119, 156, 237, 258, 286, 339, 345, 364, 384], "arithmet": [2, 41, 125, 175, 176, 354, 378, 384, 395], "matrix": [2, 62, 148, 149, 152, 153, 155, 156, 158, 159, 172, 351, 370, 377, 384, 395], "multipl": [2, 27, 28, 29, 76, 77, 152, 153, 236, 349, 384], "comparison": [2, 83, 128, 129, 146, 147, 271, 384, 395], "oper": [2, 76, 77, 83, 87, 128, 129, 146, 147, 148, 167, 168, 169, 170, 214, 271, 384, 395], "special": [2, 77, 84, 384, 395], "univers": [2, 384, 391], "ufunc": [2, 384, 391], "routin": [2, 384, 391], "differ": [2, 3, 73, 76, 77, 78, 153, 158, 172, 236, 355, 384, 395], "tabl": [2, 158, 384], "cupi": [2, 384], "miscellan": [2, 384, 395], "c": [2, 4, 31, 33, 34, 35, 37, 55, 76, 77, 81, 82, 90, 123, 124, 126, 162, 172, 237, 247, 273, 274, 335, 339, 382, 383], "backend": [2, 126, 289, 291, 292, 302, 307, 323], "The": [3, 4, 13, 16, 17, 19, 27, 28, 52, 53, 59, 62, 74, 76, 77, 78, 83, 87, 120, 128, 129, 133, 146, 147, 152, 153, 157, 158, 163, 167, 169, 183, 184, 236, 247, 256, 271, 278, 286, 289, 291, 292, 302, 307, 308, 313, 314, 315, 316, 317, 318, 319, 321, 322, 327, 330, 339, 340, 345, 347, 355, 356, 368, 369, 371, 372, 381, 391, 395], "librari": [3, 4, 391], "implement": [3, 6, 117], "subset": [3, 352, 395], "execut": [3, 4, 12, 13, 14, 15, 18, 19, 25, 27, 28, 29, 30, 33, 34, 41, 43, 44, 45, 46, 47, 49, 56, 57, 58, 59, 61, 62, 63, 64, 65, 72, 73, 74, 75, 78, 79, 80, 81, 82, 83, 84, 89, 90, 91, 112, 113, 116, 120, 123, 124, 127, 128, 129, 132, 135, 136, 137, 138, 139, 140, 145, 146, 147, 154, 161, 163, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 269, 270, 271, 273, 274, 275, 277, 278, 289, 291, 292, 302, 307, 323, 335, 336, 337, 338, 341, 342, 346, 347, 349, 350, 351, 352, 354, 355, 356, 357, 358, 362, 365, 367, 370, 374, 378, 381, 382, 383], "ani": [3, 6, 14, 16, 17, 76, 77, 110, 286, 330, 350, 391], "drop": [3, 77], "replac": [3, 36, 281, 291, 391], "core": [3, 77, 391], "numer": [3, 4, 77, 395], "being": [3, 77], "develop": [3, 4], "part": [3, 52, 53, 182, 391], "intel": [3, 4], "ai": 3, "analyt": 3, "toolkit": 3, "distribut": [3, 4, 171, 286, 287, 288, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 315, 317, 318, 320, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 395], "also": [3, 77, 87, 324, 391], "avail": [3, 4, 77, 384], "anaconda": 3, "cloud": 3, "page": [3, 395], "learn": [3, 4], "Being": 3, "mean": [3, 6, 41, 76, 158, 176, 247, 286, 299, 301, 304, 308, 327, 331, 332, 339, 354, 378, 391], "usag": [3, 4], "veri": [3, 177], "similar": [3, 33, 34, 77, 125, 161, 171, 286, 314, 391], "class": [3, 76, 77, 111, 134, 286, 314, 350, 351, 366, 395], "compat": [3, 339, 395], "altern": [3, 4, 172], "abov": [3, 367], "instanc": [3, 76, 177, 286, 308, 313, 314, 315, 316, 317, 318, 319, 321, 322, 327, 330], "creat": [3, 4, 31, 33, 34, 69, 71, 77, 117, 121, 286, 308, 313, 314, 315, 316, 317, 318, 319, 321, 322, 327, 330, 391, 395], "ident": [3, 6, 77, 325], "one": [3, 4, 31, 36, 38, 54, 57, 58, 76, 77, 81, 83, 92, 94, 97, 98, 102, 103, 106, 108, 123, 158, 163, 166, 177, 185, 247, 249, 274, 305, 352, 368, 371, 382, 391], "kei": [3, 29, 76, 77, 111, 199, 227, 236, 349], "memori": [3, 33, 34, 35, 76, 77, 245, 247, 264, 339, 384], "default": [3, 12, 13, 14, 18, 19, 25, 27, 28, 29, 30, 31, 33, 34, 36, 41, 43, 44, 45, 46, 47, 55, 56, 57, 58, 59, 61, 62, 72, 73, 74, 76, 77, 78, 81, 82, 83, 90, 92, 98, 110, 113, 116, 123, 124, 125, 128, 129, 132, 134, 136, 138, 139, 140, 145, 146, 147, 156, 158, 161, 163, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 184, 189, 236, 247, 271, 273, 274, 276, 278, 280, 286, 290, 308, 313, 314, 315, 316, 317, 318, 319, 321, 322, 324, 325, 327, 330, 337, 339, 341, 343, 344, 347, 350, 351, 354, 355, 356, 358, 363, 368, 371, 378, 382, 383, 391], "system": [3, 4], "integr": [3, 4, 182, 365], "discret": [3, 54, 58, 73, 78, 92, 93, 94, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 286, 384], "otherwis": [3, 12, 13, 14, 15, 18, 19, 25, 27, 28, 29, 30, 32, 41, 43, 44, 45, 46, 47, 49, 56, 57, 58, 59, 61, 62, 63, 64, 65, 72, 73, 74, 75, 76, 77, 78, 81, 82, 83, 84, 89, 90, 91, 112, 113, 116, 123, 124, 127, 128, 129, 132, 135, 136, 137, 138, 139, 140, 145, 146, 147, 154, 161, 163, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 234, 235, 237, 247, 258, 269, 270, 271, 273, 274, 275, 277, 278, 286, 287, 288, 290, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 346, 347, 349, 350, 351, 352, 354, 355, 356, 357, 358, 362, 365, 367, 370, 374, 378, 381, 382, 383], "host": [3, 4, 286, 308, 313, 314, 315, 316, 317, 318, 319, 321, 327, 330], "do": [3, 4, 77, 288], "have": [3, 4, 32, 47, 77, 162, 183, 305, 391], "most": [3, 4, 77, 352], "manipul": [3, 69, 384, 395], "ar": [3, 4, 8, 12, 13, 14, 15, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 38, 41, 43, 44, 45, 46, 48, 49, 56, 57, 58, 59, 60, 62, 63, 64, 65, 67, 72, 73, 74, 75, 76, 77, 78, 83, 84, 85, 86, 87, 88, 89, 91, 112, 113, 116, 118, 119, 120, 121, 122, 127, 128, 129, 132, 134, 135, 136, 137, 138, 139, 140, 145, 146, 147, 148, 152, 153, 156, 158, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 182, 183, 184, 185, 186, 187, 188, 256, 268, 269, 270, 271, 275, 276, 277, 278, 279, 280, 283, 285, 286, 287, 288, 290, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 308, 309, 311, 312, 314, 317, 318, 320, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 342, 344, 346, 347, 348, 349, 350, 351, 354, 355, 356, 357, 358, 360, 361, 362, 363, 365, 369, 372, 374, 376, 378, 381, 391], "done": 3, "see": [3, 76, 77, 117, 158, 236, 303, 368, 369, 371, 372, 391], "complet": [3, 4, 391], "list": [3, 6, 76, 77, 236, 338, 340, 344], "support": [3, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 72, 73, 74, 75, 76, 77, 78, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 116, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 132, 133, 134, 135, 136, 137, 138, 139, 140, 145, 146, 147, 149, 152, 154, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 237, 269, 270, 271, 273, 274, 275, 276, 277, 278, 280, 281, 283, 285, 286, 287, 288, 290, 293, 294, 295, 296, 297, 298, 299, 300, 301, 304, 305, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 367, 370, 374, 376, 378, 381, 382, 383, 399], "along": [3, 4, 14, 16, 17, 18, 27, 28, 41, 51, 64, 65, 73, 76, 78, 135, 158, 173, 175, 176, 179, 185, 186, 189, 234, 235, 236, 241, 250, 252, 257, 263, 265, 266, 268, 280, 342, 353, 354, 358, 359, 362, 363, 365, 368, 371, 378, 391], "limit": [3, 8, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 116, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 132, 133, 134, 135, 136, 137, 138, 139, 140, 145, 146, 147, 149, 152, 154, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 285, 286, 287, 288, 290, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 308, 309, 311, 312, 314, 317, 320, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 367, 370, 374, 376, 378, 381, 382, 383], "To": 4, "program": [4, 112], "beyond": 4, "cpu": [4, 12, 13, 14, 15, 18, 19, 25, 27, 28, 29, 30, 41, 43, 44, 45, 46, 47, 49, 56, 57, 58, 59, 61, 62, 63, 64, 65, 72, 73, 74, 75, 78, 79, 80, 81, 82, 83, 84, 89, 90, 91, 112, 113, 116, 123, 124, 127, 128, 129, 132, 135, 136, 137, 138, 139, 140, 145, 146, 147, 154, 161, 163, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 269, 270, 271, 273, 274, 275, 277, 278, 335, 336, 337, 338, 341, 342, 346, 347, 349, 350, 351, 352, 354, 355, 356, 357, 358, 362, 365, 367, 370, 374, 378, 381, 382, 383], "you": [4, 391], "need": [4, 76, 126, 236], "appropri": [4, 126, 286, 314, 317, 391], "hardwar": 4, "work": [4, 16, 17, 36, 37, 66, 114, 115, 181, 284, 373, 379, 391], "fine": 4, "laptop": 4, "graphic": 4, "In": [4, 27, 28, 76, 148, 236, 286, 330, 339, 358], "major": [4, 33, 34, 35, 76, 237, 247], "case": [4, 27, 28, 160, 339], "your": 4, "window": 4, "alreadi": 4, "ha": [4, 77, 97, 102, 120, 352, 356, 391], "all": [4, 6, 18, 32, 76, 77, 85, 148, 236, 239, 244, 256, 288, 350, 352, 391], "necessari": [4, 57, 339], "But": [4, 77], "want": 4, "up": [4, 77], "date": [4, 76, 236], "alwai": [4, 33, 339], "updat": 4, "latest": [4, 117], "follow": [4, 8, 77, 87, 391, 395], "instruct": 4, "step": [4, 19, 125, 161, 171], "8": [4, 15, 48, 68, 69, 77, 137, 160, 161, 171, 185, 286, 310, 329, 347, 358, 362, 365, 367, 370, 377, 381], "9": [4, 56, 61, 68, 69, 74, 76, 91, 113, 160, 172, 184, 248, 278, 286, 288, 290, 310, 350, 362, 367, 370, 377, 381], "10": [4, 21, 23, 27, 28, 30, 55, 65, 69, 76, 77, 123, 125, 130, 145, 163, 166, 171, 176, 188, 258, 286, 288, 298, 310, 340, 341, 367, 370, 381], "If": [4, 36, 75, 76, 77, 156, 157, 158, 175, 234, 235, 236, 237, 260, 286, 308, 330, 338, 339, 350, 356, 391], "yet": [4, 6], "easiest": 4, "It": 4, "essenti": 4, "machin": 4, "optim": [4, 80], "includ": [4, 126, 171, 286, 330], "anoth": [4, 57, 117], "vendor": 4, "too": 4, "manual": [4, 77], "shown": 4, "next": 4, "section": [4, 77, 391], "recommend": [4, 270], "org": 4, "channel": 4, "command": 4, "forg": 4, "pip": 4, "http": [4, 117], "pypi": 4, "simpl": [4, 170, 395], "These": [4, 77, 87, 391, 395], "its": [4, 6, 52, 53, 76, 92, 98, 132, 152, 153, 267, 323, 339, 364, 391], "depend": [4, 36, 152, 158, 344, 381], "control": 4, "requir": [4, 6, 35, 76, 77, 237], "compil": [4, 77, 126], "runtim": 4, "onemkl": 4, "befor": [4, 76, 256], "strongli": 4, "advis": 4, "version": [4, 76, 77, 246, 270], "activ": 4, "local": 4, "environ": 4, "env": 4, "And": [4, 69, 76, 237], "sourc": [4, 6, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383], "recip": 4, "finanli": 4, "setuptool": 4, "o": [4, 77], "On": 4, "linux": 4, "cython": 4, "dpcpp_linux": 4, "mkl": 4, "devel": 4, "dpcpp": 4, "tbb": 4, "onedpl": 4, "cmake": 4, "ninja": 4, "pytest": 4, "dpcpp_win": 4, "setup": 4, "py": 4, "g": [4, 76, 77, 264, 286], "dcmake_c_compil": 4, "path": 4, "icx": 4, "dcmake_cxx_compil": 4, "icpx": 4, "script": 4, "build_loc": 4, "suit": 4, "element": [4, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 32, 42, 43, 44, 45, 46, 48, 49, 52, 53, 56, 59, 60, 64, 65, 74, 76, 77, 78, 83, 85, 86, 88, 89, 91, 112, 114, 115, 116, 128, 129, 136, 137, 138, 139, 140, 145, 146, 147, 148, 154, 163, 164, 165, 166, 167, 168, 169, 170, 174, 175, 180, 181, 182, 184, 185, 186, 232, 233, 239, 240, 241, 243, 244, 247, 248, 249, 251, 253, 256, 258, 259, 261, 263, 264, 266, 268, 269, 270, 271, 277, 278, 279, 281, 283, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 355, 356, 358, 360, 361, 367, 370, 373, 374, 375, 381, 391, 395], "asarrai": [4, 6, 33, 37], "y": [4, 12, 13, 43, 44, 45, 46, 47, 55, 59, 62, 63, 74, 75, 76, 77, 87, 89, 120, 127, 136, 145, 163, 175, 177, 182, 184, 258, 267, 270, 278, 339, 341, 347, 350, 351, 355, 356, 364, 365, 381], "locat": [4, 126, 297, 299], "same": [4, 13, 16, 17, 32, 36, 37, 43, 45, 46, 47, 66, 74, 75, 76, 82, 83, 87, 89, 114, 115, 117, 124, 128, 129, 145, 146, 147, 162, 167, 168, 169, 170, 181, 183, 184, 258, 271, 274, 275, 278, 284, 286, 308, 314, 330, 341, 350, 351, 352, 355, 359, 369, 372, 373, 379, 383], "shape": [4, 6, 27, 28, 31, 32, 35, 47, 57, 58, 62, 63, 69, 76, 77, 81, 82, 87, 89, 120, 123, 124, 154, 156, 160, 167, 168, 169, 170, 172, 173, 179, 183, 234, 235, 258, 262, 267, 273, 274, 286, 295, 298, 303, 304, 309, 313, 314, 315, 316, 317, 318, 319, 321, 326, 327, 333, 337, 339, 342, 350, 351, 352, 357, 358, 364, 371, 382, 383, 384, 395], "0": [4, 6, 14, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 35, 42, 44, 48, 49, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 67, 68, 69, 71, 72, 74, 76, 77, 78, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 94, 108, 112, 113, 116, 124, 125, 127, 130, 132, 133, 135, 136, 138, 139, 140, 152, 154, 161, 162, 163, 164, 165, 166, 168, 170, 171, 172, 173, 175, 177, 178, 179, 182, 183, 185, 186, 189, 234, 236, 242, 244, 248, 259, 263, 264, 265, 267, 268, 270, 272, 273, 274, 285, 286, 288, 293, 295, 296, 297, 299, 300, 301, 303, 304, 305, 308, 310, 311, 312, 313, 316, 318, 319, 320, 321, 324, 327, 329, 330, 331, 336, 337, 338, 342, 344, 345, 346, 347, 348, 351, 352, 353, 354, 356, 357, 358, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 376, 378, 381, 382, 383], "expect": [4, 77], "comput": [4, 21, 22, 25, 41, 43, 44, 45, 46, 49, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 112, 113, 130, 135, 136, 149, 150, 151, 153, 157, 158, 159, 167, 168, 169, 170, 175, 176, 181, 189, 354, 356, 360, 361, 362, 374, 378], "empti": [4, 6, 31, 76, 82, 123, 124, 175, 244, 273, 274, 382, 383], "found": [4, 391], "here": [6, 77], "correspond": [6, 27, 28, 76, 152, 243, 268, 286, 308, 313, 314, 315, 316, 317, 318, 319, 321, 322, 327, 330, 345, 391], "column": [6, 33, 34, 35, 76, 131, 152, 157, 237, 247, 368, 371], "v1": 6, "23": [6, 286], "v0": 6, "12": [6, 27, 28, 69, 77, 310, 367, 370], "v8": 6, "397": 6, "208": 6, "286": 6, "56": 6, "29": 6, "47": 6, "20": [6, 145, 288, 303], "13": [6, 27, 28, 44, 69, 76, 77, 136, 186, 236], "16": [6, 43, 69, 77, 127, 184, 278, 360], "21": [6, 65, 77], "18": [6, 77, 78], "51": 6, "48": [6, 185], "total": [6, 76, 253], "545": 6, "316": [6, 171], "415": 6, "ab": [6, 12, 91], "absolut": [6, 11, 91], "add": [6, 77], "add_docstr": 6, "add_newdoc": 6, "add_newdoc_ufunc": 6, "allclos": [6, 32, 137, 160], "alltru": 6, "amax": [6, 17, 27], "amin": [6, 16, 28], "angl": [6, 24, 25, 66, 67, 284, 285, 376], "apply_along_axi": 6, "apply_over_ax": 6, "arcco": [6, 22], "arccosh": 6, "arcsin": [6, 20, 347], "arcsinh": [6, 21], "arctan": [6, 20, 22, 25], "arctan2": [6, 22, 24], "arctanh": [6, 21], "argmax": [6, 16, 28, 76, 391], "argmin": [6, 17, 27, 76, 391], "argpartit": [6, 29, 391], "argsort": [6, 76, 349, 364, 391], "argwher": 6, "around": [6, 76, 259], "array2str": 6, "array_equ": 6, "array_equiv": [6, 32], "array_repr": 6, "array_split": 6, "array_str": 6, "asanyarrai": [6, 34], "asarray_chkfinit": [6, 33, 34], "ascontiguousarrai": [6, 33, 34], "asfarrai": [6, 33, 34], "asfortranarrai": [6, 33, 34, 35], "asmatrix": 6, "atleast_1d": [6, 87], "atleast_2d": [6, 87], "atleast_3d": [6, 87], "averag": [6, 76, 175, 251, 395], "bartlett": 6, "base_repr": 6, "binary_repr": 6, "bincount": 6, "bitwise_and": [6, 44, 45, 46, 136, 167], "bitwise_not": 6, "bitwise_or": [6, 43, 44, 46, 136, 169], "bitwise_xor": [6, 43, 44, 45, 136, 170], "blackman": 6, "block": 6, "bmat": 6, "broadcast_arrai": 6, "broadcast_shap": 6, "broadcast_to": 6, "busday_count": 6, "busday_offset": 6, "byte_bound": 6, "can_cast": 6, "cbrt": 6, "ceil": [6, 112, 113, 374], "choos": [6, 22, 24, 25, 76, 391], "clip": [6, 358, 391], "column_stack": 6, "common_typ": 6, "compare_chararrai": 6, "compress": [6, 358, 391], "concaten": 6, "conj": [6, 76], "conjug": [6, 52, 75, 76, 148, 152, 172, 239], "convolv": [6, 58], "copi": [6, 31, 57, 76, 77, 177, 237, 247, 248, 256, 258, 260, 276, 286, 308, 313, 314, 315, 316, 317, 318, 319, 321, 327, 330, 339, 349, 352, 367, 370, 391], "copysign": 6, "copyto": 6, "corrcoef": [6, 62], "correl": [6, 395], "co": [6, 20, 22, 347], "cosh": [6, 21], "count_nonzero": [6, 270], "cov": [6, 304], "cross": [6, 58], "cumprod": [6, 185, 391], "cumproduct": 6, "cumsum": [6, 76, 186, 391], "datetime_as_str": 6, "datetime_data": 6, "deg2rad": [6, 284, 285, 376], "degre": [6, 66, 284, 285, 328, 376], "delet": 6, "deprec": 6, "deprecate_with_doc": 6, "diag": [6, 160], "diag_indic": [6, 70, 110], "diag_indices_from": [6, 69, 110], "diagflat": 6, "diagon": [6, 68, 69, 70, 71, 76, 90, 110, 133, 148, 363, 366, 367, 368, 369, 370, 371, 372, 391], "diff": [6, 78, 130], "digit": 6, "disp": 6, "divid": [6, 113, 116, 154, 181, 337, 373], "divmod": [6, 391], "dot": [6, 76, 79, 80, 135, 155, 157, 160, 172, 362, 379], "dsplit": 6, "dstack": 6, "ediff1d": 6, "einsum": [6, 80, 135, 172, 275, 362], "einsum_path": [6, 79], "empty_lik": [6, 31, 81, 124, 274, 383], "equal": [6, 14, 15, 18, 32, 57, 58, 62, 76, 113, 128, 129, 137, 142, 146, 147, 154, 256, 271, 286, 296, 330, 337, 349, 352, 368, 371], "exp": [6, 163, 165], "exp2": [6, 85], "expand_dim": [6, 27, 28], "expm1": [6, 85, 165], "extract": [6, 68], "ey": [6, 52, 53, 170, 345], "fab": 6, "fastcopyandtranspos": 6, "fill_diagon": 6, "find_common_typ": 6, "fix": [6, 77], "flatnonzero": [6, 270], "flip": [6, 288], "fliplr": 6, "flipud": 6, "float_pow": 6, "floor": [6, 49, 113, 337, 374], "floor_divid": [6, 116, 181], "fmax": [6, 16, 17, 115, 174, 180, 278], "fmin": [6, 16, 17, 114, 174, 180, 278], "fmod": [6, 114, 115, 174, 180, 181, 278, 337], "format_float_posit": 6, "format_float_scientif": 6, "frexp": 6, "from_dlpack": 6, "frombuff": 6, "fromfil": 6, "fromfunct": [6, 33, 34], "fromit": [6, 33, 34], "frompyfunc": 6, "fromregex": 6, "fromstr": 6, "full": [6, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 152, 154, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 232, 233, 239, 240, 248, 256, 257, 258, 259, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383], "full_lik": [6, 31, 82, 123, 274, 383], "gcd": 6, "genfromtxt": 6, "geomspac": [6, 161, 171], "get_array_wrap": 6, "get_includ": 6, "get_printopt": 6, "getbufs": 6, "geterr": 6, "geterrcal": 6, "geterrobj": 6, "gradient": 6, "greater": [6, 76, 83, 129, 146, 147, 156, 256, 271], "greater_equ": [6, 83, 128, 146, 147, 271], "ham": 6, "han": 6, "heavisid": 6, "histogram": [6, 395], "histogram2d": 6, "histogram_bin_edg": 6, "histogramdd": 6, "hsplit": 6, "hstack": 6, "hypot": 6, "i0": 6, "imag": [6, 391], "in1d": 6, "indic": [6, 16, 17, 27, 28, 29, 69, 70, 76, 77, 110, 234, 235, 236, 266, 270, 282, 339, 343, 346, 358, 359, 364, 368, 369, 371, 372], "info": 6, "inner": [6, 79, 80, 275], "insert": [6, 87, 343, 395], "interp": 6, "intersect1d": 6, "invert": [6, 44], "is_busdai": 6, "isclos": 6, "iscomplex": 6, "iscomplexobj": 6, "isfinit": [6, 139, 140], "isfortran": 6, "isin": 6, "isinf": [6, 138, 140], "isnan": [6, 138, 139], "isnat": [6, 140], "isneginf": [6, 138, 139, 140], "isposinf": [6, 138, 139, 140], "isreal": 6, "isrealobj": 6, "isscalar": 6, "issctyp": 6, "issubclass_": 6, "issubdtyp": 6, "issubsctyp": 6, "iter": [6, 33, 34, 76, 121, 246, 395], "ix_": 6, "kaiser": 6, "kron": 6, "lcm": 6, "ldexp": 6, "left_shift": [6, 341], "less": [6, 83, 128, 129, 147, 271, 338], "less_equ": [6, 83, 128, 129, 146, 271], "lexsort": [6, 29, 76, 236, 349], "linspac": [6, 19, 84, 125, 171, 177, 376], "load": [6, 162], "loadtxt": 6, "log": [6, 88, 125, 161, 166, 171, 301], "log10": [6, 163, 166], "log1p": [6, 88, 163, 166], "log2": [6, 163], "logaddexp": 6, "logaddexp2": 6, "logical_and": [6, 43, 168, 169, 170], "logical_not": [6, 44, 136, 167, 169, 170], "logical_or": [6, 45, 167, 168, 170], "logical_xor": [6, 46, 167, 168, 169], "logspac": [6, 125, 161], "lookfor": 6, "mask_indic": 6, "mat": 6, "matmul": [6, 160], "max": [6, 16, 27, 76, 156, 303, 391], "maximum": [6, 16, 17, 27, 28, 76, 114, 115, 173, 180, 234, 250, 278, 280], "maximum_sctyp": 6, "may_share_memori": 6, "meshgrid": [6, 178, 272], "min": [6, 17, 28, 76, 391], "min_scalar_typ": 6, "minimum": [6, 16, 17, 27, 28, 76, 114, 115, 174, 179, 235, 252, 278, 280], "mintypecod": 6, "mod": 6, "modf": 6, "moveaxi": [6, 342, 364], "msort": 6, "multipli": 6, "nan_to_num": 6, "nanargmax": 6, "nanargmin": 6, "nancumprod": [6, 186], "nancumsum": 6, "nanmax": [6, 16, 17], "nanmean": [6, 175, 354, 378], "nanmedian": 6, "nanmin": [6, 16, 17], "nanpercentil": 6, "nanprod": 6, "nanquantil": 6, "nanstd": [6, 175, 354, 378], "nansum": 6, "nanvar": [6, 175, 354, 378], "ndim": [6, 31, 35, 62, 69, 76, 77, 236, 273, 342, 357, 382], "neg": [6, 14, 18, 42, 138, 139, 140, 278, 305, 350, 358], "nested_it": 6, "nextaft": 6, "nonzero": [6, 76, 381, 391], "not_equ": [6, 83, 128, 129, 146, 147], "obj2sctyp": 6, "ones": [6, 31, 81, 82, 83, 87, 90, 123, 124, 132, 133, 172, 187, 274, 340, 342, 364, 366, 382, 383], "ones_lik": [6, 31, 82, 124, 273, 383], "outer": [6, 79, 80, 144], "packbit": 6, "pad": [6, 77, 384, 395], "partit": [6, 76, 286, 308, 313, 314, 315, 316, 317, 318, 319, 321, 322, 327, 330, 349, 391], "percentil": [6, 176], "piecewis": 6, "place": [6, 76, 234, 235, 323, 339, 391], "poli": 6, "polyadd": 6, "polyd": 6, "polydiv": 6, "polyfit": 6, "polyint": 6, "polymul": 6, "polysub": 6, "polyv": 6, "posit": [6, 14, 18, 33, 34, 43, 76, 87, 138, 139, 140, 148, 183, 256, 278, 288, 312, 342, 350, 351, 364], "power": [6, 86, 155, 351], "printopt": 6, "prod": [6, 76, 187, 391], "product": [6, 63, 64, 75, 79, 80, 135, 144, 155, 157, 172, 184, 185, 275, 279, 362, 379, 395], "promote_typ": 6, "ptp": [6, 391], "put": [6, 282, 359, 391], "put_along_axi": [6, 359], "putmask": 6, "quantil": 6, "rad2deg": [6, 66, 67, 376], "radian": [6, 66, 67, 284, 376], "ravel": [6, 76, 158, 247, 391], "ravel_multi_index": 6, "real": [6, 103, 104, 105, 106, 107, 109, 148, 152, 153, 156, 288, 305, 350, 391, 395], "real_if_clos": 6, "recfromcsv": 6, "recfromtxt": 6, "reciproc": 6, "remaind": [6, 113, 114, 115, 116, 174, 180, 181, 278], "repeat": [6, 152, 153, 391], "resiz": [6, 87, 391], "result_typ": [6, 77, 395], "right_shift": [6, 145], "rint": 6, "roll": [6, 342], "rollaxi": 6, "root": [6, 43, 48, 350, 351], "rot90": 6, "round": [6, 30, 76, 112, 113, 337, 374, 391, 395], "round_": 6, "row_stack": 6, "safe_ev": 6, "save": 6, "savetxt": 6, "savez": 6, "savez_compress": 6, "sctype2char": 6, "searchsort": [6, 349, 391], "select": [6, 352, 384], "set_numeric_op": 6, "set_printopt": 6, "set_string_funct": 6, "setbufs": 6, "setdiff1d": 6, "seterr": 6, "seterrcal": 6, "seterrobj": 6, "setxor1d": 6, "shares_memori": 6, "show_config": 6, "sign": [6, 52, 53, 56, 77], "signbit": 6, "sin": [6, 22, 177], "sinc": 6, "sinh": [6, 21, 347], "sometru": 6, "sort": [6, 29, 76, 236, 256, 343, 364, 384, 391, 395], "sort_complex": 6, "space": [6, 19, 125, 161, 171], "split": [6, 395], "sqrt": [6, 351], "squar": [6, 43, 133, 148, 151, 152, 155, 290, 306, 350, 369, 372], "squeez": [6, 76, 87, 391], "stack": [6, 131, 156, 380], "std": [6, 76, 175, 378, 391], "subtract": 6, "swapax": [6, 183, 391], "take": [6, 76, 282, 339, 359, 391], "take_along_axi": [6, 27, 28, 29, 50, 282, 358], "tan": [6, 22, 25], "tanh": [6, 21], "tensordot": [6, 75, 135, 172], "tile": [6, 338, 395], "trace": [6, 391], "transpos": [6, 76, 148, 183, 191, 391, 395], "trapz": 6, "tri": 6, "tril": [6, 368, 369, 372], "tril_indic": [6, 369, 372], "tril_indices_from": 6, "trim_zero": 6, "triu": [6, 371], "triu_indic": 6, "triu_indices_from": 6, "true_divid": 6, "trunc": [6, 49, 112], "typenam": 6, "union1d": 6, "uniqu": [6, 42, 77], "unpackbit": 6, "unravel_index": [6, 27, 28], "unwrap": [6, 66, 284], "vander": 6, "var": [6, 76, 175, 263, 354, 391], "vdot": [6, 75, 172], "vsplit": 6, "vstack": 6, "where": [6, 12, 13, 14, 18, 25, 43, 44, 45, 46, 56, 57, 59, 74, 76, 83, 89, 112, 113, 116, 128, 129, 132, 136, 137, 138, 139, 140, 145, 146, 147, 148, 159, 163, 167, 168, 169, 170, 173, 174, 175, 179, 180, 184, 232, 233, 250, 252, 257, 265, 271, 278, 279, 286, 308, 313, 314, 315, 316, 317, 318, 319, 321, 322, 327, 330, 337, 341, 343, 347, 350, 351, 355, 356], "who": 6, "zero": [6, 14, 18, 31, 61, 69, 81, 82, 90, 96, 101, 112, 123, 124, 156, 160, 183, 188, 270, 273, 274, 278, 286, 288, 316, 318, 319, 321, 356, 366, 367, 370, 383], "zeros_lik": [6, 31, 82, 124, 274, 382], "astyp": [6, 76, 270], "byteswap": 6, "dump": 6, "fill": [6, 31, 76, 81, 82, 110, 123, 124, 273, 274, 358, 382, 383], "flatten": [6, 71, 76, 234, 235, 236, 246, 270, 335], "getfield": [6, 77], "item": [6, 76, 384], "itemset": 6, "newbyteord": [6, 77], "setfield": [6, 77], "setflag": 6, "tobyt": 6, "tofil": [6, 119], "tolist": 6, "tostr": 6, "view": [6, 39, 40, 76, 191, 258, 267, 339, 352, 364], "linalg": [6, 351], "choleski": 6, "cond": 6, "det": 6, "eig": [6, 152, 153], "eigh": 6, "eigval": [6, 152], "eigvalsh": 6, "inv": 6, "lstsq": 6, "matrix_pow": [6, 351], "matrix_rank": 6, "multi_dot": 6, "norm": [6, 92, 93, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 149, 395], "pinv": 6, "qr": 6, "slogdet": 6, "solv": [6, 395], "svd": [6, 156], "tensorinv": 6, "tensorsolv": 6, "fft": [6, 384, 395], "fft2": 6, "fftfreq": 6, "fftn": 6, "fftshift": 6, "hfft": 6, "ifft": 6, "ifft2": 6, "ifftn": 6, "ifftshift": 6, "ihfft": 6, "irfft": 6, "irfft2": 6, "irfftn": 6, "register_func": 6, "restore_al": 6, "restore_func": 6, "rfft": 6, "rfft2": 6, "rfftfreq": 6, "rfftn": 6, "beta": [6, 297], "binomi": [6, 305], "byte": [6, 76, 77, 249, 253], "chisquar": 6, "choic": [6, 50, 76, 238], "default_rng": 6, "dirichlet": 6, "exponenti": [6, 163, 299, 325], "gamma": [6, 326], "geometr": [6, 125, 161], "get_stat": [6, 286], "gumbel": 6, "hypergeometr": 6, "laplac": 6, "logist": 6, "lognorm": 6, "logseri": 6, "multinomi": 6, "multivariate_norm": 6, "negative_binomi": 6, "noncentral_chisquar": 6, "noncentral_f": 6, "normal": [6, 62, 152, 286, 301, 304, 315, 327], "pareto": 6, "permut": [6, 76, 183, 267, 364, 395], "poisson": 6, "rand": [6, 286, 316, 318, 319, 321], "randint": [6, 76, 248, 286, 317], "randn": [6, 160, 286], "random_integ": [6, 286, 314], "random_sampl": [6, 286, 313, 316, 319, 321], "ranf": 6, "rayleigh": 6, "seed": [6, 76, 248, 286], "set_stat": 6, "shuffl": 6, "standard_cauchi": 6, "standard_exponenti": 6, "standard_gamma": 6, "standard_norm": [6, 286, 315], "standard_t": 6, "triangular": [6, 148, 159], "uniform": [6, 77, 286, 313, 316, 318, 319, 321], "vonmis": 6, "wald": 6, "weibul": [6, 334], "zipf": 6, "bool": [8, 36, 43, 44, 45, 46, 76, 77, 83, 128, 129, 136, 138, 139, 140, 146, 147, 156, 158, 237, 270, 271, 339], "complex128": [8, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 340], "nan": [8, 14, 16, 17, 18, 33, 34, 138, 139, 140, 175, 185, 186, 187, 188, 189, 350, 354, 378, 395], "arg": [11, 79, 114, 115, 181, 286, 373, 379], "kwarg": [11, 12, 13, 15, 22, 24, 25, 43, 44, 45, 46, 49, 52, 53, 56, 59, 63, 64, 65, 74, 75, 76, 79, 83, 85, 91, 112, 113, 114, 115, 116, 118, 119, 120, 122, 127, 128, 129, 132, 135, 136, 138, 139, 140, 145, 146, 147, 162, 163, 167, 168, 169, 170, 172, 174, 180, 181, 182, 184, 185, 186, 187, 188, 221, 251, 258, 269, 271, 278, 336, 337, 341, 346, 347, 349, 350, 351, 355, 360, 362, 365, 366, 373, 374, 375, 379], "calcul": [11, 12, 73, 78, 85, 91, 112, 114, 115, 116, 174, 180, 181, 187, 188, 278, 279, 337, 350, 384], "valu": [11, 12, 13, 14, 16, 17, 18, 19, 24, 25, 27, 28, 29, 30, 31, 33, 34, 41, 42, 43, 44, 45, 46, 47, 49, 55, 56, 57, 58, 59, 61, 62, 72, 73, 74, 76, 77, 78, 81, 82, 83, 89, 90, 91, 92, 98, 110, 111, 112, 113, 116, 120, 123, 124, 125, 128, 129, 132, 134, 136, 138, 139, 140, 145, 146, 147, 148, 153, 156, 158, 160, 161, 162, 163, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 184, 189, 196, 198, 200, 213, 216, 219, 228, 234, 235, 244, 246, 250, 252, 256, 270, 271, 273, 274, 276, 277, 278, 280, 281, 282, 283, 286, 296, 313, 314, 330, 337, 338, 339, 341, 343, 344, 347, 350, 351, 354, 355, 356, 358, 359, 362, 363, 374, 376, 378, 382, 383, 391, 395], "wise": [11, 12, 13, 15, 16, 17, 20, 21, 22, 23, 24, 25, 26, 32, 43, 44, 45, 46, 48, 49, 52, 53, 56, 59, 60, 74, 76, 83, 85, 86, 88, 91, 112, 114, 115, 116, 128, 129, 131, 136, 137, 138, 139, 140, 145, 146, 147, 154, 163, 164, 165, 166, 167, 168, 169, 170, 174, 180, 181, 182, 184, 240, 269, 271, 278, 336, 337, 341, 346, 347, 348, 350, 351, 355, 360, 361, 373, 374, 380, 391], "note": [11, 14, 16, 17, 18, 27, 28, 36, 37, 66, 76, 77, 87, 112, 114, 115, 138, 158, 171, 181, 236, 258, 270, 284, 289, 291, 292, 302, 307, 339, 358, 373, 379], "shorthand": [11, 83, 128, 129, 146, 147, 167, 169, 271, 381], "out": [12, 13, 14, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 35, 43, 44, 45, 46, 48, 49, 50, 51, 56, 59, 60, 62, 67, 74, 75, 76, 83, 84, 85, 86, 88, 112, 113, 116, 117, 128, 129, 132, 136, 137, 138, 139, 140, 145, 146, 147, 157, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 183, 184, 189, 232, 233, 234, 235, 238, 241, 247, 250, 252, 257, 259, 263, 265, 266, 268, 270, 271, 275, 278, 279, 280, 285, 286, 308, 313, 314, 315, 316, 317, 318, 319, 321, 327, 330, 335, 336, 337, 340, 341, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 361, 363, 374, 376, 378], "none": [12, 13, 14, 16, 17, 18, 19, 22, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 41, 42, 43, 44, 45, 46, 49, 50, 51, 56, 59, 61, 62, 63, 74, 75, 76, 77, 78, 81, 82, 83, 85, 87, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 112, 113, 116, 123, 124, 125, 128, 129, 130, 132, 133, 136, 138, 139, 140, 145, 146, 147, 149, 156, 157, 158, 160, 161, 163, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 179, 180, 184, 189, 232, 233, 234, 235, 236, 238, 241, 248, 250, 251, 252, 256, 257, 259, 262, 263, 265, 266, 268, 271, 273, 274, 275, 276, 278, 279, 280, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 337, 338, 339, 341, 343, 347, 350, 351, 352, 353, 354, 355, 356, 358, 360, 363, 364, 365, 366, 368, 371, 374, 377, 378, 381, 382, 383, 391], "subok": [12, 13, 31, 44, 47, 55, 59, 74, 76, 82, 83, 113, 124, 128, 129, 136, 138, 139, 140, 146, 147, 163, 167, 168, 169, 170, 184, 237, 271, 274, 278, 347, 350, 351, 355, 383], "contain": [12, 19, 43, 44, 45, 46, 76, 77, 117, 126, 136, 145, 152, 175, 258, 286, 341, 350, 356, 368, 371, 391], "paramet": [12, 13, 14, 15, 18, 19, 25, 27, 28, 30, 31, 33, 34, 43, 44, 45, 46, 47, 49, 55, 56, 57, 59, 61, 63, 64, 65, 72, 73, 74, 75, 76, 77, 78, 81, 82, 83, 84, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 116, 117, 123, 124, 125, 127, 128, 129, 132, 133, 134, 135, 136, 138, 139, 140, 145, 146, 147, 148, 149, 150, 152, 153, 155, 156, 157, 158, 159, 161, 163, 167, 168, 169, 170, 171, 172, 174, 175, 177, 180, 182, 183, 184, 185, 186, 187, 188, 234, 235, 236, 237, 244, 247, 258, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 286, 287, 288, 290, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 352, 355, 356, 357, 358, 362, 363, 365, 367, 368, 369, 370, 371, 372, 374, 381, 382, 383], "onli": [12, 14, 18, 19, 27, 28, 29, 31, 33, 34, 41, 55, 57, 58, 59, 61, 62, 72, 73, 77, 78, 81, 82, 90, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 118, 119, 120, 121, 122, 123, 124, 125, 134, 138, 139, 140, 145, 148, 161, 162, 163, 168, 171, 173, 176, 177, 179, 189, 273, 274, 276, 280, 286, 308, 314, 330, 339, 341, 342, 343, 344, 347, 354, 358, 362, 363, 367, 370, 378, 381, 382, 383, 391], "either": [12, 13, 15, 25, 43, 44, 45, 46, 47, 56, 59, 74, 75, 77, 83, 89, 113, 116, 128, 129, 132, 136, 137, 138, 139, 140, 145, 146, 147, 158, 163, 167, 168, 169, 170, 174, 175, 177, 180, 183, 184, 270, 271, 275, 277, 278, 322, 337, 338, 340, 341, 347, 350, 351, 352, 355, 356, 358, 364, 381], "tensor": [12, 13, 43, 44, 45, 46, 47, 59, 74, 75, 76, 82, 83, 89, 124, 128, 129, 135, 136, 138, 139, 140, 145, 146, 147, 152, 163, 167, 168, 169, 170, 175, 177, 183, 184, 270, 271, 274, 275, 277, 278, 340, 341, 347, 350, 351, 352, 355, 356, 358, 362, 364, 367, 370, 381, 383], "usm_ndarrai": [12, 13, 43, 44, 45, 46, 47, 59, 74, 75, 76, 82, 83, 89, 124, 128, 129, 136, 138, 139, 140, 145, 146, 147, 152, 163, 167, 168, 169, 170, 175, 177, 183, 184, 270, 271, 274, 275, 277, 278, 339, 340, 341, 347, 350, 351, 352, 355, 356, 358, 364, 367, 370, 381, 383], "keyword": [12, 13, 15, 22, 24, 25, 43, 44, 45, 46, 49, 56, 63, 64, 65, 74, 75, 78, 91, 112, 113, 116, 127, 132, 135, 136, 145, 174, 180, 182, 184, 185, 186, 187, 188, 269, 278, 336, 337, 341, 346, 349, 355, 360, 362, 365, 374, 391], "argument": [12, 13, 15, 22, 24, 25, 43, 44, 45, 46, 49, 56, 63, 64, 65, 74, 75, 76, 77, 78, 84, 91, 112, 113, 116, 127, 132, 135, 136, 142, 143, 145, 154, 157, 174, 180, 182, 184, 185, 186, 187, 188, 236, 237, 258, 269, 278, 336, 337, 340, 341, 346, 349, 355, 360, 362, 365, 374, 391], "unsupport": [12, 13, 15, 22, 24, 25, 43, 44, 45, 46, 49, 56, 63, 64, 65, 74, 75, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 112, 113, 116, 127, 132, 135, 136, 145, 157, 174, 180, 182, 184, 185, 186, 187, 188, 269, 278, 279, 336, 337, 341, 346, 349, 355, 360, 362, 365, 374], "sequenti": [12, 13, 14, 15, 18, 19, 25, 27, 28, 29, 30, 41, 43, 44, 45, 46, 47, 49, 56, 57, 58, 59, 61, 62, 63, 64, 65, 72, 73, 74, 75, 78, 79, 80, 81, 82, 83, 84, 89, 90, 91, 112, 113, 116, 123, 124, 127, 128, 129, 132, 135, 136, 137, 138, 139, 140, 145, 146, 147, 154, 161, 163, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 269, 270, 271, 273, 274, 275, 277, 278, 335, 336, 337, 338, 341, 342, 346, 347, 349, 350, 351, 352, 354, 355, 356, 357, 358, 362, 365, 367, 370, 374, 378, 381, 382, 383], "dp": [12, 13, 14, 18, 44, 47, 74, 75, 76, 136, 152, 184, 267, 278, 339, 340, 345, 355, 364, 381], "x1": [13, 14, 15, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 34, 36, 41, 42, 43, 45, 46, 48, 49, 50, 52, 53, 55, 56, 58, 60, 61, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 78, 82, 83, 85, 86, 87, 88, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 116, 124, 127, 128, 129, 132, 135, 137, 144, 145, 146, 147, 151, 158, 159, 160, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 176, 177, 179, 180, 182, 184, 185, 186, 187, 188, 189, 269, 271, 274, 275, 276, 278, 279, 281, 282, 283, 284, 285, 323, 335, 336, 337, 338, 341, 342, 343, 346, 348, 349, 354, 355, 357, 359, 360, 361, 362, 363, 365, 367, 369, 370, 372, 374, 375, 376, 377, 378, 383], "x2": [13, 14, 15, 18, 22, 24, 25, 31, 43, 45, 46, 56, 58, 63, 74, 75, 83, 113, 116, 125, 128, 129, 132, 135, 137, 144, 145, 146, 147, 161, 167, 168, 169, 170, 171, 172, 174, 177, 180, 184, 270, 271, 275, 278, 337, 341, 343, 350, 355, 362], "order": [13, 29, 31, 33, 34, 35, 37, 55, 59, 74, 76, 77, 79, 80, 81, 82, 83, 90, 113, 123, 124, 128, 129, 138, 139, 140, 146, 147, 152, 153, 158, 163, 167, 168, 169, 170, 183, 184, 236, 237, 247, 256, 271, 273, 274, 276, 335, 339, 343, 347, 350, 351, 355, 382, 383, 395], "k": [13, 55, 59, 68, 71, 74, 76, 83, 90, 113, 128, 129, 138, 139, 140, 146, 147, 163, 167, 168, 169, 170, 184, 237, 247, 271, 347, 350, 351, 355, 366, 367, 368, 369, 370, 371, 372, 399], "scalar": [13, 15, 25, 38, 43, 45, 46, 56, 74, 75, 76, 77, 83, 113, 116, 128, 129, 132, 141, 145, 146, 147, 167, 169, 170, 174, 177, 180, 184, 235, 244, 248, 271, 275, 278, 286, 287, 288, 290, 293, 294, 295, 296, 297, 298, 299, 300, 301, 305, 308, 309, 311, 312, 314, 317, 320, 322, 326, 328, 329, 330, 331, 332, 333, 334, 337, 341, 355, 381, 391], "both": [13, 43, 45, 46, 74, 75, 83, 128, 129, 145, 146, 147, 158, 167, 169, 170, 184, 271, 275, 278, 341, 355], "b": [13, 51, 64, 65, 75, 77, 78, 83, 116, 128, 129, 135, 146, 147, 160, 167, 169, 172, 185, 186, 271, 275, 278, 287, 362, 365], "axi": [14, 16, 17, 18, 27, 28, 29, 41, 51, 61, 63, 64, 65, 73, 76, 78, 87, 92, 97, 98, 102, 103, 106, 125, 158, 161, 171, 173, 175, 176, 179, 185, 186, 189, 232, 233, 234, 235, 236, 241, 250, 251, 252, 256, 257, 262, 263, 265, 266, 268, 276, 279, 280, 282, 338, 339, 342, 352, 353, 354, 356, 358, 359, 365, 378, 391], "keepdim": [14, 18, 61, 76, 158, 173, 175, 176, 179, 189, 232, 233, 250, 252, 257, 263, 265, 268, 279, 280, 354, 356, 378], "fals": [14, 15, 18, 31, 32, 41, 47, 55, 61, 62, 76, 77, 82, 83, 110, 124, 125, 128, 129, 134, 137, 138, 139, 140, 146, 147, 156, 158, 160, 161, 167, 168, 169, 170, 171, 173, 175, 176, 177, 179, 189, 232, 233, 237, 257, 263, 265, 268, 271, 274, 279, 339, 354, 356, 377, 378, 383], "whether": [14, 18, 77, 148, 339], "given": [14, 16, 17, 18, 19, 27, 28, 30, 31, 55, 62, 64, 65, 73, 75, 76, 77, 78, 81, 82, 110, 123, 124, 132, 177, 179, 185, 186, 234, 235, 236, 241, 252, 257, 259, 263, 265, 268, 273, 274, 279, 281, 286, 291, 313, 330, 342, 356, 365, 366, 382, 383, 391], "evalu": [14, 18, 76, 79, 80, 83, 135, 177, 232, 233, 275, 362], "Not": [14, 18, 76, 138, 185, 187, 188, 236, 281], "number": [14, 18, 19, 30, 42, 52, 53, 61, 76, 77, 112, 113, 125, 138, 149, 156, 158, 161, 162, 171, 185, 187, 188, 254, 259, 260, 261, 270, 286, 288, 298, 322, 337, 342, 346, 374, 395], "infin": [14, 18, 112, 113, 138, 139, 140, 337, 374, 395], "becaus": [14, 18], "x3": [14, 18, 161, 171], "rtol": [15, 137], "1e": [15, 137, 304], "05": [15, 137], "atol": [15, 137], "08": [15, 59, 137, 304, 347], "two": [15, 16, 17, 32, 39, 43, 44, 45, 46, 54, 58, 63, 71, 76, 77, 79, 80, 135, 136, 137, 144, 152, 157, 167, 169, 170, 172, 183, 256, 275, 286, 315, 357, 367, 368, 370, 371, 379], "within": [15, 19, 32, 137, 286, 330], "toler": [15, 32, 137], "1e10": [15, 137], "7": [15, 19, 49, 61, 65, 68, 69, 76, 78, 85, 112, 127, 137, 160, 172, 176, 186, 248, 270, 286, 310, 337, 340, 355, 358, 362, 367, 370, 374, 381], "00001e10": [15, 137], "propag": [16, 17, 77], "ignor": [16, 17, 76, 77, 175, 189, 268, 354, 378], "exactli": [16, 17, 36, 37, 66, 284, 286, 314], "stop": [19, 125, 161, 171], "like": [19, 31, 34, 81, 90, 123, 133, 162, 273, 286, 330, 339, 382, 395], "usm_typ": [19, 31, 34, 76, 81, 82, 90, 123, 124, 161, 273, 274, 286, 308, 313, 314, 315, 316, 317, 318, 319, 321, 327, 330, 382, 383], "sycl_queu": [19, 31, 34, 76, 81, 82, 90, 123, 124, 161, 273, 274, 286, 308, 313, 314, 315, 316, 317, 318, 319, 321, 322, 327, 330, 382, 383], "evenli": [19, 30, 125, 161, 171], "interv": [19, 161, 286, 314, 316, 318, 319, 321, 329, 330], "d": [19, 69, 77, 90, 93, 94, 95, 99, 100, 104, 105, 107, 108, 109, 122, 152, 157, 158, 177, 270, 291, 339, 345, 358, 381, 391], "care": 19, "handl": [19, 77, 270, 358, 395], "endpoint": [19, 125, 161, 171], "trigonometr": [20, 21, 22, 24, 25, 26, 59, 60, 85, 86, 88, 164, 165, 166, 347, 348, 395], "invers": [20, 21, 22, 23, 24, 25, 26, 44, 87, 88, 98, 99, 100, 101, 102, 103, 104, 105, 136, 163, 165, 332, 347], "cosin": [20, 21, 22, 59, 60, 347], "tangent": [20, 21, 22, 24, 25, 26, 360, 361], "sine": [20, 21, 22, 23, 347, 348], "14159265": 20, "hyperbol": [21, 23, 26, 60, 347, 348, 361, 395], "e": [21, 23, 76, 77, 163, 264, 286], "65745445": 21, "99322285": 21, "arc": [22, 24, 25], "quadrant": [22, 24, 25], "correctli": [22, 24, 25, 158, 270], "5707963267948966": 22, "72538256": 23, "99822295": 23, "complex": [24, 25, 52, 53, 75, 76, 77, 84, 152, 153, 160, 172, 239, 240, 350, 391, 395], "78539816": [24, 376], "57079633": [25, 285, 376], "54930614": 26, "convert": [27, 28, 33, 34, 35, 36, 38, 66, 67, 77, 284, 285, 376], "flat": [27, 28, 76, 247], "tupl": [27, 28, 69, 76, 77, 87, 158, 260, 270, 338, 339, 345, 368, 371, 391], "appli": [27, 28, 29, 167, 169, 170, 340], "index_arrai": [27, 28, 29, 76, 234, 236], "call": [27, 28, 29, 77, 157, 352, 381], "occurr": [27, 28, 42], "first": [27, 28, 76, 77, 86, 142, 143, 157, 236, 278, 339, 351], "11": [27, 28, 30, 69, 76, 127, 258, 305, 314, 348, 367, 370], "14": [27, 28, 43, 44, 69, 75, 136, 362], "15": [27, 28, 65, 69, 310, 356], "in_array1": [29, 61, 84], "kind": [29, 76, 77, 236, 256, 276, 395], "would": [29, 76, 77, 256, 286, 364], "pramet": [29, 41, 58, 62, 173, 176, 179, 189, 354, 378], "describ": [29, 76, 77, 158, 236, 356, 395], "algorithm": [29, 76, 236], "indirect": [29, 76, 236, 349], "stabl": [29, 76, 236, 349], "partial": [29, 349], "decim": [30, 76, 259], "37": 30, "nearest": [30, 112, 113, 337, 374], "even": [30, 77], "int": [30, 36, 42, 69, 76, 77, 83, 127, 134, 236, 276, 286, 314, 317, 339, 345, 366, 368, 369, 371, 372, 391], "ndmin": 31, "new": [31, 47, 76, 77, 81, 82, 87, 117, 121, 122, 123, 124, 183, 235, 258, 267, 273, 274, 339, 342, 353, 364, 382, 383, 391], "uniniti": [31, 82, 123, 273, 382], "than": [31, 76, 156, 256, 338], "dimens": [31, 38, 39, 40, 62, 69, 76, 77, 87, 134, 154, 158, 183, 235, 247, 254, 286, 316, 318, 319, 321, 338, 339, 345, 349, 352, 367, 368, 369, 370, 371, 372, 391, 395], "a1": 32, "a2": 32, "equal_nan": [32, 137], "consist": 32, "pass": [33, 34, 76, 77, 258], "subclass": [33, 34, 143], "through": [33, 34, 77, 391], "contigu": [33, 34, 35, 76, 247, 335, 339], "float": [33, 34, 36, 77, 127, 156, 158, 171, 286, 290, 315, 316, 318, 319, 321, 324, 325, 327, 330, 391, 395], "point": [33, 34, 77, 161, 286, 315, 327, 395], "check": [33, 34, 148], "inf": [33, 34, 138, 139, 140, 149, 158, 163, 164, 166, 350], "grid": [33, 34, 134, 177], "object": [34, 55, 76, 77, 87, 117, 121, 148, 152, 158, 162, 178, 258, 272, 286, 308, 313, 314, 315, 316, 317, 318, 319, 321, 322, 327, 330, 339, 391], "satisfi": [35, 89], "capabl": 36, "ari": [38, 39, 40], "least": [38, 39, 40, 77, 137], "whilst": 38, "higher": 38, "preserv": [38, 76, 77, 234, 235], "three": [40, 286, 322], "weight": [41, 42, 62, 130, 175], "specifi": [41, 47, 72, 76, 125, 135, 158, 161, 171, 175, 176, 189, 234, 235, 236, 242, 281, 286, 299, 309, 327, 342, 354, 362, 378], "minlength": 42, "count": [42, 61, 77, 121, 155, 270, 288, 384, 395], "non": [42, 61, 138, 152, 270, 286, 308, 313, 314, 315, 316, 317, 318, 319, 321, 322, 327, 330, 350], "find": [42, 156, 343, 349, 375, 395], "re": [42, 51, 130, 375], "bit": [43, 44, 45, 46, 77, 136, 145, 167, 169, 170, 341, 395], "AND": [43, 44, 45, 46, 136, 167, 168, 169, 170], "truth": [43, 44, 45, 46, 83, 128, 129, 136, 146, 147, 167, 168, 169, 170, 271, 395], "OR": [43, 44, 45, 46, 136, 167, 168, 169, 170], "xor": [43, 44, 45, 46, 136, 167, 168, 169, 170], "255": [43, 45], "NOT": [44, 136, 167, 168, 169, 170], "31": [46, 125], "26": 46, "broadcast": [47, 57, 158, 167, 169, 170, 172], "must": [47, 76, 89, 148, 157, 158, 162, 234, 235], "cube": 48, "27": [48, 377], "truncat": [49, 112, 324, 374], "mode": [50, 54, 58, 76, 159, 238, 266, 281, 324, 329, 358], "rais": [50, 76, 86, 155, 238, 260, 278, 281, 339, 351], "prefer": 50, "arr": [51, 76, 77, 236, 270, 280, 283, 310, 369, 372], "cast": [51, 57, 76, 237], "same_kind": [51, 57], "join": [51, 353, 395], "sequenc": [51, 54, 58, 131, 155, 157, 310, 323, 340, 353, 380], "exist": [51, 77, 87, 339], "t": [51, 62, 76, 77, 153, 267, 328], "obtain": [52, 53, 270], "chang": [52, 53, 56, 76, 77, 236, 264, 267, 277, 283, 339, 376, 395], "imaginari": [52, 53], "2j": [52, 53, 152], "1j": [52, 53, 160, 351], "j": [52, 53, 152, 351], "v": [54, 77, 152, 281], "linear": [54, 58, 171, 384, 395], "convolut": [54, 58], "ca": 54, "z": [55, 120, 177, 296], "dst": 57, "src": 57, "valid": [58, 368, 369, 371, 372], "pi": [59, 67, 347, 348, 360, 361, 376], "000000e": [59, 347], "00": [59, 347], "371139e": 59, "m": [62, 77, 90, 148, 150, 152, 153, 156, 366, 368, 371], "rowvar": 62, "bia": 62, "ddof": [62, 76, 189, 263, 268, 354, 378], "fweight": 62, "aweight": 62, "estim": [62, 288, 305], "covari": 62, "variabl": 62, "axisa": 63, "axisb": 63, "axisc": 63, "vector": [63, 149, 156, 157, 158, 177, 379, 395], "cumul": [64, 65, 76, 185, 186, 241], "24": [64, 78, 187, 279], "120": [64, 67], "720": 64, "remov": [66, 76, 87, 262, 284, 352, 395], "larg": [66, 77, 284], "jump": [66, 284], "wrap": [66, 76, 110, 266, 284, 358], "rad": 67, "30": [67, 285], "60": [67, 381], "90": [67, 381], "150": 67, "access": [69, 70, 110, 391], "main": [69, 70, 110, 133, 153], "usual": [69, 77], "di": 69, "100": [69, 125, 171, 298, 324], "now": 69, "we": 69, "d3": 69, "offset": [72, 76, 77, 242, 363, 368, 369, 371, 372], "axis1": [72, 76, 242, 357, 363], "axis2": [72, 76, 242, 357, 363], "prepend": 73, "th": [73, 78, 176, 367, 370], "quotient": 74, "over": [75, 120, 158, 161, 172, 177, 185, 279, 286, 313, 318, 329, 330, 356, 395], "arbitrari": [75, 77, 172, 340], "ax": [75, 76, 93, 95, 96, 99, 100, 101, 104, 105, 107, 109, 135, 158, 172, 175, 183, 260, 267, 342, 352, 357, 362, 364], "buffer": [76, 118, 339], "stride": [76, 237], "wrapper": 76, "compliant": 76, "origin": [76, 158, 183, 236, 339], "__getitem__": [76, 77, 111, 384], "__setitem__": [76, 111, 384], "val": [76, 110, 111, 227, 277], "__len__": [76, 77, 384], "perform": [76, 148, 214], "equival": [76, 87, 232, 233, 258, 267, 268, 285, 286, 314, 339, 345, 364, 391], "integ": [76, 77, 112, 113, 137, 145, 155, 158, 234, 235, 278, 286, 314, 317, 322, 337, 339, 341, 342, 351, 358, 367, 370, 374, 391], "option": [76, 77, 156, 157, 158, 234, 235, 236, 247, 286, 308, 313, 314, 315, 316, 317, 318, 319, 321, 322, 327, 330, 339, 358, 368, 369, 371, 372], "Its": [76, 234, 235], "right": [76, 132, 145, 151, 152, 234, 235, 329, 341, 343], "hold": [76, 158, 234, 235], "output": [76, 77, 83, 128, 129, 146, 147, 155, 157, 177, 228, 234, 235, 271, 286, 287, 288, 290, 293, 294, 295, 296, 297, 298, 299, 300, 301, 305, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 352, 395], "integer_arrai": [76, 234], "versionchang": [76, 236], "previous": [76, 236], "wa": [76, 77, 236, 286, 327, 356], "error": [76, 84, 236, 384], "At": [76, 236], "some": [76, 77, 87, 89, 112, 236, 391], "futur": [76, 77, 236], "intend": [76, 236], "until": [76, 236, 342], "should": [76, 126, 137, 236, 303, 338, 339, 343, 391], "explicitli": [76, 236], "when": [76, 77, 158, 171, 236, 237, 358, 381], "avoid": [76, 236], "futurewarn": [76, 236], "quicksort": [76, 236], "mergesort": [76, 236], "heapsort": [76, 236], "field": [76, 77, 177, 236, 391], "compar": [76, 83, 236], "second": [76, 77, 86, 143, 236, 278, 351], "etc": [76, 77, 236, 305], "other": [76, 77, 112, 157, 183, 193, 194, 196, 198, 200, 201, 202, 203, 204, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 222, 223, 226, 229, 230, 231, 236, 286, 330, 384, 395], "word": [76, 112, 236, 286, 330], "yield": [76, 236, 286, 391], "maskedarrai": [76, 236], "inplac": [76, 236], "asnumpi": 76, "content": [76, 323], "popul": [76, 286, 313], "unsaf": [76, 237], "target": [76, 237], "A": [76, 77, 117, 119, 122, 153, 237, 247, 260, 286, 288, 305, 308, 313, 314, 315, 316, 317, 318, 319, 321, 322, 327, 330, 364], "row": [76, 157, 162, 237, 247, 368, 380], "style": [76, 237, 247], "fortran": [76, 237, 247, 339], "keep": [76, 237], "close": [76, 237, 286, 314], "possibl": [76, 237, 258, 339, 352, 364], "happen": [76, 237, 288], "itself": [76, 77, 237, 391], "possibli": [76, 237], "doe": [76, 237], "assign": [76, 244], "collaps": [76, 247], "occur": [76, 247], "get_arrai": 76, "get": [76, 264, 391], "id": [76, 248], "standard": [76, 113, 116, 175, 181, 228, 248, 286, 301, 308, 315, 324, 325, 326, 327, 328, 337, 354, 356, 378, 391, 395], "random": [76, 160, 248, 384, 395], "123": [76, 248], "initi": [76, 81, 122, 173, 179, 250, 252, 257, 265, 279, 286, 356], "kth": [76, 256, 276], "introselect": [76, 256, 276], "rearrang": [76, 256, 395], "smaller": [76, 113, 256], "move": [76, 183, 256, 342, 364], "behind": [76, 256], "undefin": [76, 256], "dparrai": [76, 257, 265, 396], "sh": [76, 258], "unlik": [76, 258], "free": [76, 258], "separ": [76, 77, 258], "singl": [76, 157, 175, 262, 286, 305, 314, 315, 316, 317, 318, 319, 321, 327, 391], "entri": [76, 77, 81, 262, 268], "varianc": [76, 175, 189, 263, 268, 354, 378, 395], "to_devic": 76, "target_devic": 76, "transfer": 76, "suitabl": [76, 267], "properti": [76, 191, 243, 245, 246, 249, 253, 254, 260, 261, 264, 267, 286, 308, 313, 314, 315, 316, 317, 318, 319, 321, 322, 327, 330, 391], "give": [76, 267, 339, 345], "without": [76, 81, 260, 267, 339, 391], "mask": [76, 77, 268, 277, 283, 358], "finit": [76, 138, 139, 140, 268], "__eq__": [76, 77, 111, 286, 384], "self": [76, 77, 111, 196, 198, 200, 213, 216, 219, 225, 246, 286], "__ne__": [76, 77, 111, 286, 384], "__lt__": [76, 77, 111, 286, 384], "__le__": [76, 77, 111, 286, 384], "__gt__": [76, 77, 111, 286, 384], "__ge__": [76, 77, 111, 286, 384], "flag": [76, 77], "about": [76, 245, 391], "layout": [76, 245, 339, 384], "items": [76, 77], "nbyte": 76, "consum": [76, 253], "length": [76, 83, 260, 289, 339, 340, 345, 352], "repres": [76, 77, 117, 134, 260, 286, 391], "diment": [76, 260], "setter": [76, 260], "involv": [76, 260], "cannot": [76, 260, 352], "displac": [76, 264], "upon": [76, 264], "unit": [76, 264], "respect": [76, 264], "s1": [76, 77, 264], "s2": [76, 77, 264], "s3": [76, 264], "i1": [76, 77, 264], "i2": [76, 77, 264], "i3": [76, 264], "sycl_context": 76, "sycl_devic": 76, "align": 77, "homogen": 77, "fundament": 77, "match": [77, 282, 358, 359], "what": [77, 83, 288, 305], "struct": 77, "obj": [77, 78, 117, 141], "dictionari": 77, "comma": 77, "string": [77, 122, 286, 308, 313, 314, 315, 316, 317, 318, 319, 321, 322, 327, 330, 391], "sticki": 77, "isalignedstruct": 77, "make": [77, 177], "mai": [77, 87, 152, 171, 391], "just": 77, "built": 77, "int16": 77, "structur": [77, 391], "f1": 77, "unsign": 77, "uint64": 77, "f2": 77, "u8": 77, "i4": 77, "protocol": [77, 117], "f8": 77, "s10": 77, "format": [77, 119, 395], "f0": 77, "void": 77, "flexibl": 77, "hello": 77, "world": [77, 288, 305], "i8": 77, "v10": 77, "subdivid": 77, "int8": 77, "gender": 77, "ag": 77, "uint8": 77, "u1": 77, "25": [77, 84, 127, 130, 161, 184, 278, 315, 324, 377, 378], "surnam": 77, "s25": 77, "len": [77, 134, 338, 345], "new_ord": 77, "made": 77, "sub": 77, "forc": 77, "swap": 77, "code": 77, "opposit": 77, "endian": 77, "littl": 77, "big": 77, "nativ": 77, "new_dtyp": 77, "sy": 77, "sys_is_l": 77, "byteord": 77, "native_cod": 77, "swapped_cod": 77, "native_dt": 77, "swapped_dt": 77, "l": [77, 148, 152], "accord": [77, 152, 153], "subarrai": 77, "regardless": 77, "subdtyp": 77, "8f": 77, "charact": 77, "One": [77, 339], "applic": 77, "dt": 77, "relev": 77, "ascii": 77, "show": [77, 170, 177, 324], "char": 77, "descr": 77, "__array_interface__": 77, "descript": [77, 391], "warn": [77, 304], "directli": [77, 171], "accur": 77, "reconstruct": [77, 160], "str_": 77, "grade": 77, "u16": 77, "fulli": 77, "titl": 77, "32": [77, 362], "present": 77, "unicod": 77, "meta": 77, "notic": 77, "s16": 77, "multiarrai": 77, "constant": 77, "item_hasobject": 77, "list_pickl": 77, "item_is_point": 77, "needs_init": 77, "needs_pyapi": 77, "use_getitem": 77, "use_setitem": 77, "explan": 77, "thei": [77, 153, 391], "user": 77, "particular": 77, "hasobject": 77, "boolean": [77, 137, 138, 139, 140, 167, 168, 169, 170, 339, 358], "recal": 77, "actual": [77, 148], "address": 77, "pointer": 77, "distinguish": 77, "won": 77, "maintain": [77, 343], "so": [77, 83, 163, 324, 350], "togeth": 77, "produc": 77, "isbuiltin": 77, "relat": 77, "read": [77, 119, 339], "machineri": 77, "extend": [77, 391], "field1": 77, "isn": 77, "platform": 77, "anyth": 77, "80": [77, 381], "biufcmmosuv": 77, "identifi": 77, "gener": [77, 153, 286, 288, 291, 322, 377, 391, 395], "u": [77, 160], "timedelta": 77, "datetim": 77, "metadata": 77, "readonli": 77, "mappingproxi": 77, "approach": 77, "although": 77, "guarante": [77, 339], "certain": 77, "project": 77, "featur": 77, "long": 77, "undocu": 77, "well": [77, 119, 288, 305, 324], "aspect": 77, "ad": [77, 395], "datatyp": [77, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 156], "dt2": 77, "key2": 77, "value2": 77, "arr2": 77, "clear": 77, "width": 77, "un": 77, "void640": 77, "increas": [77, 377], "walk": 77, "num": [77, 84, 125, 161, 171, 376], "roughli": 77, "precis": 77, "str": 77, "19": 77, "typestr": 77, "item_dtyp": 77, "whose": [77, 153, 369, 372], "retriev": 77, "extra": 77, "impli": 77, "tack": 77, "end": [77, 161], "to_end": 78, "to_begin": 78, "between": [78, 153, 303, 317, 376], "consecut": 78, "seealso": 78, "einstein": [79, 80, 135, 172, 275, 362], "summat": [79, 80, 135, 172, 275, 362], "convent": [79, 80, 135, 172, 275, 362], "operand": [79, 80, 135, 275, 362], "lowest": [79, 80, 286, 314], "cost": [79, 80], "contract": [79, 80], "express": [79, 80], "subscript": 80, "greedi": 80, "consid": [80, 138, 156, 286, 314], "intermedi": 80, "dpnp_arrai": [82, 117, 124, 177, 190, 274, 286, 308, 313, 314, 315, 316, 317, 318, 319, 321, 322, 327, 330, 339, 367, 370, 383, 384], "scipi": 84, "math": 84, "75": [84, 127, 161], "99532227": 84, "99853728": 84, "99959305": 84, "99989938": 84, "99997791": 84, "expon": [85, 88, 278, 312, 395], "718281828": [85, 88], "389056099": [85, 88], "exponent2": 86, "expand": 87, "appear": 87, "singleton": [87, 352], "newaxi": 87, "instead": [87, 112, 125, 161, 171, 270], "minu": [88, 112, 113, 337, 374], "condit": [89, 149, 277, 283, 344, 381], "rank": [89, 156], "elsewher": [90, 366, 381], "fourier": [92, 93, 94, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 384], "transform": [92, 93, 94, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 384], "complex64": [92, 98], "batch": [93, 95, 99, 100, 104, 105, 107, 109], "sampl": [94, 108, 125, 161, 171, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 315, 317, 320, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 384, 395], "frequenc": [94, 96, 101, 108], "shift": [96, 101, 145, 341], "compon": [96, 101], "center": [96, 101], "spectrum": [96, 101], "signal": [97, 102], "hermitian": [97, 102, 148, 152, 156, 160, 395], "symmetri": [97, 102], "__next__": 111, "__iter__": 111, "toward": [112, 113, 337, 374], "spreadsheet": 112, "definit": [112, 148], "largest": 113, "divis": [113, 114, 115, 116, 174, 180, 181, 278, 337, 373], "remind": [113, 116, 181], "complementari": [113, 116, 181], "__dlpack__": 117, "dmlc": 117, "github": 117, "io": [117, 162], "dlpack": 117, "detail": [117, 368, 369, 371, 372, 391], "__dlpack_device__": 117, "file": [119, 126, 162], "text": [119, 122, 162], "binari": [119, 384, 395], "highli": 119, "effici": [119, 156], "known": [119, 324], "pars": 119, "simpli": 119, "written": 119, "coordin": [120, 177], "therefor": 120, "fn": 120, "fill_valu": [123, 124], "50": [125, 171, 362, 381], "scale": [125, 161, 171, 286, 293, 295, 297, 298, 299, 300, 308, 320, 325, 332], "progress": [125, 161], "1000": [125, 171, 287, 288, 293, 295, 297, 298, 299, 300, 301, 308, 309, 312, 314, 316, 319, 321, 327, 331, 332, 333, 334], "62341325": 125, "6227766": 125, "177": [125, 171], "827941": [125, 171], "directori": 126, "h": [126, 148, 177], "header": 126, "modul": [126, 384], "against": [126, 158], "vararg": 127, "y1": [127, 365], "bin": [130, 324], "densiti": 130, "dataset": 130, "hist": [130, 324], "bin_edg": 130, "4999999999999996": 130, "tup": [131, 380], "horizont": 131, "leg": 132, "triangl": [132, 367, 368, 369, 370, 371, 372], "hypotenus": 132, "spars": [134, 177], "nat": 140, "arg1": [142, 143], "arg2": [142, 143], "typecod": 142, "lower": [142, 148, 367, 368, 369, 372], "hierarchi": 142, "determin": [143, 150, 167, 169, 170], "kroneck": 144, "left": [145, 158, 329, 341, 343], "40": 145, "decomposit": [148, 160, 395], "ordinari": 148, "symmetr": [148, 152, 156], "No": 148, "verifi": 148, "addit": 148, "array_lik": [148, 150, 153, 155, 156, 157, 158, 286, 345, 369, 372], "upper": [148, 159, 370, 371], "factor": [148, 159], "p": [149, 288, 291, 296, 302, 305], "fro": 149, "eigenvalu": [151, 152, 153, 395], "eigenvector": [151, 152, 153], "uplo": 152, "w": [152, 153], "ascend": 152, "17157288": 152, "82842712": 152, "92387953": 152, "38268343": 152, "vari": 152, "38268343j": 152, "92387953j": 152, "aren": 153, "necessarili": 153, "nor": 153, "matric": [153, 156, 158, 177], "suppli": [155, 157, 286, 315], "tol": [156, 304], "singular": [156, 160], "threshold": 156, "ep": 156, "epsilon": 156, "assum": 156, "enabl": 156, "treat": [157, 185, 187, 188, 391], "last": [157, 339, 352], "ord": 158, "abl": 158, "eight": 158, "infinit": 158, "unless": 158, "under": 158, "With": 158, "reduc": [159, 160], "q": [159, 176], "orthonorm": 159, "r": 159, "full_matric": 160, "compute_uv": 160, "2d": 160, "vh": 160, "smat": 160, "4d": 160, "retstep": 161, "logarithm": [161, 163, 164, 165, 166, 302, 395], "fname": 162, "stringio": 162, "behav": 162, "n2": 162, "natur": [163, 166], "plu": [163, 166], "30102999566": 164, "69314718": 165, "09861229": 165, "logic": [167, 169, 170, 384, 395], "uniformli": [171, 286, 330], "215": 171, "443469": 171, "464": 171, "15888336": 171, "22776602": 171, "562": 171, "34132519": 171, "0396842": 171, "34960421": 171, "rule": [172, 340, 365], "deviat": [175, 286, 301, 308, 354, 378], "while": [175, 189, 270, 354, 378], "overwrite_input": 176, "xi": 177, "xy": 177, "xn": 177, "nx": 177, "ny": 177, "xv": 177, "yv": 177, "matplotlib": [177, 324], "pyplot": [177, 324], "plt": [177, 324], "xx": 177, "yy": 177, "contourf": 177, "dpnp_iface_arraycr": [178, 272], "mgridclass": 178, "dens": 178, "5j": [178, 272], "fraction": 182, "destin": [183, 282, 359], "remain": [183, 339], "usm": [183, 286, 308, 313, 314, 315, 316, 317, 318, 319, 321, 327, 330, 352], "interchang": [183, 357], "_novalu": [189, 354, 378], "alia": [190, 286, 316, 319, 321], "helper": [224, 395], "pickl": 224, "repr": 225, "136": 228, "272": 228, "408": 228, "out2": 270, "ogridclass": 272, "open": [272, 286, 316, 318, 319, 321, 330], "ind": [281, 368, 371], "1d": [282, 359], "slice": [282, 359, 371, 391], "deg": 285, "52359878": 285, "04719755": 285, "0943951": 285, "61799388": 285, "mersenn": 286, "twister": 286, "pseudo": 286, "maximumum": [286, 322], "sycldevic": [286, 308, 313, 314, 315, 316, 317, 318, 319, 321, 322, 327, 330], "syclqueu": [286, 308, 313, 314, 315, 316, 317, 318, 319, 321, 322, 327, 330], "concept": [286, 308, 313, 314, 315, 316, 317, 318, 319, 321, 322, 327, 330, 391], "oneapi": [286, 308, 313, 314, 315, 316, 317, 318, 319, 321, 322, 327, 330], "filter": [286, 308, 313, 314, 315, 316, 317, 318, 319, 321, 322, 327, 330], "selector": [286, 308, 313, 314, 315, 316, 317, 318, 319, 321, 322, 327, 330], "intern": 286, "state": 286, "get_sycl_queu": 286, "loc": [286, 297, 299, 300, 308, 332], "draw": [286, 287, 288, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 314, 320, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333], "gaussian": [286, 308, 332], "share": [286, 308, 313, 314, 315, 316, 317, 318, 319, 321, 327, 330], "drawn": [286, 287, 288, 290, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 308, 309, 311, 312, 314, 317, 320, 326, 327, 328, 329, 330, 331, 332, 333, 334, 344], "parameter": [286, 308, 330], "58997253": 286, "84288406": 286, "33836967": 286, "16394577": 286, "40882036": 286, "39295758": 286, "48927254": 286, "74921661": 286, "13436424": 286, "56920387": 286, "84743374": 286, "80226506": 286, "76377462": 286, "06310682": 286, "25506903": 286, "1179187": 286, "49543509": 286, "76096244": 286, "low": [286, 314, 317, 330, 391], "high": [286, 314, 317, 330], "inclus": [286, 314, 317], "exclus": [286, 314], "half": [286, 316, 318, 319, 321, 330], "omit": [286, 314, 381], "d0": [286, 313, 315], "d1": [286, 315], "dn": [286, 313, 315], "were": [286, 315], "84401099": 286, "four": [286, 315], "88997253": 286, "54288406": 286, "63836967": 286, "46394577": 286, "70882036": 286, "69295758": 286, "78927254": 286, "04921661": 286, "continu": [286, 318], "stdev": [286, 327], "81715362": 286, "54465213": 286, "18557831": 286, "28352814": 286, "67718303": 286, "11570901": 286, "21968665": 286, "18236388": 286, "08156915": 286, "21941987": 286, "24544512": 286, "63522211": 286, "673174": 286, "exclud": [286, 330], "54": 286, "48093112": 286, "52928804": 286, "1196081": 286, "6990877": 286, "34074171": 286, "conveni": 286, "accept": 286, "alpha": [287, 292, 293, 309, 312], "trial": 288, "probabl": [288, 296, 305], "coin": 288, "compani": [288, 305], "drill": [288, 305], "wild": [288, 305], "cat": [288, 305], "oil": [288, 305], "explor": [288, 305], "success": [288, 296, 305], "nine": 288, "fail": 288, "let": 288, "000": 288, "model": 288, "20000": 288, "answer": 288, "38885": 288, "38": 288, "fallback": [289, 291, 292, 302, 307, 323], "df": [290, 306, 328, 329], "chi": [290, 306], "89920014": 290, "00867716": 290, "13710533": 290, "62318272": 290, "dfnum": [294, 307], "dfden": [294, 307], "ten": 296, "thousand": 296, "individu": 296, "35": 296, "10000": [296, 311, 320, 330], "mu": [297, 301, 308, 331], "ngood": 298, "nbad": 298, "nsampl": 298, "nsamp": 298, "good": 298, "bad": 298, "doubl": 299, "decai": 299, "sigma": [301, 308], "seri": 302, "pval": 303, "iinfo": 303, "throw": 303, "dice": 303, "check_valid": 304, "multivari": 304, "after": 305, "100000": 305, "nonc": [306, 307], "noncentr": [306, 307], "todo": 306, "ii": 309, "lomax": 309, "randomli": 310, "lam": 311, "randomst": 314, "1923875335537315": 315, "rese": 322, "legaci": 322, "mt19937": 322, "engin": 322, "modifi": 323, "cauchi": 324, "lorentz": 324, "plot": 324, "1000000": [324, 326, 328, 329], "3x8000": 325, "8000": 325, "student": 328, "freedom": 328, "kappa": 331, "von": 331, "mise": 331, "dispers": 331, "33": 336, "3003003": 336, "newshap": 339, "infer": 339, "write": 339, "fastest": 339, "back": 339, "slowest": 339, "account": 339, "underli": 339, "never": 339, "valueerror": [339, 352], "reus": 339, "unspecifi": 339, "arrays_and_dtyp": 340, "promot": 340, "backward": 342, "li": 342, "side": 343, "sorter": 343, "condlist": 344, "choicelist": 344, "742278e": 347, "3012989": 348, "548739": 348, "traceback": 352, "recent": 352, "118033988749895": 354, "entir": 356, "bound": 358, "clamp": 358, "fanci": 358, "everi": 359, "22460635e": 360, "63317787e": 360, "996272": 361, "917152": 361, "whenev": 364, "dx": 365, "composit": 365, "trapezoid": 365, "By": [368, 371], "taken": [368, 371], "delta": 376, "complement": 376, "phase": 376, "49778714": 376, "28318531": 376, "vandermond": 377, "125": 377, "vertic": 380, "chosen": 381, "70": 381, "convers": 384, "__neg__": 384, "__abs__": 384, "__invert__": 384, "__add__": 384, "__sub__": 384, "__mul__": 384, "__truediv__": 384, "__mod__": 384, "__pow__": 384, "__lshift__": 384, "__rshift__": 384, "__and__": 384, "__or__": 384, "__xor__": 384, "__iadd__": 384, "__isub__": 384, "__imul__": 384, "__itruediv__": 384, "__ipow__": 384, "__ilshift__": 384, "__irshift__": 384, "__iand__": 384, "__ior__": 384, "__ixor__": 384, "__reduce__": 384, "__new__": 384, "__int__": 384, "__float__": 384, "__complex__": 384, "__str__": 384, "__repr__": 384, "algebra": [384, 395], "mathemat": [384, 395], "polynomi": [384, 395], "search": [384, 395], "statist": [384, 395], "summari": 384, "level": [384, 391], "util": 384, "counterpart": 391, "basic": [391, 395], "constructor": 391, "syntax": 391, "reflect": 391, "intrins": 391, "sometim": 391, "expos": 391, "them": 391, "reset": 391, "meaningfulli": 391, "associ": 391, "mani": 391, "fashion": 391, "typic": 391, "briefli": 391, "explain": 391, "docstr": 391, "proce": 391, "pow": 391, "short": 391, "unari": 391, "custom": 391, "represent": 391, "cover": 395, "elementwis": [395, 399], "pack": 395, "equat": 395, "ration": 395, "extrema": 395, "poly1d": 395, "variou": 399}, "objects": {"": [[3, 0, 0, "-", "dpnp"]], "dpnp": [[11, 1, 1, "", "abs"], [12, 1, 1, "", "absolute"], [13, 1, 1, "", "add"], [14, 1, 1, "", "all"], [15, 1, 1, "", "allclose"], [16, 1, 1, "", "amax"], [17, 1, 1, "", "amin"], [18, 1, 1, "", "any"], [19, 1, 1, "", "arange"], [20, 1, 1, "", "arccos"], [21, 1, 1, "", "arccosh"], [22, 1, 1, "", "arcsin"], [23, 1, 1, "", "arcsinh"], [24, 1, 1, "", "arctan"], [25, 1, 1, "", "arctan2"], [26, 1, 1, "", "arctanh"], [27, 1, 1, "", "argmax"], [28, 1, 1, "", "argmin"], [29, 1, 1, "", "argsort"], [30, 1, 1, "", "around"], [31, 1, 1, "", "array"], [32, 1, 1, "", "array_equal"], [33, 1, 1, "", "asanyarray"], [34, 1, 1, "", "asarray"], [35, 1, 1, "", "ascontiguousarray"], [36, 1, 1, "", "asfarray"], [37, 1, 1, "", "asnumpy"], [38, 1, 1, "", "atleast_1d"], [39, 1, 1, "", "atleast_2d"], [40, 1, 1, "", "atleast_3d"], [41, 1, 1, "", "average"], [42, 1, 1, "", "bincount"], [43, 1, 1, "", "bitwise_and"], [44, 1, 1, "", "bitwise_not"], [45, 1, 1, "", "bitwise_or"], [46, 1, 1, "", "bitwise_xor"], [47, 1, 1, "", "broadcast_to"], [48, 1, 1, "", "cbrt"], [49, 1, 1, "", "ceil"], [50, 1, 1, "", "choose"], [51, 1, 1, "", "concatenate"], [52, 1, 1, "", "conj"], [53, 1, 1, "", "conjugate"], [54, 1, 1, "", "convolve"], [55, 1, 1, "", "copy"], [56, 1, 1, "", "copysign"], [57, 1, 1, "", "copyto"], [58, 1, 1, "", "correlate"], [59, 1, 1, "", "cos"], [60, 1, 1, "", "cosh"], [61, 1, 1, "", "count_nonzero"], [62, 1, 1, "", "cov"], [63, 1, 1, "", "cross"], [64, 1, 1, "", "cumprod"], [65, 1, 1, "", "cumsum"], [66, 1, 1, "", "deg2rad"], [67, 1, 1, "", "degrees"], [68, 1, 1, "", "diag"], [69, 1, 1, "", "diag_indices"], [70, 1, 1, "", "diag_indices_from"], [71, 1, 1, "", "diagflat"], [72, 1, 1, "", "diagonal"], [73, 1, 1, "", "diff"], [74, 1, 1, "", "divide"], [75, 1, 1, "", "dot"], [77, 2, 1, "", "dtype"], [78, 1, 1, "", "ediff1d"], [79, 1, 1, "", "einsum"], [80, 1, 1, "", "einsum_path"], [81, 1, 1, "", "empty"], [82, 1, 1, "", "empty_like"], [83, 1, 1, "", "equal"], [84, 1, 1, "", "erf"], [85, 1, 1, "", "exp"], [86, 1, 1, "", "exp2"], [87, 1, 1, "", "expand_dims"], [88, 1, 1, "", "expm1"], [89, 1, 1, "", "extract"], [90, 1, 1, "", "eye"], [91, 1, 1, "", "fabs"], [10, 0, 0, "-", "fft"], [110, 1, 1, "", "fill_diagonal"], [111, 2, 1, "", "flatiter"], [112, 1, 1, "", "floor"], [113, 1, 1, "", "floor_divide"], [114, 1, 1, "", "fmax"], [115, 1, 1, "", "fmin"], [116, 1, 1, "", "fmod"], [117, 1, 1, "", "from_dlpack"], [118, 1, 1, "", "frombuffer"], [119, 1, 1, "", "fromfile"], [120, 1, 1, "", "fromfunction"], [121, 1, 1, "", "fromiter"], [122, 1, 1, "", "fromstring"], [123, 1, 1, "", "full"], [124, 1, 1, "", "full_like"], [125, 1, 1, "", "geomspace"], [126, 1, 1, "", "get_include"], [127, 1, 1, "", "gradient"], [128, 1, 1, "", "greater"], [129, 1, 1, "", "greater_equal"], [130, 1, 1, "", "histogram"], [131, 1, 1, "", "hstack"], [132, 1, 1, "", "hypot"], [133, 1, 1, "", "identity"], [134, 1, 1, "", "indices"], [135, 1, 1, "", "inner"], [136, 1, 1, "", "invert"], [137, 1, 1, "", "isclose"], [138, 1, 1, "", "isfinite"], [139, 1, 1, "", "isinf"], [140, 1, 1, "", "isnan"], [141, 1, 1, "", "isscalar"], [142, 1, 1, "", "issubdtype"], [143, 1, 1, "", "issubsctype"], [144, 1, 1, "", "kron"], [145, 1, 1, "", "left_shift"], [146, 1, 1, "", "less"], [147, 1, 1, "", "less_equal"], [161, 1, 1, "", "linspace"], [162, 1, 1, "", "loadtxt"], [163, 1, 1, "", "log"], [164, 1, 1, "", "log10"], [165, 1, 1, "", "log1p"], [166, 1, 1, "", "log2"], [167, 1, 1, "", "logical_and"], [168, 1, 1, "", "logical_not"], [169, 1, 1, "", "logical_or"], [170, 1, 1, "", "logical_xor"], [171, 1, 1, "", "logspace"], [172, 1, 1, "", "matmul"], [173, 1, 1, "", "max"], [174, 1, 1, "", "maximum"], [175, 1, 1, "", "mean"], [176, 1, 1, "", "median"], [177, 1, 1, "", "meshgrid"], [178, 5, 1, "", "mgrid"], [179, 1, 1, "", "min"], [180, 1, 1, "", "minimum"], [181, 1, 1, "", "mod"], [182, 1, 1, "", "modf"], [183, 1, 1, "", "moveaxis"], [184, 1, 1, "", "multiply"], [185, 1, 1, "", "nancumprod"], [186, 1, 1, "", "nancumsum"], [187, 1, 1, "", "nanprod"], [188, 1, 1, "", "nansum"], [189, 1, 1, "", "nanvar"], [190, 3, 1, "", "ndarray"], [269, 1, 1, "", "negative"], [270, 1, 1, "", "nonzero"], [271, 1, 1, "", "not_equal"], [272, 5, 1, "", "ogrid"], [273, 1, 1, "", "ones"], [274, 1, 1, "", "ones_like"], [275, 1, 1, "", "outer"], [276, 1, 1, "", "partition"], [277, 1, 1, "", "place"], [278, 1, 1, "", "power"], [279, 1, 1, "", "prod"], [280, 1, 1, "", "ptp"], [281, 1, 1, "", "put"], [282, 1, 1, "", "put_along_axis"], [283, 1, 1, "", "putmask"], [284, 1, 1, "", "rad2deg"], [285, 1, 1, "", "radians"], [394, 0, 0, "-", "random"], [335, 1, 1, "", "ravel"], [336, 1, 1, "", "reciprocal"], [337, 1, 1, "", "remainder"], [338, 1, 1, "", "repeat"], [339, 1, 1, "", "reshape"], [340, 1, 1, "", "result_type"], [341, 1, 1, "", "right_shift"], [342, 1, 1, "", "rollaxis"], [343, 1, 1, "", "searchsorted"], [344, 1, 1, "", "select"], [345, 1, 1, "", "shape"], [346, 1, 1, "", "sign"], [347, 1, 1, "", "sin"], [348, 1, 1, "", "sinh"], [349, 1, 1, "", "sort"], [350, 1, 1, "", "sqrt"], [351, 1, 1, "", "square"], [352, 1, 1, "", "squeeze"], [353, 1, 1, "", "stack"], [354, 1, 1, "", "std"], [355, 1, 1, "", "subtract"], [356, 1, 1, "", "sum"], [357, 1, 1, "", "swapaxes"], [358, 1, 1, "", "take"], [359, 1, 1, "", "take_along_axis"], [360, 1, 1, "", "tan"], [361, 1, 1, "", "tanh"], [362, 1, 1, "", "tensordot"], [363, 1, 1, "", "trace"], [364, 1, 1, "", "transpose"], [365, 1, 1, "", "trapz"], [366, 1, 1, "", "tri"], [367, 1, 1, "", "tril"], [368, 1, 1, "", "tril_indices"], [369, 1, 1, "", "tril_indices_from"], [370, 1, 1, "", "triu"], [371, 1, 1, "", "triu_indices"], [372, 1, 1, "", "triu_indices_from"], [373, 1, 1, "", "true_divide"], [374, 1, 1, "", "trunc"], [375, 1, 1, "", "unique"], [376, 1, 1, "", "unwrap"], [377, 1, 1, "", "vander"], [378, 1, 1, "", "var"], [379, 1, 1, "", "vdot"], [380, 1, 1, "", "vstack"], [381, 1, 1, "", "where"], [382, 1, 1, "", "zeros"], [383, 1, 1, "", "zeros_like"]], "dpnp.dpnp_array": [[76, 2, 1, "", "dpnp_array"]], "dpnp.dpnp_array.dpnp_array": [[76, 3, 1, "", "T"], [76, 4, 1, "", "__eq__"], [76, 4, 1, "", "__ge__"], [76, 4, 1, "", "__getitem__"], [76, 4, 1, "", "__gt__"], [76, 4, 1, "", "__le__"], [76, 4, 1, "", "__len__"], [76, 4, 1, "", "__lt__"], [76, 4, 1, "", "__ne__"], [76, 4, 1, "", "__setitem__"], [76, 4, 1, "", "all"], [76, 4, 1, "", "any"], [76, 4, 1, "", "argmax"], [76, 4, 1, "", "argmin"], [76, 4, 1, "", "argsort"], [76, 4, 1, "", "asnumpy"], [76, 4, 1, "", "astype"], [76, 4, 1, "", "choose"], [76, 4, 1, "", "conj"], [76, 4, 1, "", "conjugate"], [76, 4, 1, "", "cumsum"], [76, 3, 1, "", "device"], [76, 4, 1, "", "diagonal"], [76, 4, 1, "", "dot"], [76, 3, 1, "", "dtype"], [76, 4, 1, "", "fill"], [76, 3, 1, "", "flags"], [76, 3, 1, "", "flat"], [76, 4, 1, "", "flatten"], [76, 4, 1, "", "get_array"], [76, 4, 1, "", "item"], [76, 3, 1, "", "itemsize"], [76, 4, 1, "", "max"], [76, 4, 1, "", "mean"], [76, 4, 1, "", "min"], [76, 3, 1, "", "nbytes"], [76, 3, 1, "", "ndim"], [76, 4, 1, "", "nonzero"], [76, 4, 1, "", "partition"], [76, 4, 1, "", "prod"], [76, 4, 1, "", "reshape"], [76, 4, 1, "", "round"], [76, 3, 1, "", "shape"], [76, 3, 1, "", "size"], [76, 4, 1, "", "squeeze"], [76, 4, 1, "", "std"], [76, 3, 1, "", "strides"], [76, 4, 1, "", "sum"], [76, 3, 1, "", "sycl_context"], [76, 3, 1, "", "sycl_device"], [76, 3, 1, "", "sycl_queue"], [76, 4, 1, "", "take"], [76, 4, 1, "", "to_device"], [76, 4, 1, "", "transpose"], [76, 3, 1, "", "usm_type"], [76, 4, 1, "", "var"]], "dpnp.dtype": [[77, 4, 1, "", "__eq__"], [77, 4, 1, "", "__ge__"], [77, 4, 1, "", "__getitem__"], [77, 4, 1, "", "__gt__"], [77, 4, 1, "", "__le__"], [77, 4, 1, "", "__len__"], [77, 4, 1, "", "__lt__"], [77, 4, 1, "", "__ne__"], [77, 3, 1, "", "alignment"], [77, 3, 1, "", "base"], [77, 3, 1, "", "byteorder"], [77, 3, 1, "", "char"], [77, 3, 1, "", "descr"], [77, 3, 1, "", "fields"], [77, 3, 1, "", "flags"], [77, 3, 1, "", "hasobject"], [77, 3, 1, "", "isalignedstruct"], [77, 3, 1, "", "isbuiltin"], [77, 3, 1, "", "isnative"], [77, 3, 1, "", "itemsize"], [77, 3, 1, "", "kind"], [77, 3, 1, "", "metadata"], [77, 3, 1, "", "name"], [77, 3, 1, "", "names"], [77, 3, 1, "", "ndim"], [77, 4, 1, "", "newbyteorder"], [77, 3, 1, "", "num"], [77, 3, 1, "", "shape"], [77, 3, 1, "", "str"], [77, 3, 1, "", "subdtype"], [77, 3, 1, "", "type"]], "dpnp.fft": [[92, 1, 1, "", "fft"], [93, 1, 1, "", "fft2"], [94, 1, 1, "", "fftfreq"], [95, 1, 1, "", "fftn"], [96, 1, 1, "", "fftshift"], [97, 1, 1, "", "hfft"], [98, 1, 1, "", "ifft"], [99, 1, 1, "", "ifft2"], [100, 1, 1, "", "ifftn"], [101, 1, 1, "", "ifftshift"], [102, 1, 1, "", "ihfft"], [103, 1, 1, "", "irfft"], [104, 1, 1, "", "irfft2"], [105, 1, 1, "", "irfftn"], [106, 1, 1, "", "rfft"], [107, 1, 1, "", "rfft2"], [108, 1, 1, "", "rfftfreq"], [109, 1, 1, "", "rfftn"]], "dpnp.flatiter": [[111, 4, 1, "", "__eq__"], [111, 4, 1, "", "__ge__"], [111, 4, 1, "", "__getitem__"], [111, 4, 1, "", "__gt__"], [111, 4, 1, "", "__iter__"], [111, 4, 1, "", "__le__"], [111, 4, 1, "", "__lt__"], [111, 4, 1, "", "__ne__"], [111, 4, 1, "", "__next__"], [111, 4, 1, "", "__setitem__"]], "dpnp.linalg": [[148, 1, 1, "", "cholesky"], [149, 1, 1, "", "cond"], [150, 1, 1, "", "det"], [151, 1, 1, "", "eig"], [152, 1, 1, "", "eigh"], [153, 1, 1, "", "eigvals"], [154, 1, 1, "", "inv"], [155, 1, 1, "", "matrix_power"], [156, 1, 1, "", "matrix_rank"], [157, 1, 1, "", "multi_dot"], [158, 1, 1, "", "norm"], [159, 1, 1, "", "qr"], [160, 1, 1, "", "svd"]], "dpnp.ndarray": [[191, 6, 1, "", "T"], [192, 4, 1, "", "__abs__"], [193, 4, 1, "", "__add__"], [194, 4, 1, "", "__and__"], [195, 4, 1, "", "__complex__"], [196, 4, 1, "", "__eq__"], [197, 4, 1, "", "__float__"], [198, 4, 1, "", "__ge__"], [199, 4, 1, "", "__getitem__"], [200, 4, 1, "", "__gt__"], [201, 4, 1, "", "__iadd__"], [202, 4, 1, "", "__iand__"], [203, 4, 1, "", "__ilshift__"], [204, 4, 1, "", "__imul__"], [205, 4, 1, "", "__int__"], [206, 4, 1, "", "__invert__"], [207, 4, 1, "", "__ior__"], [208, 4, 1, "", "__ipow__"], [209, 4, 1, "", "__irshift__"], [210, 4, 1, "", "__isub__"], [211, 4, 1, "", "__itruediv__"], [212, 4, 1, "", "__ixor__"], [213, 4, 1, "", "__le__"], [214, 4, 1, "", "__len__"], [215, 4, 1, "", "__lshift__"], [216, 4, 1, "", "__lt__"], [217, 4, 1, "", "__mod__"], [218, 4, 1, "", "__mul__"], [219, 4, 1, "", "__ne__"], [220, 4, 1, "", "__neg__"], [221, 4, 1, "", "__new__"], [222, 4, 1, "", "__or__"], [223, 4, 1, "", "__pow__"], [224, 4, 1, "", "__reduce__"], [225, 4, 1, "", "__repr__"], [226, 4, 1, "", "__rshift__"], [227, 4, 1, "", "__setitem__"], [228, 4, 1, "", "__str__"], [229, 4, 1, "", "__sub__"], [230, 4, 1, "", "__truediv__"], [231, 4, 1, "", "__xor__"], [232, 4, 1, "", "all"], [233, 4, 1, "", "any"], [234, 4, 1, "", "argmax"], [235, 4, 1, "", "argmin"], [236, 4, 1, "", "argsort"], [237, 4, 1, "", "astype"], [238, 4, 1, "", "choose"], [239, 4, 1, "", "conj"], [240, 4, 1, "", "conjugate"], [241, 4, 1, "", "cumsum"], [242, 4, 1, "", "diagonal"], [243, 6, 1, "", "dtype"], [244, 4, 1, "", "fill"], [245, 6, 1, "", "flags"], [246, 6, 1, "", "flat"], [247, 4, 1, "", "flatten"], [248, 4, 1, "", "item"], [249, 6, 1, "", "itemsize"], [250, 4, 1, "", "max"], [251, 4, 1, "", "mean"], [252, 4, 1, "", "min"], [253, 6, 1, "", "nbytes"], [254, 6, 1, "", "ndim"], [255, 4, 1, "", "nonzero"], [256, 4, 1, "", "partition"], [257, 4, 1, "", "prod"], [258, 4, 1, "", "reshape"], [259, 4, 1, "", "round"], [260, 6, 1, "", "shape"], [261, 6, 1, "", "size"], [262, 4, 1, "", "squeeze"], [263, 4, 1, "", "std"], [264, 6, 1, "", "strides"], [265, 4, 1, "", "sum"], [266, 4, 1, "", "take"], [267, 4, 1, "", "transpose"], [268, 4, 1, "", "var"]], "dpnp.random": [[286, 2, 1, "", "RandomState"], [287, 1, 1, "", "beta"], [288, 1, 1, "", "binomial"], [289, 1, 1, "", "bytes"], [290, 1, 1, "", "chisquare"], [291, 1, 1, "", "choice"], [292, 1, 1, "", "dirichlet"], [293, 1, 1, "", "exponential"], [294, 1, 1, "", "f"], [295, 1, 1, "", "gamma"], [296, 1, 1, "", "geometric"], [297, 1, 1, "", "gumbel"], [298, 1, 1, "", "hypergeometric"], [299, 1, 1, "", "laplace"], [300, 1, 1, "", "logistic"], [301, 1, 1, "", "lognormal"], [302, 1, 1, "", "logseries"], [303, 1, 1, "", "multinomial"], [304, 1, 1, "", "multivariate_normal"], [305, 1, 1, "", "negative_binomial"], [306, 1, 1, "", "noncentral_chisquare"], [307, 1, 1, "", "noncentral_f"], [308, 1, 1, "", "normal"], [309, 1, 1, "", "pareto"], [310, 1, 1, "", "permutation"], [311, 1, 1, "", "poisson"], [312, 1, 1, "", "power"], [313, 1, 1, "", "rand"], [314, 1, 1, "", "randint"], [315, 1, 1, "", "randn"], [316, 1, 1, "", "random"], [317, 1, 1, "", "random_integers"], [318, 1, 1, "", "random_sample"], [319, 1, 1, "", "ranf"], [320, 1, 1, "", "rayleigh"], [321, 1, 1, "", "sample"], [322, 1, 1, "", "seed"], [323, 1, 1, "", "shuffle"], [324, 1, 1, "", "standard_cauchy"], [325, 1, 1, "", "standard_exponential"], [326, 1, 1, "", "standard_gamma"], [327, 1, 1, "", "standard_normal"], [328, 1, 1, "", "standard_t"], [329, 1, 1, "", "triangular"], [330, 1, 1, "", "uniform"], [331, 1, 1, "", "vonmises"], [332, 1, 1, "", "wald"], [333, 1, 1, "", "weibull"], [334, 1, 1, "", "zipf"]], "dpnp.random.RandomState": [[286, 4, 1, "", "__eq__"], [286, 4, 1, "", "__ge__"], [286, 4, 1, "", "__gt__"], [286, 4, 1, "", "__le__"], [286, 4, 1, "", "__lt__"], [286, 4, 1, "", "__ne__"], [286, 4, 1, "", "get_state"], [286, 4, 1, "", "get_sycl_device"], [286, 4, 1, "", "get_sycl_queue"], [286, 4, 1, "", "normal"], [286, 4, 1, "", "rand"], [286, 4, 1, "", "randint"], [286, 4, 1, "", "randn"], [286, 4, 1, "", "random_sample"], [286, 4, 1, "", "standard_normal"], [286, 4, 1, "", "uniform"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:attribute", "4": "py:method", "5": "py:data", "6": "py:property"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "method", "Python method"], "5": ["py", "data", "Python data"], "6": ["py", "property", "Python property"]}, "titleterms": {"interplai": 0, "data": [0, 2, 7, 8, 9, 385, 391, 394], "parallel": [0, 2], "control": 0, "librari": 0, "exampl": [0, 4], "c": 1, "backend": 1, "api": [1, 384], "refer": [1, 384], "extens": 2, "numpi": [2, 6, 8], "develop": 2, "inform": [2, 9], "overview": 3, "quick": 4, "start": 4, "guid": 4, "devic": 4, "driver": 4, "python": 4, "interpret": 4, "instal": 4, "packag": [4, 393], "from": [4, 7], "anaconda": 4, "build": 4, "conda": 4, "scikit": 4, "test": [4, 9, 387], "binari": 5, "oper": [5, 385, 387, 388, 389, 391, 399], "elementwis": 5, "bit": [5, 399], "pack": 5, "output": 5, "format": 5, "comparison": [6, 387, 391, 399], "tabl": 6, "dpnp": [6, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 394], "cupi": 6, "summari": 6, "modul": [6, 393], "level": 6, "multi": [6, 391], "dimension": [6, 391], "arrai": [6, 7, 31, 385, 387, 388, 391], "linear": [6, 386], "algebra": [6, 386], "discret": 6, "fourier": 6, "transform": 6, "random": [6, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 394], "sampl": [6, 321, 394], "creation": 7, "routin": [7, 9, 10, 385, 388, 389, 390, 395], "basic": [7, 388, 393], "other": [7, 386, 389, 391], "numer": 7, "rang": 7, "matrix": [7, 386, 391], "The": 7, "class": 7, "differ": [8, 389], "type": [8, 9, 387, 391], "creat": 9, "miscellan": [9, 389, 390], "fft": [10, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109], "function": [10, 387, 389, 397, 398, 399], "standard": 10, "real": 10, "hermitian": 10, "helper": 10, "ab": 11, "absolut": 12, "add": 13, "all": [14, 232], "allclos": 15, "amax": 16, "amin": 17, "ani": [18, 233], "arang": 19, "arcco": 20, "arccosh": 21, "arcsin": 22, "arcsinh": 23, "arctan": 24, "arctan2": 25, "arctanh": 26, "argmax": [27, 234], "argmin": [28, 235], "argsort": [29, 236], "around": 30, "array_equ": 32, "asanyarrai": 33, "asarrai": 34, "ascontiguousarrai": 35, "asfarrai": 36, "asnumpi": 37, "atleast_1d": 38, "atleast_2d": 39, "atleast_3d": 40, "averag": [41, 398], "bincount": 42, "bitwise_and": 43, "bitwise_not": 44, "bitwise_or": 45, "bitwise_xor": 46, "broadcast_to": 47, "cbrt": 48, "ceil": 49, "choos": [50, 238], "concaten": 51, "conj": [52, 239], "conjug": [53, 240], "convolv": 54, "copi": 55, "copysign": 56, "copyto": 57, "correl": [58, 398], "co": 59, "cosh": 60, "count_nonzero": 61, "cov": 62, "cross": 63, "cumprod": 64, "cumsum": [65, 241], "deg2rad": 66, "degre": 67, "diag": 68, "diag_indic": 69, "diag_indices_from": 70, "diagflat": 71, "diagon": [72, 242], "diff": 73, "divid": 74, "dot": 75, "dpnp_arrai": 76, "dtype": [77, 243], "ediff1d": 78, "einsum": 79, "einsum_path": 80, "empti": 81, "empty_lik": 82, "equal": 83, "erf": 84, "exp": 85, "exp2": 86, "expand_dim": 87, "expm1": 88, "extract": 89, "ey": 90, "fab": 91, "fft2": 93, "fftfreq": 94, "fftn": 95, "fftshift": 96, "hfft": 97, "ifft": 98, "ifft2": 99, "ifftn": 100, "ifftshift": 101, "ihfft": 102, "irfft": 103, "irfft2": 104, "irfftn": 105, "rfft": 106, "rfft2": 107, "rfftfreq": 108, "rfftn": 109, "fill_diagon": 110, "flatit": 111, "floor": 112, "floor_divid": 113, "fmax": 114, "fmin": 115, "fmod": 116, "from_dlpack": 117, "frombuff": 118, "fromfil": 119, "fromfunct": 120, "fromit": 121, "fromstr": 122, "full": 123, "full_lik": 124, "geomspac": 125, "get_includ": 126, "gradient": 127, "greater": 128, "greater_equ": 129, "histogram": [130, 398], "hstack": 131, "hypot": 132, "ident": 133, "indic": 134, "inner": 135, "invert": 136, "isclos": 137, "isfinit": 138, "isinf": 139, "isnan": 140, "isscalar": 141, "issubdtyp": 142, "issubsctyp": 143, "kron": 144, "left_shift": 145, "less": 146, "less_equ": 147, "linalg": [148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160], "choleski": 148, "cond": 149, "det": 150, "eig": 151, "eigh": 152, "eigval": 153, "inv": 154, "matrix_pow": 155, "matrix_rank": 156, "multi_dot": 157, "norm": [158, 386], "qr": 159, "svd": 160, "linspac": 161, "loadtxt": 162, "log": 163, "log10": 164, "log1p": 165, "log2": 166, "logical_and": 167, "logical_not": 168, "logical_or": 169, "logical_xor": 170, "logspac": 171, "matmul": 172, "max": [173, 250], "maximum": 174, "mean": [175, 251], "median": 176, "meshgrid": 177, "mgrid": 178, "min": [179, 252], "minimum": 180, "mod": 181, "modf": 182, "moveaxi": 183, "multipli": 184, "nancumprod": 185, "nancumsum": 186, "nanprod": 187, "nansum": 188, "nanvar": 189, "ndarrai": [190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 391], "t": 191, "__abs__": 192, "__add__": 193, "__and__": 194, "__complex__": 195, "__eq__": 196, "__float__": 197, "__ge__": 198, "__getitem__": 199, "__gt__": 200, "__iadd__": 201, "__iand__": 202, "__ilshift__": 203, "__imul__": 204, "__int__": 205, "__invert__": 206, "__ior__": 207, "__ipow__": 208, "__irshift__": 209, "__isub__": 210, "__itruediv__": 211, "__ixor__": 212, "__le__": 213, "__len__": 214, "__lshift__": 215, "__lt__": 216, "__mod__": 217, "__mul__": 218, "__ne__": 219, "__neg__": 220, "__new__": 221, "__or__": 222, "__pow__": 223, "__reduce__": 224, "__repr__": 225, "__rshift__": 226, "__setitem__": 227, "__str__": 228, "__sub__": 229, "__truediv__": 230, "__xor__": 231, "astyp": 237, "fill": 244, "flag": 245, "flat": 246, "flatten": 247, "item": [248, 391], "items": 249, "nbyte": 253, "ndim": 254, "nonzero": [255, 270], "partit": [256, 276], "prod": [257, 279], "reshap": [258, 339], "round": [259, 389], "shape": [260, 345, 388, 391], "size": 261, "squeez": [262, 352], "std": [263, 354], "stride": 264, "sum": [265, 356, 389], "take": [266, 358], "transpos": [267, 364, 388], "var": [268, 378], "neg": 269, "not_equ": 271, "ogrid": 272, "ones": 273, "ones_lik": 274, "outer": 275, "place": 277, "power": [278, 312], "ptp": 280, "put": 281, "put_along_axi": 282, "putmask": 283, "rad2deg": 284, "radian": 285, "randomst": 286, "beta": 287, "binomi": 288, "byte": 289, "chisquar": 290, "choic": 291, "dirichlet": 292, "exponenti": 293, "f": 294, "gamma": 295, "geometr": 296, "gumbel": 297, "hypergeometr": 298, "laplac": 299, "logist": 300, "lognorm": 301, "logseri": 302, "multinomi": 303, "multivariate_norm": 304, "negative_binomi": 305, "noncentral_chisquar": 306, "noncentral_f": 307, "normal": 308, "pareto": 309, "permut": [310, 394], "poisson": 311, "rand": 313, "randint": 314, "randn": 315, "random_integ": 317, "random_sampl": 318, "ranf": 319, "rayleigh": 320, "seed": 322, "shuffl": 323, "standard_cauchi": 324, "standard_exponenti": 325, "standard_gamma": 326, "standard_norm": 327, "standard_t": 328, "triangular": 329, "uniform": 330, "vonmis": 331, "wald": 332, "weibul": 333, "zipf": 334, "ravel": 335, "reciproc": 336, "remaind": 337, "repeat": 338, "result_typ": 340, "right_shift": 341, "rollaxi": 342, "searchsort": 343, "select": [344, 391], "sign": 346, "sin": 347, "sinh": 348, "sort": [349, 396], "sqrt": 350, "squar": 351, "stack": 353, "subtract": 355, "swapax": 357, "take_along_axi": 359, "tan": 360, "tanh": 361, "tensordot": 362, "trace": 363, "trapz": 365, "tri": 366, "tril": 367, "tril_indic": 368, "tril_indices_from": 369, "triu": 370, "triu_indic": 371, "triu_indices_from": 372, "true_divid": 373, "trunc": 374, "uniqu": 375, "unwrap": 376, "vander": 377, "vdot": 379, "vstack": 380, "where": 381, "zero": 382, "zeros_lik": 383, "index": [385, 391], "gener": [385, 394], "like": [385, 388], "insert": 385, "iter": 385, "over": 385, "vector": 386, "product": [386, 389], "decomposit": 386, "eigenvalu": 386, "number": [386, 388, 389], "solv": 386, "equat": 386, "logic": 387, "truth": 387, "valu": 387, "infin": 387, "nan": 387, "manipul": [388, 391], "chang": 388, "dimens": 388, "kind": 388, "join": 388, "split": 388, "tile": 388, "ad": 388, "remov": 388, "element": 388, "rearrang": 388, "mathemat": 389, "trigonometr": [389, 399], "hyperbol": 389, "expon": 389, "logarithm": 389, "special": [389, 391, 397], "float": [389, 399], "point": 389, "ration": 389, "arithmet": [389, 391, 393], "handl": 389, "complex": 389, "extrema": 389, "find": 389, "util": 390, "construct": 391, "attribut": 391, "memori": 391, "layout": 391, "method": 391, "convers": 391, "calcul": 391, "multipl": 391, "pad": 392, "polynomi": 393, "polyutil": 393, "poly1d": 393, "simpl": 394, "distribut": 394, "search": 396, "count": 396, "error": 397, "statist": 398, "order": 398, "varianc": 398, "univers": 399, "ufunc": 399, "avail": 399, "math": 399, "twiddl": 399}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"Interplay with the Data Parallel Control Library": [[0, "interplay-with-the-data-parallel-control-library"]], "Example": [[0, "example"]], "C++ backend API Reference": [[1, "c-backend-api-reference"]], "Data Parallel Extension for NumPy*": [[2, "module-dpnp"]], "Development information": [[2, null]], "Overview": [[3, "id1"]], "Quick Start Guide": [[4, "id1"]], "Device Drivers": [[4, "device-drivers"]], "Python Interpreter": [[4, "python-interpreter"]], "Installation": [[4, "installation"]], "Install Package from Anaconda": [[4, "install-package-from-anaconda"]], "Build and Install Conda Package": [[4, "build-and-install-conda-package"]], "Build and Install with scikit-build": [[4, "build-and-install-with-scikit-build"]], "Testing": [[4, "testing"]], "Examples": [[4, "examples"]], "Binary Operations": [[5, "binary-operations"]], "Elementwise bit operations": [[5, "elementwise-bit-operations"]], "Bit packing": [[5, "bit-packing"]], "Output formatting": [[5, "output-formatting"]], "Comparison Table NumPy/ DPNP/ CuPy": [[6, "comparison-table-numpy-dpnp-cupy"]], "Summary": [[6, "summary"]], "Module-Level": [[6, "module-level"]], "Multi-Dimensional Array": [[6, "multi-dimensional-array"]], "Linear Algebra": [[6, "linear-algebra"], [386, "linear-algebra"]], "Discrete Fourier Transform": [[6, "discrete-fourier-transform"]], "Random Sampling": [[6, "random-sampling"]], "Array Creation Routines": [[7, "array-creation-routines"]], "Basic creation routines": [[7, "basic-creation-routines"]], "Creation from other data": [[7, "creation-from-other-data"]], "Numerical ranges": [[7, "numerical-ranges"]], "Matrix creation": [[7, "matrix-creation"]], "The Matrix class": [[7, "the-matrix-class"]], "Difference with NumPy*": [[8, "difference-with-numpy"]], "Data types": [[8, "data-types"]], "Data type routines": [[9, "data-type-routines"]], "Creating data types": [[9, "creating-data-types"]], "Data type information": [[9, "data-type-information"]], "Data type testing": [[9, "data-type-testing"]], "Miscellaneous": [[9, "miscellaneous"], [389, "miscellaneous"]], "FFT Functions": [[10, "fft-functions"]], "Standard FFTs": [[10, "standard-ffts"]], "Real FFTs": [[10, "real-ffts"]], "Hermitian FFTs": [[10, "hermitian-ffts"]], "Helper routines": [[10, "helper-routines"]], "dpnp.abs": [[11, "dpnp-abs"]], "dpnp.absolute": [[12, "dpnp-absolute"]], "dpnp.add": [[13, "dpnp-add"]], "dpnp.all": [[14, "dpnp-all"]], "dpnp.allclose": [[15, "dpnp-allclose"]], "dpnp.amax": [[16, "dpnp-amax"]], "dpnp.amin": [[17, "dpnp-amin"]], "dpnp.any": [[18, "dpnp-any"]], "dpnp.arange": [[19, "dpnp-arange"]], "dpnp.arccos": [[20, "dpnp-arccos"]], "dpnp.arccosh": [[21, "dpnp-arccosh"]], "dpnp.arcsin": [[22, "dpnp-arcsin"]], "dpnp.arcsinh": [[23, "dpnp-arcsinh"]], "dpnp.arctan": [[24, "dpnp-arctan"]], "dpnp.arctan2": [[25, "dpnp-arctan2"]], "dpnp.arctanh": [[26, "dpnp-arctanh"]], "dpnp.argmax": [[27, "dpnp-argmax"]], "dpnp.argmin": [[28, "dpnp-argmin"]], "dpnp.argsort": [[29, "dpnp-argsort"]], "dpnp.around": [[30, "dpnp-around"]], "dpnp.array": [[31, "dpnp-array"]], "dpnp.array_equal": [[32, "dpnp-array-equal"]], "dpnp.asanyarray": [[33, "dpnp-asanyarray"]], "dpnp.asarray": [[34, "dpnp-asarray"]], "dpnp.ascontiguousarray": [[35, "dpnp-ascontiguousarray"]], "dpnp.asfarray": [[36, "dpnp-asfarray"]], "dpnp.asnumpy": [[37, "dpnp-asnumpy"]], "dpnp.atleast_1d": [[38, "dpnp-atleast-1d"]], "dpnp.atleast_2d": [[39, "dpnp-atleast-2d"]], "dpnp.atleast_3d": [[40, "dpnp-atleast-3d"]], "dpnp.average": [[41, "dpnp-average"]], "dpnp.bincount": [[42, "dpnp-bincount"]], "dpnp.bitwise_and": [[43, "dpnp-bitwise-and"]], "dpnp.bitwise_not": [[44, "dpnp-bitwise-not"]], "dpnp.bitwise_or": [[45, "dpnp-bitwise-or"]], "dpnp.bitwise_xor": [[46, "dpnp-bitwise-xor"]], "dpnp.broadcast_to": [[47, "dpnp-broadcast-to"]], "dpnp.cbrt": [[48, "dpnp-cbrt"]], "dpnp.ceil": [[49, "dpnp-ceil"]], "dpnp.choose": [[50, "dpnp-choose"]], "dpnp.concatenate": [[51, "dpnp-concatenate"]], "dpnp.conj": [[52, "dpnp-conj"]], "dpnp.conjugate": [[53, "dpnp-conjugate"]], "dpnp.convolve": [[54, "dpnp-convolve"]], "dpnp.copy": [[55, "dpnp-copy"]], "dpnp.copysign": [[56, "dpnp-copysign"]], "dpnp.copyto": [[57, "dpnp-copyto"]], "dpnp.correlate": [[58, "dpnp-correlate"]], "dpnp.cos": [[59, "dpnp-cos"]], "dpnp.cosh": [[60, "dpnp-cosh"]], "dpnp.count_nonzero": [[61, "dpnp-count-nonzero"]], "dpnp.cov": [[62, "dpnp-cov"]], "dpnp.cross": [[63, "dpnp-cross"]], "dpnp.cumprod": [[64, "dpnp-cumprod"]], "dpnp.cumsum": [[65, "dpnp-cumsum"]], "dpnp.deg2rad": [[66, "dpnp-deg2rad"]], "dpnp.degrees": [[67, "dpnp-degrees"]], "dpnp.diag": [[68, "dpnp-diag"]], "dpnp.diag_indices": [[69, "dpnp-diag-indices"]], "dpnp.diag_indices_from": [[70, "dpnp-diag-indices-from"]], "dpnp.diagflat": [[71, "dpnp-diagflat"]], "dpnp.diagonal": [[72, "dpnp-diagonal"]], "dpnp.diff": [[73, "dpnp-diff"]], "dpnp.divide": [[74, "dpnp-divide"]], "dpnp.dot": [[75, "dpnp-dot"]], "dpnp.dpnp_array.dpnp_array": [[76, "dpnp-dpnp-array-dpnp-array"]], "dpnp.dtype": [[77, "dpnp-dtype"]], "dpnp.ediff1d": [[78, "dpnp-ediff1d"]], "dpnp.einsum": [[79, "dpnp-einsum"]], "dpnp.einsum_path": [[80, "dpnp-einsum-path"]], "dpnp.empty": [[81, "dpnp-empty"]], "dpnp.empty_like": [[82, "dpnp-empty-like"]], "dpnp.equal": [[83, "dpnp-equal"]], "dpnp.erf": [[84, "dpnp-erf"]], "dpnp.exp": [[85, "dpnp-exp"]], "dpnp.exp2": [[86, "dpnp-exp2"]], "dpnp.expand_dims": [[87, "dpnp-expand-dims"]], "dpnp.expm1": [[88, "dpnp-expm1"]], "dpnp.extract": [[89, "dpnp-extract"]], "dpnp.eye": [[90, "dpnp-eye"]], "dpnp.fabs": [[91, "dpnp-fabs"]], "dpnp.fft.fft": [[92, "dpnp-fft-fft"]], "dpnp.fft.fft2": [[93, "dpnp-fft-fft2"]], "dpnp.fft.fftfreq": [[94, "dpnp-fft-fftfreq"]], "dpnp.fft.fftn": [[95, "dpnp-fft-fftn"]], "dpnp.fft.fftshift": [[96, "dpnp-fft-fftshift"]], "dpnp.fft.hfft": [[97, "dpnp-fft-hfft"]], "dpnp.fft.ifft": [[98, "dpnp-fft-ifft"]], "dpnp.fft.ifft2": [[99, "dpnp-fft-ifft2"]], "dpnp.fft.ifftn": [[100, "dpnp-fft-ifftn"]], "dpnp.fft.ifftshift": [[101, "dpnp-fft-ifftshift"]], "dpnp.fft.ihfft": [[102, "dpnp-fft-ihfft"]], "dpnp.fft.irfft": [[103, "dpnp-fft-irfft"]], "dpnp.fft.irfft2": [[104, "dpnp-fft-irfft2"]], "dpnp.fft.irfftn": [[105, "dpnp-fft-irfftn"]], "dpnp.fft.rfft": [[106, "dpnp-fft-rfft"]], "dpnp.fft.rfft2": [[107, "dpnp-fft-rfft2"]], "dpnp.fft.rfftfreq": [[108, "dpnp-fft-rfftfreq"]], "dpnp.fft.rfftn": [[109, "dpnp-fft-rfftn"]], "dpnp.fill_diagonal": [[110, "dpnp-fill-diagonal"]], "dpnp.flatiter": [[111, "dpnp-flatiter"]], "dpnp.floor": [[112, "dpnp-floor"]], "dpnp.floor_divide": [[113, "dpnp-floor-divide"]], "dpnp.fmax": [[114, "dpnp-fmax"]], "dpnp.fmin": [[115, "dpnp-fmin"]], "dpnp.fmod": [[116, "dpnp-fmod"]], "dpnp.from_dlpack": [[117, "dpnp-from-dlpack"]], "dpnp.frombuffer": [[118, "dpnp-frombuffer"]], "dpnp.fromfile": [[119, "dpnp-fromfile"]], "dpnp.fromfunction": [[120, "dpnp-fromfunction"]], "dpnp.fromiter": [[121, "dpnp-fromiter"]], "dpnp.fromstring": [[122, "dpnp-fromstring"]], "dpnp.full": [[123, "dpnp-full"]], "dpnp.full_like": [[124, "dpnp-full-like"]], "dpnp.geomspace": [[125, "dpnp-geomspace"]], "dpnp.get_include": [[126, "dpnp-get-include"]], "dpnp.gradient": [[127, "dpnp-gradient"]], "dpnp.greater": [[128, "dpnp-greater"]], "dpnp.greater_equal": [[129, "dpnp-greater-equal"]], "dpnp.histogram": [[130, "dpnp-histogram"]], "dpnp.hstack": [[131, "dpnp-hstack"]], "dpnp.hypot": [[132, "dpnp-hypot"]], "dpnp.identity": [[133, "dpnp-identity"]], "dpnp.indices": [[134, "dpnp-indices"]], "dpnp.inner": [[135, "dpnp-inner"]], "dpnp.invert": [[136, "dpnp-invert"]], "dpnp.isclose": [[137, "dpnp-isclose"]], "dpnp.isfinite": [[138, "dpnp-isfinite"]], "dpnp.isinf": [[139, "dpnp-isinf"]], "dpnp.isnan": [[140, "dpnp-isnan"]], "dpnp.isscalar": [[141, "dpnp-isscalar"]], "dpnp.issubdtype": [[142, "dpnp-issubdtype"]], "dpnp.issubsctype": [[143, "dpnp-issubsctype"]], "dpnp.kron": [[144, "dpnp-kron"]], "dpnp.left_shift": [[145, "dpnp-left-shift"]], "dpnp.less": [[146, "dpnp-less"]], "dpnp.less_equal": [[147, "dpnp-less-equal"]], "dpnp.linalg.cholesky": [[148, "dpnp-linalg-cholesky"]], "dpnp.linalg.cond": [[149, "dpnp-linalg-cond"]], "dpnp.linalg.det": [[150, "dpnp-linalg-det"]], "dpnp.linalg.eig": [[151, "dpnp-linalg-eig"]], "dpnp.linalg.eigh": [[152, "dpnp-linalg-eigh"]], "dpnp.linalg.eigvals": [[153, "dpnp-linalg-eigvals"]], "dpnp.linalg.inv": [[154, "dpnp-linalg-inv"]], "dpnp.linalg.matrix_power": [[155, "dpnp-linalg-matrix-power"]], "dpnp.linalg.matrix_rank": [[156, "dpnp-linalg-matrix-rank"]], "dpnp.linalg.multi_dot": [[157, "dpnp-linalg-multi-dot"]], "dpnp.linalg.norm": [[158, "dpnp-linalg-norm"]], "dpnp.linalg.qr": [[159, "dpnp-linalg-qr"]], "dpnp.linalg.svd": [[160, "dpnp-linalg-svd"]], "dpnp.linspace": [[161, "dpnp-linspace"]], "dpnp.loadtxt": [[162, "dpnp-loadtxt"]], "dpnp.log": [[163, "dpnp-log"]], "dpnp.log10": [[164, "dpnp-log10"]], "dpnp.log1p": [[165, "dpnp-log1p"]], "dpnp.log2": [[166, "dpnp-log2"]], "dpnp.logical_and": [[167, "dpnp-logical-and"]], "dpnp.logical_not": [[168, "dpnp-logical-not"]], "dpnp.logical_or": [[169, "dpnp-logical-or"]], "dpnp.logical_xor": [[170, "dpnp-logical-xor"]], "dpnp.logspace": [[171, "dpnp-logspace"]], "dpnp.matmul": [[172, "dpnp-matmul"]], "dpnp.max": [[173, "dpnp-max"]], "dpnp.maximum": [[174, "dpnp-maximum"]], "dpnp.mean": [[175, "dpnp-mean"]], "dpnp.median": [[176, "dpnp-median"]], "dpnp.meshgrid": [[177, "dpnp-meshgrid"]], "dpnp.mgrid": [[178, "dpnp-mgrid"]], "dpnp.min": [[179, "dpnp-min"]], "dpnp.minimum": [[180, "dpnp-minimum"]], "dpnp.mod": [[181, "dpnp-mod"]], "dpnp.modf": [[182, "dpnp-modf"]], "dpnp.moveaxis": [[183, "dpnp-moveaxis"]], "dpnp.multiply": [[184, "dpnp-multiply"]], "dpnp.nancumprod": [[185, "dpnp-nancumprod"]], "dpnp.nancumsum": [[186, "dpnp-nancumsum"]], "dpnp.nanprod": [[187, "dpnp-nanprod"]], "dpnp.nansum": [[188, "dpnp-nansum"]], "dpnp.nanvar": [[189, "dpnp-nanvar"]], "dpnp.ndarray": [[190, "dpnp-ndarray"]], "dpnp.ndarray.T": [[191, "dpnp-ndarray-t"]], "dpnp.ndarray.__abs__": [[192, "dpnp-ndarray-abs"]], "dpnp.ndarray.__add__": [[193, "dpnp-ndarray-add"]], "dpnp.ndarray.__and__": [[194, "dpnp-ndarray-and"]], "dpnp.ndarray.__complex__": [[195, "dpnp-ndarray-complex"]], "dpnp.ndarray.__eq__": [[196, "dpnp-ndarray-eq"]], "dpnp.ndarray.__float__": [[197, "dpnp-ndarray-float"]], "dpnp.ndarray.__ge__": [[198, "dpnp-ndarray-ge"]], "dpnp.ndarray.__getitem__": [[199, "dpnp-ndarray-getitem"]], "dpnp.ndarray.__gt__": [[200, "dpnp-ndarray-gt"]], "dpnp.ndarray.__iadd__": [[201, "dpnp-ndarray-iadd"]], "dpnp.ndarray.__iand__": [[202, "dpnp-ndarray-iand"]], "dpnp.ndarray.__ilshift__": [[203, "dpnp-ndarray-ilshift"]], "dpnp.ndarray.__imul__": [[204, "dpnp-ndarray-imul"]], "dpnp.ndarray.__int__": [[205, "dpnp-ndarray-int"]], "dpnp.ndarray.__invert__": [[206, "dpnp-ndarray-invert"]], "dpnp.ndarray.__ior__": [[207, "dpnp-ndarray-ior"]], "dpnp.ndarray.__ipow__": [[208, "dpnp-ndarray-ipow"]], "dpnp.ndarray.__irshift__": [[209, "dpnp-ndarray-irshift"]], "dpnp.ndarray.__isub__": [[210, "dpnp-ndarray-isub"]], "dpnp.ndarray.__itruediv__": [[211, "dpnp-ndarray-itruediv"]], "dpnp.ndarray.__ixor__": [[212, "dpnp-ndarray-ixor"]], "dpnp.ndarray.__le__": [[213, "dpnp-ndarray-le"]], "dpnp.ndarray.__len__": [[214, "dpnp-ndarray-len"]], "dpnp.ndarray.__lshift__": [[215, "dpnp-ndarray-lshift"]], "dpnp.ndarray.__lt__": [[216, "dpnp-ndarray-lt"]], "dpnp.ndarray.__mod__": [[217, "dpnp-ndarray-mod"]], "dpnp.ndarray.__mul__": [[218, "dpnp-ndarray-mul"]], "dpnp.ndarray.__ne__": [[219, "dpnp-ndarray-ne"]], "dpnp.ndarray.__neg__": [[220, "dpnp-ndarray-neg"]], "dpnp.ndarray.__new__": [[221, "dpnp-ndarray-new"]], "dpnp.ndarray.__or__": [[222, "dpnp-ndarray-or"]], "dpnp.ndarray.__pow__": [[223, "dpnp-ndarray-pow"]], "dpnp.ndarray.__reduce__": [[224, "dpnp-ndarray-reduce"]], "dpnp.ndarray.__repr__": [[225, "dpnp-ndarray-repr"]], "dpnp.ndarray.__rshift__": [[226, "dpnp-ndarray-rshift"]], "dpnp.ndarray.__setitem__": [[227, "dpnp-ndarray-setitem"]], "dpnp.ndarray.__str__": [[228, "dpnp-ndarray-str"]], "dpnp.ndarray.__sub__": [[229, "dpnp-ndarray-sub"]], "dpnp.ndarray.__truediv__": [[230, "dpnp-ndarray-truediv"]], "dpnp.ndarray.__xor__": [[231, "dpnp-ndarray-xor"]], "dpnp.ndarray.all": [[232, "dpnp-ndarray-all"]], "dpnp.ndarray.any": [[233, "dpnp-ndarray-any"]], "dpnp.ndarray.argmax": [[234, "dpnp-ndarray-argmax"]], "dpnp.ndarray.argmin": [[235, "dpnp-ndarray-argmin"]], "dpnp.ndarray.argsort": [[236, "dpnp-ndarray-argsort"]], "dpnp.ndarray.astype": [[237, "dpnp-ndarray-astype"]], "dpnp.ndarray.choose": [[238, "dpnp-ndarray-choose"]], "dpnp.ndarray.conj": [[239, "dpnp-ndarray-conj"]], "dpnp.ndarray.conjugate": [[240, "dpnp-ndarray-conjugate"]], "dpnp.ndarray.cumsum": [[241, "dpnp-ndarray-cumsum"]], "dpnp.ndarray.diagonal": [[242, "dpnp-ndarray-diagonal"]], "dpnp.ndarray.dtype": [[243, "dpnp-ndarray-dtype"]], "dpnp.ndarray.fill": [[244, "dpnp-ndarray-fill"]], "dpnp.ndarray.flags": [[245, "dpnp-ndarray-flags"]], "dpnp.ndarray.flat": [[246, "dpnp-ndarray-flat"]], "dpnp.ndarray.flatten": [[247, "dpnp-ndarray-flatten"]], "dpnp.ndarray.item": [[248, "dpnp-ndarray-item"]], "dpnp.ndarray.itemsize": [[249, "dpnp-ndarray-itemsize"]], "dpnp.ndarray.max": [[250, "dpnp-ndarray-max"]], "dpnp.ndarray.mean": [[251, "dpnp-ndarray-mean"]], "dpnp.ndarray.min": [[252, "dpnp-ndarray-min"]], "dpnp.ndarray.nbytes": [[253, "dpnp-ndarray-nbytes"]], "dpnp.ndarray.ndim": [[254, "dpnp-ndarray-ndim"]], "dpnp.ndarray.nonzero": [[255, "dpnp-ndarray-nonzero"]], "dpnp.ndarray.partition": [[256, "dpnp-ndarray-partition"]], "dpnp.ndarray.prod": [[257, "dpnp-ndarray-prod"]], "dpnp.ndarray.reshape": [[258, "dpnp-ndarray-reshape"]], "dpnp.ndarray.round": [[259, "dpnp-ndarray-round"]], "dpnp.ndarray.shape": [[260, "dpnp-ndarray-shape"]], "dpnp.ndarray.size": [[261, "dpnp-ndarray-size"]], "dpnp.ndarray.squeeze": [[262, "dpnp-ndarray-squeeze"]], "dpnp.ndarray.std": [[263, "dpnp-ndarray-std"]], "dpnp.ndarray.strides": [[264, "dpnp-ndarray-strides"]], "dpnp.ndarray.sum": [[265, "dpnp-ndarray-sum"]], "dpnp.ndarray.take": [[266, "dpnp-ndarray-take"]], "dpnp.ndarray.transpose": [[267, "dpnp-ndarray-transpose"]], "dpnp.ndarray.var": [[268, "dpnp-ndarray-var"]], "dpnp.negative": [[269, "dpnp-negative"]], "dpnp.nonzero": [[270, "dpnp-nonzero"]], "dpnp.not_equal": [[271, "dpnp-not-equal"]], "dpnp.ogrid": [[272, "dpnp-ogrid"]], "dpnp.ones": [[273, "dpnp-ones"]], "dpnp.ones_like": [[274, "dpnp-ones-like"]], "dpnp.outer": [[275, "dpnp-outer"]], "dpnp.partition": [[276, "dpnp-partition"]], "dpnp.place": [[277, "dpnp-place"]], "dpnp.power": [[278, "dpnp-power"]], "dpnp.prod": [[279, "dpnp-prod"]], "dpnp.ptp": [[280, "dpnp-ptp"]], "dpnp.put": [[281, "dpnp-put"]], "dpnp.put_along_axis": [[282, "dpnp-put-along-axis"]], "dpnp.putmask": [[283, "dpnp-putmask"]], "dpnp.rad2deg": [[284, "dpnp-rad2deg"]], "dpnp.radians": [[285, "dpnp-radians"]], "dpnp.random.RandomState": [[286, "dpnp-random-randomstate"]], "dpnp.random.beta": [[287, "dpnp-random-beta"]], "dpnp.random.binomial": [[288, "dpnp-random-binomial"]], "dpnp.random.bytes": [[289, "dpnp-random-bytes"]], "dpnp.random.chisquare": [[290, "dpnp-random-chisquare"]], "dpnp.random.choice": [[291, "dpnp-random-choice"]], "dpnp.random.dirichlet": [[292, "dpnp-random-dirichlet"]], "dpnp.random.exponential": [[293, "dpnp-random-exponential"]], "dpnp.random.f": [[294, "dpnp-random-f"]], "dpnp.random.gamma": [[295, "dpnp-random-gamma"]], "dpnp.random.geometric": [[296, "dpnp-random-geometric"]], "dpnp.random.gumbel": [[297, "dpnp-random-gumbel"]], "dpnp.random.hypergeometric": [[298, "dpnp-random-hypergeometric"]], "dpnp.random.laplace": [[299, "dpnp-random-laplace"]], "dpnp.random.logistic": [[300, "dpnp-random-logistic"]], "dpnp.random.lognormal": [[301, "dpnp-random-lognormal"]], "dpnp.random.logseries": [[302, "dpnp-random-logseries"]], "dpnp.random.multinomial": [[303, "dpnp-random-multinomial"]], "dpnp.random.multivariate_normal": [[304, "dpnp-random-multivariate-normal"]], "dpnp.random.negative_binomial": [[305, "dpnp-random-negative-binomial"]], "dpnp.random.noncentral_chisquare": [[306, "dpnp-random-noncentral-chisquare"]], "dpnp.random.noncentral_f": [[307, "dpnp-random-noncentral-f"]], "dpnp.random.normal": [[308, "dpnp-random-normal"]], "dpnp.random.pareto": [[309, "dpnp-random-pareto"]], "dpnp.random.permutation": [[310, "dpnp-random-permutation"]], "dpnp.random.poisson": [[311, "dpnp-random-poisson"]], "dpnp.random.power": [[312, "dpnp-random-power"]], "dpnp.random.rand": [[313, "dpnp-random-rand"]], "dpnp.random.randint": [[314, "dpnp-random-randint"]], "dpnp.random.randn": [[315, "dpnp-random-randn"]], "dpnp.random.random": [[316, "dpnp-random-random"]], "dpnp.random.random_integers": [[317, "dpnp-random-random-integers"]], "dpnp.random.random_sample": [[318, "dpnp-random-random-sample"]], "dpnp.random.ranf": [[319, "dpnp-random-ranf"]], "dpnp.random.rayleigh": [[320, "dpnp-random-rayleigh"]], "dpnp.random.sample": [[321, "dpnp-random-sample"]], "dpnp.random.seed": [[322, "dpnp-random-seed"]], "dpnp.random.shuffle": [[323, "dpnp-random-shuffle"]], "dpnp.random.standard_cauchy": [[324, "dpnp-random-standard-cauchy"]], "dpnp.random.standard_exponential": [[325, "dpnp-random-standard-exponential"]], "dpnp.random.standard_gamma": [[326, "dpnp-random-standard-gamma"]], "dpnp.random.standard_normal": [[327, "dpnp-random-standard-normal"]], "dpnp.random.standard_t": [[328, "dpnp-random-standard-t"]], "dpnp.random.triangular": [[329, "dpnp-random-triangular"]], "dpnp.random.uniform": [[330, "dpnp-random-uniform"]], "dpnp.random.vonmises": [[331, "dpnp-random-vonmises"]], "dpnp.random.wald": [[332, "dpnp-random-wald"]], "dpnp.random.weibull": [[333, "dpnp-random-weibull"]], "dpnp.random.zipf": [[334, "dpnp-random-zipf"]], "dpnp.ravel": [[335, "dpnp-ravel"]], "dpnp.reciprocal": [[336, "dpnp-reciprocal"]], "dpnp.remainder": [[337, "dpnp-remainder"]], "dpnp.repeat": [[338, "dpnp-repeat"]], "dpnp.reshape": [[339, "dpnp-reshape"]], "dpnp.result_type": [[340, "dpnp-result-type"]], "dpnp.right_shift": [[341, "dpnp-right-shift"]], "dpnp.rollaxis": [[342, "dpnp-rollaxis"]], "dpnp.searchsorted": [[343, "dpnp-searchsorted"]], "dpnp.select": [[344, "dpnp-select"]], "dpnp.shape": [[345, "dpnp-shape"]], "dpnp.sign": [[346, "dpnp-sign"]], "dpnp.sin": [[347, "dpnp-sin"]], "dpnp.sinh": [[348, "dpnp-sinh"]], "dpnp.sort": [[349, "dpnp-sort"]], "dpnp.sqrt": [[350, "dpnp-sqrt"]], "dpnp.square": [[351, "dpnp-square"]], "dpnp.squeeze": [[352, "dpnp-squeeze"]], "dpnp.stack": [[353, "dpnp-stack"]], "dpnp.std": [[354, "dpnp-std"]], "dpnp.subtract": [[355, "dpnp-subtract"]], "dpnp.sum": [[356, "dpnp-sum"]], "dpnp.swapaxes": [[357, "dpnp-swapaxes"]], "dpnp.take": [[358, "dpnp-take"]], "dpnp.take_along_axis": [[359, "dpnp-take-along-axis"]], "dpnp.tan": [[360, "dpnp-tan"]], "dpnp.tanh": [[361, "dpnp-tanh"]], "dpnp.tensordot": [[362, "dpnp-tensordot"]], "dpnp.trace": [[363, "dpnp-trace"]], "dpnp.transpose": [[364, "dpnp-transpose"]], "dpnp.trapz": [[365, "dpnp-trapz"]], "dpnp.tri": [[366, "dpnp-tri"]], "dpnp.tril": [[367, "dpnp-tril"]], "dpnp.tril_indices": [[368, "dpnp-tril-indices"]], "dpnp.tril_indices_from": [[369, "dpnp-tril-indices-from"]], "dpnp.triu": [[370, "dpnp-triu"]], "dpnp.triu_indices": [[371, "dpnp-triu-indices"]], "dpnp.triu_indices_from": [[372, "dpnp-triu-indices-from"]], "dpnp.true_divide": [[373, "dpnp-true-divide"]], "dpnp.trunc": [[374, "dpnp-trunc"]], "dpnp.unique": [[375, "dpnp-unique"]], "dpnp.unwrap": [[376, "dpnp-unwrap"]], "dpnp.vander": [[377, "dpnp-vander"]], "dpnp.var": [[378, "dpnp-var"]], "dpnp.vdot": [[379, "dpnp-vdot"]], "dpnp.vstack": [[380, "dpnp-vstack"]], "dpnp.where": [[381, "dpnp-where"]], "dpnp.zeros": [[382, "dpnp-zeros"]], "dpnp.zeros_like": [[383, "dpnp-zeros-like"]], "API Reference": [[384, "api-reference"]], "Array Indexing Routines": [[385, "array-indexing-routines"]], "Generating index arrays": [[385, "generating-index-arrays"]], "Indexing-like operations": [[385, "indexing-like-operations"]], "Inserting data into arrays": [[385, "inserting-data-into-arrays"]], "Iterating over arrays": [[385, "iterating-over-arrays"]], "Matrix and vector products": [[386, "matrix-and-vector-products"]], "Decompositions": [[386, "decompositions"]], "Matrix eigenvalues": [[386, "matrix-eigenvalues"]], "Norms and other numbers": [[386, "norms-and-other-numbers"]], "Solving linear equations": [[386, "solving-linear-equations"]], "Logic Functions": [[387, "logic-functions"]], "Truth value testing": [[387, "truth-value-testing"]], "Infinities and NaNs": [[387, "infinities-and-nans"]], "Array type testing": [[387, "array-type-testing"]], "Logic operations": [[387, "logic-operations"]], "Comparison": [[387, "comparison"]], "Array Manipulation Routines": [[388, "array-manipulation-routines"]], "Basic operations": [[388, "basic-operations"]], "Changing array shape": [[388, "changing-array-shape"]], "Transpose-like operations": [[388, "transpose-like-operations"]], "Changing number of dimensions": [[388, "changing-number-of-dimensions"]], "Changing kind of array": [[388, "changing-kind-of-array"]], "Joining arrays": [[388, "joining-arrays"]], "Splitting arrays": [[388, "splitting-arrays"]], "Tiling arrays": [[388, "tiling-arrays"]], "Adding and removing elements": [[388, "adding-and-removing-elements"]], "Rearranging elements": [[388, "rearranging-elements"]], "Mathematical Functions": [[389, "mathematical-functions"]], "Trigonometric functions": [[389, "trigonometric-functions"], [399, "trigonometric-functions"]], "Hyperbolic functions": [[389, "hyperbolic-functions"]], "Rounding": [[389, "rounding"]], "Sums, products, differences": [[389, "sums-products-differences"]], "Exponents and logarithms": [[389, "exponents-and-logarithms"]], "Other special functions": [[389, "other-special-functions"]], "Floating point routines": [[389, "floating-point-routines"]], "Rational routines": [[389, "rational-routines"]], "Arithmetic operations": [[389, "arithmetic-operations"]], "Handling complex numbers": [[389, "handling-complex-numbers"]], "Extrema Finding": [[389, "extrema-finding"]], "Miscellaneous routines": [[390, "miscellaneous-routines"]], "Utility": [[390, "utility"]], "Multi-Dimensional Array (ndarray)": [[391, "multi-dimensional-array-ndarray"]], "Constructing arrays": [[391, "constructing-arrays"]], "Indexing arrays": [[391, "indexing-arrays"]], "Array attributes": [[391, "array-attributes"]], "Memory layout": [[391, "memory-layout"]], "Data type": [[391, "data-type"]], "Other attributes": [[391, "other-attributes"]], "Array methods": [[391, "array-methods"]], "Array conversion": [[391, "array-conversion"]], "Shape manipulation": [[391, "shape-manipulation"]], "Item selection and manipulation": [[391, "item-selection-and-manipulation"]], "Calculation": [[391, "calculation"]], "Arithmetic, matrix multiplication, and comparison operations": [[391, "arithmetic-matrix-multiplication-and-comparison-operations"]], "Special methods": [[391, "special-methods"]], "Padding": [[392, "padding"]], "Polynomials": [[393, "polynomials"]], "Polynomial Package": [[393, "polynomial-package"]], "Polynomial Module": [[393, "polynomial-module"]], "Polyutils": [[393, "polyutils"]], "Poly1d": [[393, "poly1d"]], "Basics": [[393, "basics"]], "Arithmetic": [[393, "arithmetic"]], "Random Sampling (dpnp.random)": [[394, "random-sampling-dpnp-random"]], "Simple random data": [[394, "simple-random-data"]], "Permutations": [[394, "permutations"]], "Distributions": [[394, "distributions"]], "Random generator": [[394, "random-generator"]], "Routines": [[395, "routines"]], "Sorting, Searching, and Counting": [[396, "sorting-searching-and-counting"]], "Sorting": [[396, "sorting"]], "Searching": [[396, "searching"]], "Counting": [[396, "counting"]], "Special Functions": [[397, "special-functions"]], "Error Function": [[397, "error-function"]], "Statistical Functions": [[398, "statistical-functions"]], "Order statistics": [[398, "order-statistics"]], "Averages and variances": [[398, "averages-and-variances"]], "Histograms": [[398, "histograms"]], "Correlations": [[398, "correlations"]], "Universal Functions (ufunc)": [[399, "universal-functions-ufunc"]], "Available ufuncs": [[399, "available-ufuncs"]], "Math operations": [[399, "math-operations"]], "Bit-twiddling functions": [[399, "bit-twiddling-functions"]], "Comparison functions": [[399, "comparison-functions"]], "Floating functions": [[399, "floating-functions"]]}, "indexentries": {"dpnp": [[2, "module-dpnp"], [3, "module-dpnp"]], "module": [[2, "module-dpnp"], [3, "module-dpnp"], [10, "module-dpnp.fft"], [394, "module-dpnp.random"]], "dpnp.fft": [[10, "module-dpnp.fft"]], "abs() (in module dpnp)": [[11, "dpnp.abs"]], "absolute() (in module dpnp)": [[12, "dpnp.absolute"]], "add() (in module dpnp)": [[13, "dpnp.add"]], "all() (in module dpnp)": [[14, "dpnp.all"]], "allclose() (in module dpnp)": [[15, "dpnp.allclose"]], "amax() (in module dpnp)": [[16, "dpnp.amax"]], "amin() (in module dpnp)": [[17, "dpnp.amin"]], "any() (in module dpnp)": [[18, "dpnp.any"]], "arange() (in module dpnp)": [[19, "dpnp.arange"]], "arccos() (in module dpnp)": [[20, "dpnp.arccos"]], "arccosh() (in module dpnp)": [[21, "dpnp.arccosh"]], "arcsin() (in module dpnp)": [[22, "dpnp.arcsin"]], "arcsinh() (in module dpnp)": [[23, "dpnp.arcsinh"]], "arctan() (in module dpnp)": [[24, "dpnp.arctan"]], "arctan2() (in module dpnp)": [[25, "dpnp.arctan2"]], "arctanh() (in module dpnp)": [[26, "dpnp.arctanh"]], "argmax() (in module dpnp)": [[27, "dpnp.argmax"]], "argmin() (in module dpnp)": [[28, "dpnp.argmin"]], "argsort() (in module dpnp)": [[29, "dpnp.argsort"]], "around() (in module dpnp)": [[30, "dpnp.around"]], "array() (in module dpnp)": [[31, "dpnp.array"]], "array_equal() (in module dpnp)": [[32, "dpnp.array_equal"]], "asanyarray() (in module dpnp)": [[33, "dpnp.asanyarray"]], "asarray() (in module dpnp)": [[34, "dpnp.asarray"]], "ascontiguousarray() (in module dpnp)": [[35, "dpnp.ascontiguousarray"]], "asfarray() (in module dpnp)": [[36, "dpnp.asfarray"]], "asnumpy() (in module dpnp)": [[37, "dpnp.asnumpy"]], "atleast_1d() (in module dpnp)": [[38, "dpnp.atleast_1d"]], "atleast_2d() (in module dpnp)": [[39, "dpnp.atleast_2d"]], "atleast_3d() (in module dpnp)": [[40, "dpnp.atleast_3d"]], "average() (in module dpnp)": [[41, "dpnp.average"]], "bincount() (in module dpnp)": [[42, "dpnp.bincount"]], "bitwise_and() (in module dpnp)": [[43, "dpnp.bitwise_and"]], "bitwise_not() (in module dpnp)": [[44, "dpnp.bitwise_not"]], "bitwise_or() (in module dpnp)": [[45, "dpnp.bitwise_or"]], "bitwise_xor() (in module dpnp)": [[46, "dpnp.bitwise_xor"]], "broadcast_to() (in module dpnp)": [[47, "dpnp.broadcast_to"]], "cbrt() (in module dpnp)": [[48, "dpnp.cbrt"]], "ceil() (in module dpnp)": [[49, "dpnp.ceil"]], "choose() (in module dpnp)": [[50, "dpnp.choose"]], "concatenate() (in module dpnp)": [[51, "dpnp.concatenate"]], "conj() (in module dpnp)": [[52, "dpnp.conj"]], "conjugate() (in module dpnp)": [[53, "dpnp.conjugate"]], "convolve() (in module dpnp)": [[54, "dpnp.convolve"]], "copy() (in module dpnp)": [[55, "dpnp.copy"]], "copysign() (in module dpnp)": [[56, "dpnp.copysign"]], "copyto() (in module dpnp)": [[57, "dpnp.copyto"]], "correlate() (in module dpnp)": [[58, "dpnp.correlate"]], "cos() (in module dpnp)": [[59, "dpnp.cos"]], "cosh() (in module dpnp)": [[60, "dpnp.cosh"]], "count_nonzero() (in module dpnp)": [[61, "dpnp.count_nonzero"]], "cov() (in module dpnp)": [[62, "dpnp.cov"]], "cross() (in module dpnp)": [[63, "dpnp.cross"]], "cumprod() (in module dpnp)": [[64, "dpnp.cumprod"]], "cumsum() (in module dpnp)": [[65, "dpnp.cumsum"]], "deg2rad() (in module dpnp)": [[66, "dpnp.deg2rad"]], "degrees() (in module dpnp)": [[67, "dpnp.degrees"]], "diag() (in module dpnp)": [[68, "dpnp.diag"]], "diag_indices() (in module dpnp)": [[69, "dpnp.diag_indices"]], "diag_indices_from() (in module dpnp)": [[70, "dpnp.diag_indices_from"]], "diagflat() (in module dpnp)": [[71, "dpnp.diagflat"]], "diagonal() (in module dpnp)": [[72, "dpnp.diagonal"]], "diff() (in module dpnp)": [[73, "dpnp.diff"]], "divide() (in module dpnp)": [[74, "dpnp.divide"]], "dot() (in module dpnp)": [[75, "dpnp.dot"]], "t (dpnp.dpnp_array.dpnp_array attribute)": [[76, "dpnp.dpnp_array.dpnp_array.T"]], "__eq__() (dpnp.dpnp_array.dpnp_array method)": [[76, "dpnp.dpnp_array.dpnp_array.__eq__"]], "__ge__() (dpnp.dpnp_array.dpnp_array method)": [[76, "dpnp.dpnp_array.dpnp_array.__ge__"]], "__getitem__() (dpnp.dpnp_array.dpnp_array method)": [[76, "dpnp.dpnp_array.dpnp_array.__getitem__"]], "__gt__() (dpnp.dpnp_array.dpnp_array method)": [[76, "dpnp.dpnp_array.dpnp_array.__gt__"]], "__le__() (dpnp.dpnp_array.dpnp_array method)": [[76, "dpnp.dpnp_array.dpnp_array.__le__"]], "__len__() (dpnp.dpnp_array.dpnp_array method)": [[76, "dpnp.dpnp_array.dpnp_array.__len__"]], "__lt__() (dpnp.dpnp_array.dpnp_array method)": [[76, "dpnp.dpnp_array.dpnp_array.__lt__"]], "__ne__() (dpnp.dpnp_array.dpnp_array method)": [[76, "dpnp.dpnp_array.dpnp_array.__ne__"]], "__setitem__() (dpnp.dpnp_array.dpnp_array method)": [[76, "dpnp.dpnp_array.dpnp_array.__setitem__"]], "all() (dpnp.dpnp_array.dpnp_array method)": [[76, "dpnp.dpnp_array.dpnp_array.all"]], "any() (dpnp.dpnp_array.dpnp_array method)": [[76, "dpnp.dpnp_array.dpnp_array.any"]], "argmax() (dpnp.dpnp_array.dpnp_array method)": [[76, "dpnp.dpnp_array.dpnp_array.argmax"]], "argmin() (dpnp.dpnp_array.dpnp_array method)": [[76, "dpnp.dpnp_array.dpnp_array.argmin"]], "argsort() (dpnp.dpnp_array.dpnp_array method)": [[76, "dpnp.dpnp_array.dpnp_array.argsort"]], "asnumpy() (dpnp.dpnp_array.dpnp_array method)": [[76, "dpnp.dpnp_array.dpnp_array.asnumpy"]], "astype() (dpnp.dpnp_array.dpnp_array method)": [[76, "dpnp.dpnp_array.dpnp_array.astype"]], "choose() (dpnp.dpnp_array.dpnp_array method)": [[76, "dpnp.dpnp_array.dpnp_array.choose"]], "conj() (dpnp.dpnp_array.dpnp_array method)": [[76, "dpnp.dpnp_array.dpnp_array.conj"]], "conjugate() (dpnp.dpnp_array.dpnp_array method)": [[76, "dpnp.dpnp_array.dpnp_array.conjugate"]], "cumsum() (dpnp.dpnp_array.dpnp_array method)": [[76, "dpnp.dpnp_array.dpnp_array.cumsum"]], "device (dpnp.dpnp_array.dpnp_array attribute)": [[76, "dpnp.dpnp_array.dpnp_array.device"]], "diagonal() (dpnp.dpnp_array.dpnp_array method)": [[76, "dpnp.dpnp_array.dpnp_array.diagonal"]], "dot() (dpnp.dpnp_array.dpnp_array method)": [[76, "dpnp.dpnp_array.dpnp_array.dot"]], "dpnp_array (class in dpnp.dpnp_array)": [[76, "dpnp.dpnp_array.dpnp_array"]], "dtype (dpnp.dpnp_array.dpnp_array attribute)": [[76, "dpnp.dpnp_array.dpnp_array.dtype"]], "fill() (dpnp.dpnp_array.dpnp_array method)": [[76, "dpnp.dpnp_array.dpnp_array.fill"]], "flags (dpnp.dpnp_array.dpnp_array attribute)": [[76, "dpnp.dpnp_array.dpnp_array.flags"]], "flat (dpnp.dpnp_array.dpnp_array attribute)": [[76, "dpnp.dpnp_array.dpnp_array.flat"]], "flatten() (dpnp.dpnp_array.dpnp_array method)": [[76, "dpnp.dpnp_array.dpnp_array.flatten"]], "get_array() (dpnp.dpnp_array.dpnp_array method)": [[76, "dpnp.dpnp_array.dpnp_array.get_array"]], "item() (dpnp.dpnp_array.dpnp_array method)": [[76, "dpnp.dpnp_array.dpnp_array.item"]], "itemsize (dpnp.dpnp_array.dpnp_array attribute)": [[76, "dpnp.dpnp_array.dpnp_array.itemsize"]], "max() (dpnp.dpnp_array.dpnp_array method)": [[76, "dpnp.dpnp_array.dpnp_array.max"]], "mean() (dpnp.dpnp_array.dpnp_array method)": [[76, "dpnp.dpnp_array.dpnp_array.mean"]], "min() (dpnp.dpnp_array.dpnp_array method)": [[76, "dpnp.dpnp_array.dpnp_array.min"]], "nbytes (dpnp.dpnp_array.dpnp_array attribute)": [[76, "dpnp.dpnp_array.dpnp_array.nbytes"]], "ndim (dpnp.dpnp_array.dpnp_array attribute)": [[76, "dpnp.dpnp_array.dpnp_array.ndim"]], "nonzero() (dpnp.dpnp_array.dpnp_array method)": [[76, "dpnp.dpnp_array.dpnp_array.nonzero"]], "partition() (dpnp.dpnp_array.dpnp_array method)": [[76, "dpnp.dpnp_array.dpnp_array.partition"]], "prod() (dpnp.dpnp_array.dpnp_array method)": [[76, "dpnp.dpnp_array.dpnp_array.prod"]], "reshape() (dpnp.dpnp_array.dpnp_array method)": [[76, "dpnp.dpnp_array.dpnp_array.reshape"]], "round() (dpnp.dpnp_array.dpnp_array method)": [[76, "dpnp.dpnp_array.dpnp_array.round"]], "shape (dpnp.dpnp_array.dpnp_array attribute)": [[76, "dpnp.dpnp_array.dpnp_array.shape"]], "size (dpnp.dpnp_array.dpnp_array attribute)": [[76, "dpnp.dpnp_array.dpnp_array.size"]], "squeeze() (dpnp.dpnp_array.dpnp_array method)": [[76, "dpnp.dpnp_array.dpnp_array.squeeze"]], "std() (dpnp.dpnp_array.dpnp_array method)": [[76, "dpnp.dpnp_array.dpnp_array.std"]], "strides (dpnp.dpnp_array.dpnp_array attribute)": [[76, "dpnp.dpnp_array.dpnp_array.strides"]], "sum() (dpnp.dpnp_array.dpnp_array method)": [[76, "dpnp.dpnp_array.dpnp_array.sum"]], "sycl_context (dpnp.dpnp_array.dpnp_array attribute)": [[76, "dpnp.dpnp_array.dpnp_array.sycl_context"]], "sycl_device (dpnp.dpnp_array.dpnp_array attribute)": [[76, "dpnp.dpnp_array.dpnp_array.sycl_device"]], "sycl_queue (dpnp.dpnp_array.dpnp_array attribute)": [[76, "dpnp.dpnp_array.dpnp_array.sycl_queue"]], "take() (dpnp.dpnp_array.dpnp_array method)": [[76, "dpnp.dpnp_array.dpnp_array.take"]], "to_device() (dpnp.dpnp_array.dpnp_array method)": [[76, "dpnp.dpnp_array.dpnp_array.to_device"]], "transpose() (dpnp.dpnp_array.dpnp_array method)": [[76, "dpnp.dpnp_array.dpnp_array.transpose"]], "usm_type (dpnp.dpnp_array.dpnp_array attribute)": [[76, "dpnp.dpnp_array.dpnp_array.usm_type"]], "var() (dpnp.dpnp_array.dpnp_array method)": [[76, "dpnp.dpnp_array.dpnp_array.var"]], "__eq__() (dpnp.dtype method)": [[77, "dpnp.dtype.__eq__"]], "__ge__() (dpnp.dtype method)": [[77, "dpnp.dtype.__ge__"]], "__getitem__() (dpnp.dtype method)": [[77, "dpnp.dtype.__getitem__"]], "__gt__() (dpnp.dtype method)": [[77, "dpnp.dtype.__gt__"]], "__le__() (dpnp.dtype method)": [[77, "dpnp.dtype.__le__"]], "__len__() (dpnp.dtype method)": [[77, "dpnp.dtype.__len__"]], "__lt__() (dpnp.dtype method)": [[77, "dpnp.dtype.__lt__"]], "__ne__() (dpnp.dtype method)": [[77, "dpnp.dtype.__ne__"]], "alignment (dpnp.dtype attribute)": [[77, "dpnp.dtype.alignment"]], "base (dpnp.dtype attribute)": [[77, "dpnp.dtype.base"]], "byteorder (dpnp.dtype attribute)": [[77, "dpnp.dtype.byteorder"]], "char (dpnp.dtype attribute)": [[77, "dpnp.dtype.char"]], "descr (dpnp.dtype attribute)": [[77, "dpnp.dtype.descr"]], "dtype (class in dpnp)": [[77, "dpnp.dtype"]], "fields (dpnp.dtype attribute)": [[77, "dpnp.dtype.fields"]], "flags (dpnp.dtype attribute)": [[77, "dpnp.dtype.flags"]], "hasobject (dpnp.dtype attribute)": [[77, "dpnp.dtype.hasobject"]], "isalignedstruct (dpnp.dtype attribute)": [[77, "dpnp.dtype.isalignedstruct"]], "isbuiltin (dpnp.dtype attribute)": [[77, "dpnp.dtype.isbuiltin"]], "isnative (dpnp.dtype attribute)": [[77, "dpnp.dtype.isnative"]], "itemsize (dpnp.dtype attribute)": [[77, "dpnp.dtype.itemsize"]], "kind (dpnp.dtype attribute)": [[77, "dpnp.dtype.kind"]], "metadata (dpnp.dtype attribute)": [[77, "dpnp.dtype.metadata"]], "name (dpnp.dtype attribute)": [[77, "dpnp.dtype.name"]], "names (dpnp.dtype attribute)": [[77, "dpnp.dtype.names"]], "ndim (dpnp.dtype attribute)": [[77, "dpnp.dtype.ndim"]], "newbyteorder() (dpnp.dtype method)": [[77, "dpnp.dtype.newbyteorder"]], "num (dpnp.dtype attribute)": [[77, "dpnp.dtype.num"]], "shape (dpnp.dtype attribute)": [[77, "dpnp.dtype.shape"]], "str (dpnp.dtype attribute)": [[77, "dpnp.dtype.str"]], "subdtype (dpnp.dtype attribute)": [[77, "dpnp.dtype.subdtype"]], "type (dpnp.dtype attribute)": [[77, "dpnp.dtype.type"]], "ediff1d() (in module dpnp)": [[78, "dpnp.ediff1d"]], "einsum() (in module dpnp)": [[79, "dpnp.einsum"]], "einsum_path() (in module dpnp)": [[80, "dpnp.einsum_path"]], "empty() (in module dpnp)": [[81, "dpnp.empty"]], "empty_like() (in module dpnp)": [[82, "dpnp.empty_like"]], "equal() (in module dpnp)": [[83, "dpnp.equal"]], "erf() (in module dpnp)": [[84, "dpnp.erf"]], "exp() (in module dpnp)": [[85, "dpnp.exp"]], "exp2() (in module dpnp)": [[86, "dpnp.exp2"]], "expand_dims() (in module dpnp)": [[87, "dpnp.expand_dims"]], "expm1() (in module dpnp)": [[88, "dpnp.expm1"]], "extract() (in module dpnp)": [[89, "dpnp.extract"]], "eye() (in module dpnp)": [[90, "dpnp.eye"]], "fabs() (in module dpnp)": [[91, "dpnp.fabs"]], "fft() (in module dpnp.fft)": [[92, "dpnp.fft.fft"]], "fft2() (in module dpnp.fft)": [[93, "dpnp.fft.fft2"]], "fftfreq() (in module dpnp.fft)": [[94, "dpnp.fft.fftfreq"]], "fftn() (in module dpnp.fft)": [[95, "dpnp.fft.fftn"]], "fftshift() (in module dpnp.fft)": [[96, "dpnp.fft.fftshift"]], "hfft() (in module dpnp.fft)": [[97, "dpnp.fft.hfft"]], "ifft() (in module dpnp.fft)": [[98, "dpnp.fft.ifft"]], "ifft2() (in module dpnp.fft)": [[99, "dpnp.fft.ifft2"]], "ifftn() (in module dpnp.fft)": [[100, "dpnp.fft.ifftn"]], "ifftshift() (in module dpnp.fft)": [[101, "dpnp.fft.ifftshift"]], "ihfft() (in module dpnp.fft)": [[102, "dpnp.fft.ihfft"]], "irfft() (in module dpnp.fft)": [[103, "dpnp.fft.irfft"]], "irfft2() (in module dpnp.fft)": [[104, "dpnp.fft.irfft2"]], "irfftn() (in module dpnp.fft)": [[105, "dpnp.fft.irfftn"]], "rfft() (in module dpnp.fft)": [[106, "dpnp.fft.rfft"]], "rfft2() (in module dpnp.fft)": [[107, "dpnp.fft.rfft2"]], "rfftfreq() (in module dpnp.fft)": [[108, "dpnp.fft.rfftfreq"]], "rfftn() (in module dpnp.fft)": [[109, "dpnp.fft.rfftn"]], "fill_diagonal() (in module dpnp)": [[110, "dpnp.fill_diagonal"]], "__eq__() (dpnp.flatiter method)": [[111, "dpnp.flatiter.__eq__"]], "__ge__() (dpnp.flatiter method)": [[111, "dpnp.flatiter.__ge__"]], "__getitem__() (dpnp.flatiter method)": [[111, "dpnp.flatiter.__getitem__"]], "__gt__() (dpnp.flatiter method)": [[111, "dpnp.flatiter.__gt__"]], "__iter__() (dpnp.flatiter method)": [[111, "dpnp.flatiter.__iter__"]], "__le__() (dpnp.flatiter method)": [[111, "dpnp.flatiter.__le__"]], "__lt__() (dpnp.flatiter method)": [[111, "dpnp.flatiter.__lt__"]], "__ne__() (dpnp.flatiter method)": [[111, "dpnp.flatiter.__ne__"]], "__next__() (dpnp.flatiter method)": [[111, "dpnp.flatiter.__next__"]], "__setitem__() (dpnp.flatiter method)": [[111, "dpnp.flatiter.__setitem__"]], "flatiter (class in dpnp)": [[111, "dpnp.flatiter"]], "floor() (in module dpnp)": [[112, "dpnp.floor"]], "floor_divide() (in module dpnp)": [[113, "dpnp.floor_divide"]], "fmax() (in module dpnp)": [[114, "dpnp.fmax"]], "fmin() (in module dpnp)": [[115, "dpnp.fmin"]], "fmod() (in module dpnp)": [[116, "dpnp.fmod"]], "from_dlpack() (in module dpnp)": [[117, "dpnp.from_dlpack"]], "frombuffer() (in module dpnp)": [[118, "dpnp.frombuffer"]], "fromfile() (in module dpnp)": [[119, "dpnp.fromfile"]], "fromfunction() (in module dpnp)": [[120, "dpnp.fromfunction"]], "fromiter() (in module dpnp)": [[121, "dpnp.fromiter"]], "fromstring() (in module dpnp)": [[122, "dpnp.fromstring"]], "full() (in module dpnp)": [[123, "dpnp.full"]], "full_like() (in module dpnp)": [[124, "dpnp.full_like"]], "geomspace() (in module dpnp)": [[125, "dpnp.geomspace"]], "get_include() (in module dpnp)": [[126, "dpnp.get_include"]], "gradient() (in module dpnp)": [[127, "dpnp.gradient"]], "greater() (in module dpnp)": [[128, "dpnp.greater"]], "greater_equal() (in module dpnp)": [[129, "dpnp.greater_equal"]], "histogram() (in module dpnp)": [[130, "dpnp.histogram"]], "hstack() (in module dpnp)": [[131, "dpnp.hstack"]], "hypot() (in module dpnp)": [[132, "dpnp.hypot"]], "identity() (in module dpnp)": [[133, "dpnp.identity"]], "indices() (in module dpnp)": [[134, "dpnp.indices"]], "inner() (in module dpnp)": [[135, "dpnp.inner"]], "invert() (in module dpnp)": [[136, "dpnp.invert"]], "isclose() (in module dpnp)": [[137, "dpnp.isclose"]], "isfinite() (in module dpnp)": [[138, "dpnp.isfinite"]], "isinf() (in module dpnp)": [[139, "dpnp.isinf"]], "isnan() (in module dpnp)": [[140, "dpnp.isnan"]], "isscalar() (in module dpnp)": [[141, "dpnp.isscalar"]], "issubdtype() (in module dpnp)": [[142, "dpnp.issubdtype"]], "issubsctype() (in module dpnp)": [[143, "dpnp.issubsctype"]], "kron() (in module dpnp)": [[144, "dpnp.kron"]], "left_shift() (in module dpnp)": [[145, "dpnp.left_shift"]], "less() (in module dpnp)": [[146, "dpnp.less"]], "less_equal() (in module dpnp)": [[147, "dpnp.less_equal"]], "cholesky() (in module dpnp.linalg)": [[148, "dpnp.linalg.cholesky"]], "cond() (in module dpnp.linalg)": [[149, "dpnp.linalg.cond"]], "det() (in module dpnp.linalg)": [[150, "dpnp.linalg.det"]], "eig() (in module dpnp.linalg)": [[151, "dpnp.linalg.eig"]], "eigh() (in module dpnp.linalg)": [[152, "dpnp.linalg.eigh"]], "eigvals() (in module dpnp.linalg)": [[153, "dpnp.linalg.eigvals"]], "inv() (in module dpnp.linalg)": [[154, "dpnp.linalg.inv"]], "matrix_power() (in module dpnp.linalg)": [[155, "dpnp.linalg.matrix_power"]], "matrix_rank() (in module dpnp.linalg)": [[156, "dpnp.linalg.matrix_rank"]], "multi_dot() (in module dpnp.linalg)": [[157, "dpnp.linalg.multi_dot"]], "norm() (in module dpnp.linalg)": [[158, "dpnp.linalg.norm"]], "qr() (in module dpnp.linalg)": [[159, "dpnp.linalg.qr"]], "svd() (in module dpnp.linalg)": [[160, "dpnp.linalg.svd"]], "linspace() (in module dpnp)": [[161, "dpnp.linspace"]], "loadtxt() (in module dpnp)": [[162, "dpnp.loadtxt"]], "log() (in module dpnp)": [[163, "dpnp.log"]], "log10() (in module dpnp)": [[164, "dpnp.log10"]], "log1p() (in module dpnp)": [[165, "dpnp.log1p"]], "log2() (in module dpnp)": [[166, "dpnp.log2"]], "logical_and() (in module dpnp)": [[167, "dpnp.logical_and"]], "logical_not() (in module dpnp)": [[168, "dpnp.logical_not"]], "logical_or() (in module dpnp)": [[169, "dpnp.logical_or"]], "logical_xor() (in module dpnp)": [[170, "dpnp.logical_xor"]], "logspace() (in module dpnp)": [[171, "dpnp.logspace"]], "matmul() (in module dpnp)": [[172, "dpnp.matmul"]], "max() (in module dpnp)": [[173, "dpnp.max"]], "maximum() (in module dpnp)": [[174, "dpnp.maximum"]], "mean() (in module dpnp)": [[175, "dpnp.mean"]], "median() (in module dpnp)": [[176, "dpnp.median"]], "meshgrid() (in module dpnp)": [[177, "dpnp.meshgrid"]], "mgrid (in module dpnp)": [[178, "dpnp.mgrid"]], "min() (in module dpnp)": [[179, "dpnp.min"]], "minimum() (in module dpnp)": [[180, "dpnp.minimum"]], "mod() (in module dpnp)": [[181, "dpnp.mod"]], "modf() (in module dpnp)": [[182, "dpnp.modf"]], "moveaxis() (in module dpnp)": [[183, "dpnp.moveaxis"]], "multiply() (in module dpnp)": [[184, "dpnp.multiply"]], "nancumprod() (in module dpnp)": [[185, "dpnp.nancumprod"]], "nancumsum() (in module dpnp)": [[186, "dpnp.nancumsum"]], "nanprod() (in module dpnp)": [[187, "dpnp.nanprod"]], "nansum() (in module dpnp)": [[188, "dpnp.nansum"]], "nanvar() (in module dpnp)": [[189, "dpnp.nanvar"]], "ndarray (in module dpnp)": [[190, "dpnp.ndarray"]], "t (dpnp.ndarray property)": [[191, "dpnp.ndarray.T"]], "__abs__() (dpnp.ndarray method)": [[192, "dpnp.ndarray.__abs__"]], "__add__() (dpnp.ndarray method)": [[193, "dpnp.ndarray.__add__"]], "__and__() (dpnp.ndarray method)": [[194, "dpnp.ndarray.__and__"]], "__complex__() (dpnp.ndarray method)": [[195, "dpnp.ndarray.__complex__"]], "__eq__() (dpnp.ndarray method)": [[196, "dpnp.ndarray.__eq__"]], "__float__() (dpnp.ndarray method)": [[197, "dpnp.ndarray.__float__"]], "__ge__() (dpnp.ndarray method)": [[198, "dpnp.ndarray.__ge__"]], "__getitem__() (dpnp.ndarray method)": [[199, "dpnp.ndarray.__getitem__"]], "__gt__() (dpnp.ndarray method)": [[200, "dpnp.ndarray.__gt__"]], "__iadd__() (dpnp.ndarray method)": [[201, "dpnp.ndarray.__iadd__"]], "__iand__() (dpnp.ndarray method)": [[202, "dpnp.ndarray.__iand__"]], "__ilshift__() (dpnp.ndarray method)": [[203, "dpnp.ndarray.__ilshift__"]], "__imul__() (dpnp.ndarray method)": [[204, "dpnp.ndarray.__imul__"]], "__int__() (dpnp.ndarray method)": [[205, "dpnp.ndarray.__int__"]], "__invert__() (dpnp.ndarray method)": [[206, "dpnp.ndarray.__invert__"]], "__ior__() (dpnp.ndarray method)": [[207, "dpnp.ndarray.__ior__"]], "__ipow__() (dpnp.ndarray method)": [[208, "dpnp.ndarray.__ipow__"]], "__irshift__() (dpnp.ndarray method)": [[209, "dpnp.ndarray.__irshift__"]], "__isub__() (dpnp.ndarray method)": [[210, "dpnp.ndarray.__isub__"]], "__itruediv__() (dpnp.ndarray method)": [[211, "dpnp.ndarray.__itruediv__"]], "__ixor__() (dpnp.ndarray method)": [[212, "dpnp.ndarray.__ixor__"]], "__le__() (dpnp.ndarray method)": [[213, "dpnp.ndarray.__le__"]], "__len__() (dpnp.ndarray method)": [[214, "dpnp.ndarray.__len__"]], "__lshift__() (dpnp.ndarray method)": [[215, "dpnp.ndarray.__lshift__"]], "__lt__() (dpnp.ndarray method)": [[216, "dpnp.ndarray.__lt__"]], "__mod__() (dpnp.ndarray method)": [[217, "dpnp.ndarray.__mod__"]], "__mul__() (dpnp.ndarray method)": [[218, "dpnp.ndarray.__mul__"]], "__ne__() (dpnp.ndarray method)": [[219, "dpnp.ndarray.__ne__"]], "__neg__() (dpnp.ndarray method)": [[220, "dpnp.ndarray.__neg__"]], "__new__() (dpnp.ndarray method)": [[221, "dpnp.ndarray.__new__"]], "__or__() (dpnp.ndarray method)": [[222, "dpnp.ndarray.__or__"]], "__pow__() (dpnp.ndarray method)": [[223, "dpnp.ndarray.__pow__"]], "__reduce__() (dpnp.ndarray method)": [[224, "dpnp.ndarray.__reduce__"]], "__repr__() (dpnp.ndarray method)": [[225, "dpnp.ndarray.__repr__"]], "__rshift__() (dpnp.ndarray method)": [[226, "dpnp.ndarray.__rshift__"]], "__setitem__() (dpnp.ndarray method)": [[227, "dpnp.ndarray.__setitem__"]], "__str__() (dpnp.ndarray method)": [[228, "dpnp.ndarray.__str__"]], "__sub__() (dpnp.ndarray method)": [[229, "dpnp.ndarray.__sub__"]], "__truediv__() (dpnp.ndarray method)": [[230, "dpnp.ndarray.__truediv__"]], "__xor__() (dpnp.ndarray method)": [[231, "dpnp.ndarray.__xor__"]], "all() (dpnp.ndarray method)": [[232, "dpnp.ndarray.all"]], "any() (dpnp.ndarray method)": [[233, "dpnp.ndarray.any"]], "argmax() (dpnp.ndarray method)": [[234, "dpnp.ndarray.argmax"]], "argmin() (dpnp.ndarray method)": [[235, "dpnp.ndarray.argmin"]], "argsort() (dpnp.ndarray method)": [[236, "dpnp.ndarray.argsort"]], "astype() (dpnp.ndarray method)": [[237, "dpnp.ndarray.astype"]], "choose() (dpnp.ndarray method)": [[238, "dpnp.ndarray.choose"]], "conj() (dpnp.ndarray method)": [[239, "dpnp.ndarray.conj"]], "conjugate() (dpnp.ndarray method)": [[240, "dpnp.ndarray.conjugate"]], "cumsum() (dpnp.ndarray method)": [[241, "dpnp.ndarray.cumsum"]], "diagonal() (dpnp.ndarray method)": [[242, "dpnp.ndarray.diagonal"]], "dtype (dpnp.ndarray property)": [[243, "dpnp.ndarray.dtype"]], "fill() (dpnp.ndarray method)": [[244, "dpnp.ndarray.fill"]], "flags (dpnp.ndarray property)": [[245, "dpnp.ndarray.flags"]], "flat (dpnp.ndarray property)": [[246, "dpnp.ndarray.flat"]], "flatten() (dpnp.ndarray method)": [[247, "dpnp.ndarray.flatten"]], "item() (dpnp.ndarray method)": [[248, "dpnp.ndarray.item"]], "itemsize (dpnp.ndarray property)": [[249, "dpnp.ndarray.itemsize"]], "max() (dpnp.ndarray method)": [[250, "dpnp.ndarray.max"]], "mean() (dpnp.ndarray method)": [[251, "dpnp.ndarray.mean"]], "min() (dpnp.ndarray method)": [[252, "dpnp.ndarray.min"]], "nbytes (dpnp.ndarray property)": [[253, "dpnp.ndarray.nbytes"]], "ndim (dpnp.ndarray property)": [[254, "dpnp.ndarray.ndim"]], "nonzero() (dpnp.ndarray method)": [[255, "dpnp.ndarray.nonzero"]], "partition() (dpnp.ndarray method)": [[256, "dpnp.ndarray.partition"]], "prod() (dpnp.ndarray method)": [[257, "dpnp.ndarray.prod"]], "reshape() (dpnp.ndarray method)": [[258, "dpnp.ndarray.reshape"]], "round() (dpnp.ndarray method)": [[259, "dpnp.ndarray.round"]], "shape (dpnp.ndarray property)": [[260, "dpnp.ndarray.shape"]], "size (dpnp.ndarray property)": [[261, "dpnp.ndarray.size"]], "squeeze() (dpnp.ndarray method)": [[262, "dpnp.ndarray.squeeze"]], "std() (dpnp.ndarray method)": [[263, "dpnp.ndarray.std"]], "strides (dpnp.ndarray property)": [[264, "dpnp.ndarray.strides"]], "sum() (dpnp.ndarray method)": [[265, "dpnp.ndarray.sum"]], "take() (dpnp.ndarray method)": [[266, "dpnp.ndarray.take"]], "transpose() (dpnp.ndarray method)": [[267, "dpnp.ndarray.transpose"]], "var() (dpnp.ndarray method)": [[268, "dpnp.ndarray.var"]], "negative() (in module dpnp)": [[269, "dpnp.negative"]], "nonzero() (in module dpnp)": [[270, "dpnp.nonzero"]], "not_equal() (in module dpnp)": [[271, "dpnp.not_equal"]], "ogrid (in module dpnp)": [[272, "dpnp.ogrid"]], "ones() (in module dpnp)": [[273, "dpnp.ones"]], "ones_like() (in module dpnp)": [[274, "dpnp.ones_like"]], "outer() (in module dpnp)": [[275, "dpnp.outer"]], "partition() (in module dpnp)": [[276, "dpnp.partition"]], "place() (in module dpnp)": [[277, "dpnp.place"]], "power() (in module dpnp)": [[278, "dpnp.power"]], "prod() (in module dpnp)": [[279, "dpnp.prod"]], "ptp() (in module dpnp)": [[280, "dpnp.ptp"]], "put() (in module dpnp)": [[281, "dpnp.put"]], "put_along_axis() (in module dpnp)": [[282, "dpnp.put_along_axis"]], "putmask() (in module dpnp)": [[283, "dpnp.putmask"]], "rad2deg() (in module dpnp)": [[284, "dpnp.rad2deg"]], "radians() (in module dpnp)": [[285, "dpnp.radians"]], "randomstate (class in dpnp.random)": [[286, "dpnp.random.RandomState"]], "__eq__() (dpnp.random.randomstate method)": [[286, "dpnp.random.RandomState.__eq__"]], "__ge__() (dpnp.random.randomstate method)": [[286, "dpnp.random.RandomState.__ge__"]], "__gt__() (dpnp.random.randomstate method)": [[286, "dpnp.random.RandomState.__gt__"]], "__le__() (dpnp.random.randomstate method)": [[286, "dpnp.random.RandomState.__le__"]], "__lt__() (dpnp.random.randomstate method)": [[286, "dpnp.random.RandomState.__lt__"]], "__ne__() (dpnp.random.randomstate method)": [[286, "dpnp.random.RandomState.__ne__"]], "get_state() (dpnp.random.randomstate method)": [[286, "dpnp.random.RandomState.get_state"]], "get_sycl_device() (dpnp.random.randomstate method)": [[286, "dpnp.random.RandomState.get_sycl_device"]], "get_sycl_queue() (dpnp.random.randomstate method)": [[286, "dpnp.random.RandomState.get_sycl_queue"]], "normal() (dpnp.random.randomstate method)": [[286, "dpnp.random.RandomState.normal"]], "rand() (dpnp.random.randomstate method)": [[286, "dpnp.random.RandomState.rand"]], "randint() (dpnp.random.randomstate method)": [[286, "dpnp.random.RandomState.randint"]], "randn() (dpnp.random.randomstate method)": [[286, "dpnp.random.RandomState.randn"]], "random_sample() (dpnp.random.randomstate method)": [[286, "dpnp.random.RandomState.random_sample"]], "standard_normal() (dpnp.random.randomstate method)": [[286, "dpnp.random.RandomState.standard_normal"]], "uniform() (dpnp.random.randomstate method)": [[286, "dpnp.random.RandomState.uniform"]], "beta() (in module dpnp.random)": [[287, "dpnp.random.beta"]], "binomial() (in module dpnp.random)": [[288, "dpnp.random.binomial"]], "bytes() (in module dpnp.random)": [[289, "dpnp.random.bytes"]], "chisquare() (in module dpnp.random)": [[290, "dpnp.random.chisquare"]], "choice() (in module dpnp.random)": [[291, "dpnp.random.choice"]], "dirichlet() (in module dpnp.random)": [[292, "dpnp.random.dirichlet"]], "exponential() (in module dpnp.random)": [[293, "dpnp.random.exponential"]], "f() (in module dpnp.random)": [[294, "dpnp.random.f"]], "gamma() (in module dpnp.random)": [[295, "dpnp.random.gamma"]], "geometric() (in module dpnp.random)": [[296, "dpnp.random.geometric"]], "gumbel() (in module dpnp.random)": [[297, "dpnp.random.gumbel"]], "hypergeometric() (in module dpnp.random)": [[298, "dpnp.random.hypergeometric"]], "laplace() (in module dpnp.random)": [[299, "dpnp.random.laplace"]], "logistic() (in module dpnp.random)": [[300, "dpnp.random.logistic"]], "lognormal() (in module dpnp.random)": [[301, "dpnp.random.lognormal"]], "logseries() (in module dpnp.random)": [[302, "dpnp.random.logseries"]], "multinomial() (in module dpnp.random)": [[303, "dpnp.random.multinomial"]], "multivariate_normal() (in module dpnp.random)": [[304, "dpnp.random.multivariate_normal"]], "negative_binomial() (in module dpnp.random)": [[305, "dpnp.random.negative_binomial"]], "noncentral_chisquare() (in module dpnp.random)": [[306, "dpnp.random.noncentral_chisquare"]], "noncentral_f() (in module dpnp.random)": [[307, "dpnp.random.noncentral_f"]], "normal() (in module dpnp.random)": [[308, "dpnp.random.normal"]], "pareto() (in module dpnp.random)": [[309, "dpnp.random.pareto"]], "permutation() (in module dpnp.random)": [[310, "dpnp.random.permutation"]], "poisson() (in module dpnp.random)": [[311, "dpnp.random.poisson"]], "power() (in module dpnp.random)": [[312, "dpnp.random.power"]], "rand() (in module dpnp.random)": [[313, "dpnp.random.rand"]], "randint() (in module dpnp.random)": [[314, "dpnp.random.randint"]], "randn() (in module dpnp.random)": [[315, "dpnp.random.randn"]], "random() (in module dpnp.random)": [[316, "dpnp.random.random"]], "random_integers() (in module dpnp.random)": [[317, "dpnp.random.random_integers"]], "random_sample() (in module dpnp.random)": [[318, "dpnp.random.random_sample"]], "ranf() (in module dpnp.random)": [[319, "dpnp.random.ranf"]], "rayleigh() (in module dpnp.random)": [[320, "dpnp.random.rayleigh"]], "sample() (in module dpnp.random)": [[321, "dpnp.random.sample"]], "seed() (in module dpnp.random)": [[322, "dpnp.random.seed"]], "shuffle() (in module dpnp.random)": [[323, "dpnp.random.shuffle"]], "standard_cauchy() (in module dpnp.random)": [[324, "dpnp.random.standard_cauchy"]], "standard_exponential() (in module dpnp.random)": [[325, "dpnp.random.standard_exponential"]], "standard_gamma() (in module dpnp.random)": [[326, "dpnp.random.standard_gamma"]], "standard_normal() (in module dpnp.random)": [[327, "dpnp.random.standard_normal"]], "standard_t() (in module dpnp.random)": [[328, "dpnp.random.standard_t"]], "triangular() (in module dpnp.random)": [[329, "dpnp.random.triangular"]], "uniform() (in module dpnp.random)": [[330, "dpnp.random.uniform"]], "vonmises() (in module dpnp.random)": [[331, "dpnp.random.vonmises"]], "wald() (in module dpnp.random)": [[332, "dpnp.random.wald"]], "weibull() (in module dpnp.random)": [[333, "dpnp.random.weibull"]], "zipf() (in module dpnp.random)": [[334, "dpnp.random.zipf"]], "ravel() (in module dpnp)": [[335, "dpnp.ravel"]], "reciprocal() (in module dpnp)": [[336, "dpnp.reciprocal"]], "remainder() (in module dpnp)": [[337, "dpnp.remainder"]], "repeat() (in module dpnp)": [[338, "dpnp.repeat"]], "reshape() (in module dpnp)": [[339, "dpnp.reshape"]], "result_type() (in module dpnp)": [[340, "dpnp.result_type"]], "right_shift() (in module dpnp)": [[341, "dpnp.right_shift"]], "rollaxis() (in module dpnp)": [[342, "dpnp.rollaxis"]], "searchsorted() (in module dpnp)": [[343, "dpnp.searchsorted"]], "select() (in module dpnp)": [[344, "dpnp.select"]], "shape() (in module dpnp)": [[345, "dpnp.shape"]], "sign() (in module dpnp)": [[346, "dpnp.sign"]], "sin() (in module dpnp)": [[347, "dpnp.sin"]], "sinh() (in module dpnp)": [[348, "dpnp.sinh"]], "sort() (in module dpnp)": [[349, "dpnp.sort"]], "sqrt() (in module dpnp)": [[350, "dpnp.sqrt"]], "square() (in module dpnp)": [[351, "dpnp.square"]], "squeeze() (in module dpnp)": [[352, "dpnp.squeeze"]], "stack() (in module dpnp)": [[353, "dpnp.stack"]], "std() (in module dpnp)": [[354, "dpnp.std"]], "subtract() (in module dpnp)": [[355, "dpnp.subtract"]], "sum() (in module dpnp)": [[356, "dpnp.sum"]], "swapaxes() (in module dpnp)": [[357, "dpnp.swapaxes"]], "take() (in module dpnp)": [[358, "dpnp.take"]], "take_along_axis() (in module dpnp)": [[359, "dpnp.take_along_axis"]], "tan() (in module dpnp)": [[360, "dpnp.tan"]], "tanh() (in module dpnp)": [[361, "dpnp.tanh"]], "tensordot() (in module dpnp)": [[362, "dpnp.tensordot"]], "trace() (in module dpnp)": [[363, "dpnp.trace"]], "transpose() (in module dpnp)": [[364, "dpnp.transpose"]], "trapz() (in module dpnp)": [[365, "dpnp.trapz"]], "tri() (in module dpnp)": [[366, "dpnp.tri"]], "tril() (in module dpnp)": [[367, "dpnp.tril"]], "tril_indices() (in module dpnp)": [[368, "dpnp.tril_indices"]], "tril_indices_from() (in module dpnp)": [[369, "dpnp.tril_indices_from"]], "triu() (in module dpnp)": [[370, "dpnp.triu"]], "triu_indices() (in module dpnp)": [[371, "dpnp.triu_indices"]], "triu_indices_from() (in module dpnp)": [[372, "dpnp.triu_indices_from"]], "true_divide() (in module dpnp)": [[373, "dpnp.true_divide"]], "trunc() (in module dpnp)": [[374, "dpnp.trunc"]], "unique() (in module dpnp)": [[375, "dpnp.unique"]], "unwrap() (in module dpnp)": [[376, "dpnp.unwrap"]], "vander() (in module dpnp)": [[377, "dpnp.vander"]], "var() (in module dpnp)": [[378, "dpnp.var"]], "vdot() (in module dpnp)": [[379, "dpnp.vdot"]], "vstack() (in module dpnp)": [[380, "dpnp.vstack"]], "where() (in module dpnp)": [[381, "dpnp.where"]], "zeros() (in module dpnp)": [[382, "dpnp.zeros"]], "zeros_like() (in module dpnp)": [[383, "dpnp.zeros_like"]], "dpnp.random": [[394, "module-dpnp.random"]]}})