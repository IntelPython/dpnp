jobs:

- job: myCodeStyle
  displayName: Code style

  pool:
    vmImage: 'ubuntu-20.04'

  steps:

  - bash: |
      . ./scripts/set_ci_env.sh
      echo ========================= Conda ENV ===============================
      conda create -q -y -n CondaCodeStyle python=3.8 conda-build conda-verify \
                                                      numpy cython pytest \
                                                      pycodestyle autopep8 black
      . /usr/share/miniconda/etc/profile.d/conda.sh
      conda activate CondaCodeStyle
      echo ========================= Run style check ===============================
      # variables are not used but have to be installed for setuptools
      export ONEAPI_ROOT=/opt/intel
      export MKLROOT=/opt/intel
      python ./setup.py style
      echo ========================= style check finished ===============================

- job: test_valgrind
  displayName: Valgrind

  pool:
    vmImage: 'ubuntu-20.04'

  steps:

  - bash: |
      . ./scripts/set_ci_env.sh
      echo ========================= build DPNP ===============================
      ./0.build.sh
      echo ========================= run valgrind ===============================
      export PYTHONMALLOC=malloc
      valgrind --show-leak-kinds=definite --log-file=/tmp/valgrind-output            \
               python -m pytest tests/third_party/cupy/math_tests/test_arithmetic.py \
                                -vv --valgrind --valgrind-log=/tmp/valgrind-output

- job: mycodecoverage
  displayName: Code coverage
  pool:
    vmImage: 'ubuntu-20.04'
  steps:
  - bash: |
      . ./scripts/set_ci_env.sh
      echo ========================= Conda ENV ===============================
      conda create -q -y -n CondaCodeStyle python=3.8 conda-build conda-verify \
                                                      numpy cython pytest \
                                                      pycodestyle autopep8 \
                                                      cython pytest pytest-cov
      . /usr/share/miniconda/etc/profile.d/conda.sh
      conda activate CondaCodeStyle
      echo ========================= build DPNP ===============================
      ./0.build.sh
      echo ========================= run code coverage ===============================
      pytest --cov-report xml:coverage.xml --cov-report term-missing --cov=dpnp
      export CODECOV_TOKEN="1158b545-b00a-4a84-a6f9-2bc2c4265d8b"
      bash <(curl -s https://codecov.io/bash) -f coverage.xml

- job: ubuntu2004
  displayName: Ubuntu 20.04
  pool:
    vmImage: 'ubuntu-20.04'
  strategy:
    matrix:
      Python37:
        python.version: '3.7'
      Python38:
        python.version: '3.8'
      Python39:
        python.version: '3.9'
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
    displayName: 'Use Python $(python.version)'
  - bash: |
      . ./scripts/set_ci_env.sh
      echo ========================= build DPNP ===============================
      ./0.build.sh
      echo ========================= run pytest ===============================
      pytest

- job: make_package
  displayName: conda-build
  pool:
    vmImage: 'ubuntu-20.04'
  steps:
  - bash: |
      ./scripts/install_system_deps.sh
      ./scripts/install_system_deps_intelpython.sh

      . /opt/intel/oneapi/setvars.sh

      ./scripts/install_python_deps.sh
      ./scripts/build_deps_dpctl.sh

      conda list
      echo ========================= make DPNP package ===============================
      conda-build conda-recipe/ --no-test
      ls -l
#      conda-build conda-recipe/ --no-test
#                                --output-folder .
#                                --croot build_conda_package_dpnp
#      echo ========================= list files ===============================
#      conda install /opt/intel/oneapi/intelpython/latest/conda-bld/linux-64/dpnp*
#      echo ========================= where DPCTL ===============================
#      find /opt/intel -name libDPCTLSyclInterface.so
#      echo ========================= where mkl_sycl ===============================
#      find /opt/intel -name libmkl_sycl.so
#      echo ========================= where DPNP backend ===============================
#      find /opt/intel -name libdpnp_backend_c.so
#      echo ========================= 2 ===============================
#      ls -l /opt/intel/oneapi/intelpython/latest/conda-bld/linux-64/
#      echo ========================= 3 ===============================
#      ls -l /opt/intel/oneapi/intelpython/python3.7/lib/python3.7/site-packages/dpnp
#      ldd /opt/intel/oneapi/intelpython/python3.7/lib/python3.7/site-packages/dpnp/libdpnp_backend_c.so
#      echo ========================= 4 ===============================
#      readelf -d /opt/intel/oneapi/intelpython/python3.7/lib/python3.7/site-packages/dpnp/libdpnp_backend_c.so
  - task: CopyFiles@2
    inputs:
      sourceFolder: '/opt/intel/oneapi/intelpython/latest/conda-bld'
      contents: '*'
      targetFolder: '$(Build.ArtifactStagingDirectory)'
  - task: PublishPipelineArtifact@1
    inputs:
      pathToPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: drop
