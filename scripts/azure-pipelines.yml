jobs:

- job: myCodeStyle
  displayName: Code style

  pool:
    vmImage: 'ubuntu-20.04'

  steps:

  - bash: |
      echo ========================= Conda ENV ====================================
      conda create -q -y -n CondaCodeStyle python=3.8 conda-build conda-verify \
                                                      numpy=1.20.1 cython pytest \
                                                      pycodestyle autopep8 black
      . /usr/share/miniconda/etc/profile.d/conda.sh
      conda activate CondaCodeStyle
      echo ========================= CI ENV =======================================
      . ./scripts/set_ci_env.sh
      echo ========================= Run style check ==============================
      # variables are not used but have to be installed for setuptools
      # export ONEAPI_ROOT=/opt/intel
      # export MKLROOT=/opt/intel
      python ./setup.py style
      echo ========================= style check finished =========================

- job: test_valgrind
  displayName: Valgrind

  pool:
    vmImage: 'ubuntu-20.04'

  steps:

  - bash: |
      echo ========================= Conda ENV =======================================
      conda create -q -y -n dpnp
      . /usr/share/miniconda/etc/profile.d/conda.sh
      conda activate dpnp
      echo ========================= CI ENV ==========================================
      . ./scripts/set_ci_env.sh
      echo ========================= build DPNP ======================================
      python scripts/build_locally.py
      echo ========================= run valgrind ====================================
      export PYTHONMALLOC=malloc
      valgrind --show-leak-kinds=definite --log-file=/tmp/valgrind-output            \
               python -m pytest tests/third_party/cupy/math_tests/test_arithmetic.py \
                                -vv --valgrind --valgrind-log=/tmp/valgrind-output

- job: mycodecoverage
  displayName: Code coverage
  pool:
    vmImage: 'ubuntu-20.04'
  steps:
  - bash: |
      echo ============================================ Conda ENV =============================================
      conda create -q -y -n CondaCodeCov python=3.8 conda-build conda-verify \
                                                    numpy cython pytest pytest-cov pycodestyle autopep8 \
                                                    dpctl mkl-devel-dpcpp tbb-devel dpcpp_linux-64 cmake=3.19 \
                                                    -c dppy/label/dev -c intel -c conda-forge
      . /usr/share/miniconda/etc/profile.d/conda.sh
      conda activate CondaCodeCov
      echo ============================================ build DPNP ============================================
      python setup.py build_clib
      CC=icpx python setup.py build_ext --inplace
      echo ============================================ run code coverage =====================================
      export OCL_ICD_FILENAMES=libintelocl.so
      pytest --cov-report xml:coverage.xml --cov-report term-missing --cov=dpnp
      export CODECOV_TOKEN="1158b545-b00a-4a84-a6f9-2bc2c4265d8b"
      bash <(curl -s https://codecov.io/bash) -f coverage.xml

#- job: ubuntu2004
#  displayName: Ubuntu 20.04
#  pool:
#    vmImage: 'ubuntu-20.04'
#  strategy:
#    matrix:
#      Python37:
#        python.version: '3.7'
#      Python38:
#        python.version: '3.8'
#      Python39:
#        python.version: '3.9'
#  steps:
#  - task: UsePythonVersion@0
#    inputs:
#      versionSpec: '$(python.version)'
#    displayName: 'Use Python $(python.version)'
#  - bash: |
#      #echo ========================= Conda ENV ===========================
#      #conda config --env --add channels conda-forge
#      #echo ========================= update Conda ENV ===========================
#      #conda update -y --prefix /usr/share/miniconda anaconda
#      #echo ========================= 1 update Conda ENV ===========================
#      #conda update -y libgcc-ng=9.3 libstdcxx-ng=9.3
#      echo ========================= create Conda ENV ===========================
#      conda create -q -y -n dpnp$(python.version) python=$(python.version) libgcc-ng=9.3 libstdcxx-ng=9.3
#      . /usr/share/miniconda/etc/profile.d/conda.sh
#      conda activate dpnp$(python.version)
#
#      echo ========================= install OneAPI =================================
#      # . ./scripts/install_cmake_lin.sh
#      ./scripts/install_system_deps.sh  # no intel python
#      ./scripts/install_python_deps.sh  # numpy, conda-build and etc.
#      echo ========================= build DPNP ==========================
#      ./0.build.sh
#      echo ========================= run tests ======================================
#      . ./0.env.sh
#      pytest -s

- job: conda_build_ubuntu2004
  displayName: conda-build Ubuntu 20.04
  pool:
    vmImage: 'ubuntu-20.04'
  variables:
    mkl.version: '>=2021.4'
  strategy:
    matrix:
      Python38:
        python.version: '3.8'
      #Python39:
      #  python.version: '3.9'
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
    displayName: 'Use Python $(python.version)'
  - bash: |
      echo ========================= create Conda ENV ===========================
      conda create -q -y -n dpnp$(python.version) conda-build --override-channels -c intel -c conda-forge
      . /usr/share/miniconda/etc/profile.d/conda.sh
      conda activate dpnp$(python.version)
      echo ========================= build DPNP and run tests ==========================
      export MKL_VER=$(mkl.version)
      export OCL_ICD_FILENAMES=libintelocl.so
      conda-build --python $(python.version) --override-channels -c intel -c conda-forge -c dppy/label/dev ./conda-recipe/

#- job: ubuntu2004_tests_external
#  displayName: Ubuntu 20.04 External Tests
#  pool:
#    vmImage: 'ubuntu-20.04'
#  strategy:
#    matrix:
#      Python37:
#        python.version: '3.7'
#      Python38:
#        python.version: '3.8'
#      Python39:
#        python.version: '3.9'
#  steps:
#  - task: UsePythonVersion@0
#    inputs:
#      versionSpec: '$(python.version)'
#    displayName: 'Use Python $(python.version)'
#  - bash: |
#      echo ========================= install OneAPI =================================
#      ./scripts/install_system_deps.sh
#      
#      echo ========================= Conda ENV ======================================
#      conda create -q -y -n dpnp$(python.version) python=$(python.version) numpy=1.19 conda-build cython pytest hypothesis
#      . /usr/share/miniconda/etc/profile.d/conda.sh
#      conda activate dpnp$(python.version)
#
#      echo ========================= build DPNP =====================================
#      ./0.build.sh
#      echo ========================= run tests ======================================
#      . ./0.env.sh
#      python -m tests_external.numpy.runtests

# test python ./setup.py bdist_wheel command with no dpctl
- job: bdist_wheel_dpnp_local_lin
  displayName: bdist_wheel_dpnp_local_lin
  pool:
    vmImage: 'ubuntu-20.04'
  steps:
  - bash: |
      echo ========================= Conda ENV =======================================
      conda create -q -y -n dpnp
      . /usr/share/miniconda/etc/profile.d/conda.sh
      conda activate dpnp

      echo ========================= CI ENV ==========================================
      ./scripts/install_system_deps.sh
      . ./scripts/install_cmake_lin.sh
      . /opt/intel/oneapi/setvars.sh

      ./scripts/install_python_deps.sh
      # ./scripts/build_deps_dpctl.sh

      echo ========================= make DPNP bdist package =========================
      python ./setup.py bdist_wheel
  - publish: dist
    artifact: 'package_$(Agent.JobName)_$(Agent.OS)'
    displayName: bdist_wheel_dpnp_local_lin_package

#- job: bdist_wheel_dpnp_local_win
#  displayName: bdist_wheel_dpnp_local_win
#  timeoutInMinutes: 120
#  pool:
#    vmImage: 'windows-2019' # 'vs2017-win2016'
#  steps:
#  - script: set PYTHONUNBUFFERED=1
#    displayName: make output unbuffered
#
#  - powershell: Write-Host "##vso[task.prependpath]$env:CONDA\Scripts"
#    displayName: Add conda to PATH
#
#  - script: |
#      call scripts\install_system_deps_win.bat
#    displayName: Install Intel ONE API
#    timeoutInMinutes: 60
#
#  - script: |
#      call activate
#      conda install -y conda-build numpy=1.20.1 cython pytest hypothesis
#    displayName: Install extra conda packages
#
#  - script: |
#      call activate
#      call scripts\install_cmake_win.bat
#      echo ========================= Intel OneAPI setvars ===============================
#      set "ONEAPI_ROOT=C:\Program Files (x86)\Intel\oneAPI\"
#      call "%ONEAPI_ROOT%\compiler\latest\env\vars.bat"
#      call "%ONEAPI_ROOT%\dpl\latest\env\vars.bat"
#      call "%ONEAPI_ROOT%\tbb\latest\env\vars.bat"
#      echo =================== build DPNP wheel package ===========================
#      python setup.py bdist_wheel
#    displayName: build_bdist_wheel
#  - publish: dist
#    artifact: 'package_$(Agent.JobName)_$(Agent.OS)'
#    displayName: bdist_wheel_local_win_package

#- job: build_conda_dpnp_dpctl_win
#  displayName: build_conda_dpnp_dpctl_win
#  timeoutInMinutes: 120
#  pool:
#    vmImage: 'windows-2019' # 'vs2017-win2016'
#  strategy:
#    matrix:
#      Python37:
#        python.version: '3.7'
#  steps:
#  - task: UsePythonVersion@0
#    inputs:
#      versionSpec: '$(python.version)'
#      addToPath: true
#    displayName: 'Use Python $(python.version)'
#
#  - script: set PYTHONUNBUFFERED=1
#    displayName: make output unbuffered
#
#  - script: |
#      call scripts\install_system_deps_win.bat
#    displayName: Install Intel ONE API
#    timeoutInMinutes: 60
#
#  - powershell: Write-Host "##vso[task.prependpath]$env:CONDA\Scripts"
#    displayName: Add conda to PATH
#
#  - script: |
#      conda create -y -n env python=%PYTHON_VERSION% conda-build=3.18
#    displayName: conda create with Python $(python.version)
#
#  - script: |
#      call activate env
#      call scripts\build_deps_dpctl_win.bat
#    displayName: Build DPCtl
#
#  - script: |
#      call activate env
#      call scripts\install_cmake_win.bat
#      echo ========================= Intel OneAPI setvars ===============================
#      set "ONEAPI_ROOT=C:\Program Files (x86)\Intel\oneAPI\"
#      call "%ONEAPI_ROOT%\compiler\latest\env\vars.bat"
#      call "%ONEAPI_ROOT%\dpl\latest\env\vars.bat"
#      call "%ONEAPI_ROOT%\tbb\latest\env\vars.bat"
#      echo =================== conda build DPNP ===========================
#      call conda list
#      call python --version
#      call conda build conda-recipe -c local -c intel
#      mkdir dist
#      echo ========== it doesn't work yet =========================
#    displayName: build_conda
#  - publish: dist
#    artifact: 'build_conda_dpnp_dpctl_$(Agent.JobName)_$(Agent.OS)'
#    displayName: build_conda_dpnp_dpctl_win_package

# test python ./setup.py bdist_wheel command with dpctl
- job: wheel_dpnp_dpctl_lin
  displayName: bdist_wheel_dpnp_dpctl_lin
  pool:
    vmImage: 'ubuntu-20.04'
  steps:
  - bash: |
      echo ========================= Conda ENV =============================================
      conda create -q -y -n dpnp
      . /usr/share/miniconda/etc/profile.d/conda.sh
      conda activate dpnp

      echo ========================= CI ENV ================================================
      ./scripts/install_system_deps.sh
      ./scripts/install_system_deps_intelpython.sh

      . ./scripts/install_cmake_lin.sh
      . /opt/intel/oneapi/setvars.sh

      ./scripts/install_python_deps.sh
      ./scripts/build_deps_dpctl.sh

      echo ========================= make DPNP+DPCTL bdist package =========================
      python ./setup.py bdist_wheel
  - publish: dist
    artifact: 'package_dpnp_dpctl_$(Agent.JobName)_$(Agent.OS)'
    displayName: bdist_wheel_dpnp_dpctl_lin_package

#- job: conda_build_dpnp_dpctl_lin
#  displayName: conda_dpnp_dpctl_lin
#  pool:
#    vmImage: 'ubuntu-20.04'
#  steps:
#  - bash: |
#      echo ========================= Conda ENV =================================
#      conda create -q -y -n dpnp
#      . /usr/share/miniconda/etc/profile.d/conda.sh
#      conda activate dpnp
#
#      echo ========================= CI ENV ====================================
#      ./scripts/install_system_deps.sh
#      . ./scripts/install_cmake_lin.sh
#      ./scripts/install_system_deps_intelpython.sh
#
#      . /opt/intel/oneapi/setvars.sh
#
#      ./scripts/install_python_deps.sh
#      # ./scripts/build_deps_dpctl.sh
#
#      conda list
#      echo ========================= make DPNP package =========================
#      conda-build conda-recipe/
#  - publish: /opt/intel/oneapi/intelpython/latest/conda-bld
#    artifact: 'package_$(Agent.JobName)_$(Agent.OS)'
#    displayName: conda_build_dpnp_dpctl_lin_package

#- job: make_backend_lin
#  displayName: cmake_3_16_3_lin
#  pool:
#    vmImage: 'ubuntu-20.04'
#  steps:
#  - bash: |
#      ./scripts/install_system_deps.sh
#      echo ========================= install cmake 3.16.3 ===============================
#      curl --output cmake_webimage.tar.gz \
#        --url https://cmake.org/files/v3.16/cmake-3.16.3-Linux-x86_64.tar.gz \
#        --retry 5 --retry-delay 5
#
#      tar -xzf cmake_webimage.tar.gz
#      rm -f cmake_webimage.tar.gz
#
#      export PATH=`pwd`/cmake-3.16.3-Linux-x86_64/bin:$PATH
#
#      which cmake
#      cmake --version
#
#      echo ========================= Intel OneAPI setvars ===============================
#      . /opt/intel/oneapi/setvars.sh
#
#      export DPNP_BACKEND_BUILD_DIR=dpnp/backend/0.build
#      mkdir -p $DPNP_BACKEND_BUILD_DIR
#      cd $DPNP_BACKEND_BUILD_DIR
#
#      echo ========================= build DPNP package ===============================
#      cmake ..
#      cmake --build . --target install -- VERBOSE=1
#  - publish: dpnp/backend/package_dpnp
#    artifact: 'package_backend_$(Agent.JobName)_$(Agent.OS)'
#    displayName: backend_cmake_oneapi_local_lin_package

#- job: devenv_lin
#  displayName: devenv_lin
#  pool:
#    vmImage: 'ubuntu-20.04'
#  steps:
#  - bash: |
#      echo ========================= Conda ENV ==================================
#      conda create -q -y -n dpnp
#      . /usr/share/miniconda/etc/profile.d/conda.sh
#      conda activate dpnp
#      echo ========================= CI ENV =====================================
#      . ./scripts/install_cmake_lin.sh
#      ./scripts/install_system_deps.sh  # no intel python
#      ./scripts/install_python_deps.sh  # numpy, conda-build and etc.
#      echo ========================= build DPNP package =========================
#      ./0.build.sh

# DPNP backend clib tests building and running
- job: test_dpnp_backend_clib_lin
  displayName: test_dpnp_backend_clib_lin
  pool:
    vmImage: 'ubuntu-20.04'
  steps:
  - bash: |
      . ./scripts/install_cmake_lin.sh
      ./scripts/install_system_deps.sh  # no intel python
      echo ========================= build DPNP package ===============================
      . /opt/intel/oneapi/setvars.sh
      THEDIR=$(pwd)
      cmake  -S$THEDIR/dpnp/backend -B$THEDIR/build/ \
             -DDPNP_INSTALL_PREFIX=$THEDIR/dpnp -DDPNP_INSTALL_STRUCTURED=OFF \
             -DDPNP_BACKEND_TESTS:BOOL=ON $THEDIR/dpnp/backend
      cmake --build $THEDIR/build
      cmake --install $THEDIR/build
      echo ======================= run DPNP backend tests =============================
      cd $THEDIR/build/tests/
      make check
