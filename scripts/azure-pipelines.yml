jobs:

- job: myCodeStyle
  displayName: Code style

  pool:
    vmImage: 'ubuntu-20.04'

  steps:

  - bash: |
      . ./scripts/set_ci_env.sh
      echo ========================= Conda ENV ===============================
      conda create -q -y -n CondaCodeStyle python=3.8 conda-build conda-verify \
                                                      numpy cython pytest \
                                                      pycodestyle autopep8 black
      . /usr/share/miniconda/etc/profile.d/conda.sh
      conda activate CondaCodeStyle
      echo ========================= Run style check ===============================
      # variables are not used but have to be installed for setuptools
      export ONEAPI_ROOT=/opt/intel
      export MKLROOT=/opt/intel
      python ./setup.py style
      echo ========================= style check finished ===============================

- job: test_valgrind
  displayName: Valgrind

  pool:
    vmImage: 'ubuntu-20.04'

  steps:

  - bash: |
      . ./scripts/set_ci_env.sh
      echo ========================= build DPNP ===============================
      ./0.build.sh
      echo ========================= run valgrind ===============================
      export PYTHONMALLOC=malloc
      valgrind --show-leak-kinds=definite --log-file=/tmp/valgrind-output            \
               python -m pytest tests/third_party/cupy/math_tests/test_arithmetic.py \
                                -vv --valgrind --valgrind-log=/tmp/valgrind-output

- job: mycodecoverage
  displayName: Code coverage
  pool:
    vmImage: 'ubuntu-20.04'
  steps:
  - bash: |
      . ./scripts/set_ci_env.sh
      echo ========================= Conda ENV ===============================
      conda create -q -y -n CondaCodeStyle python=3.8 conda-build conda-verify \
                                                      numpy cython pytest \
                                                      pycodestyle autopep8 \
                                                      cython pytest pytest-cov
      . /usr/share/miniconda/etc/profile.d/conda.sh
      conda activate CondaCodeStyle
      echo ========================= build DPNP ===============================
      ./0.build.sh
      echo ========================= run code coverage ===============================
      pytest --cov-report xml:coverage.xml --cov-report term-missing --cov=dpnp
      export CODECOV_TOKEN="1158b545-b00a-4a84-a6f9-2bc2c4265d8b"
      bash <(curl -s https://codecov.io/bash) -f coverage.xml

- job: ubuntu2004
  displayName: Ubuntu 20.04
  pool:
    vmImage: 'ubuntu-20.04'
  strategy:
    matrix:
      Python37:
        python.version: '3.7'
      Python38:
        python.version: '3.8'
      Python39:
        python.version: '3.9'
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
    displayName: 'Use Python $(python.version)'
  - bash: |
      . ./scripts/set_ci_env.sh
      echo ========================= build DPNP ===============================
      ./0.build.sh
      echo ========================= run pytest ===============================
      pytest

# test python ./setup.py bdist_wheel command with
# no oneapi python environment
# no dpctl
- job: make_package_bdist
  displayName: bdist_wheel_local
  pool:
    vmImage: 'ubuntu-20.04'
  steps:
  - bash: |
      ./scripts/install_system_deps.sh
      . /opt/intel/oneapi/setvars.sh

      ./scripts/install_python_deps.sh
      # ./scripts/build_deps_dpctl.sh

      echo ========================= make DPNP bdist package ===============================
      . ./0.env.sh
      python ./setup.py bdist_wheel
  - publish: dist
    artifact: 'package_$(Agent.JobName)_$(Agent.OS)'
    displayName: bdist_wheel_local

- job: make_package
  displayName: conda-build
  pool:
    vmImage: 'ubuntu-20.04'
  steps:
  - bash: |
      ./scripts/install_system_deps.sh
      ./scripts/install_system_deps_intelpython.sh

      . /opt/intel/oneapi/setvars.sh

      ./scripts/install_python_deps.sh
      ./scripts/build_deps_dpctl.sh

      conda list
      echo ========================= make DPNP package ===============================
      conda-build conda-recipe/
  - publish: /opt/intel/oneapi/intelpython/latest/conda-bld
    artifact: 'package_$(Agent.JobName)_$(Agent.OS)'
    displayName: conda_build_oneapi_dpctl

- job: make_backend_win
  displayName: cmake_win
  pool:
    vmImage: 'windows-2019' # 'vs2017-win2016'
  steps:
  - script: |
      echo ========================= configure VS ===============================
      rem dir /s/b "C:\Program Files (x86)\Microsoft Visual Studio\*.bat"
      call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"

      echo ========================= download onepai ===============================
      curl.exe --output webimage.exe                                                                                  ^
        --url https://registrationcenter-download.intel.com/akdlm/irc_nas/17453/w_BaseKit_p_2021.1.0.2664_offline.exe ^
        --retry 5 --retry-delay 5
      start /b /wait webimage.exe -s -x -f webimage_extracted
      del webimage.exe

      echo ========================= install onepai ===============================
      rem it is expected that multy-line end-line symbol will be diffrent on MS :-)
      webimage_extracted\bootstrapper.exe -s --action install      ^
        --eula=accept --continue-with-optional-error=yes           ^
        -p=NEED_VS2017_INTEGRATION=0 -p=NEED_VS2019_INTEGRATION=0

      echo ========================= copy OpenCL ===============================
      copy "C:\Program Files (x86)\Intel\oneAPI\intelpython\python3.7\Library\OpenCL.dll" C:\Windows\System32\

      echo ========================= install cmake ===============================
      rem curl.exe --output cmake_webimage.msi --url https://cmake.org/files/v3.19/cmake-3.19.2-win64-x64.msi --retry 5 --retry-delay 5
      rem msiexec /i cmake_webimage.msi /quiet /qn /norestart /log install.log
      rem dir "C:\Program Files\"
      rem dir "C:\Program Files\CMake"
      rem dir "C:\Program Files\CMake\bin"
      rem set PATH="C:\Program Files\CMake\bin";%PATH%

      curl.exe --output cmake_webimage.zip --url https://cmake.org/files/v3.19/cmake-3.19.2-win64-x64.zip --retry 5 --retry-delay 5
      tar -xf cmake_webimage.zip
      set PATH=%CD%\cmake-3.19.2-win64-x64\bin;%PATH%

      cmake --version
      del cmake_webimage.zip
      echo ========================= configure oneapi ===============================
      dir "C:\Program Files (x86)\Intel\oneAPI"
      call "C:\Program Files (x86)\Intel\oneAPI\setvars.bat" intel64 vs2019
      rem dir "C:\Program Files (x86)\Intel\oneAPI\compiler\latest\windows\bin"
      rem echo ========================= conda list ===============================
      rem conda list
      echo ========================= python build ===============================
      python ./setup.py build_clib
      echo ========================= cd backend dir ===============================
      cd dpnp/backend
      mkdir 0.build
      cd 0.build
      rem echo ========================= cmake 2 generators list ===============================
      rem cmake -G
      echo ========================= cmake DPNP package ===============================
      rem cmake -DCMAKE_CXX_COMPILER=dpcpp -DCMAKE_LINKER=lld-link -G Ninja ..
      cmake -G Ninja ..
      echo ========================= build DPNP package ===============================
      rem ninja -v
      cmake --build . -- -v
      echo ========================= install DPNP package ===============================
      cmake --install . -- -v
      ninja -v install
      rem ls -la
- job: make_backend_lin
  displayName: cmake_lin
  pool:
    vmImage: 'ubuntu-20.04'
  steps:
  - bash: |
      ./scripts/install_system_deps.sh

      echo ========================= install cmake ===============================
      curl --output cmake_webimage.tar.gz --url https://cmake.org/files/v3.19/cmake-3.19.2-Linux-x86_64.tar.gz --retry 5 --retry-delay 5
      tar -xzf cmake_webimage.tar.gz
      rm -f cmake_webimage.tar.gz
      export PATH=`pwd`/cmake-3.19.2-Linux-x86_64/bin:$PATH

      # echo ========================= cmake upgrade ===============================
      # sudo apt-get update
      # sudo apt-get upgrade
      # sudo apt-get install cmake # cmake 3.19.1 has a bug
      # sudo apt-get --only-upgrade install cmake # cmake 3.19.1 has a bug
      which cmake
      cmake --version
      echo ========================= Intel OneAPI setvars ===============================
      . /opt/intel/oneapi/setvars.sh

      export DPNP_BACKEND_BUILD_DIR=dpnp/backend/0.build
      mkdir -p $DPNP_BACKEND_BUILD_DIR
      cd $DPNP_BACKEND_BUILD_DIR

      echo ========================= cmake DPNP package ===============================
      cmake ..
      echo ========================= build DPNP package ===============================
      make VERBOSE=1
      echo ========================= install DPNP package ===============================
      make VERBOSE=1 install
  - publish: dpnp/backend/package_dpnp
    artifact: 'package_backend_$(Agent.JobName)_$(Agent.OS)'
    displayName: backend_cmake_oneapi_local
