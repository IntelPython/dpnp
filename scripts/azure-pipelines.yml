jobs:

- job: myCodeStyle
  displayName: Code style

  pool:
    vmImage: 'ubuntu-20.04'

  steps:

  - bash: |
      . ./scripts/set_ci_env.sh
      echo ========================= Conda ENV ===============================
      conda create -q -y -n CondaCodeStyle python=3.8 conda-build conda-verify \
                                                      numpy cython pytest \
                                                      pycodestyle autopep8 black
      . /usr/share/miniconda/etc/profile.d/conda.sh
      conda activate CondaCodeStyle
      echo ========================= Run style check ===============================
      # variables are not used but have to be installed for setuptools
      # export ONEAPI_ROOT=/opt/intel
      # export MKLROOT=/opt/intel
      python ./setup.py style
      echo ========================= style check finished ===============================

- job: test_valgrind
  displayName: Valgrind

  pool:
    vmImage: 'ubuntu-20.04'

  steps:

  - bash: |
      . ./scripts/set_ci_env.sh
      echo ========================= build DPNP ===============================
      ./0.build.sh
      echo ========================= run valgrind ===============================
      export PYTHONMALLOC=malloc
      valgrind --show-leak-kinds=definite --log-file=/tmp/valgrind-output            \
               python -m pytest tests/third_party/cupy/math_tests/test_arithmetic.py \
                                -vv --valgrind --valgrind-log=/tmp/valgrind-output

- job: mycodecoverage
  displayName: Code coverage
  pool:
    vmImage: 'ubuntu-20.04'
  steps:
  - bash: |
      . ./scripts/set_ci_env.sh
      echo ========================= Conda ENV ===============================
      conda create -q -y -n CondaCodeStyle python=3.8 conda-build conda-verify \
                                                      numpy cython pytest \
                                                      pycodestyle autopep8 \
                                                      cython pytest pytest-cov
      . /usr/share/miniconda/etc/profile.d/conda.sh
      conda activate CondaCodeStyle
      echo ========================= build DPNP ===============================
      ./0.build.sh
      echo ========================= run code coverage ===============================
      pytest --cov-report xml:coverage.xml --cov-report term-missing --cov=dpnp
      export CODECOV_TOKEN="1158b545-b00a-4a84-a6f9-2bc2c4265d8b"
      bash <(curl -s https://codecov.io/bash) -f coverage.xml

- job: ubuntu2004
  displayName: Ubuntu 20.04
  pool:
    vmImage: 'ubuntu-20.04'
  strategy:
    matrix:
      Python37:
        python.version: '3.7'
      Python38:
        python.version: '3.8'
      Python39:
        python.version: '3.9'
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
    displayName: 'Use Python $(python.version)'
  - bash: |
      . ./scripts/set_ci_env.sh
      echo ========================= build DPNP ===============================
      ./0.build.sh
      echo ========================= run pytest ===============================
      pytest

- job: ubuntu2004_tests_external
  displayName: Ubuntu 20.04 External Tests
  pool:
    vmImage: 'ubuntu-20.04'
  strategy:
    matrix:
      Python37:
        python.version: '3.7'
      Python38:
        python.version: '3.8'
      Python39:
        python.version: '3.9'
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
    displayName: 'Use Python $(python.version)'
  - bash: |
      . ./scripts/set_ci_env.sh
      echo ========================= build DPNP ===============================
      ./0.build.sh
      echo ========================= run tests ===============================
      python -m tests_external.numpy.runtests

# test python ./setup.py bdist_wheel command with no dpctl
- job: bdist_wheel_dpnp_local_lin
  displayName: bdist_wheel_dpnp_local_lin
  pool:
    vmImage: 'ubuntu-20.04'
  steps:
  - bash: |
      ./scripts/install_system_deps.sh
      . ./scripts/install_cmake_lin.sh
      . /opt/intel/oneapi/setvars.sh

      ./scripts/install_python_deps.sh
      # ./scripts/build_deps_dpctl.sh

      echo ========================= make DPNP bdist package ===============================
      python ./setup.py bdist_wheel
  - publish: dist
    artifact: 'package_$(Agent.JobName)_$(Agent.OS)'
    displayName: bdist_wheel_dpnp_local_lin_package

- job: bdist_wheel_dpnp_local_win
  displayName: bdist_wheel_dpnp_local_win
  pool:
    vmImage: 'windows-2019' # 'vs2017-win2016'
  steps:
  - script: |
      call ./scripts/install_system_deps_win.bat
      call ./scripts/install_cmake_win.bat

      echo ========================= Intel OneAPI setvars ===============================
      call "C:\Program Files (x86)\Intel\oneAPI\setvars.bat" intel64 vs2019

      echo =================== build DPNP bdist_wheel package ===========================
      :: cmake -G Ninja ..
      :: cmake --build . --target install -- -v
      :: python setup.py build_clib
      :: python setup.py build_ext --inplace
      python setup.py bdist_wheel
  - publish: dist
    artifact: 'package_$(Agent.JobName)_$(Agent.OS)'
    displayName: bdist_wheel_dpnp_local_win_package

# test python ./setup.py bdist_wheel command with dpctl
- job: wheel_dpnp_dpctl_lin
  displayName: bdist_wheel_dpnp_dpctl_lin
  pool:
    vmImage: 'ubuntu-20.04'
  steps:
  - bash: |
      ./scripts/install_system_deps.sh
      ./scripts/install_system_deps_intelpython.sh

      . ./scripts/install_cmake_lin.sh
      . /opt/intel/oneapi/setvars.sh

      ./scripts/install_python_deps.sh
      ./scripts/build_deps_dpctl.sh

      echo ========================= make DPNP+DPCTL bdist package ===============================
      python ./setup.py bdist_wheel
  - publish: dist
    artifact: 'package_dpnp_dpctl_$(Agent.JobName)_$(Agent.OS)'
    displayName: bdist_wheel_dpnp_dpctl_lin_package

- job: conda_build_dpnp_dpctl_lin
  displayName: conda_dpnp_dpctl_lin
  pool:
    vmImage: 'ubuntu-20.04'
  steps:
  - bash: |
      ./scripts/install_system_deps.sh
      . ./scripts/install_cmake_lin.sh
      ./scripts/install_system_deps_intelpython.sh

      . /opt/intel/oneapi/setvars.sh

      ./scripts/install_python_deps.sh
      ./scripts/build_deps_dpctl.sh

      conda list
      echo ========================= make DPNP package ===============================
      conda-build conda-recipe/
  - publish: /opt/intel/oneapi/intelpython/latest/conda-bld
    artifact: 'package_$(Agent.JobName)_$(Agent.OS)'
    displayName: conda_build_dpnp_dpctl_lin_package

- job: make_backend_lin
  displayName: cmake_3_16_3_lin
  pool:
    vmImage: 'ubuntu-20.04'
  steps:
  - bash: |
      ./scripts/install_system_deps.sh
      echo ========================= install cmake 3.16.3 ===============================
      curl --output cmake_webimage.tar.gz \
        --url https://cmake.org/files/v3.16/cmake-3.16.3-Linux-x86_64.tar.gz \
        --retry 5 --retry-delay 5

      tar -xzf cmake_webimage.tar.gz
      rm -f cmake_webimage.tar.gz

      export PATH=`pwd`/cmake-3.16.3-Linux-x86_64/bin:$PATH

      which cmake
      cmake --version

      echo ========================= Intel OneAPI setvars ===============================
      . /opt/intel/oneapi/setvars.sh

      export DPNP_BACKEND_BUILD_DIR=dpnp/backend/0.build
      mkdir -p $DPNP_BACKEND_BUILD_DIR
      cd $DPNP_BACKEND_BUILD_DIR

      echo ========================= build DPNP package ===============================
      cmake ..
      cmake --build . --target install -- VERBOSE=1
  - publish: dpnp/backend/package_dpnp
    artifact: 'package_backend_$(Agent.JobName)_$(Agent.OS)'
    displayName: backend_cmake_oneapi_local_lin_package

- job: devenv_lin
  displayName: devenv_lin
  pool:
    vmImage: 'ubuntu-20.04'
  steps:
  - bash: |
      ./scripts/install_system_deps.sh  # no intel python
      ./scripts/install_python_deps.sh  # numpy, conda-build and etc.
      echo ========================= build DPNP package ===============================
      ./0.build.sh
