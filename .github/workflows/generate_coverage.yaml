name: Generate coverage data for dpnp
on:
  pull_request:
  push:
    branches: [master]

permissions: read-all

jobs:
  generate-coverage:
    name: Generate coverage and push to Coveralls.io
    runs-on: ubuntu-latest

    permissions:
      # Needed to cancel any previous runs that are not completed for a given workflow
      actions: write

    defaults:
      run:
        shell: bash -el {0}

    env:
      environment-file: 'environments/environment.yml'
      build-with-oneapi-env: 'environments/build_with_oneapi.yml'
      coverage-env: 'environments/coverage.yml'
      oneapi-pkgs-env: ''
      # Enable env when it's required to use only conda packages without OneAPI installation
      # oneapi-pkgs-env: '${{ github.workspace }}/environments/oneapi_pkgs.yml'
      dpctl-pkg-txt: 'environments/dpctl_pkg.txt'

    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@85880fa0301c86cca9da44039ee3bb12d3bedbfa # 0.12.1
        with:
          access_token: ${{ github.token }}

      - name: Add Intel repository
        if: env.oneapi-pkgs-env == ''
        run: |
          wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
          cat GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB | gpg --dearmor | sudo tee /usr/share/keyrings/oneapi-archive-keyring.gpg > /dev/null
          rm GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
          echo "deb [signed-by=/usr/share/keyrings/oneapi-archive-keyring.gpg] https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list
          sudo apt update

      - name: Install latest Intel OneAPI
        if: env.oneapi-pkgs-env == ''
        run: |
          sudo apt install hwloc                           \
                           intel-oneapi-mkl                \
                           intel-oneapi-umf                \
                           intel-oneapi-mkl-devel          \
                           intel-oneapi-tbb-devel          \
                           intel-oneapi-libdpstd-devel     \
                           intel-oneapi-compiler-dpcpp-cpp

      - name: Install Lcov
        run: |
          sudo apt-get install lcov
          sudo gem install coveralls-lcov

      - name: Checkout repo
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Install conda-merge tool
        uses: BSFishy/pip-action@8f2d471d809dc20b6ada98c91910b6ae6243f318 # v1
        with:
          packages: conda-merge

      - name: Merge conda env files
        run: |
          conda-merge ${{ env.build-with-oneapi-env }} ${{ env.coverage-env }} ${{ env.oneapi-pkgs-env }} > ${{ env.environment-file }}
          cat ${{ env.environment-file }}

      - name: Setup miniconda
        id: setup_miniconda
        continue-on-error: true
        uses: conda-incubator/setup-miniconda@505e6394dae86d6a5c7fbb6e3fb8938e3e863830 # v3.1.1
        with:
          miniforge-version: latest
          use-mamba: 'true'
          conda-remove-defaults: 'true'
          environment-file: ${{ env.environment-file }}
          activate-environment: 'coverage'

      - name: ReSetup miniconda
        if: steps.setup_miniconda.outcome == 'failure'
        uses: conda-incubator/setup-miniconda@505e6394dae86d6a5c7fbb6e3fb8938e3e863830 # v3.1.1
        with:
          miniforge-version: latest
          use-mamba: 'true'
          conda-remove-defaults: 'true'
          environment-file: ${{ env.environment-file }}
          activate-environment: 'coverage'

      # We can't install dpctl as a conda package when the environment is created through
      # installing of Intel OneAPI packages because the dpctl conda package has a runtime
      # dependency on DPC++ RT one. Whereas the DPC++ RT package has beedn already installed
      # by the apt command above and its version has been matched with the DPC++ compiler.
      # In case where we install the DPC++ compiler with the apt (including DPC++ RT) and
      # install the DPC++ RT conda package while resolving dependencies, this can lead
      # to a versioning error, i.e. compatibility issue as the DPC++ compiler only guarantees
      # backwards compatibility, not forward compatibility (DPC++ RT may not run a binary built
      # with a newer version of the DPC++ compiler).
      # Installing dpctl via the pip manager has no such limitation, as the package has no
      # run dependency on the DPC++ RT pip package, so this is why the step is necessary here.
      - name: Install dpctl
        if: env.oneapi-pkgs-env == ''
        run: |
          pip install -r ${{ env.dpctl-pkg-txt }}

      - name: Conda info
        run: |
          mamba info
          mamba list

      - name: Build dpnp with coverage
        id: build_coverage
        uses: nick-fields/retry@ce71cc2ab81d554ebbe88c79ab5975992d79ba08 # v3.0.2
        with:
          shell: bash
          timeout_minutes: 60
          max_attempts: 5
          retry_on: error
          command: |
            . $CONDA/etc/profile.d/conda.sh
            conda activate coverage
            [ -f /opt/intel/oneapi/setvars.sh ] && source /opt/intel/oneapi/setvars.sh
            git clean -fxd
            python scripts/gen_coverage.py --verbose

      - name: Total number of coverage attempts
        run: |
          echo "Total number of coverage attempts: ${{ steps.build_coverage.outputs.total_attempts }}"

      - name: Upload coverage data to coveralls.io
        run: |
          echo "Processing pytest-coverage"
          export DPNP_PYTEST_LCOV=$(find . -name dpnp_pytest.lcov)
          coveralls-lcov -v -n $DPNP_PYTEST_LCOV > pytest-dpnp-c-api-coverage.json

          # merge file with coverage data and upload
          echo "Merging files with coverage data"
          coveralls --service=github --merge=pytest-dpnp-c-api-coverage.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COVERALLS_PARALLEL: true

  coveralls:
    name: Indicate completion to coveralls.io

    needs: generate-coverage

    runs-on: ubuntu-latest

    container: python:3-slim

    steps:
    - name: Finished
      run: |
        pip3 install --upgrade coveralls==3.3.1
        coveralls --service=github --finish
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
