name: Generate coverage data for dpnp
on:
  pull_request:
  push:
    branches: [use-skbuild-and-cmake]

jobs:
  generate-coverage:
    name: Generate coverage and push to Coveralls.io
    runs-on: ubuntu-20.04

    defaults:
      run:
        shell: bash -l {0}

    env:
      python-ver: '3.10'

    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.11.0
        with:
          access_token: ${{ github.token }}

      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup miniconda
        uses: conda-incubator/setup-miniconda@v2.2.0
        with:
          auto-update-conda: true
          python-version: ${{ env.python-ver }}
          miniconda-version: 'latest'
          activate-environment: 'coverage'
          channels: intel, conda-forge

      - name: Install Lcov
        run: |
          sudo apt-get install lcov
      - name: Install dpnp dependencies
        run: |
          conda install cython llvm cmake scikit-build ninja pytest pytest-cov coverage[toml] \
              dppy/label/dev::dpctl dpcpp_linux-64  mkl-devel-dpcpp  tbb-devel  onedpl-devel
      - name: Conda info
        run: |
          conda info
          conda list
      - name: Build dpnp with coverage
        run: |
          python scripts/gen_coverage.py --pytest-opts="--ignore tests/test_random.py \
                                                        --ignore tests/test_strides.py"
      - name: Install coverall dependencies
        run: |
          sudo gem install coveralls-lcov
          conda install coveralls
      - name: Upload coverage data to coveralls.io
        run: |
          echo "Processing pytest-coverage"
          export DPNP_PYTEST_LCOV=$(find . -name dpnp_pytest.lcov)
          coveralls-lcov -v -n $DPNP_PYTEST_LCOV > pytest-dpnp-c-api-coverage.json
          # merge file with coverage data and upload
          echo "Merging files with coverage data"
          coveralls --service=github --merge=pytest-dpnp-c-api-coverage.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COVERALLS_PARALLEL: true

  coveralls:
    name: Indicate completion to coveralls.io
    needs: generate-coverage
    runs-on: ubuntu-latest
    container: python:3-slim
    steps:
    - name: Finished
      run: |
        pip3 install --upgrade coveralls
        coveralls --finish
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
